{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar slicedToArray = require('./slicedToArray-a8a77f0e.js');\n\nrequire('./unsupportedIterableToArray-f175acfa.js');\n\nvar React = require('react');\n\nrequire('./_commonjsHelpers-1b94f6bc.js');\n\nvar index = require('./index-46d0e707.js');\n\nvar defineProperty = require('./defineProperty-3cad0327.js');\n\nvar toConsumableArray = require('./toConsumableArray-cc0d28a9.js');\n\nvar _styled = require('styled-components');\n\nrequire('./getPrototypeOf-55c9e80c.js');\n\nrequire('./color.js');\n\nrequire('./css.js');\n\nvar miscellaneous = require('./miscellaneous.js');\n\nvar environment = require('./environment.js');\n\nrequire('./font.js');\n\nrequire('./keycodes.js');\n\nrequire('./url.js');\n\nvar constants = require('./constants.js');\n\nrequire('./breakpoints.js');\n\nrequire('./springs.js');\n\nvar textStyles = require('./text-styles.js');\n\nrequire('./theme-dark.js');\n\nrequire('./theme-light.js');\n\nvar Theme = require('./Theme.js');\n\nrequire('./extends-023d783e.js');\n\nrequire('./objectWithoutProperties-c6d3675c.js');\n\nrequire('./index-4def0554.js');\n\nrequire('./_baseGetTag-42b4dd3e.js');\n\nrequire('./Viewport-819c53c9.js');\n\nvar Layout = require('./Layout.js');\n\nvar Box = require('./Box.js');\n\nrequire('./FocusVisible.js');\n\nrequire('./ButtonBase.js');\n\nrequire('./PaginationItem.js');\n\nrequire('./IconPropTypes-12cd7567.js');\n\nrequire('./IconDown.js');\n\nrequire('./IconEllipsis.js');\n\nrequire('./IconUp.js');\n\nrequire('./PaginationSeparator.js');\n\nvar Pagination = require('./Pagination.js');\n\nrequire('./objectWithoutPropertiesLoose-1af20ad0.js');\n\nrequire('react-dom');\n\nrequire('./web-7cbdbd84.js');\n\nrequire('./Checkbox.js');\n\nrequire('./Button.js');\n\nrequire('./ButtonIcon.js');\n\nrequire('./ToggleButton.js');\n\nrequire('./OpenedSurfaceBorder.js');\n\nvar TableView = require('./TableView.js');\n\nvar ListView = require('./ListView.js');\n\nrequire('./getDisplayName-7f913e84.js');\n\nrequire('./PublicUrl-7d4b6d6d.js');\n\nrequire('./LoadingRing.js');\n\nrequire('./Link.js');\n\nvar EmptyState = require('./EmptyState.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\n\nvar _styled__default = /*#__PURE__*/_interopDefaultLegacy(_styled);\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty.defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction prepareEntries(entries, from, to, selectedIndexes) {\n  return entries.slice(from, to).map(function (entry, index) {\n    var entryIndex = from + index;\n    var selected = selectedIndexes.includes(entryIndex);\n    return {\n      value: entry || null,\n      index: entryIndex,\n      selected: selected\n    };\n  });\n}\n\nfunction prepareFields(fields) {\n  return fields.map(function (fieldFromProps, index, fields) {\n    // Convert non-object fields (e.g. a simple string) into objects\n    var field = fieldFromProps && fieldFromProps.label ? fieldFromProps : {\n      label: fieldFromProps\n    }; // Auto align the last column to the end (right)\n\n    if (!field.align) {\n      field.align = index === fields.length - 1 && fields.length > 1 ? 'end' : 'start';\n    }\n\n    return field;\n  });\n}\n\nfunction entryExpansion(content) {\n  // Rows\n  if (Array.isArray(content) && content.length > 0) {\n    return {\n      content: content,\n      freeLayout: false\n    };\n  } // Free layout\n\n\n  if (content && !Array.isArray(content)) {\n    return {\n      content: [content],\n      freeLayout: true\n    };\n  } // No expansion\n\n\n  return {\n    content: [],\n    freeLayout: false\n  };\n}\n\nfunction renderEntries(entries, _ref) {\n  var fields = _ref.fields,\n      renderEntry = _ref.renderEntry,\n      renderEntryActions = _ref.renderEntryActions,\n      renderEntryExpansion = _ref.renderEntryExpansion,\n      mode = _ref.mode;\n  return entries.map(function (entry) {\n    var value = entry.value,\n        index = entry.index,\n        selected = entry.selected;\n    var entryNodes = renderEntry(value, index, {\n      selected: selected,\n      mode: mode\n    });\n\n    if (!Array.isArray(entryNodes)) {\n      entryNodes = [];\n    } // Create undefined cells too\n\n\n    while (entryNodes.length < fields.length) {\n      entryNodes.push(null);\n    }\n\n    var expansion = entryExpansion(renderEntryExpansion ? renderEntryExpansion(value, index, {\n      selected: selected,\n      mode: mode\n    }) : null);\n    var actions = renderEntryActions ? renderEntryActions(value, index, {\n      selected: selected,\n      mode: mode\n    }) : null;\n    return {\n      actions: actions,\n      entryNodes: entryNodes,\n      expansion: expansion,\n      index: index,\n      selected: selected\n    };\n  });\n}\n\nfunction useSelection(entries, selection, onSelectEntries) {\n  // Only used if `selection` is not passed via props. The selection supports\n  // both a managed and a controlled mode, to provide a better developer\n  // experience out of the box.\n  var _useState = React.useState([]),\n      _useState2 = slicedToArray.slicedToArray(_useState, 2),\n      selectionManaged = _useState2[0],\n      setSelectionManaged = _useState2[1];\n\n  var currentSelection = selection === undefined ? selectionManaged : selection;\n  var updateSelection = React.useCallback(function (newSelection) {\n    // Managed state\n    if (selection === undefined) {\n      setSelectionManaged(newSelection);\n    } // Useful to notify, even in managed mode\n\n\n    onSelectEntries(toConsumableArray.toConsumableArray(newSelection).sort().map(function (index) {\n      return entries[index];\n    }), newSelection);\n  }, [selection, onSelectEntries, entries]);\n  var allSelected = React.useMemo(function () {\n    // none selected\n    if (currentSelection.length === 0) {\n      return -1;\n    } // all selected\n\n\n    if (currentSelection.length === entries.length) {\n      return 1;\n    } // some selected\n\n\n    return 0;\n  }, [entries, currentSelection]);\n  var toggleEntrySelect = React.useCallback(function (entryIndex) {\n    updateSelection(currentSelection.includes(entryIndex) ? currentSelection.filter(function (index) {\n      return index !== entryIndex;\n    }) : [].concat(toConsumableArray.toConsumableArray(currentSelection), [entryIndex]));\n  }, [updateSelection, currentSelection]);\n  var selectAll = React.useCallback(function () {\n    updateSelection(currentSelection.length === 0 ? entries.map(function (_, index) {\n      return index;\n    }) : []);\n  }, [entries, currentSelection, updateSelection]);\n  return {\n    allSelected: allSelected,\n    selectAll: selectAll,\n    toggleEntrySelect: toggleEntrySelect,\n    selectedIndexes: currentSelection\n  };\n}\n\nfunction deprecatedEmptyStatePropsCompat(_ref2) {\n  var emptyState = _ref2.emptyState,\n      statusEmpty = _ref2.statusEmpty,\n      statusLoading = _ref2.statusLoading,\n      statusEmptyFilters = _ref2.statusEmptyFilters,\n      statusEmptySearch = _ref2.statusEmptySearch;\n\n  for (var _i = 0, _arr = [['statusEmpty', statusEmpty, 'default', 'title'], ['statusEmptyFilters', statusEmptyFilters, 'empty-filters', 'subtitle'], ['statusEmptySearch', statusEmptySearch, 'empty-search', 'subtitle'], ['statusLoading', statusLoading, 'loading', 'title']]; _i < _arr.length; _i++) {\n    var _arr$_i = slicedToArray.slicedToArray(_arr[_i], 4),\n        propName = _arr$_i[0],\n        propValue = _arr$_i[1],\n        emptyStateName = _arr$_i[2],\n        partName = _arr$_i[3];\n\n    if (!propValue) {\n      continue;\n    }\n\n    environment.warnOnce(\"DataView:\".concat(propName), \"DataView: the \".concat(propName, \" prop is now deprecated, please use emptyState instead.\")); // Only set the default state title if not set already\n\n    if (!emptyState[emptyStateName] || !emptyState[emptyStateName][partName]) {\n      emptyState[emptyStateName] = _objectSpread(_objectSpread({}, emptyState[emptyStateName]), {}, defineProperty.defineProperty({}, partName, propValue));\n    }\n  }\n\n  return emptyState;\n}\n\nvar _StyledDiv = _styled__default['default'](\"div\").withConfig({\n  displayName: \"DataView___StyledDiv\",\n  componentId: \"sc-49otbs-0\"\n})([\"padding:\", \"px \", \"px;\"], function (p) {\n  return p._css;\n}, function (p) {\n  return p._css2;\n});\n\nvar _StyledH = _styled__default['default'](\"h1\").withConfig({\n  displayName: \"DataView___StyledH\",\n  componentId: \"sc-49otbs-1\"\n})([\"margin-bottom:\", \"px;\", \";\"], function (p) {\n  return p._css3;\n}, function (p) {\n  return p._css4;\n});\n\nvar _StyledDiv2 = _styled__default['default'](\"div\").withConfig({\n  displayName: \"DataView___StyledDiv2\",\n  componentId: \"sc-49otbs-2\"\n})([\"border-top:1px solid \", \";\"], function (p) {\n  return p._css5;\n});\n\nvar DataView = /*#__PURE__*/React__default['default'].memo(function DataView(_ref3) {\n  var emptyState = _ref3.emptyState,\n      entries = _ref3.entries,\n      entriesPerPage = _ref3.entriesPerPage,\n      fields = _ref3.fields,\n      heading = _ref3.heading,\n      mode = _ref3.mode,\n      onPageChange = _ref3.onPageChange,\n      onSelectEntries = _ref3.onSelectEntries,\n      onStatusEmptyClear = _ref3.onStatusEmptyClear,\n      page = _ref3.page,\n      renderEntry = _ref3.renderEntry,\n      renderEntryActions = _ref3.renderEntryActions,\n      renderEntryExpansion = _ref3.renderEntryExpansion,\n      renderSelectionCount = _ref3.renderSelectionCount,\n      selection = _ref3.selection,\n      status = _ref3.status,\n      tableRowHeight = _ref3.tableRowHeight,\n      renderEntryChild = _ref3.renderEntryChild,\n      statusEmpty = _ref3.statusEmpty,\n      statusEmptyFilters = _ref3.statusEmptyFilters,\n      statusEmptySearch = _ref3.statusEmptySearch,\n      statusLoading = _ref3.statusLoading;\n\n  if (renderEntryChild && !renderEntryExpansion) {\n    environment.warnOnce('DataView:renderEntryChild', 'DataView: the renderEntryChild prop has been renamed ' + 'renderEntryExpansion and will be removed in a future version. ' + 'Please use the new name.');\n    renderEntryExpansion = renderEntryChild;\n  }\n\n  if (renderEntryExpansion && onSelectEntries) {\n    environment.warnOnce('DataView: renderEntryExpansion + onSelectEntries', 'A DataView cannot be made selectable with some of its entries ' + 'expandable. Please use only one of renderEntryExpansion or ' + 'onSelectEntries at a time. Ignoring renderEntryExpansion.');\n    renderEntryExpansion = undefined;\n  }\n\n  emptyState = deprecatedEmptyStatePropsCompat({\n    emptyState: emptyState,\n    statusEmpty: statusEmpty,\n    statusEmptyFilters: statusEmptyFilters,\n    statusEmptySearch: statusEmptySearch,\n    statusLoading: statusLoading\n  }); // Only used if `page` is not passed. The pagination supports both a\n  // managed and a controlled mode, to provide a better developer experience\n  // out of the box.\n\n  var _useState3 = React.useState(0),\n      _useState4 = slicedToArray.slicedToArray(_useState3, 2),\n      pageManaged = _useState4[0],\n      setPageManaged = _useState4[1];\n\n  var handlePageChange = React.useCallback(function (newPage) {\n    // Managed state\n    if (page === undefined) {\n      setPageManaged(newPage);\n    } // Useful to notify, even in managed mode\n\n\n    onPageChange(newPage);\n  }, [onPageChange, page]); // Reset managed pagination if the entries or the pagination changes.\n\n  React.useEffect(function () {\n    setPageManaged(0);\n  }, [entries]);\n  var selectedPage = page === undefined ? pageManaged : page;\n  var theme = Theme.useTheme();\n\n  var _useLayout = Layout.useLayout(),\n      layoutName = _useLayout.layoutName;\n\n  var listMode = mode === 'list' || mode !== 'table' && layoutName === 'small';\n\n  var _useSelection = useSelection(entries, selection, onSelectEntries),\n      allSelected = _useSelection.allSelected,\n      selectAll = _useSelection.selectAll,\n      toggleEntrySelect = _useSelection.toggleEntrySelect,\n      selectedIndexes = _useSelection.selectedIndexes;\n\n  var hasAnyActions = Boolean(renderEntryActions);\n  var hasAnyExpansion = Boolean(renderEntryExpansion);\n  var canSelect = Boolean(onSelectEntries); // If entriesPerPage is -1 (or 0): no pagination\n\n  if (entriesPerPage < 1) {\n    entriesPerPage = entries.length;\n  }\n\n  var pages = Math.ceil(entries.length / entriesPerPage);\n  var displayFrom = entriesPerPage * selectedPage;\n  var displayTo = displayFrom + entriesPerPage;\n  var displayedEntries = prepareEntries(entries, displayFrom, displayTo, selectedIndexes);\n  var preparedFields = prepareFields(fields);\n  var renderedEntries = renderEntries(displayedEntries, {\n    fields: fields,\n    renderEntry: renderEntry,\n    renderEntryActions: renderEntryActions,\n    renderEntryExpansion: renderEntryExpansion,\n    mode: listMode ? 'list' : 'table'\n  });\n  var alignChildOnField = fields.findIndex(function (field) {\n    return field && field.childStart;\n  });\n  var emptyEntries = renderedEntries.length === 0;\n  return /*#__PURE__*/React__default['default'].createElement(Box.default, {\n    padding: 0\n  }, heading && /*#__PURE__*/React__default['default'].createElement(_StyledDiv, {\n    _css: 2 * constants.GU,\n    _css2: layoutName === 'small' ? 2 * constants.GU : 3 * constants.GU\n  }, typeof heading === 'string' ? /*#__PURE__*/React__default['default'].createElement(_StyledH, {\n    _css3: 2 * constants.GU,\n    _css4: textStyles.textStyle('body2')\n  }, heading) : heading), !emptyEntries && (listMode ? /*#__PURE__*/React__default['default'].createElement(ListView.ListView, {\n    allSelected: allSelected,\n    entries: renderedEntries,\n    fields: preparedFields,\n    hasAnyExpansion: hasAnyExpansion,\n    onSelect: toggleEntrySelect,\n    onSelectAll: selectAll,\n    renderSelectionCount: renderSelectionCount,\n    rowHeight: tableRowHeight,\n    selectable: canSelect\n  }) : /*#__PURE__*/React__default['default'].createElement(TableView.TableView, {\n    alignChildOnField: Math.min(Math.max(-1, alignChildOnField), fields.length - 1),\n    allSelected: allSelected,\n    entries: renderedEntries,\n    fields: preparedFields,\n    hasAnyActions: hasAnyActions,\n    hasAnyExpansion: hasAnyExpansion,\n    onSelect: toggleEntrySelect,\n    onSelectAll: selectAll,\n    renderSelectionCount: renderSelectionCount,\n    rowHeight: tableRowHeight,\n    selectable: canSelect,\n    selectedCount: selectedIndexes.length\n  })), emptyEntries && /*#__PURE__*/React__default['default'].createElement(EmptyState.default, {\n    status: status,\n    configurator: emptyState,\n    onStatusEmptyClear: onStatusEmptyClear\n  }), pages > 1 && /*#__PURE__*/React__default['default'].createElement(_StyledDiv2, {\n    _css5: theme.border\n  }, /*#__PURE__*/React__default['default'].createElement(Pagination.default, {\n    pages: pages,\n    selected: selectedPage,\n    onChange: handlePageChange,\n    touchMode: layoutName === 'small'\n  })));\n});\nDataView.propTypes = {\n  page: index.propTypes.number,\n  entries: index.propTypes.array.isRequired,\n  entriesPerPage: index.propTypes.number,\n  fields: index.propTypes.array.isRequired,\n  heading: index.propTypes.node,\n  mode: index.propTypes.oneOf(['adaptive', 'table', 'list']),\n  onPageChange: index.propTypes.func,\n  onSelectEntries: index.propTypes.func,\n  renderEntry: index.propTypes.func.isRequired,\n  renderEntryActions: index.propTypes.func,\n  renderEntryExpansion: index.propTypes.func,\n  renderSelectionCount: index.propTypes.func,\n  selection: index.propTypes.array,\n  tableRowHeight: index.propTypes.number,\n  status: index.propTypes.oneOf(['default', 'empty-filters', 'empty-search', 'loading']),\n  onStatusEmptyClear: index.propTypes.func,\n  emptyState: index.propTypes.oneOfType([index.propTypes.func, index.propTypes.object]),\n  // deprecated\n  renderEntryChild: index.propTypes.func,\n  statusEmpty: index.propTypes.node,\n  statusLoading: index.propTypes.node,\n  statusEmptyFilters: index.propTypes.node,\n  statusEmptySearch: index.propTypes.node\n};\nDataView.defaultProps = {\n  emptyState: {},\n  entriesPerPage: 10,\n  mode: 'adaptive',\n  onPageChange: miscellaneous.noop,\n  renderSelectionCount: function renderSelectionCount(count) {\n    return \"\".concat(count, \" items selected\");\n  },\n  status: 'default',\n  tableRowHeight: 8 * constants.GU\n};\nexports.default = DataView;","map":{"version":3,"sources":["../src/components/DataView/DataView.js"],"names":["entryIndex","from","selected","selectedIndexes","value","entry","index","field","fieldFromProps","label","fields","Array","content","freeLayout","renderEntry","renderEntryActions","renderEntryExpansion","mode","entryNodes","expansion","entryExpansion","actions","selectionManaged","setSelectionManaged","useState","currentSelection","selection","updateSelection","useCallback","onSelectEntries","entries","allSelected","useMemo","toggleEntrySelect","selectAll","emptyState","statusEmpty","statusLoading","statusEmptyFilters","statusEmptySearch","propName","propValue","emptyStateName","partName","warnOnce","DataView","entriesPerPage","heading","onPageChange","onStatusEmptyClear","page","renderSelectionCount","status","tableRowHeight","renderEntryChild","deprecatedEmptyStatePropsCompat","pageManaged","setPageManaged","handlePageChange","useEffect","selectedPage","theme","useTheme","layoutName","useLayout","listMode","useSelection","hasAnyActions","Boolean","hasAnyExpansion","canSelect","pages","Math","displayFrom","displayTo","displayedEntries","prepareEntries","preparedFields","prepareFields","renderedEntries","renderEntries","alignChildOnField","emptyEntries","Box","GU","textStyle","ListView","TableView","length","EmptyState","border","Pagination","PropTypes","node","noop"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback, useMemo, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { noop, warnOnce } from '../../utils'\nimport { textStyle, GU } from '../../style'\nimport { useTheme } from '../../theme'\nimport Box from '../../components/Box/Box'\nimport Pagination from '../../components/Pagination/Pagination'\nimport { useLayout } from '../../components/Layout/Layout'\nimport { TableView } from './TableView'\nimport { ListView } from './ListView'\nimport EmptyState from './EmptyState'\n\nfunction prepareEntries(entries, from, to, selectedIndexes) {\n  return entries.slice(from, to).map((entry, index) => {\n    const entryIndex = from + index\n    const selected = selectedIndexes.includes(entryIndex)\n    return { value: entry || null, index: entryIndex, selected }\n  })\n}\n\nfunction prepareFields(fields) {\n  return fields.map((fieldFromProps, index, fields) => {\n    // Convert non-object fields (e.g. a simple string) into objects\n    const field =\n      fieldFromProps && fieldFromProps.label\n        ? fieldFromProps\n        : { label: fieldFromProps }\n\n    // Auto align the last column to the end (right)\n    if (!field.align) {\n      field.align =\n        index === fields.length - 1 && fields.length > 1 ? 'end' : 'start'\n    }\n\n    return field\n  })\n}\n\nfunction entryExpansion(content) {\n  // Rows\n  if (Array.isArray(content) && content.length > 0) {\n    return {\n      content,\n      freeLayout: false,\n    }\n  }\n  // Free layout\n  if (content && !Array.isArray(content)) {\n    return {\n      content: [content],\n      freeLayout: true,\n    }\n  }\n  // No expansion\n  return {\n    content: [],\n    freeLayout: false,\n  }\n}\n\nfunction renderEntries(\n  entries,\n  { fields, renderEntry, renderEntryActions, renderEntryExpansion, mode }\n) {\n  return entries.map(entry => {\n    const { value, index, selected } = entry\n\n    let entryNodes = renderEntry(value, index, { selected, mode })\n\n    if (!Array.isArray(entryNodes)) {\n      entryNodes = []\n    }\n\n    // Create undefined cells too\n    while (entryNodes.length < fields.length) {\n      entryNodes.push(null)\n    }\n\n    const expansion = entryExpansion(\n      renderEntryExpansion\n        ? renderEntryExpansion(value, index, { selected, mode })\n        : null\n    )\n\n    const actions = renderEntryActions\n      ? renderEntryActions(value, index, { selected, mode })\n      : null\n\n    return {\n      actions,\n      entryNodes,\n      expansion,\n      index,\n      selected,\n    }\n  })\n}\n\nfunction useSelection(entries, selection, onSelectEntries) {\n  // Only used if `selection` is not passed via props. The selection supports\n  // both a managed and a controlled mode, to provide a better developer\n  // experience out of the box.\n  const [selectionManaged, setSelectionManaged] = useState([])\n\n  const currentSelection =\n    selection === undefined ? selectionManaged : selection\n\n  const updateSelection = useCallback(\n    newSelection => {\n      // Managed state\n      if (selection === undefined) {\n        setSelectionManaged(newSelection)\n      }\n\n      // Useful to notify, even in managed mode\n      onSelectEntries(\n        [...newSelection].sort().map(index => entries[index]),\n        newSelection\n      )\n    },\n    [selection, onSelectEntries, entries]\n  )\n\n  const allSelected = useMemo(() => {\n    // none selected\n    if (currentSelection.length === 0) {\n      return -1\n    }\n    // all selected\n    if (currentSelection.length === entries.length) {\n      return 1\n    }\n    // some selected\n    return 0\n  }, [entries, currentSelection])\n\n  const toggleEntrySelect = useCallback(\n    entryIndex => {\n      updateSelection(\n        currentSelection.includes(entryIndex)\n          ? currentSelection.filter(index => index !== entryIndex)\n          : [...currentSelection, entryIndex]\n      )\n    },\n    [updateSelection, currentSelection]\n  )\n\n  const selectAll = useCallback(() => {\n    updateSelection(\n      currentSelection.length === 0 ? entries.map((_, index) => index) : []\n    )\n  }, [entries, currentSelection, updateSelection])\n\n  return {\n    allSelected,\n    selectAll,\n    toggleEntrySelect,\n    selectedIndexes: currentSelection,\n  }\n}\n\nfunction deprecatedEmptyStatePropsCompat({\n  emptyState,\n  statusEmpty,\n  statusLoading,\n  statusEmptyFilters,\n  statusEmptySearch,\n}) {\n  for (const [propName, propValue, emptyStateName, partName] of [\n    ['statusEmpty', statusEmpty, 'default', 'title'],\n    ['statusEmptyFilters', statusEmptyFilters, 'empty-filters', 'subtitle'],\n    ['statusEmptySearch', statusEmptySearch, 'empty-search', 'subtitle'],\n    ['statusLoading', statusLoading, 'loading', 'title'],\n  ]) {\n    if (!propValue) {\n      continue\n    }\n\n    warnOnce(\n      `DataView:${propName}`,\n      `DataView: the ${propName} prop is now deprecated, please use emptyState instead.`\n    )\n\n    // Only set the default state title if not set already\n    if (!emptyState[emptyStateName] || !emptyState[emptyStateName][partName]) {\n      emptyState[emptyStateName] = {\n        ...emptyState[emptyStateName],\n        [partName]: propValue,\n      }\n    }\n  }\n\n  return emptyState\n}\n\nconst DataView = React.memo(function DataView({\n  emptyState,\n  entries,\n  entriesPerPage,\n  fields,\n  heading,\n  mode,\n  onPageChange,\n  onSelectEntries,\n  onStatusEmptyClear,\n  page,\n  renderEntry,\n  renderEntryActions,\n  renderEntryExpansion,\n  renderSelectionCount,\n  selection,\n  status,\n  tableRowHeight,\n\n  // deprecated\n  renderEntryChild,\n  statusEmpty,\n  statusEmptyFilters,\n  statusEmptySearch,\n  statusLoading,\n}) {\n  if (renderEntryChild && !renderEntryExpansion) {\n    warnOnce(\n      'DataView:renderEntryChild',\n      'DataView: the renderEntryChild prop has been renamed ' +\n        'renderEntryExpansion and will be removed in a future version. ' +\n        'Please use the new name.'\n    )\n    renderEntryExpansion = renderEntryChild\n  }\n\n  if (renderEntryExpansion && onSelectEntries) {\n    warnOnce(\n      'DataView: renderEntryExpansion + onSelectEntries',\n      'A DataView cannot be made selectable with some of its entries ' +\n        'expandable. Please use only one of renderEntryExpansion or ' +\n        'onSelectEntries at a time. Ignoring renderEntryExpansion.'\n    )\n    renderEntryExpansion = undefined\n  }\n\n  emptyState = deprecatedEmptyStatePropsCompat({\n    emptyState,\n    statusEmpty,\n    statusEmptyFilters,\n    statusEmptySearch,\n    statusLoading,\n  })\n\n  // Only used if `page` is not passed. The pagination supports both a\n  // managed and a controlled mode, to provide a better developer experience\n  // out of the box.\n  const [pageManaged, setPageManaged] = useState(0)\n\n  const handlePageChange = useCallback(\n    newPage => {\n      // Managed state\n      if (page === undefined) {\n        setPageManaged(newPage)\n      }\n\n      // Useful to notify, even in managed mode\n      onPageChange(newPage)\n    },\n    [onPageChange, page]\n  )\n\n  // Reset managed pagination if the entries or the pagination changes.\n  useEffect(() => {\n    setPageManaged(0)\n  }, [entries])\n\n  const selectedPage = page === undefined ? pageManaged : page\n\n  const theme = useTheme()\n  const { layoutName } = useLayout()\n\n  const listMode =\n    mode === 'list' || (mode !== 'table' && layoutName === 'small')\n\n  const {\n    allSelected,\n    selectAll,\n    toggleEntrySelect,\n    selectedIndexes,\n  } = useSelection(entries, selection, onSelectEntries)\n\n  const hasAnyActions = Boolean(renderEntryActions)\n  const hasAnyExpansion = Boolean(renderEntryExpansion)\n  const canSelect = Boolean(onSelectEntries)\n\n  // If entriesPerPage is -1 (or 0): no pagination\n  if (entriesPerPage < 1) {\n    entriesPerPage = entries.length\n  }\n\n  const pages = Math.ceil(entries.length / entriesPerPage)\n\n  const displayFrom = entriesPerPage * selectedPage\n  const displayTo = displayFrom + entriesPerPage\n  const displayedEntries = prepareEntries(\n    entries,\n    displayFrom,\n    displayTo,\n    selectedIndexes\n  )\n\n  const preparedFields = prepareFields(fields)\n  const renderedEntries = renderEntries(displayedEntries, {\n    fields,\n    renderEntry,\n    renderEntryActions,\n    renderEntryExpansion,\n    mode: listMode ? 'list' : 'table',\n  })\n\n  const alignChildOnField = fields.findIndex(field => field && field.childStart)\n\n  const emptyEntries = renderedEntries.length === 0\n\n  return (\n    <Box padding={0}>\n      {heading && (\n        <div\n          css={`\n            padding: ${2 * GU}px ${layoutName === 'small' ? 2 * GU : 3 * GU}px;\n          `}\n        >\n          {typeof heading === 'string' ? (\n            <h1\n              css={`\n                margin-bottom: ${2 * GU}px;\n                ${textStyle('body2')};\n              `}\n            >\n              {heading}\n            </h1>\n          ) : (\n            heading\n          )}\n        </div>\n      )}\n\n      {!emptyEntries &&\n        (listMode ? (\n          <ListView\n            allSelected={allSelected}\n            entries={renderedEntries}\n            fields={preparedFields}\n            hasAnyExpansion={hasAnyExpansion}\n            onSelect={toggleEntrySelect}\n            onSelectAll={selectAll}\n            renderSelectionCount={renderSelectionCount}\n            rowHeight={tableRowHeight}\n            selectable={canSelect}\n          />\n        ) : (\n          <TableView\n            alignChildOnField={Math.min(\n              Math.max(-1, alignChildOnField),\n              fields.length - 1\n            )}\n            allSelected={allSelected}\n            entries={renderedEntries}\n            fields={preparedFields}\n            hasAnyActions={hasAnyActions}\n            hasAnyExpansion={hasAnyExpansion}\n            onSelect={toggleEntrySelect}\n            onSelectAll={selectAll}\n            renderSelectionCount={renderSelectionCount}\n            rowHeight={tableRowHeight}\n            selectable={canSelect}\n            selectedCount={selectedIndexes.length}\n          />\n        ))}\n\n      {emptyEntries && (\n        <EmptyState\n          status={status}\n          configurator={emptyState}\n          onStatusEmptyClear={onStatusEmptyClear}\n        />\n      )}\n\n      {pages > 1 && (\n        <div\n          css={`\n            border-top: 1px solid ${theme.border};\n          `}\n        >\n          <Pagination\n            pages={pages}\n            selected={selectedPage}\n            onChange={handlePageChange}\n            touchMode={layoutName === 'small'}\n          />\n        </div>\n      )}\n    </Box>\n  )\n})\n\nDataView.propTypes = {\n  page: PropTypes.number,\n  entries: PropTypes.array.isRequired,\n  entriesPerPage: PropTypes.number,\n  fields: PropTypes.array.isRequired,\n  heading: PropTypes.node,\n  mode: PropTypes.oneOf(['adaptive', 'table', 'list']),\n  onPageChange: PropTypes.func,\n  onSelectEntries: PropTypes.func,\n  renderEntry: PropTypes.func.isRequired,\n  renderEntryActions: PropTypes.func,\n  renderEntryExpansion: PropTypes.func,\n  renderSelectionCount: PropTypes.func,\n  selection: PropTypes.array,\n  tableRowHeight: PropTypes.number,\n  status: PropTypes.oneOf([\n    'default',\n    'empty-filters',\n    'empty-search',\n    'loading',\n  ]),\n  onStatusEmptyClear: PropTypes.func,\n  emptyState: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n  // deprecated\n  renderEntryChild: PropTypes.func,\n  statusEmpty: PropTypes.node,\n  statusLoading: PropTypes.node,\n  statusEmptyFilters: PropTypes.node,\n  statusEmptySearch: PropTypes.node,\n}\n\nDataView.defaultProps = {\n  emptyState: {},\n  entriesPerPage: 10,\n  mode: 'adaptive',\n  onPageChange: noop,\n  renderSelectionCount: count => `${count} items selected`,\n  status: 'default',\n  tableRowHeight: 8 * GU,\n}\n\nexport default DataView\n"]},"metadata":{},"sourceType":"script"}