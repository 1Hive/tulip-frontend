{"ast":null,"code":"\"use strict\"; // Copyright (C) 2019 Kyle Den Hartog\n// MIT License. See LICENSE file for details.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Package xchacha20 implements XChaCha20 stream cipher.\n */\n\nvar binary_1 = require(\"@stablelib/binary\");\n\nvar wipe_1 = require(\"@stablelib/wipe\");\n\nvar chacha_1 = require(\"@stablelib/chacha\"); // Number of ChaCha rounds (ChaCha20).\n\n\nvar ROUNDS = 20;\n/**\n * Encrypt src with XChaCha20 stream generated for the given 32-byte key and\n * 8-byte (as in original implementation) or 12-byte (as in RFC7539) nonce and\n * write the result into dst and return it.\n *\n * dst and src may be the same, but otherwise must not overlap.\n *\n * Nonce length is set in such a way that given it's generated via a CSPRNG\n * then there's little concern of collision for roughly 2^96 messages while\n * reusing a secret key and not encountering nonce reuse vulnerabilities.\n */\n\nfunction streamXOR(key, nonce, src, dst) {\n  if (nonce.length !== 24) {\n    throw new Error(\"XChaCha20 nonce must be 24 bytes\");\n  } // Use HChaCha one-way function to transform first 16 bytes of\n  // 24-byte extended nonce and key into a new key for Salsa\n  // stream -- \"subkey\".\n\n\n  var subkey = hchacha(key, nonce.subarray(0, 16), new Uint8Array(32)); // Use last 8 bytes of 24-byte extended nonce as an actual nonce prefixed by 4 zero bytes,\n  // and a subkey derived in the previous step as key to encrypt.\n\n  var modifiedNonce = new Uint8Array(12);\n  modifiedNonce.set(nonce.subarray(16), 4); // If nonceInplaceCounterLength > 0, we'll still pass the correct\n  // nonce || counter, as we don't limit the end of nonce subarray.\n\n  var result = chacha_1.streamXOR(subkey, modifiedNonce, src, dst); // Clean subkey.\n\n  wipe_1.wipe(subkey);\n  return result;\n}\n\nexports.streamXOR = streamXOR;\n/**\n * Generate XChaCha20 stream for the given 32-byte key and 12-byte\n * nonce (last 8 bytes of 24 byte nonce prefixed with 4 zero bytes)\n * and write it into dst and return it.\n *\n * Nonces MUST be generated using an CSPRNG to generate a sufficiently\n * random nonce such that a collision is highly unlikely to occur.\n *\n * stream is like streamXOR with all-zero src.\n */\n\nfunction stream(key, nonce, dst) {\n  wipe_1.wipe(dst);\n  return streamXOR(key, nonce, dst, dst);\n}\n\nexports.stream = stream;\n/**\n * HChaCha is a one-way function used in XChaCha to extend nonce.\n *\n * It takes 32-byte key and 16-byte src and writes 32-byte result\n * into dst and returns it.\n */\n\nfunction hchacha(key, src, dst) {\n  var j0 = 0x61707865; // \"expa\"  -- ChaCha's \"sigma\" constant\n\n  var j1 = 0x3320646e; // \"nd 3\"     for 32-byte keys\n\n  var j2 = 0x79622d32; // \"2-by\"\n\n  var j3 = 0x6b206574; // \"te k\"\n\n  var j4 = key[3] << 24 | key[2] << 16 | key[1] << 8 | key[0];\n  var j5 = key[7] << 24 | key[6] << 16 | key[5] << 8 | key[4];\n  var j6 = key[11] << 24 | key[10] << 16 | key[9] << 8 | key[8];\n  var j7 = key[15] << 24 | key[14] << 16 | key[13] << 8 | key[12];\n  var j8 = key[19] << 24 | key[18] << 16 | key[17] << 8 | key[16];\n  var j9 = key[23] << 24 | key[22] << 16 | key[21] << 8 | key[20];\n  var j10 = key[27] << 24 | key[26] << 16 | key[25] << 8 | key[24];\n  var j11 = key[31] << 24 | key[30] << 16 | key[29] << 8 | key[28];\n  var j12 = src[3] << 24 | src[2] << 16 | src[1] << 8 | src[0];\n  var j13 = src[7] << 24 | src[6] << 16 | src[5] << 8 | src[4];\n  var j14 = src[11] << 24 | src[10] << 16 | src[9] << 8 | src[8];\n  var j15 = src[15] << 24 | src[14] << 16 | src[13] << 8 | src[12];\n  var x0 = j0;\n  var x1 = j1;\n  var x2 = j2;\n  var x3 = j3;\n  var x4 = j4;\n  var x5 = j5;\n  var x6 = j6;\n  var x7 = j7;\n  var x8 = j8;\n  var x9 = j9;\n  var x10 = j10;\n  var x11 = j11;\n  var x12 = j12;\n  var x13 = j13;\n  var x14 = j14;\n  var x15 = j15;\n\n  for (var i = 0; i < ROUNDS; i += 2) {\n    x0 = x0 + x4 | 0;\n    x12 ^= x0;\n    x12 = x12 >>> 32 - 16 | x12 << 16;\n    x8 = x8 + x12 | 0;\n    x4 ^= x8;\n    x4 = x4 >>> 32 - 12 | x4 << 12;\n    x1 = x1 + x5 | 0;\n    x13 ^= x1;\n    x13 = x13 >>> 32 - 16 | x13 << 16;\n    x9 = x9 + x13 | 0;\n    x5 ^= x9;\n    x5 = x5 >>> 32 - 12 | x5 << 12;\n    x2 = x2 + x6 | 0;\n    x14 ^= x2;\n    x14 = x14 >>> 32 - 16 | x14 << 16;\n    x10 = x10 + x14 | 0;\n    x6 ^= x10;\n    x6 = x6 >>> 32 - 12 | x6 << 12;\n    x3 = x3 + x7 | 0;\n    x15 ^= x3;\n    x15 = x15 >>> 32 - 16 | x15 << 16;\n    x11 = x11 + x15 | 0;\n    x7 ^= x11;\n    x7 = x7 >>> 32 - 12 | x7 << 12;\n    x2 = x2 + x6 | 0;\n    x14 ^= x2;\n    x14 = x14 >>> 32 - 8 | x14 << 8;\n    x10 = x10 + x14 | 0;\n    x6 ^= x10;\n    x6 = x6 >>> 32 - 7 | x6 << 7;\n    x3 = x3 + x7 | 0;\n    x15 ^= x3;\n    x15 = x15 >>> 32 - 8 | x15 << 8;\n    x11 = x11 + x15 | 0;\n    x7 ^= x11;\n    x7 = x7 >>> 32 - 7 | x7 << 7;\n    x1 = x1 + x5 | 0;\n    x13 ^= x1;\n    x13 = x13 >>> 32 - 8 | x13 << 8;\n    x9 = x9 + x13 | 0;\n    x5 ^= x9;\n    x5 = x5 >>> 32 - 7 | x5 << 7;\n    x0 = x0 + x4 | 0;\n    x12 ^= x0;\n    x12 = x12 >>> 32 - 8 | x12 << 8;\n    x8 = x8 + x12 | 0;\n    x4 ^= x8;\n    x4 = x4 >>> 32 - 7 | x4 << 7;\n    x0 = x0 + x5 | 0;\n    x15 ^= x0;\n    x15 = x15 >>> 32 - 16 | x15 << 16;\n    x10 = x10 + x15 | 0;\n    x5 ^= x10;\n    x5 = x5 >>> 32 - 12 | x5 << 12;\n    x1 = x1 + x6 | 0;\n    x12 ^= x1;\n    x12 = x12 >>> 32 - 16 | x12 << 16;\n    x11 = x11 + x12 | 0;\n    x6 ^= x11;\n    x6 = x6 >>> 32 - 12 | x6 << 12;\n    x2 = x2 + x7 | 0;\n    x13 ^= x2;\n    x13 = x13 >>> 32 - 16 | x13 << 16;\n    x8 = x8 + x13 | 0;\n    x7 ^= x8;\n    x7 = x7 >>> 32 - 12 | x7 << 12;\n    x3 = x3 + x4 | 0;\n    x14 ^= x3;\n    x14 = x14 >>> 32 - 16 | x14 << 16;\n    x9 = x9 + x14 | 0;\n    x4 ^= x9;\n    x4 = x4 >>> 32 - 12 | x4 << 12;\n    x2 = x2 + x7 | 0;\n    x13 ^= x2;\n    x13 = x13 >>> 32 - 8 | x13 << 8;\n    x8 = x8 + x13 | 0;\n    x7 ^= x8;\n    x7 = x7 >>> 32 - 7 | x7 << 7;\n    x3 = x3 + x4 | 0;\n    x14 ^= x3;\n    x14 = x14 >>> 32 - 8 | x14 << 8;\n    x9 = x9 + x14 | 0;\n    x4 ^= x9;\n    x4 = x4 >>> 32 - 7 | x4 << 7;\n    x1 = x1 + x6 | 0;\n    x12 ^= x1;\n    x12 = x12 >>> 32 - 8 | x12 << 8;\n    x11 = x11 + x12 | 0;\n    x6 ^= x11;\n    x6 = x6 >>> 32 - 7 | x6 << 7;\n    x0 = x0 + x5 | 0;\n    x15 ^= x0;\n    x15 = x15 >>> 32 - 8 | x15 << 8;\n    x10 = x10 + x15 | 0;\n    x5 ^= x10;\n    x5 = x5 >>> 32 - 7 | x5 << 7;\n  }\n\n  binary_1.writeUint32LE(x0, dst, 0);\n  binary_1.writeUint32LE(x1, dst, 4);\n  binary_1.writeUint32LE(x2, dst, 8);\n  binary_1.writeUint32LE(x3, dst, 12);\n  binary_1.writeUint32LE(x12, dst, 16);\n  binary_1.writeUint32LE(x13, dst, 20);\n  binary_1.writeUint32LE(x14, dst, 24);\n  binary_1.writeUint32LE(x15, dst, 28);\n  return dst;\n}\n\nexports.hchacha = hchacha;","map":null,"metadata":{},"sourceType":"script"}