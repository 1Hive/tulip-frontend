{"ast":null,"code":"'use strict';\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar errCode = require('err-code');\n\nvar _require2 = require('./errors'),\n    messages = _require2.messages,\n    codes = _require2.codes;\n\nmodule.exports = function (node, Pubsub, config) {\n  var pubsub = new Pubsub(node.peerInfo, node.registrar, config);\n  return {\n    /**\n     * Subscribe the given handler to a pubsub topic\n     * @param {string} topic\n     * @param {function} handler The handler to subscribe\n     * @returns {void}\n     */\n    subscribe: function subscribe(topic, handler) {\n      if (!node.isStarted() && !pubsub.started) {\n        throw errCode(new Error(messages.NOT_STARTED_YET), codes.PUBSUB_NOT_STARTED);\n      }\n\n      if (pubsub.listenerCount(topic) === 0) {\n        pubsub.subscribe(topic);\n      }\n\n      pubsub.on(topic, handler);\n    },\n\n    /**\n     * Unsubscribes from a pubsub topic\n     * @param {string} topic\n     * @param {function} [handler] The handler to unsubscribe from\n     */\n    unsubscribe: function unsubscribe(topic, handler) {\n      if (!node.isStarted() && !pubsub.started) {\n        throw errCode(new Error(messages.NOT_STARTED_YET), codes.PUBSUB_NOT_STARTED);\n      }\n\n      if (!handler) {\n        pubsub.removeAllListeners(topic);\n      } else {\n        pubsub.removeListener(topic, handler);\n      }\n\n      if (pubsub.listenerCount(topic) === 0) {\n        pubsub.unsubscribe(topic);\n      }\n    },\n\n    /**\n     * Publish messages to the given topics.\n     * @param {Array<string>|string} topic\n     * @param {Buffer} data\n     * @returns {Promise<void>}\n     */\n    publish: function publish(topic, data) {\n      if (!node.isStarted() && !pubsub.started) {\n        throw errCode(new Error(messages.NOT_STARTED_YET), codes.PUBSUB_NOT_STARTED);\n      }\n\n      try {\n        data = Buffer.from(data);\n      } catch (err) {\n        throw errCode(new Error('data must be convertible to a Buffer'), 'ERR_DATA_IS_NOT_VALID');\n      }\n\n      return pubsub.publish(topic, data);\n    },\n\n    /**\n     * Get a list of topics the node is subscribed to.\n     * @returns {Array<String>} topics\n     */\n    getTopics: function getTopics() {\n      if (!node.isStarted() && !pubsub.started) {\n        throw errCode(new Error(messages.NOT_STARTED_YET), codes.PUBSUB_NOT_STARTED);\n      }\n\n      return pubsub.getTopics();\n    },\n\n    /**\n     * Get a list of the peer-ids that are subscribed to one topic.\n     * @param {string} topic\n     * @returns {Array<string>}\n     */\n    getSubscribers: function getSubscribers(topic) {\n      if (!node.isStarted() && !pubsub.started) {\n        throw errCode(new Error(messages.NOT_STARTED_YET), codes.PUBSUB_NOT_STARTED);\n      }\n\n      return pubsub.getSubscribers(topic);\n    },\n    setMaxListeners: function setMaxListeners(n) {\n      return pubsub.setMaxListeners(n);\n    },\n    _pubsub: pubsub,\n    start: function start() {\n      return pubsub.start();\n    },\n    stop: function stop() {\n      return pubsub.stop();\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}