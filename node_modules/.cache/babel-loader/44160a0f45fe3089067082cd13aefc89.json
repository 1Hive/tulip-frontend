{"ast":null,"code":"import { networkConfigs, getInternalNetworkName, getNetworkConfig, RINKEBY_COURT, RINKEBY_STAGING_COURT } from '../networks';\nimport env from '../environment';\nconst VOIDED_DISPUTES = {\n  xdai: new Map([[networkConfigs.xdai.court, new Map([])]]),\n  rinkeby: new Map([[RINKEBY_COURT, new Map([])], [RINKEBY_STAGING_COURT, new Map([])]]),\n  ropsten: new Map([[networkConfigs.ropsten.court, new Map([])]]),\n  local: new Map([[networkConfigs.local.court, new Map([])]])\n};\nexport function getVoidedDisputesByCourt() {\n  if (env('SKIP_VOIDING')) {\n    return new Map([]);\n  }\n\n  const courtAddress = getNetworkConfig().court;\n  return VOIDED_DISPUTES[getInternalNetworkName()].get(courtAddress);\n}","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/flagged-disputes/voided-disputes.js"],"names":["networkConfigs","getInternalNetworkName","getNetworkConfig","RINKEBY_COURT","RINKEBY_STAGING_COURT","env","VOIDED_DISPUTES","xdai","Map","court","rinkeby","ropsten","local","getVoidedDisputesByCourt","courtAddress","get"],"mappings":"AAAA,SACEA,cADF,EAEEC,sBAFF,EAGEC,gBAHF,EAIEC,aAJF,EAKEC,qBALF,QAMO,aANP;AAOA,OAAOC,GAAP,MAAgB,gBAAhB;AAEA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,IAAI,EAAE,IAAIC,GAAJ,CAAQ,CAAC,CAACR,cAAc,CAACO,IAAf,CAAoBE,KAArB,EAA4B,IAAID,GAAJ,CAAQ,EAAR,CAA5B,CAAD,CAAR,CADgB;AAEtBE,EAAAA,OAAO,EAAE,IAAIF,GAAJ,CAAQ,CACf,CAACL,aAAD,EAAgB,IAAIK,GAAJ,CAAQ,EAAR,CAAhB,CADe,EAEf,CAACJ,qBAAD,EAAwB,IAAII,GAAJ,CAAQ,EAAR,CAAxB,CAFe,CAAR,CAFa;AAMtBG,EAAAA,OAAO,EAAE,IAAIH,GAAJ,CAAQ,CAAC,CAACR,cAAc,CAACW,OAAf,CAAuBF,KAAxB,EAA+B,IAAID,GAAJ,CAAQ,EAAR,CAA/B,CAAD,CAAR,CANa;AAOtBI,EAAAA,KAAK,EAAE,IAAIJ,GAAJ,CAAQ,CAAC,CAACR,cAAc,CAACY,KAAf,CAAqBH,KAAtB,EAA6B,IAAID,GAAJ,CAAQ,EAAR,CAA7B,CAAD,CAAR;AAPe,CAAxB;AAUA,OAAO,SAASK,wBAAT,GAAoC;AACzC,MAAIR,GAAG,CAAC,cAAD,CAAP,EAAyB;AACvB,WAAO,IAAIG,GAAJ,CAAQ,EAAR,CAAP;AACD;;AACD,QAAMM,YAAY,GAAGZ,gBAAgB,GAAGO,KAAxC;AAEA,SAAOH,eAAe,CAACL,sBAAsB,EAAvB,CAAf,CAA0Cc,GAA1C,CAA8CD,YAA9C,CAAP;AACD","sourcesContent":["import {\n  networkConfigs,\n  getInternalNetworkName,\n  getNetworkConfig,\n  RINKEBY_COURT,\n  RINKEBY_STAGING_COURT,\n} from '../networks'\nimport env from '../environment'\n\nconst VOIDED_DISPUTES = {\n  xdai: new Map([[networkConfigs.xdai.court, new Map([])]]),\n  rinkeby: new Map([\n    [RINKEBY_COURT, new Map([])],\n    [RINKEBY_STAGING_COURT, new Map([])],\n  ]),\n  ropsten: new Map([[networkConfigs.ropsten.court, new Map([])]]),\n  local: new Map([[networkConfigs.local.court, new Map([])]]),\n}\n\nexport function getVoidedDisputesByCourt() {\n  if (env('SKIP_VOIDING')) {\n    return new Map([])\n  }\n  const courtAddress = getNetworkConfig().court\n\n  return VOIDED_DISPUTES[getInternalNetworkName()].get(courtAddress)\n}\n"]},"metadata":{},"sourceType":"module"}