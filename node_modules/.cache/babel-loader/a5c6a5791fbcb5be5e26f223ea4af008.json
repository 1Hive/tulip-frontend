{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst rpc_utils_1 = require(\"rpc-utils\");\n\nconst methods = {\n  '3id_getLink': ctx => __awaiter(void 0, void 0, void 0, function* () {\n    return (yield ctx.provider.wallet.getLink()).toLowerCase();\n  }),\n  '3id_linkManagementKey': ctx => __awaiter(void 0, void 0, void 0, function* () {\n    return yield ctx.provider.wallet.linkManagementKey();\n  }),\n  '3id_authenticate': (ctx, params) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield ctx.provider.wallet.authenticate(params.spaces, {\n      authData: params.authData,\n      address: params.address,\n      mgmtPub: params.mgmtPub\n    }, ctx.origin);\n  }),\n  '3id_isAuthenticated': (ctx, params) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield ctx.provider.wallet.isAuthenticated(params.spaces, ctx.origin);\n  }),\n  '3id_signClaim': (ctx, params) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield ctx.provider.wallet.signClaim(params.payload, {\n      DID: params.did,\n      space: params.space,\n      expiresIn: params.expiresIn,\n      useMgmt: params.useMgmt\n    });\n  }),\n  '3id_encrypt': (ctx, params) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield ctx.provider.wallet.encrypt(params.message, params.space, {\n      blockSize: params.blockSize,\n      to: params.to\n    });\n  }),\n  '3id_decrypt': (ctx, params) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield ctx.provider.wallet.decrypt({\n      ciphertext: params.ciphertext,\n      ephemeralFrom: params.ephemeralFrom,\n      nonce: params.nonce\n    }, params.space, params.buffer);\n  }),\n  '3id_hashEntryKey': (ctx, params) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield ctx.provider.wallet.hashDBKey(params.key, params.space);\n  }),\n  '3id_newAuthMethodPoll': ctx => ctx.provider.pollAuthMethods(),\n  '3id_newLinkPoll': ctx => ctx.provider.pollLinks()\n};\n\nclass ThreeIdProvider {\n  constructor(wallet) {\n    this._newAuthMethods = [];\n    this._newLinks = [];\n    this._handle = rpc_utils_1.createHandler(methods);\n    this.wallet = wallet;\n    wallet.events.on('new-auth-method', authBlob => {\n      this._newAuthMethods.push(authBlob);\n    });\n    wallet.events.on('new-link-proof', linkProof => {\n      this._newLinks.push(linkProof);\n    });\n  }\n\n  get is3idProvider() {\n    return true;\n  }\n\n  pollAuthMethods() {\n    const methods = [...this._newAuthMethods];\n    this._newAuthMethods = [];\n    return methods;\n  }\n\n  pollLinks() {\n    const links = [...this._newLinks];\n    this._newLinks = [];\n    return links;\n  }\n\n  send(req, origin, callback) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (typeof origin === 'function') {\n        callback = origin;\n        origin = null;\n      }\n\n      const res = yield this._handle({\n        provider: this,\n        origin\n      }, req);\n\n      if (res === null || res === void 0 ? void 0 : res.error) {\n        const error = rpc_utils_1.RPCError.fromObject(res.error);\n\n        if (callback == null) {\n          throw error;\n        } else {\n          callback(error);\n          return null;\n        }\n      }\n\n      callback === null || callback === void 0 ? void 0 : callback(null, res);\n      return res;\n    });\n  }\n\n}\n\nexports.default = ThreeIdProvider;","map":null,"metadata":{},"sourceType":"script"}