{"ast":null,"code":"import { getWeb3 } from './web3';\n/**\n * Accepts an array of contract method calls and batches them\n *\n * Example:\n *\n * [\n *  contract.method.balanceOf().call,\n *  contract.method.startBlockNumber().call\n * ]\n */\n\nconst makeBatchRequest = calls => {\n  try {\n    const web3 = getWeb3();\n    const batch = new web3.BatchRequest();\n    const promises = calls.map(call => {\n      return new Promise((resolve, reject) => {\n        batch.add(call.request({}, (err, result) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(result);\n          }\n        }));\n      });\n    });\n    batch.execute();\n    return Promise.all(promises);\n  } catch {\n    return null;\n  }\n};\n\nexport default makeBatchRequest;","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/utils/makeBatchRequest.ts"],"names":["getWeb3","makeBatchRequest","calls","web3","batch","BatchRequest","promises","map","call","Promise","resolve","reject","add","request","err","result","execute","all"],"mappings":"AAAA,SAASA,OAAT,QAAwB,QAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,gBAAgB,GAAIC,KAAD,IAAkB;AACzC,MAAI;AACF,UAAMC,IAAI,GAAGH,OAAO,EAApB;AACA,UAAMI,KAAK,GAAG,IAAID,IAAI,CAACE,YAAT,EAAd;AAEA,UAAMC,QAAQ,GAAGJ,KAAK,CAACK,GAAN,CAAWC,IAAD,IAAU;AACnC,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCP,QAAAA,KAAK,CAACQ,GAAN,CACEJ,IAAI,CAACK,OAAL,CAAa,EAAb,EAAiB,CAACC,GAAD,EAAMC,MAAN,KAAiB;AAChC,cAAID,GAAJ,EAAS;AACPH,YAAAA,MAAM,CAACG,GAAD,CAAN;AACD,WAFD,MAEO;AACLJ,YAAAA,OAAO,CAACK,MAAD,CAAP;AACD;AACF,SAND,CADF;AASD,OAVM,CAAP;AAWD,KAZgB,CAAjB;AAcAX,IAAAA,KAAK,CAACY,OAAN;AAEA,WAAOP,OAAO,CAACQ,GAAR,CAAYX,QAAZ,CAAP;AACD,GArBD,CAqBE,MAAM;AACN,WAAO,IAAP;AACD;AACF,CAzBD;;AA2BA,eAAeL,gBAAf","sourcesContent":["import { getWeb3 } from './web3'\n\n/**\n * Accepts an array of contract method calls and batches them\n *\n * Example:\n *\n * [\n *  contract.method.balanceOf().call,\n *  contract.method.startBlockNumber().call\n * ]\n */\nconst makeBatchRequest = (calls: any[]) => {\n  try {\n    const web3 = getWeb3()\n    const batch = new web3.BatchRequest()\n\n    const promises = calls.map((call) => {\n      return new Promise((resolve, reject) => {\n        batch.add(\n          call.request({}, (err, result) => {\n            if (err) {\n              reject(err)\n            } else {\n              resolve(result)\n            }\n          }),\n        )\n      })\n    })\n\n    batch.execute()\n\n    return Promise.all(promises)\n  } catch {\n    return null\n  }\n}\n\nexport default makeBatchRequest\n"]},"metadata":{},"sourceType":"module"}