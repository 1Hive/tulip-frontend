{"ast":null,"code":"var encodings = require('./lib/encodings');\n\nmodule.exports = Codec;\n\nfunction Codec(opts) {\n  if (!(this instanceof Codec)) {\n    return new Codec(opts);\n  }\n\n  this.opts = opts || {};\n  this.encodings = encodings;\n}\n\nCodec.prototype._encoding = function (encoding) {\n  if (typeof encoding === 'string') encoding = encodings[encoding];\n  if (!encoding) encoding = encodings.id;\n  return encoding;\n};\n\nCodec.prototype._keyEncoding = function (opts, batchOpts) {\n  return this._encoding(batchOpts && batchOpts.keyEncoding || opts && opts.keyEncoding || this.opts.keyEncoding);\n};\n\nCodec.prototype._valueEncoding = function (opts, batchOpts) {\n  return this._encoding(batchOpts && (batchOpts.valueEncoding || batchOpts.encoding) || opts && (opts.valueEncoding || opts.encoding) || this.opts.valueEncoding || this.opts.encoding);\n};\n\nCodec.prototype.encodeKey = function (key, opts, batchOpts) {\n  return this._keyEncoding(opts, batchOpts).encode(key);\n};\n\nCodec.prototype.encodeValue = function (value, opts, batchOpts) {\n  return this._valueEncoding(opts, batchOpts).encode(value);\n};\n\nCodec.prototype.decodeKey = function (key, opts) {\n  return this._keyEncoding(opts).decode(key);\n};\n\nCodec.prototype.decodeValue = function (value, opts) {\n  return this._valueEncoding(opts).decode(value);\n};\n\nCodec.prototype.encodeBatch = function (ops, opts) {\n  var self = this;\n  return ops.map(function (_op) {\n    var op = {\n      type: _op.type,\n      key: self.encodeKey(_op.key, opts, _op)\n    };\n    if (self.keyAsBuffer(opts, _op)) op.keyEncoding = 'binary';\n    if (_op.prefix) op.prefix = _op.prefix;\n\n    if ('value' in _op) {\n      op.value = self.encodeValue(_op.value, opts, _op);\n      if (self.valueAsBuffer(opts, _op)) op.valueEncoding = 'binary';\n    }\n\n    return op;\n  });\n};\n\nvar ltgtKeys = ['lt', 'gt', 'lte', 'gte', 'start', 'end'];\n\nCodec.prototype.encodeLtgt = function (ltgt) {\n  var self = this;\n  var ret = {};\n  Object.keys(ltgt).forEach(function (key) {\n    ret[key] = ltgtKeys.indexOf(key) > -1 ? self.encodeKey(ltgt[key], ltgt) : ltgt[key];\n  });\n  return ret;\n};\n\nCodec.prototype.createStreamDecoder = function (opts) {\n  var self = this;\n\n  if (opts.keys && opts.values) {\n    return function (key, value) {\n      return {\n        key: self.decodeKey(key, opts),\n        value: self.decodeValue(value, opts)\n      };\n    };\n  } else if (opts.keys) {\n    return function (key) {\n      return self.decodeKey(key, opts);\n    };\n  } else if (opts.values) {\n    return function (_, value) {\n      return self.decodeValue(value, opts);\n    };\n  } else {\n    return function () {};\n  }\n};\n\nCodec.prototype.keyAsBuffer = function (opts) {\n  return this._keyEncoding(opts).buffer;\n};\n\nCodec.prototype.valueAsBuffer = function (opts) {\n  return this._valueEncoding(opts).buffer;\n};","map":null,"metadata":{},"sourceType":"script"}