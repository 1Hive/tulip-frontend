{"ast":null,"code":"'use strict';\n\nvar protons = require('protons');\n\nvar schema = \"\\nmessage Identify {\\n  // protocolVersion determines compatibility between peers\\n  optional string protocolVersion = 5; // e.g. ipfs/1.0.0\\n\\n  // agentVersion is like a UserAgent string in browsers, or client version in bittorrent\\n  // includes the client name and client.\\n  optional string agentVersion = 6; // e.g. go-ipfs/0.1.0\\n\\n  // publicKey is this node's public key (which also gives its node.ID)\\n  // - may not need to be sent, as secure channel implies it has been sent.\\n  // - then again, if we change / disable secure channel, may still want it.\\n  optional bytes publicKey = 1;\\n\\n  // listenAddrs are the multiaddrs the sender node listens for open connections on\\n  repeated bytes listenAddrs = 2;\\n\\n  // oservedAddr is the multiaddr of the remote endpoint that the sender node perceives\\n  // this is useful information to convey to the other side, as it helps the remote endpoint\\n  // determine whether its connection to the local peer goes through NAT.\\n  optional bytes observedAddr = 4;\\n\\n  repeated string protocols = 3;\\n}\\n\";\nmodule.exports = protons(schema).Identify;","map":null,"metadata":{},"sourceType":"script"}