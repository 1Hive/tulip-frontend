{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar exporter = require('ipfs-unixfs-exporter');\n\nvar applyDefaultOptions = require('./utils/apply-default-options');\n\nvar toMfsPath = require('./utils/to-mfs-path');\n\nvar errCode = require('err-code');\n\nvar _require = require('../../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nvar defaultOptions = {\n  offset: 0,\n  length: Infinity\n};\n\nmodule.exports = function (context) {\n  return withTimeoutOption(function mfsRead(path) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    options = applyDefaultOptions(options, defaultOptions);\n    return _defineProperty({}, Symbol.asyncIterator, function () {\n      var _read = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var mfsPath, result, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, buf;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _awaitAsyncGenerator(toMfsPath(context, path));\n\n              case 2:\n                mfsPath = _context.sent;\n                _context.next = 5;\n                return _awaitAsyncGenerator(exporter(mfsPath.mfsPath, context.ipld));\n\n              case 5:\n                result = _context.sent;\n\n                if (!(result.unixfs.type !== 'file')) {\n                  _context.next = 8;\n                  break;\n                }\n\n                throw errCode(new Error(\"\".concat(path, \" was not a file\")), 'ERR_NOT_FILE');\n\n              case 8:\n                if (result.content) {\n                  _context.next = 10;\n                  break;\n                }\n\n                throw errCode(new Error(\"Could not load content stream from \".concat(path)), 'ERR_NO_CONTENT');\n\n              case 10:\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context.prev = 12;\n                _iterator = _asyncIterator(result.content({\n                  offset: options.offset,\n                  length: options.length\n                }));\n\n              case 14:\n                _context.next = 16;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 16:\n                _step = _context.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context.next = 20;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 20:\n                _value = _context.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context.next = 28;\n                  break;\n                }\n\n                buf = _value;\n                _context.next = 25;\n                return buf;\n\n              case 25:\n                _iteratorNormalCompletion = true;\n                _context.next = 14;\n                break;\n\n              case 28:\n                _context.next = 34;\n                break;\n\n              case 30:\n                _context.prev = 30;\n                _context.t0 = _context[\"catch\"](12);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 34:\n                _context.prev = 34;\n                _context.prev = 35;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context.next = 39;\n                  break;\n                }\n\n                _context.next = 39;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 39:\n                _context.prev = 39;\n\n                if (!_didIteratorError) {\n                  _context.next = 42;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 42:\n                return _context.finish(39);\n\n              case 43:\n                return _context.finish(34);\n\n              case 44:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[12, 30, 34, 44], [35,, 39, 43]]);\n      }));\n\n      function read() {\n        return _read.apply(this, arguments);\n      }\n\n      return read;\n    }());\n  });\n};","map":null,"metadata":{},"sourceType":"script"}