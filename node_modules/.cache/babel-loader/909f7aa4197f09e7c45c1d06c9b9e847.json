{"ast":null,"code":"const base64url = require('base64url');\n\nconst {\n  verifyJWT\n} = require('did-jwt');\n\nconst encodeSection = data => base64url.encode(JSON.stringify(data));\n\nconst TYPE = '3ID';\nconst JWT_HEADER = encodeSection({\n  typ: 'JWT',\n  alg: 'ES256K'\n});\n\nclass OdbIdentityProvider {\n  constructor({\n    threeId\n  }) {\n    // super(options)\n    this.threeId = threeId;\n  }\n\n  static get type() {\n    return '3ID';\n  }\n\n  async getId({\n    space\n  }) {\n    if (space) {\n      return this.threeId.getSubDID(space);\n    } else {\n      return this.threeId.DID;\n    }\n  }\n\n  async signIdentity(data, {\n    space\n  }) {\n    const payload = {\n      iat: null,\n      data\n    };\n    const opts = !space ? {\n      use3ID: true\n    } : {\n      space\n    };\n    return (await this.threeId.signJWT(payload, opts)).split('.')[2];\n  }\n\n  static async setDidResolver(resolver) {\n    this._resolver = resolver;\n  }\n\n  static async verifyIdentity(identity) {\n    if (!this._resolver) {\n      throw new Error('The DID resolver must first be set with setDidResolver()');\n    }\n\n    const payload = encodeSection({\n      iat: null,\n      data: identity.publicKey + identity.signatures.id,\n      iss: identity.id\n    });\n    const jwt = `${JWT_HEADER}.${payload}.${identity.signatures.publicKey}`;\n\n    try {\n      await verifyJWT(jwt, {\n        auth: true,\n        resolver: this._resolver\n      });\n    } catch (e) {\n      return false;\n    }\n\n    return true;\n  }\n\n}\n\nmodule.exports = OdbIdentityProvider;","map":null,"metadata":{},"sourceType":"script"}