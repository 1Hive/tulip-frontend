{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar Block = require('ipld-block');\n\nvar CID = require('cids');\n\nvar mergeOptions = require('merge-options');\n\nvar ipldDagCbor = require('ipld-dag-cbor');\n\nvar ipldDagPb = require('ipld-dag-pb');\n\nvar ipldRaw = require('ipld-raw');\n\nvar multicodec = require('multicodec');\n\nvar typical = require('typical');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar _require2 = require('./util'),\n    extendIterator = _require2.extendIterator;\n\nvar IPLDResolver = /*#__PURE__*/function () {\n  function IPLDResolver(userOptions) {\n    _classCallCheck(this, IPLDResolver);\n\n    var options = mergeOptions(IPLDResolver.defaultOptions, userOptions);\n\n    if (!options.blockService) {\n      throw new Error('Missing blockservice');\n    }\n\n    this.bs = options.blockService; // Object with current list of active resolvers\n\n    this.resolvers = {};\n\n    if (typeof options.loadFormat !== 'function') {\n      this.loadFormat = function (codec) {\n        var codecName = multicodec.print[codec];\n        throw new Error(\"No resolver found for codec \\\"\".concat(codecName, \"\\\"\"));\n      };\n    } else {\n      this.loadFormat = options.loadFormat;\n    } // Enable all supplied formats\n\n\n    var _iterator4 = _createForOfIteratorHelper(options.formats),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var format = _step4.value;\n        this.addFormat(format);\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  }\n  /**\n   * Add support for an IPLD Format.\n   *\n   * @param {Object} format - The implementation of an IPLD Format.\n   * @returns {this}\n   */\n\n\n  _createClass(IPLDResolver, [{\n    key: \"addFormat\",\n    value: function addFormat(format) {\n      var codec = format.codec;\n\n      if (this.resolvers[format.format]) {\n        var codecName = multicodec.print[codec];\n        throw new Error(\"Resolver already exists for codec \\\"\".concat(codecName, \"\\\"\"));\n      }\n\n      this.resolvers[codec] = format;\n      return this;\n    }\n    /**\n     * Remove support for an IPLD Format.\n     *\n     * @param {number} codec - The codec of the IPLD Format to remove.\n     * @returns {this}\n     */\n\n  }, {\n    key: \"removeFormat\",\n    value: function removeFormat(codec) {\n      if (this.resolvers[codec]) {\n        delete this.resolvers[codec];\n      }\n\n      return this;\n    }\n    /**\n     * Retrieves IPLD Nodes along the `path` that is rooted at `cid`.\n     *\n     * @param {CID} cid - the CID the resolving starts.\n     * @param {string} path - the path that should be resolved.\n     * @param {Object} [options] -  Options is an object with the following properties.\n     * @param {AbortSignal} [options.signal] - A signal that can be used to abort any long-lived operations that are started as a result of this operation.\n     * @returns {Iterable.<Promise.<{remainderPath: string, value}>>} - Returns an async iterator of all the IPLD Nodes that were traversed during the path resolving. Every element is an object with these fields:\n     *   - `remainderPath`: the part of the path that wasn’t resolved yet.\n     *   - `value`: the value where the resolved path points to. If further traversing is possible, then the value is a CID object linking to another IPLD Node. If it was possible to fully resolve the path, value is the value the path points to. So if you need the CID of the IPLD Node you’re currently at, just take the value of the previously returned IPLD Node.\n     */\n\n  }, {\n    key: \"resolve\",\n    value: function resolve(cid, path, options) {\n      if (!CID.isCID(cid)) {\n        throw new Error('`cid` argument must be a CID');\n      }\n\n      if (typeof path !== 'string') {\n        throw new Error('`path` argument must be a string');\n      }\n\n      var generator = /*#__PURE__*/_wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var format, block, result, value;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(cid !== null)) {\n                  _context.next = 16;\n                  break;\n                }\n\n                _context.next = 3;\n                return _awaitAsyncGenerator(this._getFormat(cid.codec));\n\n              case 3:\n                format = _context.sent;\n                _context.next = 6;\n                return _awaitAsyncGenerator(this.bs.get(cid, options));\n\n              case 6:\n                block = _context.sent;\n                result = format.resolver.resolve(block.data, path); // Prepare for the next iteration if there is a `remainderPath`\n\n                path = result.remainderPath;\n                value = result.value; // NOTE vmx 2018-11-29: Not all IPLD Formats return links as\n                // CIDs yet. Hence try to convert old style links to CIDs\n\n                if (Object.keys(value).length === 1 && '/' in value) {\n                  try {\n                    value = new CID(value['/']);\n                  } catch (_error) {\n                    value = null;\n                  }\n                }\n\n                cid = CID.isCID(value) ? value : null;\n                _context.next = 14;\n                return {\n                  remainderPath: path,\n                  value: value\n                };\n\n              case 14:\n                _context.next = 0;\n                break;\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      })).bind(this);\n\n      return extendIterator(generator());\n    }\n    /**\n     * Get a node by CID.\n     *\n     * @param {CID} cid - The CID of the IPLD Node that should be retrieved.\n     * @param {Object} [options] -  Options is an object with the following properties.\n     * @param {AbortSignal} [options.signal] - A signal that can be used to abort any long-lived operations that are started as a result of this operation.\n     * @returns {Promise.<Object>} - Returns a Promise with the IPLD Node that correspond to the given `cid`.\n     */\n\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(cid, options) {\n        var block, format, node;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.bs.get(cid, options);\n\n              case 2:\n                block = _context2.sent;\n                _context2.next = 5;\n                return this._getFormat(block.cid.codec);\n\n              case 5:\n                format = _context2.sent;\n                node = format.util.deserialize(block.data);\n                return _context2.abrupt(\"return\", node);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function get(_x, _x2) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n    /**\n     * Get multiple nodes back from an array of CIDs.\n     *\n     * @param {Iterable.<CID>} cids - The CIDs of the IPLD Nodes that should be retrieved.\n     * @param {Object} [options] -  Options is an object with the following properties.\n     * @param {AbortSignal} [options.signal] - A signal that can be used to abort any long-lived operations that are started as a result of this operation.\n     * @returns {Iterable.<Promise.<Object>>} - Returns an async iterator with the IPLD Nodes that correspond to the given `cids`.\n     */\n\n  }, {\n    key: \"getMany\",\n    value: function getMany(cids, options) {\n      if (!typical.isIterable(cids) || typeof cids === 'string' || Buffer.isBuffer(cids)) {\n        throw new Error('`cids` must be an iterable of CIDs');\n      }\n\n      var generator = /*#__PURE__*/_wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, cid;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context3.prev = 2;\n                _iterator = _asyncIterator(cids);\n\n              case 4:\n                _context3.next = 6;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 6:\n                _step = _context3.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context3.next = 10;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 10:\n                _value = _context3.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                cid = _value;\n                _context3.next = 15;\n                return this.get(cid, options);\n\n              case 15:\n                _iteratorNormalCompletion = true;\n                _context3.next = 4;\n                break;\n\n              case 18:\n                _context3.next = 24;\n                break;\n\n              case 20:\n                _context3.prev = 20;\n                _context3.t0 = _context3[\"catch\"](2);\n                _didIteratorError = true;\n                _iteratorError = _context3.t0;\n\n              case 24:\n                _context3.prev = 24;\n                _context3.prev = 25;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                _context3.next = 29;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 29:\n                _context3.prev = 29;\n\n                if (!_didIteratorError) {\n                  _context3.next = 32;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 32:\n                return _context3.finish(29);\n\n              case 33:\n                return _context3.finish(24);\n\n              case 34:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2, 20, 24, 34], [25,, 29, 33]]);\n      })).bind(this);\n\n      return extendIterator(generator());\n    }\n    /**\n     * Stores the given IPLD Node of a recognized IPLD Format.\n     *\n     * @param {Object} node - The deserialized IPLD node that should be inserted.\n     * @param {number} format - The multicodec of the format that IPLD Node should be encoded in.\n     * @param {Object} [userOptions] -  Options is an object with the following properties.\n     * @param {number} [userOtions.hashAlg=hash algorithm of the given multicodec] - The hashing algorithm that is used to calculate the CID.\n     * @param {number} [userOptions.cidVersion=1] - The CID version to use.\n     * @param {boolean} [userOptions.onlyHash=false] - If true the serialized form of the IPLD Node will not be passed to the underlying block store.\n     * @param {AbortSignal} [userOptions.signal] - A signal that can be used to abort any long-lived operations that are started as a result of this operation.\n     * @returns {Promise.<CID>} - Returns the CID of the serialized IPLD Nodes.\n     */\n\n  }, {\n    key: \"put\",\n    value: function () {\n      var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(node, format, userOptions) {\n        var formatImpl, defaultOptions, options, cidOptions, serialized, cid, block;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(format === undefined)) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw new Error('`put` requires a format');\n\n              case 2:\n                if (!(typeof format !== 'number')) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                throw new Error('`format` parameter must be number (multicodec)');\n\n              case 4:\n                _context4.next = 6;\n                return this._getFormat(format);\n\n              case 6:\n                formatImpl = _context4.sent;\n                defaultOptions = {\n                  hashAlg: formatImpl.defaultHashAlg,\n                  cidVersion: 1,\n                  onlyHash: false\n                };\n                options = mergeOptions(defaultOptions, userOptions);\n                cidOptions = {\n                  cidVersion: options.cidVersion,\n                  hashAlg: options.hashAlg,\n                  onlyHash: options.onlyHash\n                };\n                serialized = formatImpl.util.serialize(node);\n                _context4.next = 13;\n                return formatImpl.util.cid(serialized, cidOptions);\n\n              case 13:\n                cid = _context4.sent;\n\n                if (options.onlyHash) {\n                  _context4.next = 18;\n                  break;\n                }\n\n                block = new Block(serialized, cid);\n                _context4.next = 18;\n                return this.bs.put(block, options);\n\n              case 18:\n                return _context4.abrupt(\"return\", cid);\n\n              case 19:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function put(_x3, _x4, _x5) {\n        return _put.apply(this, arguments);\n      }\n\n      return put;\n    }()\n    /**\n     * Stores the given IPLD Nodes of a recognized IPLD Format.\n     *\n     * @param {Iterable.<Object>} nodes - Deserialized IPLD nodes that should be inserted.\n     * @param {number} format - The multicodec of the format that IPLD Node should be encoded in.\n     * @param {Object} [userOptions] -  Options are applied to any of the `nodes` and is an object with the following properties.\n     * @param {number} [userOtions.hashAlg=hash algorithm of the given multicodec] - The hashing algorithm that is used to calculate the CID.\n     * @param {number} [userOptions.cidVersion=1] - The CID version to use.\n     * @param {boolean} [userOptions.onlyHash=false] - If true the serialized form of the IPLD Node will not be passed to the underlying block store.\n     * @param {AbortSignal} [userOptions.signal] - A signal that can be used to abort any long-lived operations that are started as a result of this operation.\n     * @returns {Iterable.<Promise.<CID>>} - Returns an async iterator with the CIDs of the serialized IPLD Nodes.\n     */\n\n  }, {\n    key: \"putMany\",\n    value: function putMany(nodes, format, userOptions) {\n      if (!typical.isIterable(nodes) || typeof nodes === 'string' || Buffer.isBuffer(nodes)) {\n        throw new Error('`nodes` must be an iterable');\n      }\n\n      if (format === undefined) {\n        throw new Error('`put` requires a format');\n      }\n\n      if (typeof format !== 'number') {\n        throw new Error('`format` parameter must be number (multicodec)');\n      }\n\n      var options;\n      var formatImpl;\n\n      var generator = /*#__PURE__*/_wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, node, defaultOptions;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _iteratorNormalCompletion2 = true;\n                _didIteratorError2 = false;\n                _context5.prev = 2;\n                _iterator2 = _asyncIterator(nodes);\n\n              case 4:\n                _context5.next = 6;\n                return _awaitAsyncGenerator(_iterator2.next());\n\n              case 6:\n                _step2 = _context5.sent;\n                _iteratorNormalCompletion2 = _step2.done;\n                _context5.next = 10;\n                return _awaitAsyncGenerator(_step2.value);\n\n              case 10:\n                _value2 = _context5.sent;\n\n                if (_iteratorNormalCompletion2) {\n                  _context5.next = 24;\n                  break;\n                }\n\n                node = _value2;\n\n                if (!(options === undefined)) {\n                  _context5.next = 19;\n                  break;\n                }\n\n                _context5.next = 16;\n                return _awaitAsyncGenerator(this._getFormat(format));\n\n              case 16:\n                formatImpl = _context5.sent;\n                defaultOptions = {\n                  hashAlg: formatImpl.defaultHashAlg,\n                  cidVersion: 1,\n                  onlyHash: false\n                };\n                options = mergeOptions(defaultOptions, userOptions);\n\n              case 19:\n                _context5.next = 21;\n                return this.put(node, format, options);\n\n              case 21:\n                _iteratorNormalCompletion2 = true;\n                _context5.next = 4;\n                break;\n\n              case 24:\n                _context5.next = 30;\n                break;\n\n              case 26:\n                _context5.prev = 26;\n                _context5.t0 = _context5[\"catch\"](2);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context5.t0;\n\n              case 30:\n                _context5.prev = 30;\n                _context5.prev = 31;\n\n                if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n                  _context5.next = 35;\n                  break;\n                }\n\n                _context5.next = 35;\n                return _awaitAsyncGenerator(_iterator2.return());\n\n              case 35:\n                _context5.prev = 35;\n\n                if (!_didIteratorError2) {\n                  _context5.next = 38;\n                  break;\n                }\n\n                throw _iteratorError2;\n\n              case 38:\n                return _context5.finish(35);\n\n              case 39:\n                return _context5.finish(30);\n\n              case 40:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[2, 26, 30, 40], [31,, 35, 39]]);\n      })).bind(this);\n\n      return extendIterator(generator());\n    }\n    /**\n     * Remove an IPLD Node by the given CID.\n     *\n     * @param {CID} cid - The CID of the IPLD Node that should be removed.\n     * @param {Object} [options] -  Options is an object with the following properties.\n     * @param {AbortSignal} [options.signal] - A signal that can be used to abort any long-lived operations that are started as a result of this operation.\n     * @return {Promise.<CID>} The CID of the removed IPLD Node.\n     */\n\n  }, {\n    key: \"remove\",\n    value: function () {\n      var _remove = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(cid, options) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", this.bs.delete(cid, options));\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function remove(_x6, _x7) {\n        return _remove.apply(this, arguments);\n      }\n\n      return remove;\n    }()\n    /**\n     * Remove IPLD Nodes by the given CIDs.\n     *\n     * Throws an error if any of the Blocks can’t be removed. This operation is\n     * *not* atomic, some Blocks might have already been removed.\n     *\n     * @param {Iterable.<CID>} cids - The CIDs of the IPLD Nodes that should be removed.\n     * @param {Object} [options] -  Options is an object with the following properties.\n     * @param {AbortSignal} [options.signal] - A signal that can be used to abort any long-lived operations that are started as a result of this operation.\n     * @return {Iterable.<Promise.<CID>>} Returns an async iterator with the CIDs of the removed IPLD Nodes.\n     */\n\n  }, {\n    key: \"removeMany\",\n    value: function removeMany(cids, options) {\n      if (!typical.isIterable(cids) || typeof cids === 'string' || Buffer.isBuffer(cids)) {\n        throw new Error('`cids` must be an iterable of CIDs');\n      }\n\n      var generator = /*#__PURE__*/_wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _value3, cid;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _iteratorNormalCompletion3 = true;\n                _didIteratorError3 = false;\n                _context7.prev = 2;\n                _iterator3 = _asyncIterator(cids);\n\n              case 4:\n                _context7.next = 6;\n                return _awaitAsyncGenerator(_iterator3.next());\n\n              case 6:\n                _step3 = _context7.sent;\n                _iteratorNormalCompletion3 = _step3.done;\n                _context7.next = 10;\n                return _awaitAsyncGenerator(_step3.value);\n\n              case 10:\n                _value3 = _context7.sent;\n\n                if (_iteratorNormalCompletion3) {\n                  _context7.next = 18;\n                  break;\n                }\n\n                cid = _value3;\n                _context7.next = 15;\n                return this.remove(cid, options);\n\n              case 15:\n                _iteratorNormalCompletion3 = true;\n                _context7.next = 4;\n                break;\n\n              case 18:\n                _context7.next = 24;\n                break;\n\n              case 20:\n                _context7.prev = 20;\n                _context7.t0 = _context7[\"catch\"](2);\n                _didIteratorError3 = true;\n                _iteratorError3 = _context7.t0;\n\n              case 24:\n                _context7.prev = 24;\n                _context7.prev = 25;\n\n                if (!(!_iteratorNormalCompletion3 && _iterator3.return != null)) {\n                  _context7.next = 29;\n                  break;\n                }\n\n                _context7.next = 29;\n                return _awaitAsyncGenerator(_iterator3.return());\n\n              case 29:\n                _context7.prev = 29;\n\n                if (!_didIteratorError3) {\n                  _context7.next = 32;\n                  break;\n                }\n\n                throw _iteratorError3;\n\n              case 32:\n                return _context7.finish(29);\n\n              case 33:\n                return _context7.finish(24);\n\n              case 34:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[2, 20, 24, 34], [25,, 29, 33]]);\n      })).bind(this);\n\n      return extendIterator(generator());\n    }\n    /**\n     * Returns all the paths that can be resolved into.\n     *\n     * @param {Object} cid - The ID to get the paths from\n     * @param {string} [offsetPath=''] - the path to start to retrieve the other paths from.\n     * @param {Object} [userOptions]\n     * @param {number} [userOptions.recursive=false] - whether to get the paths recursively or not. `false` resolves only the paths of the given CID.\n     * @param {AbortSignal} [userOptions.signal] - A signal that can be used to abort any long-lived operations that are started as a result of this operation.\n     * @returns {Iterable.<Promise.<String>>} - Returns an async iterator with paths that can be resolved into\n     */\n\n  }, {\n    key: \"tree\",\n    value: function tree(cid, offsetPath, userOptions) {\n      var _this = this;\n\n      if (typeof offsetPath === 'object') {\n        userOptions = offsetPath;\n        offsetPath = undefined;\n      }\n\n      offsetPath = offsetPath || '';\n      var defaultOptions = {\n        recursive: false\n      };\n      var options = mergeOptions(defaultOptions, userOptions); // If a path is a link then follow it and return its CID\n\n      var maybeRecurse = /*#__PURE__*/function () {\n        var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(block, treePath) {\n          var format, result;\n          return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n            while (1) {\n              switch (_context8.prev = _context8.next) {\n                case 0:\n                  _context8.next = 2;\n                  return _this._getFormat(block.cid.codec);\n\n                case 2:\n                  format = _context8.sent;\n                  result = format.resolver.resolve(block.data, treePath); // Something to follow recusively, hence push it into the queue\n\n                  if (!CID.isCID(result.value)) {\n                    _context8.next = 8;\n                    break;\n                  }\n\n                  return _context8.abrupt(\"return\", result.value);\n\n                case 8:\n                  return _context8.abrupt(\"return\", null);\n\n                case 9:\n                case \"end\":\n                  return _context8.stop();\n              }\n            }\n          }, _callee8);\n        }));\n\n        return function maybeRecurse(_x8, _x9) {\n          return _ref6.apply(this, arguments);\n        };\n      }();\n\n      var generator = /*#__PURE__*/_wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var treePaths, block, queue, basePath, _queue$shift, format, paths, treePath, fullPath;\n\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                // The list of paths that will get returned\n                treePaths = []; // The current block, needed to call `isLink()` on every interation\n\n                // The list of items we want to follow recursively. The items are\n                // an object consisting of the CID and the currently already resolved\n                // path\n                queue = [{\n                  cid: cid,\n                  basePath: ''\n                }]; // The path that was already traversed\n\n              case 2:\n                if (!(treePaths.length > 0 || queue.length > 0)) {\n                  _context9.next = 28;\n                  break;\n                }\n\n                if (!(treePaths.length === 0 && queue.length > 0)) {\n                  _context9.next = 15;\n                  break;\n                }\n\n                _queue$shift = queue.shift();\n                cid = _queue$shift.cid;\n                basePath = _queue$shift.basePath;\n                _context9.next = 9;\n                return _awaitAsyncGenerator(this._getFormat(cid.codec));\n\n              case 9:\n                format = _context9.sent;\n                _context9.next = 12;\n                return _awaitAsyncGenerator(this.bs.get(cid, options));\n\n              case 12:\n                block = _context9.sent;\n                paths = format.resolver.tree(block.data);\n                treePaths.push.apply(treePaths, _toConsumableArray(paths));\n\n              case 15:\n                treePath = treePaths.shift();\n                fullPath = basePath + treePath; // Only follow links if recursion is intended\n\n                if (!options.recursive) {\n                  _context9.next = 22;\n                  break;\n                }\n\n                _context9.next = 20;\n                return _awaitAsyncGenerator(maybeRecurse(block, treePath));\n\n              case 20:\n                cid = _context9.sent;\n\n                if (cid !== null) {\n                  queue.push({\n                    cid: cid,\n                    basePath: fullPath + '/'\n                  });\n                }\n\n              case 22:\n                if (!(fullPath.startsWith(offsetPath) && fullPath.length > offsetPath.length)) {\n                  _context9.next = 26;\n                  break;\n                }\n\n                if (offsetPath.length > 0) {\n                  fullPath = fullPath.slice(offsetPath.length + 1);\n                }\n\n                _context9.next = 26;\n                return fullPath;\n\n              case 26:\n                _context9.next = 2;\n                break;\n\n              case 28:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      })).bind(this);\n\n      return extendIterator(generator());\n    }\n    /*           */\n\n    /* internals */\n\n    /*           */\n\n  }, {\n    key: \"_getFormat\",\n    value: function () {\n      var _getFormat2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(codec) {\n        var constantName, format;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                // TODO vmx 2019-01-24: Once all CIDs support accessing the codec code\n                // instead of the name, remove this part\n                if (typeof codec === 'string') {\n                  constantName = codec.toUpperCase().replace(/-/g, '_');\n                  codec = multicodec[constantName];\n                }\n\n                if (!this.resolvers[codec]) {\n                  _context10.next = 3;\n                  break;\n                }\n\n                return _context10.abrupt(\"return\", this.resolvers[codec]);\n\n              case 3:\n                _context10.next = 5;\n                return this.loadFormat(codec);\n\n              case 5:\n                format = _context10.sent;\n                this.addFormat(format);\n                return _context10.abrupt(\"return\", format);\n\n              case 8:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function _getFormat(_x10) {\n        return _getFormat2.apply(this, arguments);\n      }\n\n      return _getFormat;\n    }()\n  }]);\n\n  return IPLDResolver;\n}();\n/**\n * Default options for IPLD.\n */\n\n\nIPLDResolver.defaultOptions = {\n  formats: [ipldDagCbor, ipldDagPb, ipldRaw]\n};\nmodule.exports = IPLDResolver;","map":null,"metadata":{},"sourceType":"script"}