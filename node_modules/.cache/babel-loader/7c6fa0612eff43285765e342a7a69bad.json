{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst CID = require('cids');\n\nconst withIs = require('class-is');\n/**\n * Represents an immutable block of data that is uniquely referenced with a cid.\n *\n * @constructor\n * @param {Buffer} data - The data to be stored in the block as a buffer.\n * @param {CID} cid - The cid of the data\n *\n * @example\n * const block = new Block(new Buffer('a012d83b20f9371...'))\n */\n\n\nclass Block {\n  constructor(data, cid) {\n    if (!data || !ArrayBuffer.isView(data)) {\n      throw new Error('first argument  must be a buffer or typed array');\n    } else if (!Buffer.isBuffer(data)) {\n      data = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n    }\n\n    if (!cid || !CID.isCID(cid)) {\n      throw new Error('second argument must be a CID');\n    }\n\n    this._data = data;\n    this._cid = cid;\n  }\n  /**\n   * The data of this block.\n   *\n   * @type {Buffer}\n   */\n\n\n  get data() {\n    return this._data;\n  }\n\n  set data(val) {\n    throw new Error('Tried to change an immutable block');\n  }\n  /**\n   * The cid of the data this block represents.\n   *\n   * @type {CID}\n   */\n\n\n  get cid() {\n    return this._cid;\n  }\n\n  set cid(val) {\n    throw new Error('Tried to change an immutable block');\n  }\n\n}\n\nmodule.exports = withIs(Block, {\n  className: 'Block',\n  symbolName: '@ipld/js-ipld-block/block'\n});","map":null,"metadata":{},"sourceType":"script"}