{"ast":null,"code":"var _toConsumableArray = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n// hoisted class for cyclic dependency\nvar Range = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function Range(range, options) {\n    var _this = this;\n\n    _classCallCheck(this, Range);\n\n    options = parseOptions(options);\n\n    if (range instanceof Range) {\n      if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {\n        return range;\n      } else {\n        return new Range(range.raw, options);\n      }\n    }\n\n    if (range instanceof Comparator) {\n      // just put it in the set and return\n      this.raw = range.value;\n      this.set = [[range]];\n      this.format();\n      return this;\n    }\n\n    this.options = options;\n    this.loose = !!options.loose;\n    this.includePrerelease = !!options.includePrerelease; // First, split based on boolean or ||\n\n    this.raw = range;\n    this.set = range.split(/\\s*\\|\\|\\s*/) // map the range to a 2d array of comparators\n    .map(function (range) {\n      return _this.parseRange(range.trim());\n    }) // throw out any comparator lists that are empty\n    // this generally means that it was not a valid range, which is allowed\n    // in loose mode, but will still throw if the WHOLE range is invalid.\n    .filter(function (c) {\n      return c.length;\n    });\n\n    if (!this.set.length) {\n      throw new TypeError(\"Invalid SemVer Range: \".concat(range));\n    } // if we have any that are not the null set, throw out null sets.\n\n\n    if (this.set.length > 1) {\n      // keep the first one, in case they're all null sets\n      var first = this.set[0];\n      this.set = this.set.filter(function (c) {\n        return !isNullSet(c[0]);\n      });\n      if (this.set.length === 0) this.set = [first];else if (this.set.length > 1) {\n        // if we have any that are *, then the range is just *\n        var _iterator = _createForOfIteratorHelper(this.set),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var c = _step.value;\n\n            if (c.length === 1 && isAny(c[0])) {\n              this.set = [c];\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n\n    this.format();\n  }\n\n  _createClass(Range, [{\n    key: \"format\",\n    value: function format() {\n      this.range = this.set.map(function (comps) {\n        return comps.join(' ').trim();\n      }).join('||').trim();\n      return this.range;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.range;\n    }\n  }, {\n    key: \"parseRange\",\n    value: function parseRange(range) {\n      var _this2 = this;\n\n      range = range.trim(); // memoize range parsing for performance.\n      // this is a very hot path, and fully deterministic.\n\n      var memoOpts = Object.keys(this.options).join(',');\n      var memoKey = \"parseRange:\".concat(memoOpts, \":\").concat(range);\n      var cached = cache.get(memoKey);\n      if (cached) return cached;\n      var loose = this.options.loose; // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n\n      var hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];\n      range = range.replace(hr, hyphenReplace(this.options.includePrerelease));\n      debug('hyphen replace', range); // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n\n      range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);\n      debug('comparator trim', range, re[t.COMPARATORTRIM]); // `~ 1.2.3` => `~1.2.3`\n\n      range = range.replace(re[t.TILDETRIM], tildeTrimReplace); // `^ 1.2.3` => `^1.2.3`\n\n      range = range.replace(re[t.CARETTRIM], caretTrimReplace); // normalize spaces\n\n      range = range.split(/\\s+/).join(' '); // At this point, the range is completely trimmed and\n      // ready to be split into comparators.\n\n      var compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];\n      var rangeList = range.split(' ').map(function (comp) {\n        return parseComparator(comp, _this2.options);\n      }).join(' ').split(/\\s+/) // >=0.0.0 is equivalent to *\n      .map(function (comp) {\n        return replaceGTE0(comp, _this2.options);\n      }) // in loose mode, throw out any that are not valid comparators\n      .filter(this.options.loose ? function (comp) {\n        return !!comp.match(compRe);\n      } : function () {\n        return true;\n      }).map(function (comp) {\n        return new Comparator(comp, _this2.options);\n      }); // if any comparators are the null set, then replace with JUST null set\n      // if more than one comparator, remove any * comparators\n      // also, don't include the same comparator more than once\n\n      var l = rangeList.length;\n      var rangeMap = new Map();\n\n      var _iterator2 = _createForOfIteratorHelper(rangeList),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var comp = _step2.value;\n          if (isNullSet(comp)) return [comp];\n          rangeMap.set(comp.value, comp);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      if (rangeMap.size > 1 && rangeMap.has('')) rangeMap.delete('');\n\n      var result = _toConsumableArray(rangeMap.values());\n\n      cache.set(memoKey, result);\n      return result;\n    }\n  }, {\n    key: \"intersects\",\n    value: function intersects(range, options) {\n      if (!(range instanceof Range)) {\n        throw new TypeError('a Range is required');\n      }\n\n      return this.set.some(function (thisComparators) {\n        return isSatisfiable(thisComparators, options) && range.set.some(function (rangeComparators) {\n          return isSatisfiable(rangeComparators, options) && thisComparators.every(function (thisComparator) {\n            return rangeComparators.every(function (rangeComparator) {\n              return thisComparator.intersects(rangeComparator, options);\n            });\n          });\n        });\n      });\n    } // if ANY of the sets match ALL of its comparators, then pass\n\n  }, {\n    key: \"test\",\n    value: function test(version) {\n      if (!version) {\n        return false;\n      }\n\n      if (typeof version === 'string') {\n        try {\n          version = new SemVer(version, this.options);\n        } catch (er) {\n          return false;\n        }\n      }\n\n      for (var i = 0; i < this.set.length; i++) {\n        if (testSet(this.set[i], version, this.options)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }]);\n\n  return Range;\n}();\n\nmodule.exports = Range;\n\nvar LRU = require('lru-cache');\n\nvar cache = new LRU({\n  max: 1000\n});\n\nvar parseOptions = require('../internal/parse-options');\n\nvar Comparator = require('./comparator');\n\nvar debug = require('../internal/debug');\n\nvar SemVer = require('./semver');\n\nvar _require = require('../internal/re'),\n    re = _require.re,\n    t = _require.t,\n    comparatorTrimReplace = _require.comparatorTrimReplace,\n    tildeTrimReplace = _require.tildeTrimReplace,\n    caretTrimReplace = _require.caretTrimReplace;\n\nvar isNullSet = function isNullSet(c) {\n  return c.value === '<0.0.0-0';\n};\n\nvar isAny = function isAny(c) {\n  return c.value === '';\n}; // take a set of comparators and determine whether there\n// exists a version which can satisfy it\n\n\nvar isSatisfiable = function isSatisfiable(comparators, options) {\n  var result = true;\n  var remainingComparators = comparators.slice();\n  var testComparator = remainingComparators.pop();\n\n  while (result && remainingComparators.length) {\n    result = remainingComparators.every(function (otherComparator) {\n      return testComparator.intersects(otherComparator, options);\n    });\n    testComparator = remainingComparators.pop();\n  }\n\n  return result;\n}; // comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\n\n\nvar parseComparator = function parseComparator(comp, options) {\n  debug('comp', comp, options);\n  comp = replaceCarets(comp, options);\n  debug('caret', comp);\n  comp = replaceTildes(comp, options);\n  debug('tildes', comp);\n  comp = replaceXRanges(comp, options);\n  debug('xrange', comp);\n  comp = replaceStars(comp, options);\n  debug('stars', comp);\n  return comp;\n};\n\nvar isX = function isX(id) {\n  return !id || id.toLowerCase() === 'x' || id === '*';\n}; // ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\n\n\nvar replaceTildes = function replaceTildes(comp, options) {\n  return comp.trim().split(/\\s+/).map(function (comp) {\n    return replaceTilde(comp, options);\n  }).join(' ');\n};\n\nvar replaceTilde = function replaceTilde(comp, options) {\n  var r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];\n  return comp.replace(r, function (_, M, m, p, pr) {\n    debug('tilde', comp, _, M, m, p, pr);\n    var ret;\n\n    if (isX(M)) {\n      ret = '';\n    } else if (isX(m)) {\n      ret = \">=\".concat(M, \".0.0 <\").concat(+M + 1, \".0.0-0\");\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0-0\n      ret = \">=\".concat(M, \".\").concat(m, \".0 <\").concat(M, \".\").concat(+m + 1, \".0-0\");\n    } else if (pr) {\n      debug('replaceTilde pr', pr);\n      ret = \">=\".concat(M, \".\").concat(m, \".\").concat(p, \"-\").concat(pr, \" <\").concat(M, \".\").concat(+m + 1, \".0-0\");\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0-0\n      ret = \">=\".concat(M, \".\").concat(m, \".\").concat(p, \" <\").concat(M, \".\").concat(+m + 1, \".0-0\");\n    }\n\n    debug('tilde return', ret);\n    return ret;\n  });\n}; // ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\n// ^1.2.3 --> >=1.2.3 <2.0.0-0\n// ^1.2.0 --> >=1.2.0 <2.0.0-0\n\n\nvar replaceCarets = function replaceCarets(comp, options) {\n  return comp.trim().split(/\\s+/).map(function (comp) {\n    return replaceCaret(comp, options);\n  }).join(' ');\n};\n\nvar replaceCaret = function replaceCaret(comp, options) {\n  debug('caret', comp, options);\n  var r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];\n  var z = options.includePrerelease ? '-0' : '';\n  return comp.replace(r, function (_, M, m, p, pr) {\n    debug('caret', comp, _, M, m, p, pr);\n    var ret;\n\n    if (isX(M)) {\n      ret = '';\n    } else if (isX(m)) {\n      ret = \">=\".concat(M, \".0.0\").concat(z, \" <\").concat(+M + 1, \".0.0-0\");\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = \">=\".concat(M, \".\").concat(m, \".0\").concat(z, \" <\").concat(M, \".\").concat(+m + 1, \".0-0\");\n      } else {\n        ret = \">=\".concat(M, \".\").concat(m, \".0\").concat(z, \" <\").concat(+M + 1, \".0.0-0\");\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr);\n\n      if (M === '0') {\n        if (m === '0') {\n          ret = \">=\".concat(M, \".\").concat(m, \".\").concat(p, \"-\").concat(pr, \" <\").concat(M, \".\").concat(m, \".\").concat(+p + 1, \"-0\");\n        } else {\n          ret = \">=\".concat(M, \".\").concat(m, \".\").concat(p, \"-\").concat(pr, \" <\").concat(M, \".\").concat(+m + 1, \".0-0\");\n        }\n      } else {\n        ret = \">=\".concat(M, \".\").concat(m, \".\").concat(p, \"-\").concat(pr, \" <\").concat(+M + 1, \".0.0-0\");\n      }\n    } else {\n      debug('no pr');\n\n      if (M === '0') {\n        if (m === '0') {\n          ret = \">=\".concat(M, \".\").concat(m, \".\").concat(p).concat(z, \" <\").concat(M, \".\").concat(m, \".\").concat(+p + 1, \"-0\");\n        } else {\n          ret = \">=\".concat(M, \".\").concat(m, \".\").concat(p).concat(z, \" <\").concat(M, \".\").concat(+m + 1, \".0-0\");\n        }\n      } else {\n        ret = \">=\".concat(M, \".\").concat(m, \".\").concat(p, \" <\").concat(+M + 1, \".0.0-0\");\n      }\n    }\n\n    debug('caret return', ret);\n    return ret;\n  });\n};\n\nvar replaceXRanges = function replaceXRanges(comp, options) {\n  debug('replaceXRanges', comp, options);\n  return comp.split(/\\s+/).map(function (comp) {\n    return replaceXRange(comp, options);\n  }).join(' ');\n};\n\nvar replaceXRange = function replaceXRange(comp, options) {\n  comp = comp.trim();\n  var r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];\n  return comp.replace(r, function (ret, gtlt, M, m, p, pr) {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr);\n    var xM = isX(M);\n    var xm = xM || isX(m);\n    var xp = xm || isX(p);\n    var anyX = xp;\n\n    if (gtlt === '=' && anyX) {\n      gtlt = '';\n    } // if we're including prereleases in the match, then we need\n    // to fix this to -0, the lowest possible prerelease value\n\n\n    pr = options.includePrerelease ? '-0' : '';\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0-0';\n      } else {\n        // nothing is forbidden\n        ret = '*';\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0;\n      }\n\n      p = 0;\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        gtlt = '>=';\n\n        if (xm) {\n          M = +M + 1;\n          m = 0;\n          p = 0;\n        } else {\n          m = +m + 1;\n          p = 0;\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<';\n\n        if (xm) {\n          M = +M + 1;\n        } else {\n          m = +m + 1;\n        }\n      }\n\n      if (gtlt === '<') pr = '-0';\n      ret = \"\".concat(gtlt + M, \".\").concat(m, \".\").concat(p).concat(pr);\n    } else if (xm) {\n      ret = \">=\".concat(M, \".0.0\").concat(pr, \" <\").concat(+M + 1, \".0.0-0\");\n    } else if (xp) {\n      ret = \">=\".concat(M, \".\").concat(m, \".0\").concat(pr, \" <\").concat(M, \".\").concat(+m + 1, \".0-0\");\n    }\n\n    debug('xRange return', ret);\n    return ret;\n  });\n}; // Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\n\n\nvar replaceStars = function replaceStars(comp, options) {\n  debug('replaceStars', comp, options); // Looseness is ignored here.  star is always as loose as it gets!\n\n  return comp.trim().replace(re[t.STAR], '');\n};\n\nvar replaceGTE0 = function replaceGTE0(comp, options) {\n  debug('replaceGTE0', comp, options);\n  return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '');\n}; // This function is passed to string.replace(re[t.HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0-0\n\n\nvar hyphenReplace = function hyphenReplace(incPr) {\n  return function ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {\n    if (isX(fM)) {\n      from = '';\n    } else if (isX(fm)) {\n      from = \">=\".concat(fM, \".0.0\").concat(incPr ? '-0' : '');\n    } else if (isX(fp)) {\n      from = \">=\".concat(fM, \".\").concat(fm, \".0\").concat(incPr ? '-0' : '');\n    } else if (fpr) {\n      from = \">=\".concat(from);\n    } else {\n      from = \">=\".concat(from).concat(incPr ? '-0' : '');\n    }\n\n    if (isX(tM)) {\n      to = '';\n    } else if (isX(tm)) {\n      to = \"<\".concat(+tM + 1, \".0.0-0\");\n    } else if (isX(tp)) {\n      to = \"<\".concat(tM, \".\").concat(+tm + 1, \".0-0\");\n    } else if (tpr) {\n      to = \"<=\".concat(tM, \".\").concat(tm, \".\").concat(tp, \"-\").concat(tpr);\n    } else if (incPr) {\n      to = \"<\".concat(tM, \".\").concat(tm, \".\").concat(+tp + 1, \"-0\");\n    } else {\n      to = \"<=\".concat(to);\n    }\n\n    return \"\".concat(from, \" \").concat(to).trim();\n  };\n};\n\nvar testSet = function testSet(set, version, options) {\n  for (var i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false;\n    }\n  }\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (var _i = 0; _i < set.length; _i++) {\n      debug(set[_i].semver);\n\n      if (set[_i].semver === Comparator.ANY) {\n        continue;\n      }\n\n      if (set[_i].semver.prerelease.length > 0) {\n        var allowed = set[_i].semver;\n\n        if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {\n          return true;\n        }\n      }\n    } // Version has a -pre, but it's not one of the ones we like.\n\n\n    return false;\n  }\n\n  return true;\n};","map":null,"metadata":{},"sourceType":"script"}