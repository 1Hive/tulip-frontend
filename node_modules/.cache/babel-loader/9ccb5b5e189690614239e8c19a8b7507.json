{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar dagPB = require('ipld-dag-pb');\n\nvar DAGNode = dagPB.DAGNode;\nvar DAGLink = dagPB.DAGLink;\n\nvar mh = require('multihashes');\n\nvar multicodec = require('multicodec');\n\nvar _require = require('../../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nvar _require2 = require('buffer'),\n    Buffer = _require2.Buffer;\n\nfunction parseBuffer(buf, encoding) {\n  switch (encoding) {\n    case 'json':\n      return parseJSONBuffer(buf);\n\n    case 'protobuf':\n      return parseProtoBuffer(buf);\n\n    default:\n      throw new Error(\"unkown encoding: \".concat(encoding));\n  }\n}\n\nfunction parseJSONBuffer(buf) {\n  var data;\n  var links;\n\n  try {\n    var parsed = JSON.parse(buf.toString());\n    links = (parsed.Links || []).map(function (link) {\n      return new DAGLink(link.Name || link.name, link.Size || link.size, mh.fromB58String(link.Hash || link.hash || link.multihash));\n    });\n    data = Buffer.from(parsed.Data);\n  } catch (err) {\n    throw new Error('failed to parse JSON: ' + err);\n  }\n\n  return new DAGNode(data, links);\n}\n\nfunction parseProtoBuffer(buf) {\n  return dagPB.util.deserialize(buf);\n}\n\nmodule.exports = function (_ref) {\n  var ipld = _ref.ipld,\n      gcLock = _ref.gcLock,\n      preload = _ref.preload;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(obj, options) {\n      var encoding, node, release, cid;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = options || {};\n              encoding = options.enc;\n\n              if (!Buffer.isBuffer(obj)) {\n                _context.next = 12;\n                break;\n              }\n\n              if (!encoding) {\n                _context.next = 9;\n                break;\n              }\n\n              _context.next = 6;\n              return parseBuffer(obj, encoding);\n\n            case 6:\n              node = _context.sent;\n              _context.next = 10;\n              break;\n\n            case 9:\n              node = new DAGNode(obj);\n\n            case 10:\n              _context.next = 21;\n              break;\n\n            case 12:\n              if (!DAGNode.isDAGNode(obj)) {\n                _context.next = 16;\n                break;\n              }\n\n              // already a dag node\n              node = obj;\n              _context.next = 21;\n              break;\n\n            case 16:\n              if (!(typeof obj === 'object')) {\n                _context.next = 20;\n                break;\n              }\n\n              node = new DAGNode(obj.Data, obj.Links);\n              _context.next = 21;\n              break;\n\n            case 20:\n              throw new Error('obj not recognized');\n\n            case 21:\n              _context.next = 23;\n              return gcLock.readLock();\n\n            case 23:\n              release = _context.sent;\n              _context.prev = 24;\n              _context.next = 27;\n              return ipld.put(node, multicodec.DAG_PB, {\n                cidVersion: 0,\n                hashAlg: multicodec.SHA2_256\n              });\n\n            case 27:\n              cid = _context.sent;\n\n              if (options.preload !== false) {\n                preload(cid);\n              }\n\n              return _context.abrupt(\"return\", cid);\n\n            case 30:\n              _context.prev = 30;\n              release();\n              return _context.finish(30);\n\n            case 33:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[24,, 30, 33]]);\n    }));\n\n    function put(_x, _x2) {\n      return _put.apply(this, arguments);\n    }\n\n    return put;\n  }());\n};","map":null,"metadata":{},"sourceType":"script"}