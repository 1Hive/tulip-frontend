{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = (0, _getPrototypeOf2[\"default\"])(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return (0, _possibleConstructorReturn2[\"default\"])(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar _require = require('did-jwt'),\n    verifyJWT = _require.verifyJWT;\n\nvar _require2 = require('did-resolver'),\n    Resolver = _require2.Resolver;\n\nvar get3IdResolver = require('3id-resolver').getResolver;\n\nvar getMuportResolver = require('muport-did-resolver').getResolver;\n\nvar Room = require('ipfs-pubsub-room');\n\nvar utils = require('./utils');\n\nvar DEFAULT_BACKLOG_LIMIT = 100;\n\nvar GhostThread = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(GhostThread, _EventEmitter);\n\n  var _super = _createSuper(GhostThread);\n\n  function GhostThread(name, _ref) {\n    var _this;\n\n    var ipfs = _ref.ipfs;\n    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    (0, _classCallCheck2[\"default\"])(this, GhostThread);\n    _this = _super.call(this);\n    _this._name = name;\n    _this._spaceName = name.split('.')[2];\n    _this._room = new Room(ipfs, name); // instance of ipfs pubsub room\n\n    _this._ipfs = ipfs;\n\n    if (opts.ghostPinbot) {\n      _this._ghostPinbotPeerId = utils.getPeerIdFromMultiaddr(opts.ghostPinbot);\n    }\n\n    _this._members = {};\n    _this._backlog = new Set(); // set of past messages\n\n    _this._backlogLimit = opts.ghostBacklogLimit || DEFAULT_BACKLOG_LIMIT;\n    _this._filters = opts.ghostFilters || [];\n    var threeIdResolver = get3IdResolver(ipfs, {\n      pin: true\n    });\n    var muportResolver = getMuportResolver(ipfs);\n    _this._resolver = new Resolver(_objectSpread(_objectSpread({}, threeIdResolver), muportResolver));\n\n    _this._room.on('message', /*#__PURE__*/function () {\n      var _ref3 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(_ref2) {\n        var from, data, payload, issuer, verified, passesFilters;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                from = _ref2.from, data = _ref2.data;\n\n                if (!data.toString().startsWith('{')) {\n                  _context.next = 7;\n                  break;\n                } // we got a non signed message (can only be backlog request, or response)\n\n\n                payload = JSON.parse(data);\n\n                if (!(payload.type !== 'request_backlog' && payload.type !== 'backlog_response')) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 5:\n                _context.next = 12;\n                break;\n\n              case 7:\n                _context.next = 9;\n                return _this._verifyData(data);\n\n              case 9:\n                verified = _context.sent;\n                payload = verified.payload;\n                issuer = verified.issuer;\n\n              case 12:\n                // we pass the payload, issuer and peerID (from) to each filter in our filters array and reduce the value to a single boolean\n                // this boolean indicates whether the message passed the filters\n                passesFilters = _this._filters.reduce(function (acc, filter) {\n                  return acc && filter(payload, issuer, from);\n                }, true);\n\n                if (!(payload && passesFilters)) {\n                  _context.next = 25;\n                  break;\n                }\n\n                _context.t0 = payload.type;\n                _context.next = _context.t0 === 'join' ? 17 : _context.t0 === 'request_backlog' ? 19 : _context.t0 === 'backlog_response' ? 21 : 24;\n                break;\n\n              case 17:\n                _this._userJoined(issuer, from);\n\n                return _context.abrupt(\"break\", 25);\n\n              case 19:\n                _this.getPosts(_this._backlogLimit).then(function (posts) {\n                  return _this._sendDirect({\n                    type: 'backlog_response',\n                    message: posts\n                  }, from, true);\n                });\n\n                return _context.abrupt(\"break\", 25);\n\n              case 21:\n                payload.message.map(function (msg) {\n                  _this._backlog.add(JSON.stringify(msg));\n                });\n\n                _this.emit('backlog-received', {\n                  type: 'backlog',\n                  author: issuer,\n                  message: payload.message,\n                  timestamp: payload.iat\n                });\n\n                return _context.abrupt(\"break\", 25);\n\n              case 24:\n                _this._messageReceived(payload);\n\n              case 25:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    _this._room.on('peer joined', /*#__PURE__*/function () {\n      var _ref4 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2(peer) {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _this._announce(peer);\n\n              case 2:\n                _context2.next = 4;\n                return _this._requestBacklog(peer);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }());\n\n    _this._room.on('peer left', function (peer) {\n      return _this._userLeft(peer);\n    });\n\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(GhostThread, [{\n    key: \"_set3id\",\n    value: function _set3id(threeId) {\n      var _this2 = this;\n\n      this._3id = threeId; // announce to other peers that we are online\n\n      this.listMembers().then(function (members) {\n        _this2._room.getPeers().map(function (id) {\n          _this2._announce(id);\n        });\n      });\n    }\n    /**\n     * Get a list of users online\n     *\n     * @return    {Array<String>}      users online\n     */\n\n  }, {\n    key: \"listMembers\",\n    value: function () {\n      var _listMembers = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3() {\n        var _this3 = this;\n\n        var members;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                members = Object.keys(this._members).filter(function (id) {\n                  return !id.startsWith('Qm');\n                });\n\n                if (this._ghostPinbotPeerId) {\n                  // exclude Ghost Pinbot\n                  members = members.filter(function (id) {\n                    return id !== _this3._ghostPinbotPeerId;\n                  });\n                }\n\n                return _context3.abrupt(\"return\", members);\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function listMembers() {\n        return _listMembers.apply(this, arguments);\n      }\n\n      return listMembers;\n    }()\n    /**\n     * Get a peerId's corresponding 3ID\n     *\n     * @param     {String}      did               The DID of the user\n     * @return    {String}      ipfs peer id\n     */\n\n  }, {\n    key: \"_threeIdToPeerId\",\n    value: function _threeIdToPeerId(did) {\n      return this._members[did];\n    }\n    /**\n     * Get backlog of all past messages\n     *\n     * @return    {Array<Object>}      users online\n     */\n\n  }, {\n    key: \"getPosts\",\n    value: function () {\n      var _getPosts = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4() {\n        var num,\n            posts,\n            _args4 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                num = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : 0;\n                posts = (0, _toConsumableArray2[\"default\"])(this._backlog).map(function (msg) {\n                  return JSON.parse(msg);\n                }).sort(function (p1, p2) {\n                  return p1.timestamp - p2.timestamp;\n                }).slice(-num);\n                return _context4.abrupt(\"return\", posts);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getPosts() {\n        return _getPosts.apply(this, arguments);\n      }\n\n      return getPosts;\n    }()\n    /**\n     * Announce entry in chat and share our 3id and peerID\n     *\n     * @param     {String}      to              The PeerID of a user (optional)\n     */\n\n  }, {\n    key: \"_announce\",\n    value: function () {\n      var _announce2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee5(to) {\n        return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!this._3id) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                if (to) {\n                  _context5.next = 6;\n                  break;\n                }\n\n                _context5.next = 4;\n                return this._broadcast({\n                  type: 'join'\n                });\n\n              case 4:\n                _context5.next = 8;\n                break;\n\n              case 6:\n                _context5.next = 8;\n                return this._sendDirect({\n                  type: 'join'\n                }, to);\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function _announce(_x3) {\n        return _announce2.apply(this, arguments);\n      }\n\n      return _announce;\n    }()\n    /**\n     * Post a message to the thread\n     *\n     * @param     {Object}    message                 The message\n     * @param     {String}    to                      PeerID to send the message to (optional)\n     */\n\n  }, {\n    key: \"post\",\n    value: function () {\n      var _post = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee6(message, to) {\n        return _regenerator[\"default\"].wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (to) {\n                  _context6.next = 5;\n                  break;\n                }\n\n                _context6.next = 3;\n                return this._broadcast({\n                  type: 'chat',\n                  message: message\n                });\n\n              case 3:\n                _context6.next = 7;\n                break;\n\n              case 5:\n                _context6.next = 7;\n                return this._sendDirect({\n                  type: 'chat',\n                  message: message\n                }, to);\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function post(_x4, _x5) {\n        return _post.apply(this, arguments);\n      }\n\n      return post;\n    }()\n  }, {\n    key: \"deletePost\",\n    value: function () {\n      var _deletePost = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee7(hash) {\n        return _regenerator[\"default\"].wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                throw new Error('Not possible to delete post in Ghost Thread');\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function deletePost(_x6) {\n        return _deletePost.apply(this, arguments);\n      }\n\n      return deletePost;\n    }()\n  }, {\n    key: \"addModerator\",\n    value: function () {\n      var _addModerator = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee8(id) {\n        return _regenerator[\"default\"].wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                throw new Error('Not possible to add moderator in Ghost Thread');\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function addModerator(_x7) {\n        return _addModerator.apply(this, arguments);\n      }\n\n      return addModerator;\n    }()\n  }, {\n    key: \"listModerators\",\n    value: function () {\n      var _listModerators = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee9() {\n        return _regenerator[\"default\"].wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                throw new Error('Not possible to list moderators in Ghost Thread');\n\n              case 1:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }));\n\n      function listModerators() {\n        return _listModerators.apply(this, arguments);\n      }\n\n      return listModerators;\n    }()\n  }, {\n    key: \"addMember\",\n    value: function () {\n      var _addMember = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee10(id) {\n        return _regenerator[\"default\"].wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                throw new Error('Not possible to add member in Ghost Thread');\n\n              case 1:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10);\n      }));\n\n      function addMember(_x8) {\n        return _addMember.apply(this, arguments);\n      }\n\n      return addMember;\n    }()\n    /**\n     * Request a backlog of past messages from peers in the chat\n     *\n     * @param     {String}      to              The PeerID of a user (optional)\n     */\n\n  }, {\n    key: \"_requestBacklog\",\n    value: function () {\n      var _requestBacklog2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee11(to) {\n        return _regenerator[\"default\"].wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                if (to) {\n                  _context11.next = 5;\n                  break;\n                }\n\n                _context11.next = 3;\n                return this._broadcast({\n                  type: 'request_backlog'\n                });\n\n              case 3:\n                _context11.next = 7;\n                break;\n\n              case 5:\n                _context11.next = 7;\n                return this._sendDirect({\n                  type: 'request_backlog'\n                }, to, true);\n\n              case 7:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function _requestBacklog(_x9) {\n        return _requestBacklog2.apply(this, arguments);\n      }\n\n      return _requestBacklog;\n    }()\n    /**\n     * Leave the chat\n     *\n     */\n\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee12() {\n        return _regenerator[\"default\"].wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this._room.leave();\n\n              case 2:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function close() {\n        return _close.apply(this, arguments);\n      }\n\n      return close;\n    }()\n    /**\n     * Broadcast a message to peers in the room\n     *\n     * @param     {Object}    message                 The message\n     */\n\n  }, {\n    key: \"_broadcast\",\n    value: function () {\n      var _broadcast2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee13(message, noSignature) {\n        var payload;\n        return _regenerator[\"default\"].wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                if (!(!this._3id ? !noSignature : false)) {\n                  _context13.next = 2;\n                  break;\n                }\n\n                throw new Error('Can not send message if not authenticated');\n\n              case 2:\n                if (!noSignature) {\n                  _context13.next = 6;\n                  break;\n                }\n\n                _context13.t0 = JSON.stringify(message);\n                _context13.next = 9;\n                break;\n\n              case 6:\n                _context13.next = 8;\n                return this._3id.signJWT(message);\n\n              case 8:\n                _context13.t0 = _context13.sent;\n\n              case 9:\n                payload = _context13.t0;\n\n                this._room.broadcast(payload);\n\n              case 11:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function _broadcast(_x10, _x11) {\n        return _broadcast2.apply(this, arguments);\n      }\n\n      return _broadcast;\n    }()\n    /**\n     * Send a direct message to a peer\n     *\n     * @param     {Object}    message             The message\n     * @param     {String}    to                  The PeerID or 3ID of the receiver\n     */\n\n  }, {\n    key: \"_sendDirect\",\n    value: function () {\n      var _sendDirect2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee14(message, to, noSignature) {\n        var payload;\n        return _regenerator[\"default\"].wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                if (!(!this._3id ? !noSignature : false)) {\n                  _context14.next = 2;\n                  break;\n                }\n\n                throw new Error('Can not send message if not authenticated');\n\n              case 2:\n                if (!noSignature) {\n                  _context14.next = 6;\n                  break;\n                }\n\n                _context14.t0 = JSON.stringify(message);\n                _context14.next = 9;\n                break;\n\n              case 6:\n                _context14.next = 8;\n                return this._3id.signJWT(message);\n\n              case 8:\n                _context14.t0 = _context14.sent;\n\n              case 9:\n                payload = _context14.t0;\n                to.startsWith('Qm') ? this._room.sendTo(to, payload) : this._room.sendTo(this._threeIdToPeerId(to), payload);\n\n              case 11:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function _sendDirect(_x12, _x13, _x14) {\n        return _sendDirect2.apply(this, arguments);\n      }\n\n      return _sendDirect;\n    }()\n    /**\n     * Register a function to be called after new updates\n     * have been received from the network or locally.\n     *\n     * @param     {Function}  updateFn               The function that will get called\n     */\n\n  }, {\n    key: \"onUpdate\",\n    value: function onUpdate(updateFn) {\n      this.removeAllListeners('message');\n      this.removeAllListeners('backlog-received');\n      this.on('message', updateFn);\n      this.on('backlog-received', updateFn);\n    }\n    /**\n     * Register a function to be called after new capabilities\n     * have been received from the network or locally.\n     *\n     * @param     {Function}  updateFn               The function that will get called\n     */\n\n  }, {\n    key: \"onNewCapabilities\",\n    value: function onNewCapabilities(updateFn) {\n      this.removeAllListeners('user-joined');\n      this.removeAllListeners('user-left');\n      this.on('user-joined', updateFn);\n      this.on('user-left', updateFn);\n    }\n    /**\n     * Handler function for users joining\n     *\n     * @param     {String}    did                The DID of the user\n     * @param     {Object}    peerID             The peerID of the user\n     */\n\n  }, {\n    key: \"_userJoined\",\n    value: function () {\n      var _userJoined2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee15(did, peerID) {\n        var members;\n        return _regenerator[\"default\"].wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this.listMembers();\n\n              case 2:\n                members = _context15.sent;\n\n                if (!members.includes(did) && (!this._3id || this._3id.DID !== did)) {\n                  this._members[did] = peerID;\n                  this._members[peerID] = did;\n                  this.emit('user-joined', 'joined', did, peerID);\n                }\n\n              case 4:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function _userJoined(_x15, _x16) {\n        return _userJoined2.apply(this, arguments);\n      }\n\n      return _userJoined;\n    }()\n    /**\n     * Handler function for users leaving\n     *\n     * @param     {String}    peerID              The peerID of the user\n     */\n\n  }, {\n    key: \"_userLeft\",\n    value: function () {\n      var _userLeft2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee16(peerID) {\n        var did;\n        return _regenerator[\"default\"].wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                did = this._members[peerID];\n                delete this._members[did];\n                delete this._members[peerID];\n                this.emit('user-left', 'left', did, peerID);\n\n              case 4:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function _userLeft(_x17) {\n        return _userLeft2.apply(this, arguments);\n      }\n\n      return _userLeft;\n    }()\n    /**\n     * Handler function for received messages\n     *\n     * @param     {String}    issuer              The issuer of the message\n     * @param     {Object}    payload             The payload of the message\n     */\n\n  }, {\n    key: \"_messageReceived\",\n    value: function () {\n      var _messageReceived2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee17(payload) {\n        var type, message, author, timestamp, postId;\n        return _regenerator[\"default\"].wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                type = payload.type, message = payload.message, author = payload.iss, timestamp = payload.iat, postId = payload.postId;\n\n                this._backlog.add(JSON.stringify({\n                  type: type,\n                  author: author,\n                  message: message,\n                  timestamp: timestamp,\n                  postId: postId\n                }));\n\n                this.emit('message', {\n                  type: type,\n                  author: author,\n                  message: message,\n                  timestamp: timestamp,\n                  postId: postId\n                });\n\n              case 3:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function _messageReceived(_x18) {\n        return _messageReceived2.apply(this, arguments);\n      }\n\n      return _messageReceived;\n    }()\n    /**\n     * Verifies the data received\n     *\n     * @param     {Buffer}    data                A buffer of the jwt\n     * @return    {JWT}                           A verified JWT with our payload and issuer\n     */\n\n  }, {\n    key: \"_verifyData\",\n    value: function () {\n      var _verifyData2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee18(data) {\n        var jwt, cidPromise, verified;\n        return _regenerator[\"default\"].wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                jwt = data.toString();\n                cidPromise = this._ipfs.dag.put(jwt);\n                _context18.prev = 2;\n                _context18.next = 5;\n                return verifyJWT(jwt, {\n                  resolver: this._resolver\n                });\n\n              case 5:\n                verified = _context18.sent;\n                _context18.next = 8;\n                return cidPromise;\n\n              case 8:\n                verified.payload.postId = _context18.sent.toString();\n                return _context18.abrupt(\"return\", verified);\n\n              case 12:\n                _context18.prev = 12;\n                _context18.t0 = _context18[\"catch\"](2);\n                console.log(_context18.t0);\n\n              case 15:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this, [[2, 12]]);\n      }));\n\n      function _verifyData(_x19) {\n        return _verifyData2.apply(this, arguments);\n      }\n\n      return _verifyData;\n    }()\n  }, {\n    key: \"isGhost\",\n    get: function get() {\n      return true;\n    }\n  }]);\n  return GhostThread;\n}(EventEmitter);\n\nmodule.exports = GhostThread;","map":null,"metadata":{},"sourceType":"script"}