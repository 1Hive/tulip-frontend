{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar DOC_PATH = '/.well-known/did.json';\n\nfunction get(url) {\n  return new Promise(function (resolve, reject) {\n    // declare XMLHttpRequest in here so it can be mocked for tests\n    var XMLHttpRequest = typeof window !== 'undefined' ? window.XMLHttpRequest : require('xmlhttprequest').XMLHttpRequest;\n    var request = new XMLHttpRequest();\n    request.open('GET', url);\n\n    request.onreadystatechange = function () {\n      if (!request || request.readyState !== 4) return;\n\n      if (request.status === 200) {\n        resolve(request.responseText);\n      } else {\n        reject(new Error((\"Invalid http response status \" + request.status + \" \" + request.responseText).trim()));\n      }\n    };\n\n    request.setRequestHeader('accept', 'application/json');\n    request.send();\n  });\n}\n\nfunction getResolver() {\n  function resolve(did, parsed) {\n    return __awaiter(this, void 0, void 0, function () {\n      var url, response, error_1, data, hasContext, docIdMatchesDid, docHasPublicKey;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            url = \"https://\" + parsed.id + DOC_PATH;\n            response = null;\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , get(url)];\n\n          case 2:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_1 = _a.sent();\n            throw new Error(\"DID must resolve to a valid https URL: \" + error_1.message);\n\n          case 4:\n            data = null;\n\n            try {\n              data = JSON.parse(response);\n            } catch (error) {\n              throw new Error('DID must resolve to a JSON document');\n            }\n\n            hasContext = data['@context'] === 'https://w3id.org/did/v1';\n            if (!hasContext) throw new Error('DID document missing context');\n            docIdMatchesDid = data.id === did;\n            if (!docIdMatchesDid) throw new Error('DID document id does not match requested did');\n            docHasPublicKey = Array.isArray(data.publicKey) && data.publicKey.length > 0;\n            if (!docHasPublicKey) throw new Error('DID document has no public keys');\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  }\n\n  return {\n    'https': resolve\n  };\n}\n\nexports.default = getResolver;","map":null,"metadata":{},"sourceType":"script"}