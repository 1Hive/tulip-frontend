{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nvar isTypedArray = require('is-typedarray').strict;\n\nconst secp256k1 = require('secp256k1');\n\nconst sha = require('multihashing-async/src/sha');\n\nconst HASH_ALGORITHM = 'sha2-256';\n\nfunction typedArrayTobuffer(arr) {\n  if (isTypedArray(arr)) {\n    // To avoid a copy, use the typed array's underlying ArrayBuffer to back new Buffer\n    var buf = Buffer.from(arr.buffer);\n\n    if (arr.byteLength !== arr.buffer.byteLength) {\n      // Respect the \"view\", i.e. byteOffset and byteLength, without doing a copy\n      buf = buf.slice(arr.byteOffset, arr.byteOffset + arr.byteLength);\n    }\n\n    return buf;\n  } else {\n    // Pass through all other types to `Buffer.from`\n    return Buffer.from(arr);\n  }\n}\n\nmodule.exports = randomBytes => {\n  const privateKeyLength = 32;\n\n  function generateKey() {\n    let privateKey;\n\n    do {\n      privateKey = randomBytes(32);\n    } while (!secp256k1.privateKeyVerify(privateKey));\n\n    return privateKey;\n  }\n\n  async function hashAndSign(key, msg) {\n    const digest = await sha.digest(msg, HASH_ALGORITHM);\n    const sig = secp256k1.ecdsaSign(digest, key);\n    return typedArrayTobuffer(secp256k1.signatureExport(sig.signature));\n  }\n\n  async function hashAndVerify(key, sig, msg) {\n    const digest = await sha.digest(msg, HASH_ALGORITHM);\n    sig = typedArrayTobuffer(secp256k1.signatureImport(sig));\n    return secp256k1.ecdsaVerify(sig, digest, key);\n  }\n\n  function compressPublicKey(key) {\n    if (!secp256k1.publicKeyVerify(key)) {\n      throw new Error('Invalid public key');\n    }\n\n    return typedArrayTobuffer(secp256k1.publicKeyConvert(key, true));\n  }\n\n  function decompressPublicKey(key) {\n    return typedArrayTobuffer(secp256k1.publicKeyConvert(key, false));\n  }\n\n  function validatePrivateKey(key) {\n    if (!secp256k1.privateKeyVerify(key)) {\n      throw new Error('Invalid private key');\n    }\n  }\n\n  function validatePublicKey(key) {\n    if (!secp256k1.publicKeyVerify(key)) {\n      throw new Error('Invalid public key');\n    }\n  }\n\n  function computePublicKey(privateKey) {\n    validatePrivateKey(privateKey);\n    return typedArrayTobuffer(secp256k1.publicKeyCreate(privateKey));\n  }\n\n  return {\n    generateKey,\n    privateKeyLength,\n    hashAndSign,\n    hashAndVerify,\n    compressPublicKey,\n    decompressPublicKey,\n    validatePrivateKey,\n    validatePublicKey,\n    computePublicKey\n  };\n};","map":null,"metadata":{},"sourceType":"script"}