{"ast":null,"code":"import { _ as _slicedToArray } from './slicedToArray-ad07b557.js';\nimport './unsupportedIterableToArray-aef68344.js';\nimport 'react';\nimport './_commonjsHelpers-97e6d7b1.js';\nimport './toConsumableArray-07f01111.js';\nimport './getPrototypeOf-97db713a.js';\nimport './color.js';\nimport './components.js';\nimport './contains-component.js';\nimport './css.js';\nimport './dayjs.min-e57fb69a.js';\nimport './date.js';\nimport './miscellaneous.js';\nimport { warnOnce, warn } from './environment.js';\nimport './font.js';\nimport './math-e6d0e93a.js';\nimport './characters.js';\nimport './format.js';\nimport './keycodes.js';\nimport './url.js';\nimport './web3.js';\nimport aragon from './aragon.js';\nvar THEME_NAME = 'Aragon UI';\nvar THEME_DARK_NAME = 'Aragon UI Dark';\nvar BRAND_NAME = 'Aragon Brand'; // Name of the group a given palette belong to\n\nvar getGroupName = function getGroupName(name) {\n  if (name === THEME_NAME) return 'theme';\n  if (name === THEME_DARK_NAME) return 'themeDark';\n  if (name === BRAND_NAME) return 'brand';\n  return 'colors';\n}; // Resolve a single color\n\n\nvar resolveColor = function resolveColor(value, palettes) {\n  // already resolved color\n  if (!value.startsWith('=')) {\n    return value;\n  }\n\n  var _value$slice$split = value.slice(1).split('.'),\n      _value$slice$split2 = _slicedToArray(_value$slice$split, 2),\n      paletteName = _value$slice$split2[0],\n      key = _value$slice$split2[1];\n\n  var color = palettes[paletteName] && palettes[paletteName][key];\n\n  if (!color) {\n    throw new Error(\"resolveColor: \".concat(value, \" doesn\\u2019t seem to exist\"));\n  } // follow the references until we find one\n\n\n  if (color.startsWith('=')) {\n    return resolveColor(color, palettes);\n  }\n\n  return color;\n}; // Resolve all the colors in a palette\n\n\nvar resolveColors = function resolveColors(palette, palettes) {\n  return Object.entries(palette).reduce(function (pal, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        name = _ref2[0],\n        value = _ref2[1];\n\n    if (typeof value === 'string') {\n      pal[name] = resolveColor(value, palettes);\n    }\n\n    return pal;\n  }, {});\n}; // Prepare groups from the palettes: theme, themeDark, brand and colors.\n\n\nvar generateGroups = function generateGroups(palettes) {\n  return Object.entries(palettes).reduce(function (groups, _ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        paletteName = _ref4[0],\n        palette = _ref4[1];\n\n    var groupName = getGroupName(paletteName);\n\n    if (groupName === 'colors') {\n      groups.colors[paletteName] = resolveColors(palette, palettes);\n    } else {\n      groups[groupName] = resolveColors(palette, palettes);\n    }\n\n    return groups;\n  }, {\n    colors: {}\n  });\n}; // Deprecate any access to the palettes\n\n\nvar _Object$fromEntries = Object.fromEntries(Object.entries(generateGroups(aragon)).map(function (_ref5) {\n  var _ref6 = _slicedToArray(_ref5, 2),\n      name = _ref6[0],\n      group = _ref6[1];\n\n  return [name, new Proxy(group, {\n    get: function get(group, colorName) {\n      if (group[colorName]) {\n        warnOnce(\"theme-legacy:\".concat(name, \".\").concat(colorName), \"\".concat(name, \".\").concat(colorName, \" was accessed but \").concat(name, \" will be removed soon, \") + \"please use useTheme() instead.\");\n      } else {\n        warn(\"\".concat(name, \".\").concat(colorName, \" doesn\\u2019t exist. \").concat(name, \" will be removed soon, \") + \"please use useTheme() instead.\");\n      }\n\n      return group[colorName];\n    }\n  })];\n})),\n    themeDark = _Object$fromEntries.themeDark,\n    theme = _Object$fromEntries.theme,\n    brand = _Object$fromEntries.brand,\n    colors = _Object$fromEntries.colors; // TODO: show a deprecating warning when any of these colors get accessed once.\n\n\nexport { brand, colors, theme, themeDark };","map":null,"metadata":{},"sourceType":"module"}