{"ast":null,"code":"import { getPointCenterIfoAddress } from 'utils/addressHelpers';\nimport { getContract } from 'utils/web3';\nimport pointCenterIfo from 'config/abi/pointCenterIfo.json';\nimport ifosList from 'config/constants/ifo';\nimport { campaignMap } from 'config/constants/campaigns';\nimport makeBatchRequest from './makeBatchRequest';\nexport const getPointCenterClaimContract = () => {\n  return getContract(pointCenterIfo, getPointCenterIfoAddress());\n};\nexport const getAchievementTitle = campaign => {\n  switch (campaign.type) {\n    case 'ifo':\n      return {\n        id: 999,\n        fallback: `IFO Shopper: ${campaign.title}`,\n        data: {\n          name: campaign.title\n        }\n      };\n\n    default:\n      return campaign.title;\n  }\n};\nexport const getAchievementDescription = campaign => {\n  switch (campaign.type) {\n    case 'ifo':\n      return {\n        id: 999,\n        fallback: `Committed more than $5 worth of LP in the ${campaign.title} IFO`,\n        data: {\n          name: campaign.title\n        }\n      };\n\n    default:\n      return campaign.description;\n  }\n};\n/**\n * Checks if a wallet is eligble to claim points from valid IFO's\n */\n\nexport const getClaimableIfoData = async account => {\n  const ifoCampaigns = ifosList.filter(ifoItem => ifoItem.campaignId !== undefined);\n  const ifoCampaignAddresses = ifoCampaigns.map(ifoItem => ifoItem.address);\n  const pointCenterContract = getPointCenterClaimContract(); // Returns the claim status of every IFO with a campaign ID\n\n  const claimStatuses = await pointCenterContract.methods.checkClaimStatuses(account, ifoCampaignAddresses).call(); // Get IFO data for all IFO's that are eligible to claim\n\n  const claimableIfoData = await makeBatchRequest(claimStatuses.reduce((accum, claimStatus, index) => {\n    if (claimStatus === true) {\n      return [...accum, pointCenterContract.methods.ifos(ifoCampaignAddresses[index]).call];\n    }\n\n    return accum;\n  }, [])); // Transform response to an Achievement\n\n  return claimableIfoData.reduce((accum, claimableIfoDataItem) => {\n    if (!campaignMap.has(claimableIfoDataItem.campaignId)) {\n      return accum;\n    }\n\n    const campaignMeta = campaignMap.get(claimableIfoDataItem.campaignId);\n    const {\n      address\n    } = ifoCampaigns.find(ifoCampaign => ifoCampaign.campaignId === claimableIfoDataItem.campaignId);\n    return [...accum, {\n      address,\n      id: claimableIfoDataItem.campaignId,\n      type: 'ifo',\n      title: getAchievementTitle(campaignMeta),\n      description: getAchievementDescription(campaignMeta),\n      badge: campaignMeta.badge,\n      points: Number(claimableIfoDataItem.numberPoints)\n    }];\n  }, []);\n};","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/utils/achievements.ts"],"names":["getPointCenterIfoAddress","getContract","pointCenterIfo","ifosList","campaignMap","makeBatchRequest","getPointCenterClaimContract","getAchievementTitle","campaign","type","id","fallback","title","data","name","getAchievementDescription","description","getClaimableIfoData","account","ifoCampaigns","filter","ifoItem","campaignId","undefined","ifoCampaignAddresses","map","address","pointCenterContract","claimStatuses","methods","checkClaimStatuses","call","claimableIfoData","reduce","accum","claimStatus","index","ifos","claimableIfoDataItem","has","campaignMeta","get","find","ifoCampaign","badge","points","Number","numberPoints"],"mappings":"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","sourcesContent":["import { Campaign } from 'config/constants/types'\nimport { getPointCenterIfoAddress } from 'utils/addressHelpers'\nimport { getContract } from 'utils/web3'\nimport pointCenterIfo from 'config/abi/pointCenterIfo.json'\nimport ifosList from 'config/constants/ifo'\nimport { campaignMap } from 'config/constants/campaigns'\nimport { Achievement, TranslatableText } from 'state/types'\nimport makeBatchRequest from './makeBatchRequest'\n\ninterface IfoMapResponse {\n  thresholdToClaim: string\n  campaignId: string\n  numberPoints: string\n}\n\nexport const getPointCenterClaimContract = () => {\n  return getContract(pointCenterIfo, getPointCenterIfoAddress())\n}\n\nexport const getAchievementTitle = (campaign: Campaign): TranslatableText => {\n  switch (campaign.type) {\n    case 'ifo':\n      return {\n        id: 999,\n        fallback: `IFO Shopper: ${campaign.title}`,\n        data: {\n          name: campaign.title as string,\n        },\n      }\n    default:\n      return campaign.title\n  }\n}\n\nexport const getAchievementDescription = (campaign: Campaign): TranslatableText => {\n  switch (campaign.type) {\n    case 'ifo':\n      return {\n        id: 999,\n        fallback: `Committed more than $5 worth of LP in the ${campaign.title} IFO`,\n        data: {\n          name: campaign.title as string,\n        },\n      }\n    default:\n      return campaign.description\n  }\n}\n\n/**\n * Checks if a wallet is eligble to claim points from valid IFO's\n */\nexport const getClaimableIfoData = async (account: string): Promise<Achievement[]> => {\n  const ifoCampaigns = ifosList.filter((ifoItem) => ifoItem.campaignId !== undefined)\n  const ifoCampaignAddresses = ifoCampaigns.map((ifoItem) => ifoItem.address)\n  const pointCenterContract = getPointCenterClaimContract()\n\n  // Returns the claim status of every IFO with a campaign ID\n  const claimStatuses = (await pointCenterContract.methods\n    .checkClaimStatuses(account, ifoCampaignAddresses)\n    .call()) as boolean[]\n\n  // Get IFO data for all IFO's that are eligible to claim\n  const claimableIfoData = (await makeBatchRequest(\n    claimStatuses.reduce((accum, claimStatus, index) => {\n      if (claimStatus === true) {\n        return [...accum, pointCenterContract.methods.ifos(ifoCampaignAddresses[index]).call]\n      }\n\n      return accum\n    }, []),\n  )) as IfoMapResponse[]\n\n  // Transform response to an Achievement\n  return claimableIfoData.reduce((accum, claimableIfoDataItem) => {\n    if (!campaignMap.has(claimableIfoDataItem.campaignId)) {\n      return accum\n    }\n\n    const campaignMeta = campaignMap.get(claimableIfoDataItem.campaignId)\n    const { address } = ifoCampaigns.find((ifoCampaign) => ifoCampaign.campaignId === claimableIfoDataItem.campaignId)\n\n    return [\n      ...accum,\n      {\n        address,\n        id: claimableIfoDataItem.campaignId,\n        type: 'ifo',\n        title: getAchievementTitle(campaignMeta),\n        description: getAchievementDescription(campaignMeta),\n        badge: campaignMeta.badge,\n        points: Number(claimableIfoDataItem.numberPoints),\n      },\n    ]\n  }, [])\n}\n"]},"metadata":{},"sourceType":"module"}