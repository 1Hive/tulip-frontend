{"ast":null,"code":"import { useEffect, useMemo, useState } from 'react';\nimport { wallet } from 'tulip-data';\nimport { useWallet } from 'use-wallet';\nexport function useWalletData() {\n  const [walletInfo, setWalletInfo] = useState([]);\n  const [poolingInfo, setPoolingInfo] = useState([]);\n  const [isFetchingWallet, setIsFetchingWallet] = useState(false);\n  const [isFetchingPool, setIsFetchingPool] = useState(false);\n  const {\n    account,\n    status\n  } = useWallet();\n  useEffect(() => {\n    let cancelled = false;\n    console.log(status);\n\n    if (!account || status === 'disconnected') {\n      setWalletInfo([]);\n      setPoolingInfo([]);\n      return;\n    }\n\n    const fetchWalletData = async () => {\n      try {\n        setIsFetchingWallet(true);\n        const balances = await wallet.tokenBalances({\n          user_address: account\n        });\n\n        if (!cancelled) {\n          setWalletInfo(balances);\n          return setIsFetchingWallet(false);\n        }\n      } catch (err) {\n        console.error(`Could not fetch wallet data `, err);\n      }\n    };\n\n    const fetchPoolingData = async () => {\n      try {\n        setIsFetchingPool(true);\n        const poolingData = await wallet.poolBalances({\n          user_address: account\n        });\n\n        if (!cancelled) {\n          setPoolingInfo(poolingData);\n          return setIsFetchingPool(false);\n        }\n      } catch (err) {\n        console.error(`Could not fetch wallet data `, err);\n      }\n    };\n\n    fetchWalletData();\n    fetchPoolingData();\n    return () => {\n      cancelled = true;\n    };\n  }, [account, status]);\n  return [walletInfo, poolingInfo, isFetchingWallet || isFetchingPool];\n}\nexport function useNetBalance() {\n  const [walletInfo, poolingInfo, isFetching] = useWalletData();\n  const [assetsList, setAssetsList] = useState([]);\n  return useMemo(() => {\n    let netBalance = 0;\n    let walletBalance = 0;\n    let poolBalance = 0;\n    setAssetsList([]);\n\n    if (!walletInfo || walletInfo.length === 0 || !poolingInfo) {\n      return {\n        walletBalance,\n        poolBalance,\n        netBalance,\n        assetsList,\n        isFetching\n      };\n    }\n\n    walletInfo.map(value => {\n      if (value && parseFloat(value.valueUSD)) {\n        walletBalance = walletBalance + parseFloat(value.valueUSD);\n        setAssetsList(data => [...data, {\n          symbol: value.symbol,\n          name: value.name,\n          balance: value.balance.toFixed(4),\n          price: value.priceUSD.toFixed(2),\n          value: value.valueUSD.toFixed(2),\n          image1: value.logoURI,\n          image2: ''\n        }]);\n      }\n    });\n    poolingInfo.map(value => {\n      if (value && parseFloat(value.valueUSD)) {\n        poolBalance = Number(poolBalance) + parseFloat(value.valueUSD);\n        let symbol = '';\n        let image1 = '';\n        let image2 = '';\n\n        if (value.tokens && value.tokens.length > 1) {\n          value.tokens.map((token, i) => {\n            symbol = i === 0 ? token.symbol + '-' : symbol + token.symbol;\n\n            if (i === 0) {\n              image1 = token.logoURI;\n            } else {\n              image2 = token.logoURI;\n            }\n          });\n        }\n\n        setAssetsList(data => [...data, {\n          symbol,\n          image1,\n          image2,\n          balance: Number(value.balance).toFixed(4),\n          value: Number(value.valueUSD).toFixed(2),\n          price: Number(value.valueUSD / value.balance).toFixed(2),\n          name: 'HoneySwap'\n        }]);\n      }\n    });\n    walletBalance = walletBalance.toFixed(2);\n    poolBalance = poolBalance.toFixed(2);\n    netBalance = parseFloat(Number(walletBalance) + Number(poolBalance) + netBalance).toFixed(2);\n    return {\n      walletBalance,\n      poolBalance,\n      netBalance,\n      assetsList,\n      isFetching\n    };\n  }, [walletInfo, poolingInfo, isFetching]);\n}","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/hooks/useWalletData.js"],"names":["useEffect","useMemo","useState","wallet","useWallet","useWalletData","walletInfo","setWalletInfo","poolingInfo","setPoolingInfo","isFetchingWallet","setIsFetchingWallet","isFetchingPool","setIsFetchingPool","account","status","cancelled","console","log","fetchWalletData","balances","tokenBalances","user_address","err","error","fetchPoolingData","poolingData","poolBalances","useNetBalance","isFetching","assetsList","setAssetsList","netBalance","walletBalance","poolBalance","length","map","value","parseFloat","valueUSD","data","symbol","name","balance","toFixed","price","priceUSD","image1","logoURI","image2","Number","tokens","token","i"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useState } from 'react'\nimport { wallet } from 'tulip-data'\nimport { useWallet } from 'use-wallet'\n\nexport function useWalletData() {\n  const [walletInfo, setWalletInfo] = useState([])\n  const [poolingInfo, setPoolingInfo] = useState([])\n  const [isFetchingWallet, setIsFetchingWallet] = useState(false)\n  const [isFetchingPool, setIsFetchingPool] = useState(false)\n  const { account, status } = useWallet()\n\n  useEffect(() => {\n    let cancelled = false\n    console.log(status)\n    if (!account || status === 'disconnected') {\n      setWalletInfo([])\n      setPoolingInfo([])\n      return\n    }\n\n    const fetchWalletData = async () => {\n      try {\n        setIsFetchingWallet(true)\n        const balances = await wallet.tokenBalances({\n          user_address: account,\n        })\n\n        if (!cancelled) {\n          setWalletInfo(balances)\n          return setIsFetchingWallet(false)\n        }\n      } catch (err) {\n        console.error(`Could not fetch wallet data `, err)\n      }\n    }\n\n    const fetchPoolingData = async () => {\n      try {\n        setIsFetchingPool(true)\n\n        const poolingData = await wallet.poolBalances({\n          user_address: account,\n        })\n\n        if (!cancelled) {\n          setPoolingInfo(poolingData)\n          return setIsFetchingPool(false)\n        }\n      } catch (err) {\n        console.error(`Could not fetch wallet data `, err)\n      }\n    }\n\n    fetchWalletData()\n    fetchPoolingData()\n    return () => {\n      cancelled = true\n    }\n  }, [account, status])\n\n  return [walletInfo, poolingInfo, isFetchingWallet || isFetchingPool]\n}\n\nexport function useNetBalance() {\n  const [walletInfo, poolingInfo, isFetching] = useWalletData()\n  const [assetsList, setAssetsList] = useState([])\n\n  return useMemo(() => {\n    let netBalance = 0\n    let walletBalance = 0\n    let poolBalance = 0\n    setAssetsList([])\n    if (!walletInfo || walletInfo.length === 0 || !poolingInfo) {\n      return { walletBalance, poolBalance, netBalance, assetsList, isFetching }\n    }\n\n    walletInfo.map(value => {\n      if (value && parseFloat(value.valueUSD)) {\n        walletBalance = walletBalance + parseFloat(value.valueUSD)\n        setAssetsList(data => [\n          ...data,\n          {\n            symbol: value.symbol,\n            name: value.name,\n            balance: value.balance.toFixed(4),\n            price: value.priceUSD.toFixed(2),\n            value: value.valueUSD.toFixed(2),\n            image1: value.logoURI,\n            image2: '',\n          },\n        ])\n      }\n    })\n\n    poolingInfo.map(value => {\n      if (value && parseFloat(value.valueUSD)) {\n        poolBalance = Number(poolBalance) + parseFloat(value.valueUSD)\n        let symbol = ''\n        let image1 = ''\n        let image2 = ''\n\n        if (value.tokens && value.tokens.length > 1) {\n          value.tokens.map((token, i) => {\n            symbol = i === 0 ? token.symbol + '-' : symbol + token.symbol\n            if (i === 0) {\n              image1 = token.logoURI\n            } else {\n              image2 = token.logoURI\n            }\n          })\n        }\n\n        setAssetsList(data => [\n          ...data,\n          {\n            symbol,\n            image1,\n            image2,\n            balance: Number(value.balance).toFixed(4),\n            value: Number(value.valueUSD).toFixed(2),\n            price: Number(value.valueUSD / value.balance).toFixed(2),\n            name: 'HoneySwap',\n          },\n        ])\n      }\n    })\n\n    walletBalance = walletBalance.toFixed(2)\n    poolBalance = poolBalance.toFixed(2)\n    netBalance = parseFloat(\n      Number(walletBalance) + Number(poolBalance) + netBalance\n    ).toFixed(2)\n\n    return { walletBalance, poolBalance, netBalance, assetsList, isFetching }\n  }, [walletInfo, poolingInfo, isFetching])\n}\n"]},"metadata":{},"sourceType":"module"}