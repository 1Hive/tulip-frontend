{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar CacheEntry =\n/**\n * @param {String} msgID\n * @param {Array<String>} topics\n *\n * @constructor\n */\nfunction CacheEntry(msgID, topics) {\n  _classCallCheck(this, CacheEntry);\n\n  this.msgID = msgID;\n  this.topics = topics;\n};\n\nvar MessageCache = /*#__PURE__*/function () {\n  /**\n   * @param {Number} gossip\n   * @param {Number} history\n   * @param {msgIdFn} msgIdFn a function that returns message id from a message\n   *\n   * @constructor\n   */\n  function MessageCache(gossip, history, msgIdFn) {\n    _classCallCheck(this, MessageCache);\n\n    /**\n     * @type {Map<string, RPC.Message>}\n     */\n    this.msgs = new Map();\n    /**\n     * @type {Array<Array<CacheEntry>>}\n     */\n\n    this.history = [];\n\n    for (var i = 0; i < history; i++) {\n      this.history[i] = [];\n    }\n    /**\n     * @type {Number}\n     */\n\n\n    this.gossip = gossip;\n    /**\n     * @type {Function}\n     */\n\n    this.msgIdFn = msgIdFn;\n  }\n  /**\n   * Adds a message to the current window and the cache\n   *\n   * @param {rpc.RPC.Message} msg\n   * @returns {void}\n   */\n\n\n  _createClass(MessageCache, [{\n    key: \"put\",\n    value: function put(msg) {\n      var msgID = this.getMsgId(msg);\n      this.msgs.set(msgID, msg);\n      this.history[0].push(new CacheEntry(msgID, msg.topicIDs));\n    }\n    /**\n     * Get message id of message.\n     * @param {rpc.RPC.Message} msg\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getMsgId\",\n    value: function getMsgId(msg) {\n      return this.msgIdFn(msg);\n    }\n    /**\n     * Retrieves a message from the cache by its ID, if it is still present\n     *\n     * @param {String} msgID\n     * @returns {rpc.RPC.Message}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(msgID) {\n      return this.msgs.get(msgID);\n    }\n    /**\n     * Retrieves a list of message IDs for a given topic\n     *\n     * @param {String} topic\n     *\n     * @returns {Array<String>}\n     */\n\n  }, {\n    key: \"getGossipIDs\",\n    value: function getGossipIDs(topic) {\n      var msgIDs = [];\n\n      for (var i = 0; i < this.gossip; i++) {\n        this.history[i].forEach(function (entry) {\n          var _iterator = _createForOfIteratorHelper(entry.topics),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var t = _step.value;\n\n              if (t === topic) {\n                msgIDs.push(entry.msgID);\n                break;\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        });\n      }\n\n      return msgIDs;\n    }\n    /**\n     * Shifts the current window, discarding messages older than this.history.length of the cache\n     *\n     * @returns {void}\n     */\n\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      var _this = this;\n\n      var last = this.history[this.history.length - 1];\n      last.forEach(function (entry) {\n        _this.msgs.delete(entry.msgID);\n      });\n      this.history.pop();\n      this.history.unshift([]);\n    }\n  }]);\n\n  return MessageCache;\n}();\n\nmodule.exports = {\n  CacheEntry: CacheEntry,\n  MessageCache: MessageCache\n};","map":null,"metadata":{},"sourceType":"script"}