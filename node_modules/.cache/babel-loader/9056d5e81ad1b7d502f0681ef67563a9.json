{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar debug = require('debug');\n\nvar log = debug('repo-migrations:repo_mem_lock');\nvar lockFile = 'repo.lock';\nvar LOCKS = {};\n/**\n * Lock the repo in the given dir and for given repo version.\n * @param {int} version\n * @param {string} dir\n * @returns {Promise<Object>}\n */\n\nexports.lock = /*#__PURE__*/function () {\n  var _lock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(version, dir) {\n    var file;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // eslint-disable-line require-await\n            file = dir + '/' + lockFile;\n            log('locking %s', file);\n\n            if (!(LOCKS[file] === true)) {\n              _context.next = 4;\n              break;\n            }\n\n            throw Error(\"There is already present lock for: \".concat(file));\n\n          case 4:\n            LOCKS[file] = true;\n            return _context.abrupt(\"return\", {\n              close: function close() {\n                if (LOCKS[file]) {\n                  log('releasing lock %s', file);\n                  delete LOCKS[file];\n                }\n              }\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  function lock(_x, _x2) {\n    return _lock.apply(this, arguments);\n  }\n\n  return lock;\n}();","map":null,"metadata":{},"sourceType":"script"}