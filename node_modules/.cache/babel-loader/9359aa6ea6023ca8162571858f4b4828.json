{"ast":null,"code":"\"use strict\"; // Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar chacha_1 = require(\"@stablelib/chacha\");\n\nvar poly1305_1 = require(\"@stablelib/poly1305\");\n\nvar wipe_1 = require(\"@stablelib/wipe\");\n\nvar binary_1 = require(\"@stablelib/binary\");\n\nvar constant_time_1 = require(\"@stablelib/constant-time\");\n\nexports.KEY_LENGTH = 32;\nexports.NONCE_LENGTH = 12;\nexports.TAG_LENGTH = 16;\nvar ZEROS = new Uint8Array(16);\n/**\n * ChaCha20-Poly1305 Authenticated Encryption with Associated Data.\n *\n * Defined in RFC7539.\n */\n\nvar ChaCha20Poly1305 =\n/** @class */\nfunction () {\n  /**\n   * Creates a new instance with the given 32-byte key.\n   */\n  function ChaCha20Poly1305(key) {\n    this.nonceLength = exports.NONCE_LENGTH;\n    this.tagLength = exports.TAG_LENGTH;\n\n    if (key.length !== exports.KEY_LENGTH) {\n      throw new Error(\"ChaCha20Poly1305 needs 32-byte key\");\n    } // Copy key.\n\n\n    this._key = new Uint8Array(key);\n  }\n  /**\n   * Encrypts and authenticates plaintext, authenticates associated data,\n   * and returns sealed ciphertext, which includes authentication tag.\n   *\n   * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce\n   * (\"IV\"), or full 16-byte counter (called \"32-bit fixed-common part\")\n   * and nonce.\n   *\n   * If dst is given (it must be the size of plaintext + the size of tag\n   * length) the result will be put into it. Dst and plaintext must not\n   * overlap.\n   */\n\n\n  ChaCha20Poly1305.prototype.seal = function (nonce, plaintext, associatedData, dst) {\n    if (nonce.length > 16) {\n      throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n    } // Allocate space for counter, and set nonce as last bytes of it.\n\n\n    var counter = new Uint8Array(16);\n    counter.set(nonce, counter.length - nonce.length); // Generate authentication key by taking first 32-bytes of stream.\n    // We pass full counter, which has 12-byte nonce and 4-byte block counter,\n    // and it will get incremented after generating the block, which is\n    // exactly what we need: we only use the first 32 bytes of 64-byte\n    // ChaCha block and discard the next 32 bytes.\n\n    var authKey = new Uint8Array(32);\n    chacha_1.stream(this._key, counter, authKey, 4); // Allocate space for sealed ciphertext.\n\n    var resultLength = plaintext.length + this.tagLength;\n    var result;\n\n    if (dst) {\n      if (dst.length !== resultLength) {\n        throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n      }\n\n      result = dst;\n    } else {\n      result = new Uint8Array(resultLength);\n    } // Encrypt plaintext.\n\n\n    chacha_1.streamXOR(this._key, counter, plaintext, result, 4); // Authenticate.\n    // XXX: can \"simplify\" here: pass full result (which is already padded\n    // due to zeroes prepared for tag), and ciphertext length instead of\n    // subarray of result.\n\n    this._authenticate(result.subarray(result.length - this.tagLength, result.length), authKey, result.subarray(0, result.length - this.tagLength), associatedData); // Cleanup.\n\n\n    wipe_1.wipe(counter);\n    return result;\n  };\n  /**\n   * Authenticates sealed ciphertext (which includes authentication tag) and\n   * associated data, decrypts ciphertext and returns decrypted plaintext.\n   *\n   * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce\n   * (\"IV\"), or full 16-byte counter (called \"32-bit fixed-common part\")\n   * and nonce.\n   *\n   * If authentication fails, it returns null.\n   *\n   * If dst is given (it must be of ciphertext length minus tag length),\n   * the result will be put into it. Dst and plaintext must not overlap.\n   */\n\n\n  ChaCha20Poly1305.prototype.open = function (nonce, sealed, associatedData, dst) {\n    if (nonce.length > 16) {\n      throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n    } // Sealed ciphertext should at least contain tag.\n\n\n    if (sealed.length < this.tagLength) {\n      // TODO(dchest): should we throw here instead?\n      return null;\n    } // Allocate space for counter, and set nonce as last bytes of it.\n\n\n    var counter = new Uint8Array(16);\n    counter.set(nonce, counter.length - nonce.length); // Generate authentication key by taking first 32-bytes of stream.\n\n    var authKey = new Uint8Array(32);\n    chacha_1.stream(this._key, counter, authKey, 4); // Authenticate.\n    // XXX: can simplify and avoid allocation: since authenticate()\n    // already allocates tag (from Poly1305.digest(), it can return)\n    // it instead of copying to calculatedTag. But then in seal()\n    // we'll need to copy it.\n\n    var calculatedTag = new Uint8Array(this.tagLength);\n\n    this._authenticate(calculatedTag, authKey, sealed.subarray(0, sealed.length - this.tagLength), associatedData); // Constant-time compare tags and return null if they differ.\n\n\n    if (!constant_time_1.equal(calculatedTag, sealed.subarray(sealed.length - this.tagLength, sealed.length))) {\n      return null;\n    } // Allocate space for decrypted plaintext.\n\n\n    var resultLength = sealed.length - this.tagLength;\n    var result;\n\n    if (dst) {\n      if (dst.length !== resultLength) {\n        throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n      }\n\n      result = dst;\n    } else {\n      result = new Uint8Array(resultLength);\n    } // Decrypt.\n\n\n    chacha_1.streamXOR(this._key, counter, sealed.subarray(0, sealed.length - this.tagLength), result, 4); // Cleanup.\n\n    wipe_1.wipe(counter);\n    return result;\n  };\n\n  ChaCha20Poly1305.prototype.clean = function () {\n    wipe_1.wipe(this._key);\n    return this;\n  };\n\n  ChaCha20Poly1305.prototype._authenticate = function (tagOut, authKey, ciphertext, associatedData) {\n    // Initialize Poly1305 with authKey.\n    var h = new poly1305_1.Poly1305(authKey); // Authenticate padded associated data.\n\n    if (associatedData) {\n      h.update(associatedData);\n\n      if (associatedData.length % 16 > 0) {\n        h.update(ZEROS.subarray(associatedData.length % 16));\n      }\n    } // Authenticate padded ciphertext.\n\n\n    h.update(ciphertext);\n\n    if (ciphertext.length % 16 > 0) {\n      h.update(ZEROS.subarray(ciphertext.length % 16));\n    } // Authenticate length of associated data.\n    // XXX: can avoid allocation here?\n\n\n    var length = new Uint8Array(8);\n\n    if (associatedData) {\n      binary_1.writeUint64LE(associatedData.length, length);\n    }\n\n    h.update(length); // Authenticate length of ciphertext.\n\n    binary_1.writeUint64LE(ciphertext.length, length);\n    h.update(length); // Get tag and copy it into tagOut.\n\n    var tag = h.digest();\n\n    for (var i = 0; i < tag.length; i++) {\n      tagOut[i] = tag[i];\n    } // Cleanup.\n\n\n    h.clean();\n    wipe_1.wipe(tag);\n    wipe_1.wipe(length);\n  };\n\n  return ChaCha20Poly1305;\n}();\n\nexports.ChaCha20Poly1305 = ChaCha20Poly1305;","map":null,"metadata":{},"sourceType":"script"}