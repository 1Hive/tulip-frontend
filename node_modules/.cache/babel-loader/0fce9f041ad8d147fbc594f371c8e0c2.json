{"ast":null,"code":"import _styled5 from \"styled-components\";\nimport _styled4 from \"styled-components\";\nimport _styled3 from \"styled-components\";\nimport _styled2 from \"styled-components\";\nimport _styled from \"styled-components\";\nvar _jsxFileName = \"/Users/fabianmolina/Documents/1hive/tulip-frontend/src/components/Account/AccountPopover.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { GU, Popover, springs, textStyle, useTheme } from '@1hive/1hive-ui';\nimport { Spring, Transition, animated } from 'react-spring/renderprops';\nconst AnimatedDiv = animated.div;\n\nvar _StyledAnimatedDiv2 = _styled(AnimatedDiv).withConfig({\n  displayName: \"AccountPopover___StyledAnimatedDiv2\",\n  componentId: \"sc-1r3lk20-0\"\n})([\"position:\", \";top:0;left:0;right:0;\"], p => p._css7);\n\nvar _StyledAnimatedDiv = _styled(AnimatedDiv).withConfig({\n  displayName: \"AccountPopover___StyledAnimatedDiv\",\n  componentId: \"sc-1r3lk20-1\"\n})([\"position:relative;flex-grow:1;width:100%;overflow:hidden;outline:0;\"]);\n\nvar _StyledPopover = _styled(Popover).withConfig({\n  displayName: \"AccountPopover___StyledPopover\",\n  componentId: \"sc-1r3lk20-2\"\n})([\"width:\", \"px;\"], p => p._css);\n\nvar _StyledSection = _styled(\"section\").withConfig({\n  displayName: \"AccountPopover___StyledSection\",\n  componentId: \"sc-1r3lk20-3\"\n})([\"display:flex;flex-direction:column;overflow:hidden;\"]);\n\nvar _StyledH = _styled(\"h1\").withConfig({\n  displayName: \"AccountPopover___StyledH\",\n  componentId: \"sc-1r3lk20-4\"\n})([\"display:flex;flex-grow:0;flex-shrink:0;align-items:center;height:\", \"px;padding-left:\", \"px;border-bottom:1px solid \", \";color:\", \";\", \";\"], p => p._css2, p => p._css3, p => p._css4, p => p._css5, p => p._css6);\n\nfunction AccountPopover({\n  children,\n  direction,\n  heading,\n  onClose,\n  opener,\n  screenData,\n  screenId,\n  screenKey,\n  visible\n}) {\n  const theme = useTheme();\n  const [animate, setAnimate] = useState(false);\n  const [height, setHeight] = useState(30 * GU);\n  const [measuredHeight, setMeasuredHeight] = useState(true); // Prevents to lose the focus on the popover when a screen leaves while an\n  // element inside is focused (e.g. when clicking on the “disconnect” button).\n\n  const popoverFocusElement = useRef();\n  useEffect(() => {\n    if (popoverFocusElement.current) {\n      popoverFocusElement.current.focus();\n    }\n  }, [screenId]); // Don’t animate the slider until the popover has opened\n\n  useEffect(() => {\n    let timer;\n    setAnimate(false);\n\n    if (visible) {\n      timer = setTimeout(() => {\n        setAnimate(true);\n      }, 0);\n    }\n\n    return () => clearTimeout(timer);\n  }, [visible]);\n  return /*#__PURE__*/React.createElement(_StyledPopover, {\n    closeOnOpenerFocus: true,\n    onClose: onClose,\n    opener: opener,\n    placement: \"bottom-end\",\n    visible: visible,\n    _css: 31 * GU,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(_StyledSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(_StyledH, {\n    _css2: 4 * GU,\n    _css3: 2 * GU,\n    _css4: theme.border,\n    _css5: theme.contentSecondary,\n    _css6: textStyle('label2'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, heading), /*#__PURE__*/React.createElement(Spring, {\n    config: springs.smooth,\n    from: {\n      height: 32 * GU\n    },\n    to: {\n      height\n    },\n    immediate: !animate,\n    native: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, ({\n    height\n  }) => /*#__PURE__*/React.createElement(_StyledAnimatedDiv, {\n    ref: popoverFocusElement,\n    tabIndex: \"0\",\n    style: {\n      height: measuredHeight ? height : 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Transition, {\n    native: true,\n    config: springs.smooth,\n    items: screenData,\n    keys: screenKey,\n    from: {\n      opacity: 0,\n      transform: `translate3d(${3 * GU * direction}px, 0, 0)`\n    },\n    enter: {\n      opacity: 1,\n      transform: `translate3d(0, 0, 0)`\n    },\n    leave: {\n      opacity: 0,\n      transform: `translate3d(${3 * GU * -direction}px, 0, 0)`\n    },\n    immediate: !animate,\n    onRest: (_, status) => {\n      if (status === 'update') {\n        setMeasuredHeight(false);\n      }\n    },\n    onStart: (_, status) => {\n      setMeasuredHeight(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 15\n    }\n  }, screenData => ({\n    opacity,\n    transform\n  }) => /*#__PURE__*/React.createElement(_StyledAnimatedDiv2, {\n    ref: elt => {\n      if (elt) {\n        setHeight(elt.clientHeight);\n      }\n    },\n    style: {\n      opacity,\n      transform\n    },\n    _css7: measuredHeight ? 'absolute' : 'static',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 19\n    }\n  }, children(screenData)))))));\n}\n\nAccountPopover.propTypes = {\n  children: PropTypes.func.isRequired,\n  direction: PropTypes.oneOf([-1, 1]).isRequired,\n  heading: PropTypes.node.isRequired,\n  onClose: PropTypes.func.isRequired,\n  opener: PropTypes.any,\n  screenData: PropTypes.object.isRequired,\n  screenId: PropTypes.string.isRequired,\n  screenKey: PropTypes.func.isRequired,\n  visible: PropTypes.bool.isRequired\n};\nexport default AccountPopover;","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/components/Account/AccountPopover.js"],"names":["React","useState","useEffect","useRef","PropTypes","GU","Popover","springs","textStyle","useTheme","Spring","Transition","animated","AnimatedDiv","div","AccountPopover","children","direction","heading","onClose","opener","screenData","screenId","screenKey","visible","theme","animate","setAnimate","height","setHeight","measuredHeight","setMeasuredHeight","popoverFocusElement","current","focus","timer","setTimeout","clearTimeout","border","contentSecondary","smooth","opacity","transform","_","status","elt","clientHeight","propTypes","func","isRequired","oneOf","node","any","object","string","bool"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { GU, Popover, springs, textStyle, useTheme } from '@1hive/1hive-ui'\r\nimport { Spring, Transition, animated } from 'react-spring/renderprops'\r\n\r\nconst AnimatedDiv = animated.div\r\n\r\nfunction AccountPopover({\r\n  children,\r\n  direction,\r\n  heading,\r\n  onClose,\r\n  opener,\r\n  screenData,\r\n  screenId,\r\n  screenKey,\r\n  visible,\r\n}) {\r\n  const theme = useTheme()\r\n\r\n  const [animate, setAnimate] = useState(false)\r\n  const [height, setHeight] = useState(30 * GU)\r\n  const [measuredHeight, setMeasuredHeight] = useState(true)\r\n\r\n  // Prevents to lose the focus on the popover when a screen leaves while an\r\n  // element inside is focused (e.g. when clicking on the “disconnect” button).\r\n  const popoverFocusElement = useRef()\r\n  useEffect(() => {\r\n    if (popoverFocusElement.current) {\r\n      popoverFocusElement.current.focus()\r\n    }\r\n  }, [screenId])\r\n\r\n  // Don’t animate the slider until the popover has opened\r\n  useEffect(() => {\r\n    let timer\r\n\r\n    setAnimate(false)\r\n\r\n    if (visible) {\r\n      timer = setTimeout(() => {\r\n        setAnimate(true)\r\n      }, 0)\r\n    }\r\n\r\n    return () => clearTimeout(timer)\r\n  }, [visible])\r\n\r\n  return (\r\n    <Popover\r\n      closeOnOpenerFocus\r\n      onClose={onClose}\r\n      opener={opener}\r\n      placement=\"bottom-end\"\r\n      visible={visible}\r\n      css={`\r\n        width: ${31 * GU}px;\r\n      `}\r\n    >\r\n      <section\r\n        css={`\r\n          display: flex;\r\n          flex-direction: column;\r\n          overflow: hidden;\r\n        `}\r\n      >\r\n        <h1\r\n          css={`\r\n            display: flex;\r\n            flex-grow: 0;\r\n            flex-shrink: 0;\r\n            align-items: center;\r\n            height: ${4 * GU}px;\r\n            padding-left: ${2 * GU}px;\r\n            border-bottom: 1px solid ${theme.border};\r\n            color: ${theme.contentSecondary};\r\n            ${textStyle('label2')};\r\n          `}\r\n        >\r\n          {heading}\r\n        </h1>\r\n        <Spring\r\n          config={springs.smooth}\r\n          from={{ height: 32 * GU }}\r\n          to={{ height }}\r\n          immediate={!animate}\r\n          native\r\n        >\r\n          {({ height }) => (\r\n            <AnimatedDiv\r\n              ref={popoverFocusElement}\r\n              tabIndex=\"0\"\r\n              style={{ height: measuredHeight ? height : 'auto' }}\r\n              css={`\r\n                position: relative;\r\n                flex-grow: 1;\r\n                width: 100%;\r\n                overflow: hidden;\r\n                outline: 0;\r\n              `}\r\n            >\r\n              <Transition\r\n                native\r\n                config={springs.smooth}\r\n                items={screenData}\r\n                keys={screenKey}\r\n                from={{\r\n                  opacity: 0,\r\n                  transform: `translate3d(${3 * GU * direction}px, 0, 0)`,\r\n                }}\r\n                enter={{ opacity: 1, transform: `translate3d(0, 0, 0)` }}\r\n                leave={{\r\n                  opacity: 0,\r\n                  transform: `translate3d(${3 * GU * -direction}px, 0, 0)`,\r\n                }}\r\n                immediate={!animate}\r\n                onRest={(_, status) => {\r\n                  if (status === 'update') {\r\n                    setMeasuredHeight(false)\r\n                  }\r\n                }}\r\n                onStart={(_, status) => {\r\n                  setMeasuredHeight(true)\r\n                }}\r\n              >\r\n                {screenData => ({ opacity, transform }) => (\r\n                  <AnimatedDiv\r\n                    ref={elt => {\r\n                      if (elt) {\r\n                        setHeight(elt.clientHeight)\r\n                      }\r\n                    }}\r\n                    style={{ opacity, transform }}\r\n                    css={`\r\n                      position: ${measuredHeight ? 'absolute' : 'static'};\r\n                      top: 0;\r\n                      left: 0;\r\n                      right: 0;\r\n                    `}\r\n                  >\r\n                    {children(screenData)}\r\n                  </AnimatedDiv>\r\n                )}\r\n              </Transition>\r\n            </AnimatedDiv>\r\n          )}\r\n        </Spring>\r\n      </section>\r\n    </Popover>\r\n  )\r\n}\r\n\r\nAccountPopover.propTypes = {\r\n  children: PropTypes.func.isRequired,\r\n  direction: PropTypes.oneOf([-1, 1]).isRequired,\r\n  heading: PropTypes.node.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  opener: PropTypes.any,\r\n  screenData: PropTypes.object.isRequired,\r\n  screenId: PropTypes.string.isRequired,\r\n  screenKey: PropTypes.func.isRequired,\r\n  visible: PropTypes.bool.isRequired,\r\n}\r\n\r\nexport default AccountPopover\r\n"]},"metadata":{},"sourceType":"module"}