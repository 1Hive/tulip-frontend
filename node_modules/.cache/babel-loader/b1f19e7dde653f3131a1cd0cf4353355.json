{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar debug = require('debug');\n/**\n * Creates a logger for the given subsystem\n *\n * @param {PeerId} [id]\n * @param {string} [subsystem]\n * @returns {debug}\n *\n * @private\n */\n\n\nvar logger = function logger(id, subsystem) {\n  var name = ['bitswap'];\n\n  if (subsystem) {\n    name.push(subsystem);\n  }\n\n  if (id) {\n    name.push(\"\".concat(id.toB58String().slice(0, 8)));\n  }\n\n  var logger = debug(name.join(':'));\n  logger.error = debug(name.concat(['error']).join(':'));\n  return logger;\n};\n\nvar includesWith = function includesWith(pred, x, list) {\n  var idx = 0;\n  var len = list.length;\n\n  while (idx < len) {\n    if (pred(x, list[idx])) {\n      return true;\n    }\n\n    idx += 1;\n  }\n\n  return false;\n};\n\nvar uniqWith = function uniqWith(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n  var item;\n\n  while (idx < len) {\n    item = list[idx];\n\n    if (!includesWith(pred, item, result)) {\n      result[result.length] = item;\n    }\n\n    idx += 1;\n  }\n\n  return result;\n};\n\nvar groupBy = function groupBy(pred, list) {\n  return list.reduce(function (acc, v) {\n    var k = pred(v);\n\n    if (acc[k]) {\n      acc[k].push(v);\n    } else {\n      acc[k] = [v];\n    }\n\n    return acc;\n  }, {});\n};\n\nvar pullAllWith = function pullAllWith(pred, list, values) {\n  return list.filter(function (i) {\n    return !includesWith(pred, i, values);\n  });\n};\n\nvar sortBy = function sortBy(fn, list) {\n  return Array.prototype.slice.call(list, 0).sort(function (a, b) {\n    var aa = fn(a);\n    var bb = fn(b);\n    return aa < bb ? -1 : aa > bb ? 1 : 0;\n  });\n};\n/**\n * Is equal for Maps of BitswapMessageEntry or Blocks\n * @param {Map} a\n * @param {Map} b\n * @returns {boolean}\n */\n\n\nvar isMapEqual = function isMapEqual(a, b) {\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  var _iterator = _createForOfIteratorHelper(a),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 2),\n          key = _step$value[0],\n          valueA = _step$value[1];\n\n      if (!b.has(key)) {\n        return false;\n      }\n\n      var valueB = b.get(key); // Support BitswapMessageEntry\n\n      if (typeof valueA.equals === 'function' && !valueA.equals(valueB)) {\n        return false;\n      } // Support Blocks\n\n\n      if (valueA._data && !valueA._data.equals(valueB._data)) {\n        return false;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return true;\n};\n\nmodule.exports = {\n  logger: logger,\n  includesWith: includesWith,\n  uniqWith: uniqWith,\n  groupBy: groupBy,\n  pullAllWith: pullAllWith,\n  sortBy: sortBy,\n  isMapEqual: isMapEqual\n};","map":null,"metadata":{},"sourceType":"script"}