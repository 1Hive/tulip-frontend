{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar abortable = require('abortable-iterator');\n\nvar toIterable = require('stream-to-it');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar _require2 = require('./constants'),\n    CLOSE_TIMEOUT = _require2.CLOSE_TIMEOUT;\n\nvar toMultiaddr = require('libp2p-utils/src/ip-port-to-multiaddr');\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:webrtc-star:socket');\nlog.error = debug('libp2p:webrtc-star:socket:error');\n\nvar toWebrtcMultiaddr = function toWebrtcMultiaddr(address, port) {\n  if (!address || !port) return undefined;\n\n  try {\n    return toMultiaddr(address, port);\n  } catch (err) {\n    log.error(err); // Account for mdns hostnames, just make it a local ip for now\n\n    return toMultiaddr('0.0.0.0', port);\n  }\n}; // Convert a socket into a MultiaddrConnection\n// https://github.com/libp2p/js-libp2p-interfaces/tree/master/src/transport#multiaddrconnection\n\n\nmodule.exports = function (socket) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _toIterable$duplex = toIterable.duplex(socket),\n      _sink = _toIterable$duplex.sink,\n      source = _toIterable$duplex.source; // If the remote address was passed, use it - it may have the peer ID encapsulated\n\n\n  var remoteAddr = options.remoteAddr || toWebrtcMultiaddr(socket.remoteAddress, socket.remotePort);\n  var localAddr = toWebrtcMultiaddr(socket.localAddress, socket.localPort);\n  var maConn = {\n    sink: function sink(source) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (options.signal) {\n                  source = abortable(source, options.signal);\n                }\n\n                _context2.prev = 1;\n                _context2.next = 4;\n                return _sink(_wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk;\n\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _iteratorNormalCompletion = true;\n                          _didIteratorError = false;\n                          _context.prev = 2;\n                          _iterator = _asyncIterator(source);\n\n                        case 4:\n                          _context.next = 6;\n                          return _awaitAsyncGenerator(_iterator.next());\n\n                        case 6:\n                          _step = _context.sent;\n                          _iteratorNormalCompletion = _step.done;\n                          _context.next = 10;\n                          return _awaitAsyncGenerator(_step.value);\n\n                        case 10:\n                          _value = _context.sent;\n\n                          if (_iteratorNormalCompletion) {\n                            _context.next = 18;\n                            break;\n                          }\n\n                          chunk = _value;\n                          _context.next = 15;\n                          return Buffer.isBuffer(chunk) ? chunk : chunk.slice();\n\n                        case 15:\n                          _iteratorNormalCompletion = true;\n                          _context.next = 4;\n                          break;\n\n                        case 18:\n                          _context.next = 24;\n                          break;\n\n                        case 20:\n                          _context.prev = 20;\n                          _context.t0 = _context[\"catch\"](2);\n                          _didIteratorError = true;\n                          _iteratorError = _context.t0;\n\n                        case 24:\n                          _context.prev = 24;\n                          _context.prev = 25;\n\n                          if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                            _context.next = 29;\n                            break;\n                          }\n\n                          _context.next = 29;\n                          return _awaitAsyncGenerator(_iterator.return());\n\n                        case 29:\n                          _context.prev = 29;\n\n                          if (!_didIteratorError) {\n                            _context.next = 32;\n                            break;\n                          }\n\n                          throw _iteratorError;\n\n                        case 32:\n                          return _context.finish(29);\n\n                        case 33:\n                          return _context.finish(24);\n\n                        case 34:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, null, [[2, 20, 24, 34], [25,, 29, 33]]);\n                }))());\n\n              case 4:\n                _context2.next = 9;\n                break;\n\n              case 6:\n                _context2.prev = 6;\n                _context2.t0 = _context2[\"catch\"](1);\n\n                // If aborted we can safely ignore\n                if (_context2.t0.type !== 'aborted') {\n                  // If the source errored the socket will already have been destroyed by\n                  // toIterable.duplex(). If the socket errored it will already be\n                  // destroyed. There's nothing to do here except log the error & return.\n                  log.error(_context2.t0);\n                }\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[1, 6]]);\n      }))();\n    },\n    source: options.signal ? abortable(source, options.signal) : source,\n    conn: socket,\n    localAddr: localAddr,\n    remoteAddr: remoteAddr,\n    timeline: {\n      open: Date.now()\n    },\n    close: function close() {\n      if (socket.destroyed) return;\n      return new Promise(function (resolve, reject) {\n        var start = Date.now(); // Attempt to end the socket. If it takes longer to close than the\n        // timeout, destroy it manually.\n\n        var timeout = setTimeout(function () {\n          if (maConn.remoteAddr) {\n            var _maConn$remoteAddr$to = maConn.remoteAddr.toOptions(),\n                host = _maConn$remoteAddr$to.host,\n                port = _maConn$remoteAddr$to.port;\n\n            log('timeout closing socket to %s:%s after %dms, destroying it manually', host, port, Date.now() - start);\n          }\n\n          if (!socket.destroyed) {\n            socket.destroy();\n          }\n        }, CLOSE_TIMEOUT);\n        socket.once('close', function () {\n          resolve();\n        });\n        socket.end(function (err) {\n          clearTimeout(timeout);\n          maConn.timeline.close = Date.now();\n          if (err) return reject(err);\n        });\n      });\n    }\n  };\n  socket.once('close', function () {\n    // In instances where `close` was not explicitly called,\n    // such as an iterable stream ending, ensure we have set the close\n    // timeline\n    if (!maConn.timeline.close) {\n      maConn.timeline.close = Date.now();\n    }\n  });\n  return maConn;\n};","map":null,"metadata":{},"sourceType":"script"}