{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cacheSupported = exports.createIpfsStorageProxy = exports.createOrbitStorageProxy = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _require = require('postmsg-rpc'),\n    caller = _require.caller;\n\nvar _require2 = require('./levelDownProxy'),\n    Store = _require2.Store;\n\nvar OrbitDbStorageAdapter = require('orbit-db-storage-adapter');\n\nvar LevelUp = require('levelup');\n\nvar LevelStore = require('datastore-level');\n\nvar createOrbitStorageProxy = /*#__PURE__*/function () {\n  var _ref = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(path, _ref2) {\n    var postMessage, db, storage;\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            postMessage = _ref2.postMessage;\n\n            db = function db(path, opts) {\n              var levelDownProxy = new Store(path, Object.assign(opts, {\n                postMessage: postMessage\n              }));\n              return LevelUp(levelDownProxy);\n            };\n\n            storage = OrbitDbStorageAdapter(db, {});\n            return _context.abrupt(\"return\", storage.createStore(path));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function createOrbitStorageProxy(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.createOrbitStorageProxy = createOrbitStorageProxy;\n\nvar cacheSupported = /*#__PURE__*/function () {\n  var _ref3 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2(opts) {\n    return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", caller('supported', opts)());\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function cacheSupported(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexports.cacheSupported = cacheSupported;\n\nvar createIpfsStorageProxy = function createIpfsStorageProxy(_ref4) {\n  var postMessage = _ref4.postMessage;\n  return function store(path, opts) {\n    var db = function db(path, opts) {\n      var levelDownProxy = new Store(path, Object.assign(opts, {\n        postMessage: postMessage\n      }));\n      return LevelUp(levelDownProxy);\n    };\n\n    return new LevelStore(path, {\n      db: db\n    });\n  };\n};\n\nexports.createIpfsStorageProxy = createIpfsStorageProxy;","map":null,"metadata":{},"sourceType":"script"}