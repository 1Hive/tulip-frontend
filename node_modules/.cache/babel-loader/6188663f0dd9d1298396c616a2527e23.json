{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar errors = require('../errors');\n\nvar repoInit = require('./init');\n\nvar Datastore = require('datastore-fs');\n\nvar Key = require('interface-datastore').Key;\n\nvar versionKey = new Key('version');\nexports.getVersion = getVersion;\n/**\n * Function that has responsibility to retrieve version of repo from its root datastore's instance.\n * This function needs to be cross-repo-version functional to be able to fetch any version number,\n * even in case of change of repo's versioning.\n *\n * @param {string} path\n * @returns {Promise<int>}\n */\n\nfunction getVersion(_x) {\n  return _getVersion.apply(this, arguments);\n}\n/**\n * Function for setting a version in cross-repo-version manner.\n *\n * @param {string} path\n * @param {int} version\n * @returns {Promise<void>}\n */\n\n\nfunction _getVersion() {\n  _getVersion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {\n    var store, version;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return repoInit.isRepoInitialized(path);\n\n          case 2:\n            if (_context.sent) {\n              _context.next = 4;\n              break;\n            }\n\n            throw new errors.NotInitializedRepoError(\"Repo in path \".concat(path, \" is not initialized!\"));\n\n          case 4:\n            store = new Datastore(path, {\n              extension: '',\n              createIfMissing: false\n            });\n            _context.next = 7;\n            return store.open();\n\n          case 7:\n            _context.t0 = parseInt;\n            _context.next = 10;\n            return store.get(versionKey);\n\n          case 10:\n            _context.t1 = _context.sent;\n            version = (0, _context.t0)(_context.t1);\n            _context.next = 14;\n            return store.close();\n\n          case 14:\n            return _context.abrupt(\"return\", version);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getVersion.apply(this, arguments);\n}\n\nfunction setVersion(_x2, _x3) {\n  return _setVersion.apply(this, arguments);\n}\n\nfunction _setVersion() {\n  _setVersion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(path, version) {\n    var store;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            store = new Datastore(path, {\n              extension: '',\n              createIfMissing: false\n            });\n            _context2.next = 3;\n            return store.open();\n\n          case 3:\n            _context2.next = 5;\n            return store.put(versionKey, Buffer.from(String(version)));\n\n          case 5:\n            _context2.next = 7;\n            return store.close();\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _setVersion.apply(this, arguments);\n}\n\nexports.setVersion = setVersion;","map":null,"metadata":{},"sourceType":"script"}