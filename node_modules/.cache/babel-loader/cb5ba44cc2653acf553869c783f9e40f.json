{"ast":null,"code":"import _classCallCheck from\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _assertThisInitialized from\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _wrapNativeSuper from\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";import _defineProperty from\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import{getNetworkName}from'./lib/web3-utils';import env from'./environment';export var extendError=function extendError(name,_ref){var defaultMessage=_ref.defaultMessage;return/*#__PURE__*/function(_Error){_inherits(_class2,_Error);var _super=_createSuper(_class2);function _class2(){var _this;var message=arguments.length>0&&arguments[0]!==undefined?arguments[0]:defaultMessage;_classCallCheck(this,_class2);_this=_super.call(this,message);_defineProperty(_assertThisInitialized(_this),\"name\",name);return _this;}return _class2;}(/*#__PURE__*/_wrapNativeSuper(Error));};export var DisputeNotFound=/*#__PURE__*/function(_Error2){_inherits(DisputeNotFound,_Error2);var _super2=_createSuper(DisputeNotFound);function DisputeNotFound(disputeId){var _this2;_classCallCheck(this,DisputeNotFound);_this2=_super2.call(this,\"It looks like there\\u2019s no dispute associated with the DisputeID #\".concat(disputeId,\"\\u201D on the Ethereum \").concat(getNetworkName(env('CHAIN_ID')),\" network.\"));_defineProperty(_assertThisInitialized(_this2),\"name\",'DisputeNotFound');_this2.disputeId=disputeId;return _this2;}return DisputeNotFound;}(/*#__PURE__*/_wrapNativeSuper(Error));export var InvalidNetworkType=extendError('InvalidNetworkType',{defaultMessage:'The network type is invalid'});export var InvalidURI=extendError('InvalidURI',{defaultMessage:'The URI is invalid'});export var NoConnection=extendError('NoConnection',{defaultMessage:'There is no connection'});","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/errors.js"],"names":["getNetworkName","env","extendError","name","defaultMessage","message","Error","DisputeNotFound","disputeId","InvalidNetworkType","InvalidURI","NoConnection"],"mappings":"ggCAAA,OAASA,cAAT,KAA+B,kBAA/B,CACA,MAAOC,CAAAA,GAAP,KAAgB,eAAhB,CAEA,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,IAAD,UAASC,CAAAA,cAAT,MAASA,cAAT,gGAGvB,kBAAsC,cAA1BC,CAAAA,OAA0B,2DAAhBD,cAAgB,+BACpC,uBAAMC,OAAN,EADoC,qDAD/BF,IAC+B,eAErC,CALsB,+CACXG,KADW,IAApB,CAQP,UAAaC,CAAAA,eAAb,6GAEE,yBAAYC,SAAZ,CAAuB,kDACrB,wGACqEA,SADrE,mCACmGR,cAAc,CAC7GC,GAAG,CAAC,UAAD,CAD0G,CADjH,eADqB,sDADhB,iBACgB,EAMrB,OAAKO,SAAL,CAAiBA,SAAjB,CANqB,cAOtB,CATH,uDAAqCF,KAArC,GAYA,MAAO,IAAMG,CAAAA,kBAAkB,CAAGP,WAAW,CAAC,oBAAD,CAAuB,CAClEE,cAAc,CAAE,6BADkD,CAAvB,CAAtC,CAGP,MAAO,IAAMM,CAAAA,UAAU,CAAGR,WAAW,CAAC,YAAD,CAAe,CAClDE,cAAc,CAAE,oBADkC,CAAf,CAA9B,CAGP,MAAO,IAAMO,CAAAA,YAAY,CAAGT,WAAW,CAAC,cAAD,CAAiB,CACtDE,cAAc,CAAE,wBADsC,CAAjB,CAAhC","sourcesContent":["import { getNetworkName } from './lib/web3-utils'\r\nimport env from './environment'\r\n\r\nexport const extendError = (name, { defaultMessage }) =>\r\n  class extends Error {\r\n    name = name\r\n    constructor(message = defaultMessage) {\r\n      super(message)\r\n    }\r\n  }\r\n\r\nexport class DisputeNotFound extends Error {\r\n  name = 'DisputeNotFound'\r\n  constructor(disputeId) {\r\n    super(\r\n      `It looks like there’s no dispute associated with the DisputeID #${disputeId}” on the Ethereum ${getNetworkName(\r\n        env('CHAIN_ID')\r\n      )} network.`\r\n    )\r\n    this.disputeId = disputeId\r\n  }\r\n}\r\n\r\nexport const InvalidNetworkType = extendError('InvalidNetworkType', {\r\n  defaultMessage: 'The network type is invalid',\r\n})\r\nexport const InvalidURI = extendError('InvalidURI', {\r\n  defaultMessage: 'The URI is invalid',\r\n})\r\nexport const NoConnection = extendError('NoConnection', {\r\n  defaultMessage: 'There is no connection',\r\n})\r\n"]},"metadata":{},"sourceType":"module"}