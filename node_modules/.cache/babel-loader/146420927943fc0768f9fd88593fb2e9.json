{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _wrapNativeSuper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nvar CancelError = /*#__PURE__*/function (_Error) {\n  _inherits(CancelError, _Error);\n\n  var _super = _createSuper(CancelError);\n\n  function CancelError(reason) {\n    var _this;\n\n    _classCallCheck(this, CancelError);\n\n    _this = _super.call(this, reason || 'Promise was canceled');\n    _this.name = 'CancelError';\n    return _this;\n  }\n\n  _createClass(CancelError, [{\n    key: \"isCanceled\",\n    get: function get() {\n      return true;\n    }\n  }]);\n\n  return CancelError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar PCancelable = /*#__PURE__*/function () {\n  function PCancelable(executor) {\n    var _this2 = this;\n\n    _classCallCheck(this, PCancelable);\n\n    this._cancelHandlers = [];\n    this._isPending = true;\n    this._isCanceled = false;\n    this._rejectOnCancel = true;\n    this._promise = new Promise(function (resolve, reject) {\n      _this2._reject = reject;\n\n      var onResolve = function onResolve(value) {\n        if (!_this2._isCanceled || !onCancel.shouldReject) {\n          _this2._isPending = false;\n          resolve(value);\n        }\n      };\n\n      var onReject = function onReject(error) {\n        _this2._isPending = false;\n        reject(error);\n      };\n\n      var onCancel = function onCancel(handler) {\n        if (!_this2._isPending) {\n          throw new Error('The `onCancel` handler was attached after the promise settled.');\n        }\n\n        _this2._cancelHandlers.push(handler);\n      };\n\n      Object.defineProperties(onCancel, {\n        shouldReject: {\n          get: function get() {\n            return _this2._rejectOnCancel;\n          },\n          set: function set(boolean) {\n            _this2._rejectOnCancel = boolean;\n          }\n        }\n      });\n      return executor(onResolve, onReject, onCancel);\n    });\n  }\n\n  _createClass(PCancelable, [{\n    key: \"then\",\n    value: function then(onFulfilled, onRejected) {\n      // eslint-disable-next-line promise/prefer-await-to-then\n      return this._promise.then(onFulfilled, onRejected);\n    }\n  }, {\n    key: \"catch\",\n    value: function _catch(onRejected) {\n      return this._promise.catch(onRejected);\n    }\n  }, {\n    key: \"finally\",\n    value: function _finally(onFinally) {\n      return this._promise.finally(onFinally);\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel(reason) {\n      if (!this._isPending || this._isCanceled) {\n        return;\n      }\n\n      this._isCanceled = true;\n\n      if (this._cancelHandlers.length > 0) {\n        try {\n          var _iterator = _createForOfIteratorHelper(this._cancelHandlers),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var handler = _step.value;\n              handler();\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        } catch (error) {\n          this._reject(error);\n\n          return;\n        }\n      }\n\n      if (this._rejectOnCancel) {\n        this._reject(new CancelError(reason));\n      }\n    }\n  }, {\n    key: \"isCanceled\",\n    get: function get() {\n      return this._isCanceled;\n    }\n  }], [{\n    key: \"fn\",\n    value: function fn(userFn) {\n      return function () {\n        for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {\n          arguments_[_key] = arguments[_key];\n        }\n\n        return new PCancelable(function (resolve, reject, onCancel) {\n          arguments_.push(onCancel); // eslint-disable-next-line promise/prefer-await-to-then\n\n          userFn.apply(void 0, arguments_).then(resolve, reject);\n        });\n      };\n    }\n  }]);\n\n  return PCancelable;\n}();\n\nObject.setPrototypeOf(PCancelable.prototype, Promise.prototype);\nmodule.exports = PCancelable;\nmodule.exports.CancelError = CancelError;","map":null,"metadata":{},"sourceType":"script"}