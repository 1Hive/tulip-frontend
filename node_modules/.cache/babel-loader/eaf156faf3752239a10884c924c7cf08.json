{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('./utils'),\n    isValidMultiaddr = _require.isValidMultiaddr;\n\nvar _require2 = require('../../utils'),\n    withTimeoutOption = _require2.withTimeoutOption;\n\nmodule.exports = function (_ref) {\n  var repo = _ref.repo;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _rm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(multiaddr, options) {\n      var res, config;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = options || {};\n\n              if (!(multiaddr && !isValidMultiaddr(multiaddr))) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new Error(\"\".concat(multiaddr, \" is not a valid Multiaddr\"));\n\n            case 3:\n              res = [];\n              _context.next = 6;\n              return repo.config.get();\n\n            case 6:\n              config = _context.sent;\n\n              if (options.all) {\n                res = config.Bootstrap || [];\n                config.Bootstrap = [];\n              } else {\n                config.Bootstrap = (config.Bootstrap || []).filter(function (ma) {\n                  return ma !== multiaddr;\n                });\n              }\n\n              _context.next = 10;\n              return repo.config.set(config);\n\n            case 10:\n              if (!options.all && multiaddr) {\n                res.push(multiaddr);\n              }\n\n              return _context.abrupt(\"return\", {\n                Peers: res\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function rm(_x, _x2) {\n      return _rm.apply(this, arguments);\n    }\n\n    return rm;\n  }());\n};","map":null,"metadata":{},"sourceType":"script"}