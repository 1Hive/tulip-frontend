{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar errCode = require('err-code');\n\nvar CID = require('cids');\n\nvar resolve = require('./resolvers');\n\nvar last = require('it-last');\n\nvar toPathComponents = function toPathComponents() {\n  var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  // split on / unless escaped with \\\n  return (path.trim().match(/([^\\\\^/]|\\\\\\/)+/g) || []).filter(Boolean);\n};\n\nvar cidAndRest = function cidAndRest(path) {\n  if (Buffer.isBuffer(path)) {\n    return {\n      cid: new CID(path),\n      toResolve: []\n    };\n  }\n\n  if (CID.isCID(path)) {\n    return {\n      cid: path,\n      toResolve: []\n    };\n  }\n\n  if (typeof path === 'string') {\n    if (path.indexOf('/ipfs/') === 0) {\n      path = path.substring(6);\n    }\n\n    var output = toPathComponents(path);\n    return {\n      cid: new CID(output[0]),\n      toResolve: output.slice(1)\n    };\n  }\n\n  throw errCode(new Error(\"Unknown path type \".concat(path)), 'ERR_BAD_PATH');\n};\n\nvar walkPath = /*#__PURE__*/function () {\n  var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path, ipld, options) {\n    var _cidAndRest, cid, toResolve, name, entryPath, startingDepth, result;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _cidAndRest = cidAndRest(path), cid = _cidAndRest.cid, toResolve = _cidAndRest.toResolve;\n            name = cid.toBaseEncodedString();\n            entryPath = name;\n            startingDepth = toResolve.length;\n\n          case 4:\n            if (!true) {\n              _context.next = 21;\n              break;\n            }\n\n            _context.next = 7;\n            return _awaitAsyncGenerator(resolve(cid, name, entryPath, toResolve, startingDepth, ipld, options));\n\n          case 7:\n            result = _context.sent;\n\n            if (!(!result.entry && !result.next)) {\n              _context.next = 10;\n              break;\n            }\n\n            throw errCode(new Error(\"Could not resolve \".concat(path)), 'ERR_NOT_FOUND');\n\n          case 10:\n            if (!result.entry) {\n              _context.next = 13;\n              break;\n            }\n\n            _context.next = 13;\n            return result.entry;\n\n          case 13:\n            if (result.next) {\n              _context.next = 15;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 15:\n            // resolve further parts\n            toResolve = result.next.toResolve;\n            cid = result.next.cid;\n            name = result.next.name;\n            entryPath = result.next.path;\n            _context.next = 4;\n            break;\n\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function walkPath(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar exporter = function exporter(path, ipld, options) {\n  return last(walkPath(path, ipld, options));\n};\n\nvar recursive = /*#__PURE__*/function () {\n  var _ref2 = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(path, ipld, options) {\n    var node, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, child, recurse, _recurse;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _recurse = function _recurse3() {\n              _recurse = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(node, options) {\n                var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, file, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _value3, subFile;\n\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _iteratorNormalCompletion2 = true;\n                        _didIteratorError2 = false;\n                        _context2.prev = 2;\n                        _iterator2 = _asyncIterator(node.content(options));\n\n                      case 4:\n                        _context2.next = 6;\n                        return _awaitAsyncGenerator(_iterator2.next());\n\n                      case 6:\n                        _step2 = _context2.sent;\n                        _iteratorNormalCompletion2 = _step2.done;\n                        _context2.next = 10;\n                        return _awaitAsyncGenerator(_step2.value);\n\n                      case 10:\n                        _value2 = _context2.sent;\n\n                        if (_iteratorNormalCompletion2) {\n                          _context2.next = 53;\n                          break;\n                        }\n\n                        file = _value2;\n                        _context2.next = 15;\n                        return file;\n\n                      case 15:\n                        if (!file.unixfs.type.includes('dir')) {\n                          _context2.next = 50;\n                          break;\n                        }\n\n                        _iteratorNormalCompletion3 = true;\n                        _didIteratorError3 = false;\n                        _context2.prev = 18;\n                        _iterator3 = _asyncIterator(recurse(file, options));\n\n                      case 20:\n                        _context2.next = 22;\n                        return _awaitAsyncGenerator(_iterator3.next());\n\n                      case 22:\n                        _step3 = _context2.sent;\n                        _iteratorNormalCompletion3 = _step3.done;\n                        _context2.next = 26;\n                        return _awaitAsyncGenerator(_step3.value);\n\n                      case 26:\n                        _value3 = _context2.sent;\n\n                        if (_iteratorNormalCompletion3) {\n                          _context2.next = 34;\n                          break;\n                        }\n\n                        subFile = _value3;\n                        _context2.next = 31;\n                        return subFile;\n\n                      case 31:\n                        _iteratorNormalCompletion3 = true;\n                        _context2.next = 20;\n                        break;\n\n                      case 34:\n                        _context2.next = 40;\n                        break;\n\n                      case 36:\n                        _context2.prev = 36;\n                        _context2.t0 = _context2[\"catch\"](18);\n                        _didIteratorError3 = true;\n                        _iteratorError3 = _context2.t0;\n\n                      case 40:\n                        _context2.prev = 40;\n                        _context2.prev = 41;\n\n                        if (!(!_iteratorNormalCompletion3 && _iterator3.return != null)) {\n                          _context2.next = 45;\n                          break;\n                        }\n\n                        _context2.next = 45;\n                        return _awaitAsyncGenerator(_iterator3.return());\n\n                      case 45:\n                        _context2.prev = 45;\n\n                        if (!_didIteratorError3) {\n                          _context2.next = 48;\n                          break;\n                        }\n\n                        throw _iteratorError3;\n\n                      case 48:\n                        return _context2.finish(45);\n\n                      case 49:\n                        return _context2.finish(40);\n\n                      case 50:\n                        _iteratorNormalCompletion2 = true;\n                        _context2.next = 4;\n                        break;\n\n                      case 53:\n                        _context2.next = 59;\n                        break;\n\n                      case 55:\n                        _context2.prev = 55;\n                        _context2.t1 = _context2[\"catch\"](2);\n                        _didIteratorError2 = true;\n                        _iteratorError2 = _context2.t1;\n\n                      case 59:\n                        _context2.prev = 59;\n                        _context2.prev = 60;\n\n                        if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n                          _context2.next = 64;\n                          break;\n                        }\n\n                        _context2.next = 64;\n                        return _awaitAsyncGenerator(_iterator2.return());\n\n                      case 64:\n                        _context2.prev = 64;\n\n                        if (!_didIteratorError2) {\n                          _context2.next = 67;\n                          break;\n                        }\n\n                        throw _iteratorError2;\n\n                      case 67:\n                        return _context2.finish(64);\n\n                      case 68:\n                        return _context2.finish(59);\n\n                      case 69:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2, null, [[2, 55, 59, 69], [18, 36, 40, 50], [41,, 45, 49], [60,, 64, 68]]);\n              }));\n              return _recurse.apply(this, arguments);\n            };\n\n            recurse = function _recurse2(_x7, _x8) {\n              return _recurse.apply(this, arguments);\n            };\n\n            _context3.next = 4;\n            return _awaitAsyncGenerator(exporter(path, ipld, options));\n\n          case 4:\n            node = _context3.sent;\n            _context3.next = 7;\n            return node;\n\n          case 7:\n            if (!(node.unixfs && node.unixfs.type.includes('dir'))) {\n              _context3.next = 42;\n              break;\n            }\n\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context3.prev = 10;\n            _iterator = _asyncIterator(recurse(node, options));\n\n          case 12:\n            _context3.next = 14;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 14:\n            _step = _context3.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context3.next = 18;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 18:\n            _value = _context3.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context3.next = 26;\n              break;\n            }\n\n            child = _value;\n            _context3.next = 23;\n            return child;\n\n          case 23:\n            _iteratorNormalCompletion = true;\n            _context3.next = 12;\n            break;\n\n          case 26:\n            _context3.next = 32;\n            break;\n\n          case 28:\n            _context3.prev = 28;\n            _context3.t0 = _context3[\"catch\"](10);\n            _didIteratorError = true;\n            _iteratorError = _context3.t0;\n\n          case 32:\n            _context3.prev = 32;\n            _context3.prev = 33;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context3.next = 37;\n              break;\n            }\n\n            _context3.next = 37;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 37:\n            _context3.prev = 37;\n\n            if (!_didIteratorError) {\n              _context3.next = 40;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 40:\n            return _context3.finish(37);\n\n          case 41:\n            return _context3.finish(32);\n\n          case 42:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[10, 28, 32, 42], [33,, 37, 41]]);\n  }));\n\n  return function recursive(_x4, _x5, _x6) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nmodule.exports = exporter;\nmodule.exports.path = walkPath;\nmodule.exports.recursive = recursive;","map":null,"metadata":{},"sourceType":"script"}