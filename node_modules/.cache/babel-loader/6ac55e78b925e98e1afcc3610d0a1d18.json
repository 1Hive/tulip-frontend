{"ast":null,"code":"\"use strict\"; // Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Package constant-time provides functions for performing algorithmically constant-time operations.\n */\n\n/**\n * NOTE! Due to the inability to guarantee real constant time evaluation of\n * anything in JavaScript VM, this is module is the best effort.\n */\n\n/**\n * Returns resultIfOne if subject is 1, or resultIfZero if subject is 0.\n *\n * Supports only 32-bit integers, so resultIfOne or resultIfZero are not\n * integers, they'll be converted to them with bitwise operations.\n */\n\nfunction select(subject, resultIfOne, resultIfZero) {\n  return ~(subject - 1) & resultIfOne | subject - 1 & resultIfZero;\n}\n\nexports.select = select;\n/**\n * Returns 1 if a <= b, or 0 if not.\n * Arguments must be positive 32-bit integers less than or equal to 2^31 - 1.\n */\n\nfunction lessOrEqual(a, b) {\n  return (a | 0) - (b | 0) - 1 >>> 31 & 1;\n}\n\nexports.lessOrEqual = lessOrEqual;\n/**\n * Returns 1 if a and b are of equal length and their contents\n * are equal, or 0 otherwise.\n *\n * Note that unlike in equal(), zero-length inputs are considered\n * the same, so this function will return 1.\n */\n\nfunction compare(a, b) {\n  if (a.length !== b.length) {\n    return 0;\n  }\n\n  var result = 0;\n\n  for (var i = 0; i < a.length; i++) {\n    result |= a[i] ^ b[i];\n  }\n\n  return 1 & result - 1 >>> 8;\n}\n\nexports.compare = compare;\n/**\n * Returns true if a and b are of equal non-zero length,\n * and their contents are equal, or false otherwise.\n *\n * Note that unlike in compare() zero-length inputs are considered\n * _not_ equal, so this function will return false.\n */\n\nfunction equal(a, b) {\n  if (a.length === 0 || b.length === 0) {\n    return false;\n  }\n\n  return compare(a, b) !== 0;\n}\n\nexports.equal = equal;","map":null,"metadata":{},"sourceType":"script"}