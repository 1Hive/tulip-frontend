{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar EventEmitter = require('events');\n\nvar Stat = require('./stat');\n\nvar defaultOptions = {\n  movingAverageIntervals: [60 * 1000, // 1 minute\n  5 * 60 * 1000, // 5 minutes\n  15 * 60 * 1000 // 15 minutes\n  ]\n};\n\nvar Stats = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Stats, _EventEmitter);\n\n  var _super = _createSuper(Stats);\n\n  function Stats(initialCounters, _options) {\n    var _this;\n\n    _classCallCheck(this, Stats);\n\n    _this = _super.call(this);\n    var options = Object.assign({}, defaultOptions, _options);\n\n    if (typeof options.computeThrottleTimeout !== 'number') {\n      throw new Error('need computeThrottleTimeout');\n    }\n\n    if (typeof options.computeThrottleMaxQueueSize !== 'number') {\n      throw new Error('need computeThrottleMaxQueueSize');\n    }\n\n    _this._initialCounters = initialCounters;\n    _this._options = options;\n    _this._enabled = _this._options.enabled;\n    _this._global = new Stat(initialCounters, options);\n\n    _this._global.on('update', function (stats) {\n      return _this.emit('update', stats);\n    });\n\n    _this._peers = new Map();\n    return _this;\n  }\n\n  _createClass(Stats, [{\n    key: \"enable\",\n    value: function enable() {\n      this._enabled = true;\n      this._options.enabled = true;\n\n      this._global.enable();\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this._enabled = false;\n      this._options.enabled = false;\n\n      this._global.disable();\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this._enabled = false;\n\n      this._global.stop();\n\n      var _iterator = _createForOfIteratorHelper(this._peers),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var peerStat = _step.value;\n          peerStat[1].stop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"snapshot\",\n    get: function get() {\n      return this._global.snapshot;\n    }\n  }, {\n    key: \"movingAverages\",\n    get: function get() {\n      return this._global.movingAverages;\n    }\n  }, {\n    key: \"forPeer\",\n    value: function forPeer(peerId) {\n      if (peerId.toB58String) {\n        peerId = peerId.toB58String();\n      }\n\n      return this._peers.get(peerId);\n    }\n  }, {\n    key: \"push\",\n    value: function push(peer, counter, inc) {\n      if (this._enabled) {\n        this._global.push(counter, inc);\n\n        if (peer) {\n          var peerStats = this._peers.get(peer);\n\n          if (!peerStats) {\n            peerStats = new Stat(this._initialCounters, this._options);\n\n            this._peers.set(peer, peerStats);\n          }\n\n          peerStats.push(counter, inc);\n        }\n      }\n    }\n  }, {\n    key: \"disconnected\",\n    value: function disconnected(peer) {\n      var peerId = peer.toB58String();\n\n      var peerStats = this._peers.get(peerId);\n\n      if (peerStats) {\n        peerStats.stop();\n\n        this._peers.delete(peerId);\n      }\n    }\n  }]);\n\n  return Stats;\n}(EventEmitter);\n\nmodule.exports = Stats;","map":null,"metadata":{},"sourceType":"script"}