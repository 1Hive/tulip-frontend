{"ast":null,"code":"var _jsxFileName = \"/Users/fabianmolina/Documents/1hive/tulip-frontend/src/providers/Poolprovider.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useQuery } from 'react-query';\nimport tulipData from 'tulip-data';\nimport { getContract, useContract } from '../web3-contracts';\nimport { addresses } from '../constants/addresses';\nimport honeyFarm from '../abi/honeyfarm.json';\nimport erc20 from '../abi/ERC20.json'; // import { ethers } from 'ethers'\n\nimport { useWallet } from './Wallet';\nimport { providers as Providers } from 'ethers';\nconst PoolContext = /*#__PURE__*/React.createContext();\n\nconst loadPoolData = async () => {\n  const contract = getContract(addresses.honeyfarm, honeyFarm);\n  const scale = await contract.functions.SCALE();\n  const poolLength = await contract.functions.poolLength();\n  const poolLengthToNumber = poolLength[0].toNumber();\n  const poolData = [];\n  const tokenList = [];\n\n  for (let i = 0; i < poolLengthToNumber; i++) {\n    const data = await contract.functions.getPoolByIndex(i);\n    const c = getContract(data.poolToken, erc20);\n    poolData.push({ ...data,\n      name: await c.name(),\n      symbol: await c.symbol(),\n      scale\n    });\n    tokenList.push(data.poolToken);\n  }\n\n  return poolData;\n};\n\nexport async function useCheckApprovedToken(tokenAddress, account, balance) {\n  if (tokenAddress !== undefined && account !== undefined) {\n    const contract = getContract(tokenAddress, erc20);\n    const allowance = await contract.allowance(account, addresses.honeyfarm);\n\n    if (allowance.lt(balance)) {\n      return false;\n    }\n\n    return true;\n  }\n}\nexport function useApprove(tokenAddress, amount) {\n  const contract = useContract(tokenAddress, erc20);\n  return () => {\n    contract.approve(addresses.honeyfarm, amount).then(x => console.log(x)).catch(err => console.log(err));\n  };\n}\nexport function useCreateDeposit(tokenAddress, amount, unlockTime = 0, referrer = '0x0000000000000000000000000000000000000000') {\n  amount = parseInt(amount);\n  const contract = useContract(addresses.honeyfarm, honeyFarm);\n  return () => {\n    contract.createDeposit(tokenAddress, amount, unlockTime, referrer).then(x => console.log(x)).catch(err => console.log(err));\n  };\n}\nexport function PoolProvider({\n  children\n}) {\n  const tokens = [];\n  const [balance, setBalance] = useState('');\n  const {\n    account\n  } = useWallet();\n  const {\n    data,\n    status\n  } = useQuery('loadPoolData', loadPoolData);\n\n  if (status === 'success') {\n    for (const x of data) {\n      tokens.push(x.poolToken);\n    }\n  }\n\n  useEffect(() => {\n    const loadBalanceData = async () => {\n      if (account === null) {\n        setBalance('Please connect your ethereum wallet to view your balances.');\n      } else {\n        const tulipD = await tulipData.wallet.simplyTokenBalances({\n          user_address: account,\n          network: 'rinkeby',\n          tokens,\n          web3: {\n            eth: new Providers.Web3Provider(window.ethereum)\n          }\n        });\n        setBalance(tulipD);\n      }\n    };\n\n    loadBalanceData();\n  }, [account]);\n  const r = {\n    data,\n    status,\n    balance\n  };\n  return /*#__PURE__*/React.createElement(PoolContext.Provider, {\n    value: r,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 10\n    }\n  }, children);\n}\nexport function usePoolProvider() {\n  return useContext(PoolContext);\n}","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/providers/Poolprovider.js"],"names":["React","useContext","useEffect","useState","useQuery","tulipData","getContract","useContract","addresses","honeyFarm","erc20","useWallet","providers","Providers","PoolContext","createContext","loadPoolData","contract","honeyfarm","scale","functions","SCALE","poolLength","poolLengthToNumber","toNumber","poolData","tokenList","i","data","getPoolByIndex","c","poolToken","push","name","symbol","useCheckApprovedToken","tokenAddress","account","balance","undefined","allowance","lt","useApprove","amount","approve","then","x","console","log","catch","err","useCreateDeposit","unlockTime","referrer","parseInt","createDeposit","PoolProvider","children","tokens","setBalance","status","loadBalanceData","tulipD","wallet","simplyTokenBalances","user_address","network","web3","eth","Web3Provider","window","ethereum","r","usePoolProvider"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,mBAAzC;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,KAAP,MAAkB,mBAAlB,C,CACA;;AACA,SAASC,SAAT,QAA0B,UAA1B;AACA,SAASC,SAAS,IAAIC,SAAtB,QAAuC,QAAvC;AAEA,MAAMC,WAAW,gBAAGd,KAAK,CAACe,aAAN,EAApB;;AAEA,MAAMC,YAAY,GAAG,YAAY;AAC/B,QAAMC,QAAQ,GAAGX,WAAW,CAACE,SAAS,CAACU,SAAX,EAAsBT,SAAtB,CAA5B;AACA,QAAMU,KAAK,GAAG,MAAMF,QAAQ,CAACG,SAAT,CAAmBC,KAAnB,EAApB;AAEA,QAAMC,UAAU,GAAG,MAAML,QAAQ,CAACG,SAAT,CAAmBE,UAAnB,EAAzB;AACA,QAAMC,kBAAkB,GAAGD,UAAU,CAAC,CAAD,CAAV,CAAcE,QAAd,EAA3B;AACA,QAAMC,QAAQ,GAAG,EAAjB;AACA,QAAMC,SAAS,GAAG,EAAlB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,kBAApB,EAAwCI,CAAC,EAAzC,EAA6C;AAC3C,UAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACG,SAAT,CAAmBS,cAAnB,CAAkCF,CAAlC,CAAnB;AACA,UAAMG,CAAC,GAAGxB,WAAW,CAACsB,IAAI,CAACG,SAAN,EAAiBrB,KAAjB,CAArB;AACAe,IAAAA,QAAQ,CAACO,IAAT,CAAc,EACZ,GAAGJ,IADS;AAEZK,MAAAA,IAAI,EAAE,MAAMH,CAAC,CAACG,IAAF,EAFA;AAGZC,MAAAA,MAAM,EAAE,MAAMJ,CAAC,CAACI,MAAF,EAHF;AAIZf,MAAAA;AAJY,KAAd;AAMAO,IAAAA,SAAS,CAACM,IAAV,CAAeJ,IAAI,CAACG,SAApB;AACD;;AACD,SAAON,QAAP;AACD,CApBD;;AAqBA,OAAO,eAAeU,qBAAf,CAAqCC,YAArC,EAAmDC,OAAnD,EAA4DC,OAA5D,EAAqE;AAC1E,MAAIF,YAAY,KAAKG,SAAjB,IAA8BF,OAAO,KAAKE,SAA9C,EAAyD;AACvD,UAAMtB,QAAQ,GAAGX,WAAW,CAAC8B,YAAD,EAAe1B,KAAf,CAA5B;AACA,UAAM8B,SAAS,GAAG,MAAMvB,QAAQ,CAACuB,SAAT,CAAmBH,OAAnB,EAA4B7B,SAAS,CAACU,SAAtC,CAAxB;;AACA,QAAIsB,SAAS,CAACC,EAAV,CAAaH,OAAb,CAAJ,EAA2B;AACzB,aAAO,KAAP;AACD;;AACD,WAAO,IAAP;AACD;AACF;AAED,OAAO,SAASI,UAAT,CAAoBN,YAApB,EAAkCO,MAAlC,EAA0C;AAC/C,QAAM1B,QAAQ,GAAGV,WAAW,CAAC6B,YAAD,EAAe1B,KAAf,CAA5B;AACA,SAAO,MAAM;AACXO,IAAAA,QAAQ,CACL2B,OADH,CACWpC,SAAS,CAACU,SADrB,EACgCyB,MADhC,EAEGE,IAFH,CAEQC,CAAC,IAAIC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CAFb,EAGGG,KAHH,CAGSC,GAAG,IAAIH,OAAO,CAACC,GAAR,CAAYE,GAAZ,CAHhB;AAID,GALD;AAMD;AAED,OAAO,SAASC,gBAAT,CACLf,YADK,EAELO,MAFK,EAGLS,UAAU,GAAG,CAHR,EAILC,QAAQ,GAAG,4CAJN,EAKL;AACAV,EAAAA,MAAM,GAAGW,QAAQ,CAACX,MAAD,CAAjB;AACA,QAAM1B,QAAQ,GAAGV,WAAW,CAACC,SAAS,CAACU,SAAX,EAAsBT,SAAtB,CAA5B;AACA,SAAO,MAAM;AACXQ,IAAAA,QAAQ,CACLsC,aADH,CACiBnB,YADjB,EAC+BO,MAD/B,EACuCS,UADvC,EACmDC,QADnD,EAEGR,IAFH,CAEQC,CAAC,IAAIC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CAFb,EAGGG,KAHH,CAGSC,GAAG,IAAIH,OAAO,CAACC,GAAR,CAAYE,GAAZ,CAHhB;AAID,GALD;AAMD;AAED,OAAO,SAASM,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoC;AACzC,QAAMC,MAAM,GAAG,EAAf;AACA,QAAM,CAACpB,OAAD,EAAUqB,UAAV,IAAwBxD,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM;AAAEkC,IAAAA;AAAF,MAAc1B,SAAS,EAA7B;AACA,QAAM;AAAEiB,IAAAA,IAAF;AAAQgC,IAAAA;AAAR,MAAmBxD,QAAQ,CAAC,cAAD,EAAiBY,YAAjB,CAAjC;;AACA,MAAI4C,MAAM,KAAK,SAAf,EAA0B;AACxB,SAAK,MAAMd,CAAX,IAAgBlB,IAAhB,EAAsB;AACpB8B,MAAAA,MAAM,CAAC1B,IAAP,CAAYc,CAAC,CAACf,SAAd;AACD;AACF;;AACD7B,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM2D,eAAe,GAAG,YAAY;AAClC,UAAIxB,OAAO,KAAK,IAAhB,EAAsB;AACpBsB,QAAAA,UAAU,CAAC,4DAAD,CAAV;AACD,OAFD,MAEO;AACL,cAAMG,MAAM,GAAG,MAAMzD,SAAS,CAAC0D,MAAV,CAAiBC,mBAAjB,CAAqC;AACxDC,UAAAA,YAAY,EAAE5B,OAD0C;AAExD6B,UAAAA,OAAO,EAAE,SAF+C;AAGxDR,UAAAA,MAHwD;AAIxDS,UAAAA,IAAI,EAAE;AACJC,YAAAA,GAAG,EAAE,IAAIvD,SAAS,CAACwD,YAAd,CAA2BC,MAAM,CAACC,QAAlC;AADD;AAJkD,SAArC,CAArB;AAQAZ,QAAAA,UAAU,CAACG,MAAD,CAAV;AACD;AACF,KAdD;;AAeAD,IAAAA,eAAe;AAChB,GAjBQ,EAiBN,CAACxB,OAAD,CAjBM,CAAT;AAkBA,QAAMmC,CAAC,GAAG;AACR5C,IAAAA,IADQ;AAERgC,IAAAA,MAFQ;AAGRtB,IAAAA;AAHQ,GAAV;AAKA,sBAAO,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEkC,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCf,QAAjC,CAAP;AACD;AAED,OAAO,SAASgB,eAAT,GAA2B;AAChC,SAAOxE,UAAU,CAACa,WAAD,CAAjB;AACD","sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport { useQuery } from 'react-query'\nimport tulipData from 'tulip-data'\nimport { getContract, useContract } from '../web3-contracts'\nimport { addresses } from '../constants/addresses'\nimport honeyFarm from '../abi/honeyfarm.json'\nimport erc20 from '../abi/ERC20.json'\n// import { ethers } from 'ethers'\nimport { useWallet } from './Wallet'\nimport { providers as Providers } from 'ethers'\n\nconst PoolContext = React.createContext()\n\nconst loadPoolData = async () => {\n  const contract = getContract(addresses.honeyfarm, honeyFarm)\n  const scale = await contract.functions.SCALE()\n\n  const poolLength = await contract.functions.poolLength()\n  const poolLengthToNumber = poolLength[0].toNumber()\n  const poolData = []\n  const tokenList = []\n  for (let i = 0; i < poolLengthToNumber; i++) {\n    const data = await contract.functions.getPoolByIndex(i)\n    const c = getContract(data.poolToken, erc20)\n    poolData.push({\n      ...data,\n      name: await c.name(),\n      symbol: await c.symbol(),\n      scale,\n    })\n    tokenList.push(data.poolToken)\n  }\n  return poolData\n}\nexport async function useCheckApprovedToken(tokenAddress, account, balance) {\n  if (tokenAddress !== undefined && account !== undefined) {\n    const contract = getContract(tokenAddress, erc20)\n    const allowance = await contract.allowance(account, addresses.honeyfarm)\n    if (allowance.lt(balance)) {\n      return false\n    }\n    return true\n  }\n}\n\nexport function useApprove(tokenAddress, amount) {\n  const contract = useContract(tokenAddress, erc20)\n  return () => {\n    contract\n      .approve(addresses.honeyfarm, amount)\n      .then(x => console.log(x))\n      .catch(err => console.log(err))\n  }\n}\n\nexport function useCreateDeposit(\n  tokenAddress,\n  amount,\n  unlockTime = 0,\n  referrer = '0x0000000000000000000000000000000000000000'\n) {\n  amount = parseInt(amount)\n  const contract = useContract(addresses.honeyfarm, honeyFarm)\n  return () => {\n    contract\n      .createDeposit(tokenAddress, amount, unlockTime, referrer)\n      .then(x => console.log(x))\n      .catch(err => console.log(err))\n  }\n}\n\nexport function PoolProvider({ children }) {\n  const tokens = []\n  const [balance, setBalance] = useState('')\n  const { account } = useWallet()\n  const { data, status } = useQuery('loadPoolData', loadPoolData)\n  if (status === 'success') {\n    for (const x of data) {\n      tokens.push(x.poolToken)\n    }\n  }\n  useEffect(() => {\n    const loadBalanceData = async () => {\n      if (account === null) {\n        setBalance('Please connect your ethereum wallet to view your balances.')\n      } else {\n        const tulipD = await tulipData.wallet.simplyTokenBalances({\n          user_address: account,\n          network: 'rinkeby',\n          tokens,\n          web3: {\n            eth: new Providers.Web3Provider(window.ethereum),\n          },\n        })\n        setBalance(tulipD)\n      }\n    }\n    loadBalanceData()\n  }, [account])\n  const r = {\n    data,\n    status,\n    balance,\n  }\n  return <PoolContext.Provider value={r}>{children}</PoolContext.Provider>\n}\n\nexport function usePoolProvider() {\n  return useContext(PoolContext)\n}\n"]},"metadata":{},"sourceType":"module"}