{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _taggedTemplateLiteral = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _templateObject, _templateObject2, _templateObject3;\n\nvar ws = require('isomorphic-ws');\n\nvar _require = require('subscriptions-transport-ws'),\n    SubscriptionClient = _require.SubscriptionClient;\n\nvar _require2 = require('graphql-request'),\n    request = _require2.request,\n    gql = _require2.gql;\n\nvar _require3 = require('./../constants'),\n    graphAPIEndpoints = _require3.graphAPIEndpoints,\n    graphWSEndpoints = _require3.graphWSEndpoints,\n    barAddress = _require3.barAddress;\n\nvar _require4 = require('./../utils'),\n    timestampToBlock = _require4.timestampToBlock;\n\nmodule.exports = {\n  info: function info() {\n    var _arguments = arguments;\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _ref, _ref$block, block, _ref$timestamp, timestamp, result;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _ref = _arguments.length > 0 && _arguments[0] !== undefined ? _arguments[0] : {}, _ref$block = _ref.block, block = _ref$block === void 0 ? undefined : _ref$block, _ref$timestamp = _ref.timestamp, timestamp = _ref$timestamp === void 0 ? undefined : _ref$timestamp;\n\n              if (!block) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.t0 = block;\n              _context.next = 13;\n              break;\n\n            case 5:\n              if (!timestamp) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 8;\n              return timestampToBlock(timestamp);\n\n            case 8:\n              _context.t1 = _context.sent;\n              _context.next = 12;\n              break;\n\n            case 11:\n              _context.t1 = undefined;\n\n            case 12:\n              _context.t0 = _context.t1;\n\n            case 13:\n              block = _context.t0;\n              block = block ? \"block: { number: \".concat(block, \" }\") : \"\";\n              _context.next = 17;\n              return request(graphAPIEndpoints.bar, gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"{\\n                    bar(id: \\\"\", \"\\\", \", \") {\\n                        \", \"\\n                    }\\n                }\"])), barAddress, block, _info.properties.toString()));\n\n            case 17:\n              result = _context.sent;\n              return _context.abrupt(\"return\", _info.callback(result.bar));\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  observeInfo: function observeInfo() {\n    var query = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n            subscription {\\n                bar(id: \\\"\", \"\\\") {\\n                    \", \"\\n                }\\n        }\"])), barAddress, _info.properties.toString());\n    var client = new SubscriptionClient(graphWSEndpoints.bar, {\n      reconnect: true\n    }, ws);\n    var observable = client.request({\n      query: query\n    });\n    return {\n      subscribe: function subscribe(_ref2) {\n        var _next = _ref2.next,\n            error = _ref2.error,\n            complete = _ref2.complete;\n        return observable.subscribe({\n          next: function next(results) {\n            _next(_info.callback(results.data.bar));\n          },\n          error: error,\n          complete: complete\n        });\n      }\n    };\n  },\n  user: function user() {\n    var _arguments2 = arguments;\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _ref3, _ref3$block, block, _ref3$timestamp, timestamp, _ref3$user_address, user_address, result;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _ref3 = _arguments2.length > 0 && _arguments2[0] !== undefined ? _arguments2[0] : {}, _ref3$block = _ref3.block, block = _ref3$block === void 0 ? undefined : _ref3$block, _ref3$timestamp = _ref3.timestamp, timestamp = _ref3$timestamp === void 0 ? undefined : _ref3$timestamp, _ref3$user_address = _ref3.user_address, user_address = _ref3$user_address === void 0 ? undefined : _ref3$user_address;\n\n              if (user_address) {\n                _context2.next = 3;\n                break;\n              }\n\n              throw new Error(\"sushi-data: User address undefined\");\n\n            case 3:\n              if (!block) {\n                _context2.next = 7;\n                break;\n              }\n\n              _context2.t0 = block;\n              _context2.next = 15;\n              break;\n\n            case 7:\n              if (!timestamp) {\n                _context2.next = 13;\n                break;\n              }\n\n              _context2.next = 10;\n              return timestampToBlock(timestamp);\n\n            case 10:\n              _context2.t1 = _context2.sent;\n              _context2.next = 14;\n              break;\n\n            case 13:\n              _context2.t1 = undefined;\n\n            case 14:\n              _context2.t0 = _context2.t1;\n\n            case 15:\n              block = _context2.t0;\n              block = block ? \"block: { number: \".concat(block, \" }\") : \"\";\n              _context2.next = 19;\n              return request(graphAPIEndpoints.bar, gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"{\\n                    user(id: \\\"\", \"\\\", \", \") {\\n                        \", \"\\n                    }\\n                }\"])), user_address.toLowerCase(), block, _user.properties.toString()));\n\n            case 19:\n              result = _context2.sent;\n              return _context2.abrupt(\"return\", _user.callback(result.user));\n\n            case 21:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  }\n};\nvar _info = {\n  properties: ['decimals', 'name', 'sushi', 'symbol', 'totalSupply', 'ratio', 'xSushiMinted', 'xSushiBurned', 'sushiStaked', 'sushiStakedUSD', 'sushiHarvested', 'sushiHarvestedUSD', 'xSushiAge', 'xSushiAgeDestroyed', 'updatedAt'],\n  callback: function callback(results) {\n    return {\n      decimals: Number(results.decimals),\n      name: results.name,\n      sushi: results.sushi,\n      symbol: results.symbol,\n      totalSupply: Number(results.totalSupply),\n      ratio: Number(results.ratio),\n      xSushiMinted: Number(results.xSushiMinted),\n      xSushiBurned: Number(results.xSushiBurned),\n      sushiStaked: Number(results.totalSupply) * Number(results.ratio),\n      sushiStakedUSD: Number(results.sushiStakedUSD),\n      sushiHarvested: Number(results.sushiHarvested),\n      sushiHarvestedUSD: Number(results.sushiHarvestedUSD),\n      xSushiAge: Number(results.xSushiAge),\n      xSushiAgeDestroyed: Number(results.xSushiAgeDestroyed),\n      updatedAt: Number(results.updatedAt)\n    };\n  }\n};\nvar _user = {\n  properties: ['xSushi', 'xSushiIn', 'xSushiOut', 'xSushiMinted', 'xSushiBurned', 'xSushiOffset', 'xSushiAge', 'xSushiAgeDestroyed', 'sushiStaked', 'sushiStakedUSD', 'sushiHarvested', 'sushiHarvestedUSD', 'sushiIn', 'sushiOut', 'usdOut', 'usdIn', 'updatedAt', 'sushiOffset', 'usdOffset'],\n  callback: function callback(results) {\n    return {\n      xSushi: Number(results.xSushi),\n      xSushiIn: Number(results.xSushiIn),\n      xSushiOut: Number(results.xSushiOut),\n      xSushiMinted: Number(results.xSushiMinted),\n      xSushiBurned: Number(results.xSushiBurned),\n      xSushiOffset: Number(results.xSushiOffset),\n      xSushiAge: Number(results.xSushiAge),\n      xSushiAgeDestroyed: Number(results.xSushiAgeDestroyed),\n      sushiStaked: Number(results.sushiStaked),\n      sushiStakedUSD: Number(results.sushiStakedUSD),\n      sushiHarvested: Number(results.sushiHarvested),\n      sushiHarvestedUSD: Number(results.sushiHarvestedUSD),\n      sushiIn: Number(results.sushiIn),\n      sushiOut: Number(results.sushiOut),\n      usdOut: Number(results.usdOut),\n      usdIn: Number(results.usdIn),\n      updatedAt: Number(results.updatedAt),\n      sushiOffset: Number(results.sushiOffset),\n      usdOffset: Number(results.usdOffset)\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"script"}