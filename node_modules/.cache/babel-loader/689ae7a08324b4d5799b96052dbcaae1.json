{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar KBucket = require('k-bucket');\n\nvar utils = require('./utils');\n/**\n * A wrapper around `k-bucket`, to provide easy store and\n * retrival for peers.\n */\n\n\nvar RoutingTable = /*#__PURE__*/function () {\n  /**\n   * @param {PeerId} self\n   * @param {number} kBucketSize\n   */\n  function RoutingTable(self, kBucketSize) {\n    _classCallCheck(this, RoutingTable);\n\n    this.self = self;\n    this._onPing = this._onPing.bind(this);\n\n    this._onInit(kBucketSize);\n  } // -- Private Methods\n\n\n  _createClass(RoutingTable, [{\n    key: \"_onInit\",\n    value: function () {\n      var _onInit2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(kBucketSize) {\n        var selfKey;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return utils.convertPeerId(this.self);\n\n              case 2:\n                selfKey = _context.sent;\n                this.kb = new KBucket({\n                  localNodeId: selfKey,\n                  numberOfNodesPerKBucket: kBucketSize,\n                  numberOfNodesToPing: 1\n                });\n                this.kb.on('ping', this._onPing);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _onInit(_x) {\n        return _onInit2.apply(this, arguments);\n      }\n\n      return _onInit;\n    }()\n    /**\n     * Called on the `ping` event from `k-bucket`.\n     * Currently this just removes the oldest contact from\n     * the list, without acutally pinging the individual peers.\n     * This is the same as go does, but should probably\n     * be upgraded to actually ping the individual peers.\n     *\n     * @param {Array<Object>} oldContacts\n     * @param {Object} newContact\n     * @returns {undefined}\n     * @private\n     */\n\n  }, {\n    key: \"_onPing\",\n    value: function _onPing(oldContacts, newContact) {\n      // just use the first one (k-bucket sorts from oldest to newest)\n      var oldest = oldContacts[0]; // remove the oldest one\n\n      this.kb.remove(oldest.id); // add the new one\n\n      this.kb.add(newContact);\n    } // -- Public Interface\n\n    /**\n     * Amount of currently stored peers.\n     *\n     * @type {number}\n     */\n\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.kb.count();\n    }\n    /**\n     * Find a specific peer by id.\n     *\n     * @param {PeerId} peer\n     * @returns {Promise<PeerId>}\n     */\n\n  }, {\n    key: \"find\",\n    value: function () {\n      var _find = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(peer) {\n        var key, closest;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return utils.convertPeerId(peer);\n\n              case 2:\n                key = _context2.sent;\n                closest = this.closestPeer(key);\n\n                if (!(closest && closest.isEqual(peer))) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", closest);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function find(_x2) {\n        return _find.apply(this, arguments);\n      }\n\n      return find;\n    }()\n    /**\n     * Retrieve the closest peers to the given key.\n     *\n     * @param {Buffer} key\n     * @returns {PeerId|undefined}\n     */\n\n  }, {\n    key: \"closestPeer\",\n    value: function closestPeer(key) {\n      var res = this.closestPeers(key, 1);\n\n      if (res.length > 0) {\n        return res[0];\n      }\n    }\n    /**\n     * Retrieve the `count`-closest peers to the given key.\n     *\n     * @param {Buffer} key\n     * @param {number} count\n     * @returns {Array<PeerId>}\n     */\n\n  }, {\n    key: \"closestPeers\",\n    value: function closestPeers(key, count) {\n      return this.kb.closest(key, count).map(function (p) {\n        return p.peer;\n      });\n    }\n    /**\n     * Add or update the routing table with the given peer.\n     *\n     * @param {PeerId} peer\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"add\",\n    value: function () {\n      var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(peer) {\n        var id;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return utils.convertPeerId(peer);\n\n              case 2:\n                id = _context3.sent;\n                this.kb.add({\n                  id: id,\n                  peer: peer\n                });\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function add(_x3) {\n        return _add.apply(this, arguments);\n      }\n\n      return add;\n    }()\n    /**\n     * Remove a given peer from the table.\n     *\n     * @param {PeerId} peer\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function () {\n      var _remove = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(peer) {\n        var id;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return utils.convertPeerId(peer);\n\n              case 2:\n                id = _context4.sent;\n                this.kb.remove(id);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function remove(_x4) {\n        return _remove.apply(this, arguments);\n      }\n\n      return remove;\n    }()\n  }]);\n\n  return RoutingTable;\n}();\n\nmodule.exports = RoutingTable;","map":null,"metadata":{},"sourceType":"script"}