{"ast":null,"code":"//normalize a ws url.\nvar URL = require('url');\n\nmodule.exports = function (url, location, protocolMap, defaultProtocol) {\n  protocolMap = protocolMap || {};\n  /*\n   https://nodejs.org/dist/latest-v6.x/docs/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost\n   I didn't know this, but url.parse takes a 3rd\n  argument which interprets \"//foo.com\" as the hostname,\n  but without the protocol. by default, // is interpreted\n  as the path.\n   that lets us do what the wsurl module does.\n  https://www.npmjs.com/package/wsurl\n   but most of the time, I want to write js\n  that will work on localhost, and will work\n  on a server...\n   so I want to just do createWebSocket('/')\n  and get \"ws://mydomain.com/\"\n   */\n\n  var url = URL.parse(url, false, true);\n  var proto;\n  if (url.protocol) proto = url.protocol;else {\n    proto = location.protocol ? location.protocol.replace(/:$/, '') : 'http';\n    proto = (protocolMap[proto] || defaultProtocol || proto) + ':';\n  } //handle quirk in url package\n\n  if (url.host && url.host[0] === ':') url.host = null; //useful for websockets\n\n  if (url.hostname) {\n    return URL.format({\n      protocol: proto,\n      slashes: true,\n      hostname: url.hostname,\n      port: url.port,\n      pathname: url.pathname,\n      search: url.search\n    });\n  } else url.host = location.host; //included for completeness. would you want to do this?\n\n\n  if (url.port) {\n    return URL.format({\n      protocol: proto,\n      slashes: true,\n      host: location.hostname + ':' + url.port,\n      port: url.port,\n      pathname: url.pathname,\n      search: url.search\n    });\n  } //definately useful for websockets\n\n\n  if (url.pathname) {\n    return URL.format({\n      protocol: proto,\n      slashes: true,\n      host: url.host,\n      pathname: url.pathname,\n      search: url.search\n    });\n  } else url.pathname = location.pathname; //included for completeness. would you want to do this?\n\n\n  if (url.search) {\n    return URL.format({\n      protocol: proto,\n      slashes: true,\n      host: url.host,\n      pathname: url.pathname,\n      search: url.search\n    });\n  } else url.search = location.search;\n\n  return url.format(url);\n};","map":null,"metadata":{},"sourceType":"script"}