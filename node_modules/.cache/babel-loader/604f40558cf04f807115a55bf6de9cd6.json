{"ast":null,"code":"import debug from \"debug\";\nimport { DUMP_SESSION_KEYS } from './constants';\nexport const logger = debug('libp2p:noise');\nlet keyLogger;\n\nif (DUMP_SESSION_KEYS) {\n  keyLogger = logger;\n} else {\n  keyLogger = () => {\n    /* do nothing */\n  };\n}\n\nexport function logLocalStaticKeys(s) {\n  keyLogger(\"LOCAL_STATIC_PUBLIC_KEY \".concat(s.publicKey.toString('hex')));\n  keyLogger(\"LOCAL_STATIC_PRIVATE_KEY \".concat(s.privateKey.toString('hex')));\n}\nexport function logLocalEphemeralKeys(e) {\n  if (e) {\n    keyLogger(\"LOCAL_PUBLIC_EPHEMERAL_KEY \".concat(e.publicKey.toString('hex')));\n    keyLogger(\"LOCAL_PRIVATE_EPHEMERAL_KEY \".concat(e.privateKey.toString('hex')));\n  } else {\n    keyLogger('Missing local ephemeral keys.');\n  }\n}\nexport function logRemoteStaticKey(rs) {\n  keyLogger(\"REMOTE_STATIC_PUBLIC_KEY \".concat(rs.toString('hex')));\n}\nexport function logRemoteEphemeralKey(re) {\n  keyLogger(\"REMOTE_EPHEMERAL_PUBLIC_KEY \".concat(re.toString('hex')));\n}\nexport function logCipherState(session) {\n  if (session.cs1 && session.cs2) {\n    keyLogger(\"CIPHER_STATE_1 \".concat(session.cs1.n, \" \").concat(session.cs1.k.toString('hex')));\n    keyLogger(\"CIPHER_STATE_2 \".concat(session.cs2.n, \" \").concat(session.cs2.k.toString('hex')));\n  } else {\n    keyLogger('Missing cipher state.');\n  }\n}","map":null,"metadata":{},"sourceType":"module"}