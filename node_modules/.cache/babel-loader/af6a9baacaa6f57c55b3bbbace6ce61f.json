{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar slicedToArray = require('./slicedToArray-a8a77f0e.js');\n\nrequire('./unsupportedIterableToArray-f175acfa.js');\n\nrequire('./miscellaneous.js');\n\nvar environment = require('./environment.js');\n\nvar aragon = require('./aragon.js');\n\nvar THEME_NAME = 'Aragon UI';\nvar THEME_DARK_NAME = 'Aragon UI Dark';\nvar BRAND_NAME = 'Aragon Brand'; // Name of the group a given palette belong to\n\nvar getGroupName = function getGroupName(name) {\n  if (name === THEME_NAME) return 'theme';\n  if (name === THEME_DARK_NAME) return 'themeDark';\n  if (name === BRAND_NAME) return 'brand';\n  return 'colors';\n}; // Resolve a single color\n\n\nvar resolveColor = function resolveColor(value, palettes) {\n  // already resolved color\n  if (!value.startsWith('=')) {\n    return value;\n  }\n\n  var _value$slice$split = value.slice(1).split('.'),\n      _value$slice$split2 = slicedToArray.slicedToArray(_value$slice$split, 2),\n      paletteName = _value$slice$split2[0],\n      key = _value$slice$split2[1];\n\n  var color = palettes[paletteName] && palettes[paletteName][key];\n\n  if (!color) {\n    throw new Error(\"resolveColor: \".concat(value, \" doesn\\u2019t seem to exist\"));\n  } // follow the references until we find one\n\n\n  if (color.startsWith('=')) {\n    return resolveColor(color, palettes);\n  }\n\n  return color;\n}; // Resolve all the colors in a palette\n\n\nvar resolveColors = function resolveColors(palette, palettes) {\n  return Object.entries(palette).reduce(function (pal, _ref) {\n    var _ref2 = slicedToArray.slicedToArray(_ref, 2),\n        name = _ref2[0],\n        value = _ref2[1];\n\n    if (typeof value === 'string') {\n      pal[name] = resolveColor(value, palettes);\n    }\n\n    return pal;\n  }, {});\n}; // Prepare groups from the palettes: theme, themeDark, brand and colors.\n\n\nvar generateGroups = function generateGroups(palettes) {\n  return Object.entries(palettes).reduce(function (groups, _ref3) {\n    var _ref4 = slicedToArray.slicedToArray(_ref3, 2),\n        paletteName = _ref4[0],\n        palette = _ref4[1];\n\n    var groupName = getGroupName(paletteName);\n\n    if (groupName === 'colors') {\n      groups.colors[paletteName] = resolveColors(palette, palettes);\n    } else {\n      groups[groupName] = resolveColors(palette, palettes);\n    }\n\n    return groups;\n  }, {\n    colors: {}\n  });\n}; // Deprecate any access to the palettes\n\n\nvar _Object$fromEntries = Object.fromEntries(Object.entries(generateGroups(aragon.default)).map(function (_ref5) {\n  var _ref6 = slicedToArray.slicedToArray(_ref5, 2),\n      name = _ref6[0],\n      group = _ref6[1];\n\n  return [name, new Proxy(group, {\n    get: function get(group, colorName) {\n      if (group[colorName]) {\n        environment.warnOnce(\"theme-legacy:\".concat(name, \".\").concat(colorName), \"\".concat(name, \".\").concat(colorName, \" was accessed but \").concat(name, \" will be removed soon, \") + \"please use useTheme() instead.\");\n      } else {\n        environment.warn(\"\".concat(name, \".\").concat(colorName, \" doesn\\u2019t exist. \").concat(name, \" will be removed soon, \") + \"please use useTheme() instead.\");\n      }\n\n      return group[colorName];\n    }\n  })];\n})),\n    themeDark = _Object$fromEntries.themeDark,\n    theme = _Object$fromEntries.theme,\n    brand = _Object$fromEntries.brand,\n    colors = _Object$fromEntries.colors; // TODO: show a deprecating warning when any of these colors get accessed once.\n\n\nexports.brand = brand;\nexports.colors = colors;\nexports.theme = theme;\nexports.themeDark = themeDark;","map":{"version":3,"sources":["../src/theme-legacy/palettes.js"],"names":["THEME_NAME","THEME_DARK_NAME","BRAND_NAME","getGroupName","name","resolveColor","value","paletteName","key","color","palettes","resolveColors","pal","generateGroups","palette","groupName","groups","colors","themeDark","theme","brand","aragon","group","get","warnOnce","warn"],"mappings":"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","sourcesContent":["import { warn, warnOnce } from '../utils'\nimport aragon from './aragon'\n\n// These need to match the names in the Open Color palettes\nconst THEME_NAME = 'Aragon UI'\nconst THEME_DARK_NAME = 'Aragon UI Dark'\nconst BRAND_NAME = 'Aragon Brand'\n\n// Name of the group a given palette belong to\nconst getGroupName = name => {\n  if (name === THEME_NAME) return 'theme'\n  if (name === THEME_DARK_NAME) return 'themeDark'\n  if (name === BRAND_NAME) return 'brand'\n  return 'colors'\n}\n\n// Resolve a single color\nconst resolveColor = (value, palettes) => {\n  // already resolved color\n  if (!value.startsWith('=')) {\n    return value\n  }\n\n  const [paletteName, key] = value.slice(1).split('.')\n  const color = palettes[paletteName] && palettes[paletteName][key]\n\n  if (!color) {\n    throw new Error(`resolveColor: ${value} doesn’t seem to exist`)\n  }\n\n  // follow the references until we find one\n  if (color.startsWith('=')) {\n    return resolveColor(color, palettes)\n  }\n  return color\n}\n\n// Resolve all the colors in a palette\nconst resolveColors = (palette, palettes) =>\n  Object.entries(palette).reduce((pal, [name, value]) => {\n    if (typeof value === 'string') {\n      pal[name] = resolveColor(value, palettes)\n    }\n    return pal\n  }, {})\n\n// Prepare groups from the palettes: theme, themeDark, brand and colors.\nconst generateGroups = palettes =>\n  Object.entries(palettes).reduce(\n    (groups, [paletteName, palette]) => {\n      const groupName = getGroupName(paletteName)\n\n      if (groupName === 'colors') {\n        groups.colors[paletteName] = resolveColors(palette, palettes)\n      } else {\n        groups[groupName] = resolveColors(palette, palettes)\n      }\n\n      return groups\n    },\n    { colors: {} }\n  )\n\n// Deprecate any access to the palettes\nconst { themeDark, theme, brand, colors } = Object.fromEntries(\n  Object.entries(generateGroups(aragon)).map(([name, group]) => [\n    name,\n    new Proxy(group, {\n      get(group, colorName) {\n        if (group[colorName]) {\n          warnOnce(\n            `theme-legacy:${name}.${colorName}`,\n            `${name}.${colorName} was accessed but ${name} will be removed soon, ` +\n              `please use useTheme() instead.`\n          )\n        } else {\n          warn(\n            `${name}.${colorName} doesn’t exist. ${name} will be removed soon, ` +\n              `please use useTheme() instead.`\n          )\n        }\n        return group[colorName]\n      },\n    }),\n  ])\n)\n\n// TODO: show a deprecating warning when any of these colors get accessed once.\nexport { themeDark, theme, brand, colors }\n"]},"metadata":{},"sourceType":"script"}