{"ast":null,"code":"'use strict';\n/**\n * This code is based on `latency-monitor` (https://github.com/mlucool/latency-monitor) by `mlucool` (https://github.com/mlucool), available under Apache License 2.0 (https://github.com/mlucool/latency-monitor/blob/master/LICENSE)\n */\n\n/* global window */\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar globalThis = require('ipfs-utils/src/globalthis');\n\nvar EventEmitter = require('events');\n\nvar VisibilityChangeEmitter = require('./visibility-change-emitter');\n\nvar debug = require('debug')('latency-monitor:LatencyMonitor');\n/**\n * @typedef {Object} SummaryObject\n * @property {Number} events How many events were called\n * @property {Number} minMS What was the min time for a cb to be called\n * @property {Number} maxMS What was the max time for a cb to be called\n * @property {Number} avgMs What was the average time for a cb to be called\n * @property {Number} lengthMs How long this interval was in ms\n */\n\n/**\n * A class to monitor latency of any async function which works in a browser or node. This works by periodically calling\n * the asyncTestFn and timing how long it takes the callback to be called. It can also periodically emit stats about this.\n * This can be disabled and stats can be pulled via setting dataEmitIntervalMs = 0.\n *\n * The default implementation is an event loop latency monitor. This works by firing periodic events into the event loop\n * and timing how long it takes to get back.\n *\n * @example\n * const monitor = new LatencyMonitor();\n * monitor.on('data', (summary) => console.log('Event Loop Latency: %O', summary));\n *\n * @example\n * const monitor = new LatencyMonitor({latencyCheckIntervalMs: 1000, dataEmitIntervalMs: 60000, asyncTestFn:ping});\n * monitor.on('data', (summary) => console.log('Ping Pong Latency: %O', summary));\n */\n\n\nvar LatencyMonitor = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(LatencyMonitor, _EventEmitter);\n\n  var _super = _createSuper(LatencyMonitor);\n\n  /**\n     * @param {Number} [latencyCheckIntervalMs=500] How often to add a latency check event (ms)\n     * @param {Number} [dataEmitIntervalMs=5000] How often to summarize latency check events. null or 0 disables event firing\n     * @param {function} [asyncTestFn] What cb-style async function to use\n     * @param {Number} [latencyRandomPercentage=5] What percent (+/-) of latencyCheckIntervalMs should we randomly use? This helps avoid alignment to other events.\n     */\n  function LatencyMonitor() {\n    var _this;\n\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        latencyCheckIntervalMs = _ref.latencyCheckIntervalMs,\n        dataEmitIntervalMs = _ref.dataEmitIntervalMs,\n        asyncTestFn = _ref.asyncTestFn,\n        latencyRandomPercentage = _ref.latencyRandomPercentage;\n\n    _classCallCheck(this, LatencyMonitor);\n\n    _this = _super.call(this);\n\n    var that = _assertThisInitialized(_this); // 0 isn't valid here, so its ok to use ||\n\n\n    that.latencyCheckIntervalMs = latencyCheckIntervalMs || 500; // 0.5s\n\n    that.latencyRandomPercentage = latencyRandomPercentage || 10;\n    that._latecyCheckMultiply = 2 * (that.latencyRandomPercentage / 100.0) * that.latencyCheckIntervalMs;\n    that._latecyCheckSubtract = that._latecyCheckMultiply / 2;\n    that.dataEmitIntervalMs = dataEmitIntervalMs === null || dataEmitIntervalMs === 0 ? undefined : dataEmitIntervalMs || 5 * 1000; // 5s\n\n    debug('latencyCheckIntervalMs: %s dataEmitIntervalMs: %s', that.latencyCheckIntervalMs, that.dataEmitIntervalMs);\n\n    if (that.dataEmitIntervalMs) {\n      debug('Expecting ~%s events per summary', that.latencyCheckIntervalMs / that.dataEmitIntervalMs);\n    } else {\n      debug('Not emitting summaries');\n    }\n\n    that.asyncTestFn = asyncTestFn; // If there is no asyncFn, we measure latency\n    // If process: use high resolution timer\n\n    if (globalThis.process && globalThis.process.hrtime) {\n      debug('Using process.hrtime for timing');\n      that.now = globalThis.process.hrtime;\n\n      that.getDeltaMS = function (startTime) {\n        var hrtime = that.now(startTime);\n        return hrtime[0] * 1000 + hrtime[1] / 1000000;\n      }; // Let's try for a timer that only monotonically increases\n\n    } else if (typeof window !== 'undefined' && window.performance && window.performance.now) {\n      debug('Using performance.now for timing');\n      that.now = window.performance.now.bind(window.performance);\n\n      that.getDeltaMS = function (startTime) {\n        return Math.round(that.now() - startTime);\n      };\n    } else {\n      debug('Using Date.now for timing');\n      that.now = Date.now;\n\n      that.getDeltaMS = function (startTime) {\n        return that.now() - startTime;\n      };\n    }\n\n    that._latencyData = that._initLatencyData(); // We check for isBrowser because of browsers set max rates of timeouts when a page is hidden,\n    // so we fall back to another library\n    // See: http://stackoverflow.com/questions/6032429/chrome-timeouts-interval-suspended-in-background-tabs\n\n    if (isBrowser()) {\n      that._visibilityChangeEmitter = new VisibilityChangeEmitter();\n\n      that._visibilityChangeEmitter.on('visibilityChange', function (pageInFocus) {\n        if (pageInFocus) {\n          that._startTimers();\n        } else {\n          that._emitSummary();\n\n          that._stopTimers();\n        }\n      });\n    }\n\n    if (!that._visibilityChangeEmitter || that._visibilityChangeEmitter.isVisible()) {\n      that._startTimers();\n    }\n\n    return _this;\n  }\n  /**\n     * Start internal timers\n     * @private\n     */\n\n\n  _createClass(LatencyMonitor, [{\n    key: \"_startTimers\",\n    value: function _startTimers() {\n      var _this2 = this;\n\n      // Timer already started, ignore this\n      if (this._checkLatencyID) {\n        return;\n      }\n\n      this._checkLatency();\n\n      if (this.dataEmitIntervalMs) {\n        this._emitIntervalID = setInterval(function () {\n          return _this2._emitSummary();\n        }, this.dataEmitIntervalMs);\n\n        if (typeof this._emitIntervalID.unref === 'function') {\n          this._emitIntervalID.unref(); // Doesn't block exit\n\n        }\n      }\n    }\n    /**\n       * Stop internal timers\n       * @private\n       */\n\n  }, {\n    key: \"_stopTimers\",\n    value: function _stopTimers() {\n      if (this._checkLatencyID) {\n        clearTimeout(this._checkLatencyID);\n        this._checkLatencyID = undefined;\n      }\n\n      if (this._emitIntervalID) {\n        clearInterval(this._emitIntervalID);\n        this._emitIntervalID = undefined;\n      }\n    }\n    /**\n       * Emit summary only if there were events. It might not have any events if it was forced via a page hidden/show\n       * @private\n       */\n\n  }, {\n    key: \"_emitSummary\",\n    value: function _emitSummary() {\n      var summary = this.getSummary();\n\n      if (summary.events > 0) {\n        this.emit('data', summary);\n      }\n    }\n    /**\n       * Calling this function will end the collection period. If a timing event was already fired and somewhere in the queue,\n       * it will not count for this time period\n       * @returns {SummaryObject}\n       */\n\n  }, {\n    key: \"getSummary\",\n    value: function getSummary() {\n      // We might want to adjust for the number of expected events\n      // Example: first 1 event it comes back, then such a long blocker that the next emit check comes\n      // Then this fires - looks like no latency!!\n      var latency = {\n        events: this._latencyData.events,\n        minMs: this._latencyData.minMs,\n        maxMs: this._latencyData.maxMs,\n        avgMs: this._latencyData.events ? this._latencyData.totalMs / this._latencyData.events : Number.POSITIVE_INFINITY,\n        lengthMs: this.getDeltaMS(this._latencyData.startTime)\n      };\n      this._latencyData = this._initLatencyData(); // Clear\n\n      debug('Summary: %O', latency);\n      return latency;\n    }\n    /**\n       * Randomly calls an async fn every roughly latencyCheckIntervalMs (plus some randomness). If no async fn is found,\n       * it will simply report on event loop latency.\n       *\n       * @private\n       */\n\n  }, {\n    key: \"_checkLatency\",\n    value: function _checkLatency() {\n      var _this3 = this;\n\n      var that = this; // Randomness is needed to avoid alignment by accident to regular things in the event loop\n\n      var randomness = Math.random() * that._latecyCheckMultiply - that._latecyCheckSubtract; // We use this to ensure that in case some overlap somehow, we don't take the wrong startTime/offset\n\n\n      var localData = {\n        deltaOffset: Math.ceil(that.latencyCheckIntervalMs + randomness),\n        startTime: that.now()\n      };\n\n      var cb = function cb() {\n        // We are already stopped, ignore this datapoint\n        if (!_this3._checkLatencyID) {\n          return;\n        }\n\n        var deltaMS = that.getDeltaMS(localData.startTime) - localData.deltaOffset;\n\n        that._checkLatency(); // Start again ASAP\n        // Add the data point. If this gets complex, refactor it\n\n\n        that._latencyData.events++;\n        that._latencyData.minMs = Math.min(that._latencyData.minMs, deltaMS);\n        that._latencyData.maxMs = Math.max(that._latencyData.maxMs, deltaMS);\n        that._latencyData.totalMs += deltaMS;\n        debug('MS: %s Data: %O', deltaMS, that._latencyData);\n      };\n\n      debug('localData: %O', localData);\n      this._checkLatencyID = setTimeout(function () {\n        // This gets rid of including event loop\n        if (that.asyncTestFn) {\n          // Clear timing related things\n          localData.deltaOffset = 0;\n          localData.startTime = that.now();\n          that.asyncTestFn(cb);\n        } else {\n          // setTimeout is not more accurate than 1ms, so this will ensure positive numbers. Add 1 to emitted data to remove.\n          // This is not the best, but for now it'll be just fine. This isn't meant to be sub ms accurate.\n          localData.deltaOffset -= 1; // If there is no function to test, we mean check latency which is a special case that is really cb => cb()\n          // We avoid that for the few extra function all overheads. Also, we want to keep the timers different\n\n          cb();\n        }\n      }, localData.deltaOffset);\n\n      if (typeof this._checkLatencyID.unref === 'function') {\n        this._checkLatencyID.unref(); // Doesn't block exit\n\n      }\n    }\n  }, {\n    key: \"_initLatencyData\",\n    value: function _initLatencyData() {\n      return {\n        startTime: this.now(),\n        minMs: Number.POSITIVE_INFINITY,\n        maxMs: Number.NEGATIVE_INFINITY,\n        events: 0,\n        totalMs: 0\n      };\n    }\n  }]);\n\n  return LatencyMonitor;\n}(EventEmitter);\n\nfunction isBrowser() {\n  return typeof window !== 'undefined';\n}\n\nmodule.exports = LatencyMonitor;","map":null,"metadata":{},"sourceType":"script"}