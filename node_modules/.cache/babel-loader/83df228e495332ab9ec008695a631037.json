{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar pSettle = require('p-settle');\n\nvar _require = require('./errors'),\n    codes = _require.codes;\n\nvar errCode = require('err-code');\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:transports');\nlog.error = debug('libp2p:transports:error');\n\nvar TransportManager = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   * @param {object} options\n   * @param {Libp2p} options.libp2p The Libp2p instance. It will be passed to the transports.\n   * @param {Upgrader} options.upgrader The upgrader to provide to the transports\n   */\n  function TransportManager(_ref) {\n    var libp2p = _ref.libp2p,\n        upgrader = _ref.upgrader;\n\n    _classCallCheck(this, TransportManager);\n\n    this.libp2p = libp2p;\n    this.upgrader = upgrader;\n    this._transports = new Map();\n    this._listeners = new Map();\n  }\n  /**\n   * Adds a `Transport` to the manager\n   *\n   * @param {String} key\n   * @param {Transport} Transport\n   * @param {*} transportOptions Additional options to pass to the transport\n   * @returns {void}\n   */\n\n\n  _createClass(TransportManager, [{\n    key: \"add\",\n    value: function add(key, Transport) {\n      var transportOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      log('adding %s', key);\n\n      if (!key) {\n        throw errCode(new Error(\"Transport must have a valid key, was given '\".concat(key, \"'\")), codes.ERR_INVALID_KEY);\n      }\n\n      if (this._transports.has(key)) {\n        throw errCode(new Error('There is already a transport with this key'), codes.ERR_DUPLICATE_TRANSPORT);\n      }\n\n      var transport = new Transport(_objectSpread(_objectSpread({}, transportOptions), {}, {\n        libp2p: this.libp2p,\n        upgrader: this.upgrader\n      }));\n\n      this._transports.set(key, transport);\n\n      if (!this._listeners.has(key)) {\n        this._listeners.set(key, []);\n      }\n    }\n    /**\n     * Stops all listeners\n     * @async\n     */\n\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var tasks, _iterator, _step, _step$value, key, listeners, listener, _iterator2, _step2, _key;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                tasks = [];\n                _iterator = _createForOfIteratorHelper(this._listeners);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    _step$value = _slicedToArray(_step.value, 2), key = _step$value[0], listeners = _step$value[1];\n                    log('closing listeners for %s', key);\n\n                    while (listeners.length) {\n                      listener = listeners.pop();\n                      tasks.push(listener.close());\n                    }\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                _context.next = 5;\n                return Promise.all(tasks);\n\n              case 5:\n                log('all listeners closed');\n                _iterator2 = _createForOfIteratorHelper(this._listeners.keys());\n\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    _key = _step2.value;\n\n                    this._listeners.set(_key, []);\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function close() {\n        return _close.apply(this, arguments);\n      }\n\n      return close;\n    }()\n    /**\n     * Dials the given Multiaddr over it's supported transport\n     * @param {Multiaddr} ma\n     * @param {*} options\n     * @returns {Promise<Connection>}\n     */\n\n  }, {\n    key: \"dial\",\n    value: function () {\n      var _dial = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ma, options) {\n        var transport;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                transport = this.transportForMultiaddr(ma);\n\n                if (transport) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                throw errCode(new Error(\"No transport available for address \".concat(String(ma))), codes.ERR_TRANSPORT_UNAVAILABLE);\n\n              case 3:\n                _context2.prev = 3;\n                _context2.next = 6;\n                return transport.dial(ma, options);\n\n              case 6:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](3);\n                if (!_context2.t0.code) _context2.t0.code = codes.ERR_TRANSPORT_DIAL_FAILED;\n                throw _context2.t0;\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[3, 9]]);\n      }));\n\n      function dial(_x, _x2) {\n        return _dial.apply(this, arguments);\n      }\n\n      return dial;\n    }()\n    /**\n     * Returns all Multiaddr's the listeners are using\n     * @returns {Multiaddr[]}\n     */\n\n  }, {\n    key: \"getAddrs\",\n    value: function getAddrs() {\n      var addrs = [];\n\n      var _iterator3 = _createForOfIteratorHelper(this._listeners.values()),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var listeners = _step3.value;\n\n          var _iterator4 = _createForOfIteratorHelper(listeners),\n              _step4;\n\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var listener = _step4.value;\n              addrs = [].concat(_toConsumableArray(addrs), _toConsumableArray(listener.getAddrs()));\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return addrs;\n    }\n    /**\n     * Returns all the transports instances.\n     * @returns {Iterator<Transport>}\n     */\n\n  }, {\n    key: \"getTransports\",\n    value: function getTransports() {\n      return this._transports.values();\n    }\n    /**\n     * Finds a transport that matches the given Multiaddr\n     * @param {Multiaddr} ma\n     * @returns {Transport|null}\n     */\n\n  }, {\n    key: \"transportForMultiaddr\",\n    value: function transportForMultiaddr(ma) {\n      var _iterator5 = _createForOfIteratorHelper(this._transports.values()),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var transport = _step5.value;\n          var addrs = transport.filter([ma]);\n          if (addrs.length) return transport;\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      return null;\n    }\n    /**\n     * Starts listeners for each given Multiaddr.\n     * @async\n     * @param {Multiaddr[]} addrs\n     */\n\n  }, {\n    key: \"listen\",\n    value: function () {\n      var _listen = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(addrs) {\n        var couldNotListen, _iterator6, _step6, _step6$value, key, transport, supportedAddrs, tasks, _iterator7, _step7, addr, listener, results, isListening;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(addrs.length === 0)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                log('no addresses were provided for listening, this node is dial only');\n                return _context3.abrupt(\"return\");\n\n              case 3:\n                couldNotListen = [];\n                _iterator6 = _createForOfIteratorHelper(this._transports.entries());\n                _context3.prev = 5;\n\n                _iterator6.s();\n\n              case 7:\n                if ((_step6 = _iterator6.n()).done) {\n                  _context3.next = 24;\n                  break;\n                }\n\n                _step6$value = _slicedToArray(_step6.value, 2), key = _step6$value[0], transport = _step6$value[1];\n                supportedAddrs = transport.filter(addrs);\n                tasks = []; // For each supported multiaddr, create a listener\n\n                _iterator7 = _createForOfIteratorHelper(supportedAddrs);\n\n                try {\n                  for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                    addr = _step7.value;\n                    log('creating listener for %s on %s', key, addr);\n                    listener = transport.createListener({}, this.onConnection);\n\n                    this._listeners.get(key).push(listener); // We need to attempt to listen on everything\n\n\n                    tasks.push(listener.listen(addr));\n                  } // Keep track of transports we had no addresses for\n\n                } catch (err) {\n                  _iterator7.e(err);\n                } finally {\n                  _iterator7.f();\n                }\n\n                if (!(tasks.length === 0)) {\n                  _context3.next = 16;\n                  break;\n                }\n\n                couldNotListen.push(key);\n                return _context3.abrupt(\"continue\", 22);\n\n              case 16:\n                _context3.next = 18;\n                return pSettle(tasks);\n\n              case 18:\n                results = _context3.sent;\n                // If we are listening on at least 1 address, succeed.\n                // TODO: we should look at adding a retry (`p-retry`) here to better support\n                // listening on remote addresses as they may be offline. We could then potentially\n                // just wait for any (`p-any`) listener to succeed on each transport before returning\n                isListening = results.find(function (r) {\n                  return r.isFulfilled === true;\n                });\n\n                if (isListening) {\n                  _context3.next = 22;\n                  break;\n                }\n\n                throw errCode(new Error(\"Transport (\".concat(key, \") could not listen on any available address\")), codes.ERR_NO_VALID_ADDRESSES);\n\n              case 22:\n                _context3.next = 7;\n                break;\n\n              case 24:\n                _context3.next = 29;\n                break;\n\n              case 26:\n                _context3.prev = 26;\n                _context3.t0 = _context3[\"catch\"](5);\n\n                _iterator6.e(_context3.t0);\n\n              case 29:\n                _context3.prev = 29;\n\n                _iterator6.f();\n\n                return _context3.finish(29);\n\n              case 32:\n                if (!(couldNotListen.length === this._transports.size)) {\n                  _context3.next = 34;\n                  break;\n                }\n\n                throw errCode(new Error(\"no valid addresses were provided for transports [\".concat(couldNotListen, \"]\")), codes.ERR_NO_VALID_ADDRESSES);\n\n              case 34:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[5, 26, 29, 32]]);\n      }));\n\n      function listen(_x3) {\n        return _listen.apply(this, arguments);\n      }\n\n      return listen;\n    }()\n    /**\n     * Removes the given transport from the manager.\n     * If a transport has any running listeners, they will be closed.\n     *\n     * @async\n     * @param {string} key\n     */\n\n  }, {\n    key: \"remove\",\n    value: function () {\n      var _remove = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(key) {\n        var _iterator8, _step8, listener;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                log('removing %s', key);\n\n                if (!this._listeners.has(key)) {\n                  _context4.next = 19;\n                  break;\n                }\n\n                // Close any running listeners\n                _iterator8 = _createForOfIteratorHelper(this._listeners.get(key));\n                _context4.prev = 3;\n\n                _iterator8.s();\n\n              case 5:\n                if ((_step8 = _iterator8.n()).done) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                listener = _step8.value;\n                _context4.next = 9;\n                return listener.close();\n\n              case 9:\n                _context4.next = 5;\n                break;\n\n              case 11:\n                _context4.next = 16;\n                break;\n\n              case 13:\n                _context4.prev = 13;\n                _context4.t0 = _context4[\"catch\"](3);\n\n                _iterator8.e(_context4.t0);\n\n              case 16:\n                _context4.prev = 16;\n\n                _iterator8.f();\n\n                return _context4.finish(16);\n\n              case 19:\n                this._transports.delete(key);\n\n                this._listeners.delete(key);\n\n              case 21:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[3, 13, 16, 19]]);\n      }));\n\n      function remove(_x4) {\n        return _remove.apply(this, arguments);\n      }\n\n      return remove;\n    }()\n    /**\n     * Removes all transports from the manager.\n     * If any listeners are running, they will be closed.\n     * @async\n     */\n\n  }, {\n    key: \"removeAll\",\n    value: function () {\n      var _removeAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var tasks, _iterator9, _step9, key;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                tasks = [];\n                _iterator9 = _createForOfIteratorHelper(this._transports.keys());\n\n                try {\n                  for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n                    key = _step9.value;\n                    tasks.push(this.remove(key));\n                  }\n                } catch (err) {\n                  _iterator9.e(err);\n                } finally {\n                  _iterator9.f();\n                }\n\n                _context5.next = 5;\n                return Promise.all(tasks);\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function removeAll() {\n        return _removeAll.apply(this, arguments);\n      }\n\n      return removeAll;\n    }()\n  }]);\n\n  return TransportManager;\n}();\n\nmodule.exports = TransportManager;","map":null,"metadata":{},"sourceType":"script"}