{"ast":null,"code":"'use strict';\n\nconst errCode = require('err-code');\n\nconst multibase = require('multibase');\n\nconst {\n  parallelMap,\n  collect\n} = require('streaming-iterables');\n\nconst pipe = require('it-pipe');\n\nconst {\n  resolvePath,\n  withTimeoutOption\n} = require('../../utils');\n\nconst {\n  PinTypes\n} = require('./pin-manager');\n\nconst PIN_RM_CONCURRENCY = 8;\n\nmodule.exports = ({\n  pinManager,\n  gcLock,\n  dag\n}) => {\n  return withTimeoutOption(async function rm(paths, options) {\n    options = options || {};\n    const recursive = options.recursive !== false;\n\n    if (options.cidBase && !multibase.names.includes(options.cidBase)) {\n      throw errCode(new Error('invalid multibase'), 'ERR_INVALID_MULTIBASE');\n    }\n\n    const cids = await resolvePath(dag, paths);\n    const release = await gcLock.readLock();\n\n    try {\n      // verify that each hash can be unpinned\n      const results = await pipe(cids, parallelMap(PIN_RM_CONCURRENCY, async cid => {\n        const {\n          pinned,\n          reason\n        } = await pinManager.isPinnedWithType(cid, PinTypes.all);\n\n        if (!pinned) {\n          throw new Error(`${cid} is not pinned`);\n        }\n\n        if (reason !== PinTypes.recursive && reason !== PinTypes.direct) {\n          throw new Error(`${cid} is pinned indirectly under ${reason}`);\n        }\n\n        if (reason === PinTypes.recursive && !recursive) {\n          throw new Error(`${cid} is pinned recursively`);\n        }\n\n        return cid;\n      }), collect); // update the pin sets in memory\n\n      results.forEach(cid => {\n        if (recursive && pinManager.recursivePins.has(cid.toString())) {\n          pinManager.recursivePins.delete(cid.toString());\n        } else {\n          pinManager.directPins.delete(cid.toString());\n        }\n      }); // persist updated pin sets to datastore\n\n      await pinManager.flushPins();\n      return results.map(cid => ({\n        cid\n      }));\n    } finally {\n      release();\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}