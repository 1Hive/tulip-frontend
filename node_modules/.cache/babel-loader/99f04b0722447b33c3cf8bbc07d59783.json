{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar slicedToArray = require('./slicedToArray-a8a77f0e.js');\n\nrequire('./unsupportedIterableToArray-f175acfa.js');\n\nvar React = require('react');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\n\nfunction initContainsComponent() {\n  var ContainsContext = /*#__PURE__*/React__default['default'].createContext({\n    contains: false\n  });\n  return {\n    // Wrap the parent component with this provider.\n\n    /* eslint-disable react/prop-types */\n    Provider: function Provider(_ref) {\n      var children = _ref.children;\n\n      var _useState = React.useState(0),\n          _useState2 = slicedToArray.slicedToArray(_useState, 2),\n          count = _useState2[0],\n          setCount = _useState2[1];\n\n      var contextValue = React.useMemo(function () {\n        return {\n          updateCount: function updateCount(diff) {\n            setCount(function (count) {\n              return count + diff;\n            });\n          },\n          contains: count > 0\n        };\n      }, [count]);\n      return /*#__PURE__*/React__default['default'].createElement(ContainsContext.Provider, {\n        value: contextValue\n      }, children);\n    },\n\n    /* eslint-enable react/prop-types */\n    // Call this from the parent component (returns a boolean)\n    useContains: function useContains() {\n      return React.useContext(ContainsContext).contains;\n    },\n    // Call this from the child component\n    useRegister: function useRegister() {\n      var _useContext = React.useContext(ContainsContext),\n          updateCount = _useContext.updateCount;\n\n      React.useEffect(function () {\n        if (!updateCount) {\n          return;\n        }\n\n        updateCount(1);\n        return function () {\n          updateCount(-1);\n        }; // We don't want this effect to ever re-run\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n      }, []);\n    }\n  };\n}\n\nexports.initContainsComponent = initContainsComponent;","map":{"version":3,"sources":["../src/utils/contains-component.js"],"names":["ContainsContext","contains","Provider","children","count","setCount","useState","contextValue","useMemo","updateCount","useContains","useContext","useRegister","useEffect"],"mappings":";;;;;;;;;;;;;;;;;;;;AAEA,SAAA,qBAAA,GAAiC;AAC/B,MAAMA,eAAe,GAAA,aAAG,cAAA,CAAA,SAAA,CAAA,CAAA,aAAA,CAAoB;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAApB,CAAxB;AAEA,SAAO;AACL;;AACA;AACAC,IAAAA,QAHK,EAAA,SAAA,QAAA,CAAA,IAAA,EAGkB;AAAA,UAAZC,QAAY,GAAA,IAAA,CAAZA,QAAY;;AAAA,UAAA,SAAA,GACKG,KAAAA,CAAAA,QAAAA,CADL,CACKA,CADL;AAAA,UAAA,UAAA,GAAA,aAAA,CAAA,aAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,UACdF,KADc,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,UACPC,QADO,GAAA,UAAA,CAAA,CAAA,CAAA;;AAGrB,UAAME,YAAY,GAAGC,KAAAA,CAAAA,OAAAA,CAAQ,YAAM;AACjC,eAAO;AACLC,UAAAA,WADK,EAAA,SAAA,WAAA,CAAA,IAAA,EACa;AAChBJ,YAAAA,QAAQ,CAAC,UAAA,KAAA,EAAK;AAAA,qBAAID,KAAK,GAAT,IAAA;AAAdC,aAAQ,CAARA;AAFG,WAAA;AAILJ,UAAAA,QAAQ,EAAEG,KAAK,GAAG;AAJb,SAAP;AAD0B,OAAPI,EAOlB,CAPH,KAOG,CAPkBA,CAArB;AASA,aAAA,aACE,cAAA,CAAA,SAAA,CAAA,CAAA,aAAA,CAAC,eAAD,CAAA,QAAA,EAAA;AAA0B,QAAA,KAAK,EAAED;AAAjC,OAAA,EADF,QACE,CADF;AAfG,KAAA;;AAqBL;AAEA;AACAG,IAAAA,WAxBK,EAAA,SAAA,WAAA,GAwBS;AACZ,aAAOC,KAAAA,CAAAA,UAAAA,CAAAA,eAAAA,EAAP,QAAA;AAzBG,KAAA;AA4BL;AACAC,IAAAA,WA7BK,EAAA,SAAA,WAAA,GA6BS;AAAA,UAAA,WAAA,GACYD,KAAAA,CAAAA,UAAAA,CADZ,eACYA,CADZ;AAAA,UACJF,WADI,GAAA,WAAA,CAAA,WAAA;;AAGZI,MAAAA,KAAAA,CAAAA,SAAAA,CAAU,YAAM;AACd,YAAI,CAAJ,WAAA,EAAkB;AAChB;AACD;;AACDJ,QAAAA,WAAW,CAAXA,CAAW,CAAXA;AACA,eAAO,YAAM;AACXA,UAAAA,WAAW,CAAC,CAAZA,CAAW,CAAXA;AANY,SAKd,CALc,CAAA;AASd;AATO,OAATI,EAAAA,EAAAA;AAWD;AA3CI,GAAP;AA6CD","sourcesContent":["import React, { useContext, useEffect, useMemo, useState } from 'react'\n\nfunction initContainsComponent() {\n  const ContainsContext = React.createContext({ contains: false })\n\n  return {\n    // Wrap the parent component with this provider.\n    /* eslint-disable react/prop-types */\n    Provider({ children }) {\n      const [count, setCount] = useState(0)\n\n      const contextValue = useMemo(() => {\n        return {\n          updateCount(diff) {\n            setCount(count => count + diff)\n          },\n          contains: count > 0,\n        }\n      }, [count])\n\n      return (\n        <ContainsContext.Provider value={contextValue}>\n          {children}\n        </ContainsContext.Provider>\n      )\n    },\n    /* eslint-enable react/prop-types */\n\n    // Call this from the parent component (returns a boolean)\n    useContains() {\n      return useContext(ContainsContext).contains\n    },\n\n    // Call this from the child component\n    useRegister() {\n      const { updateCount } = useContext(ContainsContext)\n\n      useEffect(() => {\n        if (!updateCount) {\n          return\n        }\n        updateCount(1)\n        return () => {\n          updateCount(-1)\n        }\n        // We don't want this effect to ever re-run\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n      }, [])\n    },\n  }\n}\n\nexport { initContainsComponent }\n"]},"metadata":{},"sourceType":"script"}