{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('events'),\n    EventEmitter = _require.EventEmitter;\n\nvar errcode = require('err-code');\n\nvar libp2pRecord = require('libp2p-record');\n\nvar _require2 = require('interface-datastore'),\n    MemoryDatastore = _require2.MemoryDatastore;\n\nvar PeerInfo = require('peer-info');\n\nvar RoutingTable = require('./routing');\n\nvar utils = require('./utils');\n\nvar c = require('./constants');\n\nvar Network = require('./network');\n\nvar contentFetching = require('./content-fetching');\n\nvar contentRouting = require('./content-routing');\n\nvar peerRouting = require('./peer-routing');\n\nvar Message = require('./message');\n\nvar Providers = require('./providers');\n\nvar RandomWalk = require('./random-walk');\n\nvar QueryManager = require('./query-manager');\n\nvar Record = libp2pRecord.Record;\n/**\n * A DHT implementation modeled after Kademlia with S/Kademlia modifications.\n * Original implementation in go: https://github.com/libp2p/go-libp2p-kad-dht.\n */\n\nvar KadDHT = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(KadDHT, _EventEmitter);\n\n  var _super = _createSuper(KadDHT);\n\n  /**\n   * Random walk options\n   * @typedef {Object} randomWalkOptions\n   * @property {boolean} enabled discovery enabled (default: true)\n   * @property {number} queriesPerPeriod how many queries to run per period (default: 1)\n   * @property {number} interval how often to run the the random-walk process, in milliseconds (default: 300000)\n   * @property {number} timeout how long to wait for the the random-walk query to run, in milliseconds (default: 30000)\n   * @property {number} delay how long to wait before starting the first random walk, in milliseconds (default: 10000)\n   */\n\n  /**\n   * Create a new KadDHT.\n   * @param {Object} props\n   * @param {Dialer} props.dialer libp2p dialer instance\n   * @param {PeerInfo} props.peerInfo peer's peerInfo\n   * @param {PeerStore} props.peerStore libp2p peerStore\n   * @param {Object} props.registrar libp2p registrar instance\n   * @param {function} props.registrar.handle\n   * @param {function} props.registrar.register\n   * @param {function} props.registrar.unregister\n   * @param {number} props.kBucketSize k-bucket size (default 20)\n   * @param {number} props.concurrency alpha concurrency of queries (default 3)\n   * @param {Datastore} props.datastore datastore (default MemoryDatastore)\n   * @param {object} props.validators validators object with namespace as keys and function(key, record, callback)\n   * @param {object} props.selectors selectors object with namespace as keys and function(key, records)\n   * @param {randomWalkOptions} options.randomWalk randomWalk options\n   */\n  function KadDHT(_ref) {\n    var _this3;\n\n    var dialer = _ref.dialer,\n        peerInfo = _ref.peerInfo,\n        peerStore = _ref.peerStore,\n        registrar = _ref.registrar,\n        _ref$datastore = _ref.datastore,\n        datastore = _ref$datastore === void 0 ? new MemoryDatastore() : _ref$datastore,\n        _ref$kBucketSize = _ref.kBucketSize,\n        kBucketSize = _ref$kBucketSize === void 0 ? c.K : _ref$kBucketSize,\n        _ref$concurrency = _ref.concurrency,\n        concurrency = _ref$concurrency === void 0 ? c.ALPHA : _ref$concurrency,\n        _ref$validators = _ref.validators,\n        validators = _ref$validators === void 0 ? {} : _ref$validators,\n        _ref$selectors = _ref.selectors,\n        selectors = _ref$selectors === void 0 ? {} : _ref$selectors,\n        _ref$randomWalk = _ref.randomWalk,\n        randomWalk = _ref$randomWalk === void 0 ? {} : _ref$randomWalk;\n\n    _classCallCheck(this, KadDHT);\n\n    _this3 = _super.call(this);\n\n    if (!dialer) {\n      throw new Error('libp2p-kad-dht requires an instance of Dialer');\n    }\n    /**\n     * Local reference to the libp2p dialer instance\n     * @type {Dialer}\n     */\n\n\n    _this3.dialer = dialer;\n    /**\n     * Local peer info\n     * @type {PeerInfo}\n     */\n\n    _this3.peerInfo = peerInfo;\n    /**\n     * Local PeerStore\n     * @type {PeerStore}\n     */\n\n    _this3.peerStore = peerStore;\n    /**\n     * Local peer info\n     * @type {Registrar}\n     */\n\n    _this3.registrar = registrar;\n    /**\n     * k-bucket size\n     *\n     * @type {number}\n     */\n\n    _this3.kBucketSize = kBucketSize;\n    /**\n     * ALPHA concurrency at which each query path with run, defaults to 3\n     * @type {number}\n     */\n\n    _this3.concurrency = concurrency;\n    /**\n     * Number of disjoint query paths to use\n     * This is set to `kBucketSize`/2 per the S/Kademlia paper\n     * @type {number}\n     */\n\n    _this3.disjointPaths = Math.ceil(_this3.kBucketSize / 2);\n    /**\n     * The routing table.\n     *\n     * @type {RoutingTable}\n     */\n\n    _this3.routingTable = new RoutingTable(_this3.peerInfo.id, _this3.kBucketSize);\n    /**\n     * Reference to the datastore, uses an in-memory store if none given.\n     *\n     * @type {Datastore}\n     */\n\n    _this3.datastore = datastore;\n    /**\n     * Provider management\n     *\n     * @type {Providers}\n     */\n\n    _this3.providers = new Providers(_this3.datastore, _this3.peerInfo.id);\n    _this3.validators = _objectSpread({\n      pk: libp2pRecord.validator.validators.pk\n    }, validators);\n    _this3.selectors = _objectSpread({\n      pk: libp2pRecord.selection.selectors.pk\n    }, selectors);\n    _this3.network = new Network(_assertThisInitialized(_this3));\n    _this3._log = utils.logger(_this3.peerInfo.id);\n    /**\n     * Random walk management\n     *\n     * @type {RandomWalk}\n     */\n\n    _this3.randomWalk = new RandomWalk(_assertThisInitialized(_this3), randomWalk);\n    /**\n     * Keeps track of running queries\n     *\n     * @type {QueryManager}\n     */\n\n    _this3._queryManager = new QueryManager();\n    _this3._running = false; // DHT components\n\n    _this3.contentFetching = contentFetching(_assertThisInitialized(_this3));\n    _this3.contentRouting = contentRouting(_assertThisInitialized(_this3));\n    _this3.peerRouting = peerRouting(_assertThisInitialized(_this3));\n    return _this3;\n  }\n  /**\n   * Is this DHT running.\n   * @type {bool}\n   */\n\n\n  _createClass(KadDHT, [{\n    key: \"isStarted\",\n    get: function get() {\n      return this._running;\n    }\n    /**\n     * Start listening to incoming connections.\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this._running = true;\n\n                this._queryManager.start();\n\n                _context.next = 4;\n                return this.network.start();\n\n              case 4:\n                // Start random walk, it will not run if it's disabled\n                this.randomWalk.start();\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function start() {\n        return _start.apply(this, arguments);\n      }\n\n      return start;\n    }()\n    /**\n     * Stop accepting incoming connections and sending outgoing\n     * messages.\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this._running = false;\n      this.randomWalk.stop();\n      this.providers.stop();\n\n      this._queryManager.stop();\n\n      return this.network.stop();\n    }\n    /**\n     * Store the given key/value  pair in the DHT.\n     * @param {Buffer} key\n     * @param {Buffer} value\n     * @param {Object} [options] - put options\n     * @param {number} [options.minPeers] - minimum number of peers required to successfully put (default: closestPeers.length)\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"put\",\n    value: function () {\n      var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(key, value) {\n        var options,\n            _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n                return _context2.abrupt(\"return\", this.contentFetching.put(key, value, options));\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function put(_x, _x2) {\n        return _put.apply(this, arguments);\n      }\n\n      return put;\n    }()\n    /**\n     * Get the value to the given key.\n     * Times out after 1 minute by default.\n     * @param {Buffer} key\n     * @param {Object} [options] - get options\n     * @param {number} [options.timeout] - optional timeout (default: 60000)\n     * @returns {Promise<Buffer>}\n     */\n\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(key) {\n        var options,\n            _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n                return _context3.abrupt(\"return\", this.contentFetching.get(key, options));\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function get(_x3) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n    /**\n     * Get the `n` values to the given key without sorting.\n     * @param {Buffer} key\n     * @param {number} nvals\n     * @param {Object} [options] - get options\n     * @param {number} [options.timeout] - optional timeout (default: 60000)\n     * @returns {Promise<Array<{from: PeerId, val: Buffer}>>}\n     */\n\n  }, {\n    key: \"getMany\",\n    value: function () {\n      var _getMany = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(key, nvals) {\n        var options,\n            _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};\n                return _context4.abrupt(\"return\", this.contentFetching.getMany(key, nvals, options));\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getMany(_x4, _x5) {\n        return _getMany.apply(this, arguments);\n      }\n\n      return getMany;\n    }() // ----------- Content Routing\n\n    /**\n     * Announce to the network that we can provide given key's value.\n     * @param {CID} key\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"provide\",\n    value: function () {\n      var _provide = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(key) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this.contentRouting.provide(key));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function provide(_x6) {\n        return _provide.apply(this, arguments);\n      }\n\n      return provide;\n    }()\n    /**\n     * Search the dht for up to `K` providers of the given CID.\n     * @param {CID} key\n     * @param {Object} options - findProviders options\n     * @param {number} options.timeout - how long the query should maximally run, in milliseconds (default: 60000)\n     * @param {number} options.maxNumProviders - maximum number of providers to find\n     * @returns {AsyncIterable<PeerInfo>}\n     */\n\n  }, {\n    key: \"findProviders\",\n    value: function findProviders(key) {\n      var _this = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, pInfo;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context6.prev = 2;\n                _iterator = _asyncIterator(_this.contentRouting.findProviders(key, options));\n\n              case 4:\n                _context6.next = 6;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 6:\n                _step = _context6.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context6.next = 10;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 10:\n                _value = _context6.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context6.next = 18;\n                  break;\n                }\n\n                pInfo = _value;\n                _context6.next = 15;\n                return pInfo;\n\n              case 15:\n                _iteratorNormalCompletion = true;\n                _context6.next = 4;\n                break;\n\n              case 18:\n                _context6.next = 24;\n                break;\n\n              case 20:\n                _context6.prev = 20;\n                _context6.t0 = _context6[\"catch\"](2);\n                _didIteratorError = true;\n                _iteratorError = _context6.t0;\n\n              case 24:\n                _context6.prev = 24;\n                _context6.prev = 25;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context6.next = 29;\n                  break;\n                }\n\n                _context6.next = 29;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 29:\n                _context6.prev = 29;\n\n                if (!_didIteratorError) {\n                  _context6.next = 32;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 32:\n                return _context6.finish(29);\n\n              case 33:\n                return _context6.finish(24);\n\n              case 34:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, null, [[2, 20, 24, 34], [25,, 29, 33]]);\n      }))();\n    } // ----------- Peer Routing -----------\n\n    /**\n     * Search for a peer with the given ID.\n     *\n     * @param {PeerId} id\n     * @param {Object} options - findPeer options\n     * @param {number} options.timeout - how long the query should maximally run, in milliseconds (default: 60000)\n     * @returns {Promise<PeerInfo>}\n     */\n\n  }, {\n    key: \"findPeer\",\n    value: function () {\n      var _findPeer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(id) {\n        var options,\n            _args7 = arguments;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                options = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n                return _context7.abrupt(\"return\", this.peerRouting.findPeer(id, options));\n\n              case 2:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function findPeer(_x7) {\n        return _findPeer.apply(this, arguments);\n      }\n\n      return findPeer;\n    }()\n    /**\n     * Kademlia 'node lookup' operation.\n     * @param {Buffer} key\n     * @param {Object} [options]\n     * @param {boolean} [options.shallow] shallow query (default: false)\n     * @returns {AsyncIterable<PeerId>}\n     */\n\n  }, {\n    key: \"getClosestPeers\",\n    value: function getClosestPeers(key) {\n      var _this2 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        shallow: false\n      };\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, pId;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _iteratorNormalCompletion2 = true;\n                _didIteratorError2 = false;\n                _context8.prev = 2;\n                _iterator2 = _asyncIterator(_this2.peerRouting.getClosestPeers(key, options));\n\n              case 4:\n                _context8.next = 6;\n                return _awaitAsyncGenerator(_iterator2.next());\n\n              case 6:\n                _step2 = _context8.sent;\n                _iteratorNormalCompletion2 = _step2.done;\n                _context8.next = 10;\n                return _awaitAsyncGenerator(_step2.value);\n\n              case 10:\n                _value2 = _context8.sent;\n\n                if (_iteratorNormalCompletion2) {\n                  _context8.next = 18;\n                  break;\n                }\n\n                pId = _value2;\n                _context8.next = 15;\n                return pId;\n\n              case 15:\n                _iteratorNormalCompletion2 = true;\n                _context8.next = 4;\n                break;\n\n              case 18:\n                _context8.next = 24;\n                break;\n\n              case 20:\n                _context8.prev = 20;\n                _context8.t0 = _context8[\"catch\"](2);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context8.t0;\n\n              case 24:\n                _context8.prev = 24;\n                _context8.prev = 25;\n\n                if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n                  _context8.next = 29;\n                  break;\n                }\n\n                _context8.next = 29;\n                return _awaitAsyncGenerator(_iterator2.return());\n\n              case 29:\n                _context8.prev = 29;\n\n                if (!_didIteratorError2) {\n                  _context8.next = 32;\n                  break;\n                }\n\n                throw _iteratorError2;\n\n              case 32:\n                return _context8.finish(29);\n\n              case 33:\n                return _context8.finish(24);\n\n              case 34:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, null, [[2, 20, 24, 34], [25,, 29, 33]]);\n      }))();\n    }\n    /**\n     * Get the public key for the given peer id.\n     * @param {PeerId} peer\n     * @returns {Promise<PubKey>}\n     */\n\n  }, {\n    key: \"getPublicKey\",\n    value: function () {\n      var _getPublicKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(peer) {\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                return _context9.abrupt(\"return\", this.peerRouting.getPublicKey(peer));\n\n              case 1:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getPublicKey(_x8) {\n        return _getPublicKey.apply(this, arguments);\n      }\n\n      return getPublicKey;\n    }() // ----------- Discovery -----------\n\n  }, {\n    key: \"_peerDiscovered\",\n    value: function _peerDiscovered(peerInfo) {\n      this.emit('peer', peerInfo);\n    } // ----------- Internals -----------\n\n    /**\n     * Returns the routing tables closest peers, for the key of\n     * the message.\n     *\n     * @param {Message} msg\n     * @returns {Promise<Array<PeerInfo>>}\n     * @private\n     */\n\n  }, {\n    key: \"_nearestPeersToQuery\",\n    value: function () {\n      var _nearestPeersToQuery2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(msg) {\n        var _this4 = this;\n\n        var key, ids;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return utils.convertBuffer(msg.key);\n\n              case 2:\n                key = _context10.sent;\n                ids = this.routingTable.closestPeers(key, this.kBucketSize);\n                return _context10.abrupt(\"return\", ids.map(function (p) {\n                  if (_this4.peerStore.has(p)) {\n                    return _this4.peerStore.get(p);\n                  }\n\n                  return _this4.peerStore.put(new PeerInfo(p));\n                }));\n\n              case 5:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function _nearestPeersToQuery(_x9) {\n        return _nearestPeersToQuery2.apply(this, arguments);\n      }\n\n      return _nearestPeersToQuery;\n    }()\n    /**\n     * Get the nearest peers to the given query, but iff closer\n     * than self.\n     *\n     * @param {Message} msg\n     * @param {PeerInfo} peer\n     * @returns {Promise<Array<PeerInfo>>}\n     * @private\n     */\n\n  }, {\n    key: \"_betterPeersToQuery\",\n    value: function () {\n      var _betterPeersToQuery2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(msg, peer) {\n        var _this5 = this;\n\n        var closer;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                this._log('betterPeersToQuery');\n\n                _context11.next = 3;\n                return this._nearestPeersToQuery(msg);\n\n              case 3:\n                closer = _context11.sent;\n                return _context11.abrupt(\"return\", closer.filter(function (closer) {\n                  if (_this5._isSelf(closer.id)) {\n                    // Should bail, not sure\n                    _this5._log.error('trying to return self as closer');\n\n                    return false;\n                  }\n\n                  return !closer.id.isEqual(peer.id);\n                }));\n\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function _betterPeersToQuery(_x10, _x11) {\n        return _betterPeersToQuery2.apply(this, arguments);\n      }\n\n      return _betterPeersToQuery;\n    }()\n    /**\n     * Try to fetch a given record by from the local datastore.\n     * Returns the record iff it is still valid, meaning\n     * - it was either authored by this node, or\n     * - it was received less than `MAX_RECORD_AGE` ago.\n     *\n     * @param {Buffer} key\n     * @returns {Promise<Record>}\n     * @private\n     */\n\n  }, {\n    key: \"_checkLocalDatastore\",\n    value: function () {\n      var _checkLocalDatastore2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(key) {\n        var dsKey, rawRecord, record;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                this._log('checkLocalDatastore: %b', key);\n\n                dsKey = utils.bufferToKey(key); // Fetch value from ds\n\n                _context12.prev = 2;\n                _context12.next = 5;\n                return this.datastore.get(dsKey);\n\n              case 5:\n                rawRecord = _context12.sent;\n                _context12.next = 13;\n                break;\n\n              case 8:\n                _context12.prev = 8;\n                _context12.t0 = _context12[\"catch\"](2);\n\n                if (!(_context12.t0.code === 'ERR_NOT_FOUND')) {\n                  _context12.next = 12;\n                  break;\n                }\n\n                return _context12.abrupt(\"return\", undefined);\n\n              case 12:\n                throw _context12.t0;\n\n              case 13:\n                // Create record from the returned bytes\n                record = Record.deserialize(rawRecord);\n\n                if (record) {\n                  _context12.next = 16;\n                  break;\n                }\n\n                throw errcode('Invalid record', 'ERR_INVALID_RECORD');\n\n              case 16:\n                if (!(record.timeReceived == null || utils.now() - record.timeReceived > c.MAX_RECORD_AGE)) {\n                  _context12.next = 20;\n                  break;\n                }\n\n                _context12.next = 19;\n                return this.datastore.delete(dsKey);\n\n              case 19:\n                return _context12.abrupt(\"return\", undefined);\n\n              case 20:\n                return _context12.abrupt(\"return\", record);\n\n              case 21:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this, [[2, 8]]);\n      }));\n\n      function _checkLocalDatastore(_x12) {\n        return _checkLocalDatastore2.apply(this, arguments);\n      }\n\n      return _checkLocalDatastore;\n    }()\n    /**\n     * Add the peer to the routing table and update it in the peerStore.\n     *\n     * @param {PeerInfo} peer\n     * @returns {Promise<void>}\n     * @private\n     */\n\n  }, {\n    key: \"_add\",\n    value: function () {\n      var _add2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(peer) {\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.routingTable.add(peer.id);\n\n              case 2:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function _add(_x13) {\n        return _add2.apply(this, arguments);\n      }\n\n      return _add;\n    }()\n    /**\n     * Verify a record without searching the DHT.\n     *\n     * @param {Record} record\n     * @returns {Promise<void>}\n     * @private\n     */\n\n  }, {\n    key: \"_verifyRecordLocally\",\n    value: function () {\n      var _verifyRecordLocally2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(record) {\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                this._log('verifyRecordLocally');\n\n                _context14.next = 3;\n                return libp2pRecord.validator.verifyRecord(this.validators, record);\n\n              case 3:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function _verifyRecordLocally(_x14) {\n        return _verifyRecordLocally2.apply(this, arguments);\n      }\n\n      return _verifyRecordLocally;\n    }()\n    /**\n     * Is the given peer id our PeerId?\n     *\n     * @param {PeerId} other\n     * @returns {bool}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_isSelf\",\n    value: function _isSelf(other) {\n      return other && this.peerInfo.id.id.equals(other.id);\n    }\n    /**\n     * Store the given key/value pair at the peer `target`.\n     *\n     * @param {Buffer} key\n     * @param {Buffer} rec - encoded record\n     * @param {PeerId} target\n     * @returns {Promise<void>}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_putValueToPeer\",\n    value: function () {\n      var _putValueToPeer2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(key, rec, target) {\n        var msg, resp;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                msg = new Message(Message.TYPES.PUT_VALUE, key, 0);\n                msg.record = rec;\n                _context15.next = 4;\n                return this.network.sendRequest(target, msg);\n\n              case 4:\n                resp = _context15.sent;\n\n                if (resp.record.value.equals(Record.deserialize(rec).value)) {\n                  _context15.next = 7;\n                  break;\n                }\n\n                throw errcode(new Error('value not put correctly'), 'ERR_PUT_VALUE_INVALID');\n\n              case 7:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function _putValueToPeer(_x15, _x16, _x17) {\n        return _putValueToPeer2.apply(this, arguments);\n      }\n\n      return _putValueToPeer;\n    }()\n    /**\n     * Query a particular peer for the value for the given key.\n     * It will either return the value or a list of closer peers.\n     *\n     * Note: The peerStore is updated with new addresses found for the given peer.\n     *\n     * @param {PeerId} peer\n     * @param {Buffer} key\n     * @returns {Promise<{Record, Array<PeerInfo}>}\n     * @private\n     */\n\n  }, {\n    key: \"_getValueOrPeers\",\n    value: function () {\n      var _getValueOrPeers2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(peer, key) {\n        var msg, peers, record, errMsg;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this._getValueSingle(peer, key);\n\n              case 2:\n                msg = _context16.sent;\n                peers = msg.closerPeers;\n                record = msg.record;\n\n                if (!record) {\n                  _context16.next = 17;\n                  break;\n                }\n\n                _context16.prev = 6;\n                _context16.next = 9;\n                return this._verifyRecordOnline(record);\n\n              case 9:\n                _context16.next = 16;\n                break;\n\n              case 11:\n                _context16.prev = 11;\n                _context16.t0 = _context16[\"catch\"](6);\n                errMsg = 'invalid record received, discarded';\n\n                this._log(errMsg);\n\n                throw errcode(new Error(errMsg), 'ERR_INVALID_RECORD');\n\n              case 16:\n                return _context16.abrupt(\"return\", {\n                  record: record,\n                  peers: peers\n                });\n\n              case 17:\n                if (!(peers.length > 0)) {\n                  _context16.next = 19;\n                  break;\n                }\n\n                return _context16.abrupt(\"return\", {\n                  peers: peers\n                });\n\n              case 19:\n                throw errcode(new Error('Not found'), 'ERR_NOT_FOUND');\n\n              case 20:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this, [[6, 11]]);\n      }));\n\n      function _getValueOrPeers(_x18, _x19) {\n        return _getValueOrPeers2.apply(this, arguments);\n      }\n\n      return _getValueOrPeers;\n    }()\n    /**\n     * Get a value via rpc call for the given parameters.\n     *\n     * @param {PeerId} peer\n     * @param {Buffer} key\n     * @returns {Promise<Message>}\n     * @private\n     */\n\n  }, {\n    key: \"_getValueSingle\",\n    value: function () {\n      var _getValueSingle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(peer, key) {\n        var msg;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                // eslint-disable-line require-await\n                msg = new Message(Message.TYPES.GET_VALUE, key, 0);\n                return _context17.abrupt(\"return\", this.network.sendRequest(peer, msg));\n\n              case 2:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function _getValueSingle(_x20, _x21) {\n        return _getValueSingle2.apply(this, arguments);\n      }\n\n      return _getValueSingle;\n    }()\n    /**\n     * Verify a record, fetching missing public keys from the network.\n     * Calls back with an error if the record is invalid.\n     *\n     * @param {Record} record\n     * @returns {Promise<void>}\n     * @private\n     */\n\n  }, {\n    key: \"_verifyRecordOnline\",\n    value: function () {\n      var _verifyRecordOnline2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(record) {\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return libp2pRecord.validator.verifyRecord(this.validators, record);\n\n              case 2:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function _verifyRecordOnline(_x22) {\n        return _verifyRecordOnline2.apply(this, arguments);\n      }\n\n      return _verifyRecordOnline;\n    }()\n  }]);\n\n  return KadDHT;\n}(EventEmitter);\n\nmodule.exports = KadDHT;\nmodule.exports.multicodec = c.PROTOCOL_DHT;","map":null,"metadata":{},"sourceType":"script"}