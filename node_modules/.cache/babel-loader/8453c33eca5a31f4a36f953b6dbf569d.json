{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require('./utils'),\n    filter = _require.filter,\n    sortAll = _require.sortAll,\n    take = _require.take,\n    map = _require.map;\n\nvar Key = require('./key'); // Errors\n\n\nvar Errors = require('./errors');\n\nvar MemoryDatastore = /*#__PURE__*/function () {\n  function MemoryDatastore() {\n    _classCallCheck(this, MemoryDatastore);\n\n    this.data = {};\n  }\n\n  _createClass(MemoryDatastore, [{\n    key: \"open\",\n    value: function () {\n      var _open = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function open() {\n        return _open.apply(this, arguments);\n      }\n\n      return open;\n    }()\n  }, {\n    key: \"put\",\n    value: function () {\n      var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(key, val) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // eslint-disable-line require-await\n                this.data[key.toString()] = val;\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function put(_x, _x2) {\n        return _put.apply(this, arguments);\n      }\n\n      return put;\n    }()\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(key) {\n        var exists;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.has(key);\n\n              case 2:\n                exists = _context3.sent;\n\n                if (exists) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                throw Errors.notFoundError();\n\n              case 5:\n                return _context3.abrupt(\"return\", this.data[key.toString()]);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function get(_x3) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  }, {\n    key: \"has\",\n    value: function () {\n      var _has = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(key) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", this.data[key.toString()] !== undefined);\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function has(_x4) {\n        return _has.apply(this, arguments);\n      }\n\n      return has;\n    }()\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(key) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                // eslint-disable-line require-await\n                delete this.data[key.toString()];\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function _delete(_x5) {\n        return _delete2.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n  }, {\n    key: \"batch\",\n    value: function batch() {\n      var _this = this;\n\n      var puts = [];\n      var dels = [];\n      return {\n        put: function put(key, value) {\n          puts.push([key, value]);\n        },\n        delete: function _delete(key) {\n          dels.push(key);\n        },\n        commit: function () {\n          var _commit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n            return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    // eslint-disable-line require-await\n                    puts.forEach(function (v) {\n                      _this.data[v[0].toString()] = v[1];\n                    });\n                    puts = [];\n                    dels.forEach(function (key) {\n                      delete _this.data[key.toString()];\n                    });\n                    dels = [];\n\n                  case 4:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            }, _callee6);\n          }));\n\n          function commit() {\n            return _commit.apply(this, arguments);\n          }\n\n          return commit;\n        }()\n      };\n    }\n  }, {\n    key: \"query\",\n    value: function query(q) {\n      var it = Object.entries(this.data);\n      it = map(it, function (entry) {\n        return {\n          key: new Key(entry[0]),\n          value: entry[1]\n        };\n      });\n\n      if (q.prefix != null) {\n        it = filter(it, function (e) {\n          return e.key.toString().startsWith(q.prefix);\n        });\n      }\n\n      if (Array.isArray(q.filters)) {\n        it = q.filters.reduce(function (it, f) {\n          return filter(it, f);\n        }, it);\n      }\n\n      if (Array.isArray(q.orders)) {\n        it = q.orders.reduce(function (it, f) {\n          return sortAll(it, f);\n        }, it);\n      }\n\n      if (q.offset != null) {\n        var i = 0;\n        it = filter(it, function () {\n          return i++ >= q.offset;\n        });\n      }\n\n      if (q.limit != null) {\n        it = take(it, q.limit);\n      }\n\n      if (q.keysOnly === true) {\n        it = map(it, function (e) {\n          return {\n            key: e.key\n          };\n        });\n      }\n\n      return it;\n    }\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function close() {\n        return _close.apply(this, arguments);\n      }\n\n      return close;\n    }()\n  }]);\n\n  return MemoryDatastore;\n}();\n\nmodule.exports = MemoryDatastore;","map":null,"metadata":{},"sourceType":"script"}