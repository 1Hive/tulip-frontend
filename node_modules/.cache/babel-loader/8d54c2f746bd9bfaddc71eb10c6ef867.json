{"ast":null,"code":"import { _ as _slicedToArray } from './slicedToArray-ad07b557.js';\nimport './unsupportedIterableToArray-aef68344.js';\nimport React, { useState, useMemo, useContext, useEffect } from 'react';\n\nfunction initContainsComponent() {\n  var ContainsContext = React.createContext({\n    contains: false\n  });\n  return {\n    // Wrap the parent component with this provider.\n\n    /* eslint-disable react/prop-types */\n    Provider: function Provider(_ref) {\n      var children = _ref.children;\n\n      var _useState = useState(0),\n          _useState2 = _slicedToArray(_useState, 2),\n          count = _useState2[0],\n          setCount = _useState2[1];\n\n      var contextValue = useMemo(function () {\n        return {\n          updateCount: function updateCount(diff) {\n            setCount(function (count) {\n              return count + diff;\n            });\n          },\n          contains: count > 0\n        };\n      }, [count]);\n      return /*#__PURE__*/React.createElement(ContainsContext.Provider, {\n        value: contextValue\n      }, children);\n    },\n\n    /* eslint-enable react/prop-types */\n    // Call this from the parent component (returns a boolean)\n    useContains: function useContains() {\n      return useContext(ContainsContext).contains;\n    },\n    // Call this from the child component\n    useRegister: function useRegister() {\n      var _useContext = useContext(ContainsContext),\n          updateCount = _useContext.updateCount;\n\n      useEffect(function () {\n        if (!updateCount) {\n          return;\n        }\n\n        updateCount(1);\n        return function () {\n          updateCount(-1);\n        }; // We don't want this effect to ever re-run\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n      }, []);\n    }\n  };\n}\n\nexport { initContainsComponent };","map":null,"metadata":{},"sourceType":"module"}