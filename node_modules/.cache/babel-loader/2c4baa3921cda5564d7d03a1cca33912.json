{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar pReflect = require('p-reflect');\n\nvar pLimit = require('p-limit');\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(array) {\n    var options,\n        _options$concurrency,\n        concurrency,\n        limit,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            _options$concurrency = options.concurrency, concurrency = _options$concurrency === void 0 ? Infinity : _options$concurrency;\n            limit = pLimit(concurrency);\n            return _context.abrupt(\"return\", Promise.all(array.map(function (element) {\n              if (element && typeof element.then === 'function') {\n                // eslint-disable-line promise/prefer-await-to-then\n                return pReflect(element);\n              }\n\n              if (typeof element === 'function') {\n                return pReflect(limit(function () {\n                  return element();\n                }));\n              }\n\n              return pReflect(Promise.resolve(element));\n            })));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}