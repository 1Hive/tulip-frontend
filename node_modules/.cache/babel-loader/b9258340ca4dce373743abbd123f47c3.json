{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar ipns = require('ipns');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar _require2 = require('multihashes'),\n    fromB58String = _require2.fromB58String,\n    toB58String = _require2.toB58String;\n\nvar PubsubDatastore = require('datastore-pubsub');\n\nvar withIs = require('class-is');\n\nvar errcode = require('err-code');\n\nvar debug = require('debug');\n\nvar log = debug('ipfs:ipns:pubsub');\nlog.error = debug('ipfs:ipns:pubsub:error'); // Pubsub datastore aims to manage the pubsub subscriptions for IPNS\n\nvar IpnsPubsubDatastore = /*#__PURE__*/function () {\n  function IpnsPubsubDatastore(pubsub, localDatastore, peerId) {\n    _classCallCheck(this, IpnsPubsubDatastore);\n\n    this._pubsub = pubsub;\n    this._subscriptions = {}; // Bind _handleSubscriptionKey function, which is called by PubsubDatastore.\n\n    this._handleSubscriptionKey = this._handleSubscriptionKey.bind(this);\n    this._pubsubDs = new PubsubDatastore(pubsub, localDatastore, peerId, ipns.validator, this._handleSubscriptionKey);\n  }\n  /**\n   * Put a value to the pubsub datastore indexed by the received key properly encoded.\n   * @param {Buffer} key identifier of the value.\n   * @param {Buffer} value value to be stored.\n   * @param {function(Error)} callback\n   * @returns {void}\n   */\n\n\n  _createClass(IpnsPubsubDatastore, [{\n    key: \"put\",\n    value: function () {\n      var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key, value) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this._pubsubDs.put(key, value));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function put(_x, _x2) {\n        return _put.apply(this, arguments);\n      }\n\n      return put;\n    }()\n    /**\n     * Get a value from the pubsub datastore indexed by the received key properly encoded.\n     * Also, the identifier topic is subscribed to and the pubsub datastore records will be\n     * updated once new publishes occur.\n     * @param {Buffer} key identifier of the value to be obtained.\n     * @param {function(Error, Buffer)} callback\n     * @returns {void}\n     */\n\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(key) {\n        var res, err, ns, stringifiedTopic, id;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return this._pubsubDs.get(key);\n\n              case 3:\n                res = _context2.sent;\n                _context2.next = 9;\n                break;\n\n              case 6:\n                _context2.prev = 6;\n                _context2.t0 = _context2[\"catch\"](0);\n                err = _context2.t0;\n\n              case 9:\n                // Add topic subscribed\n                ns = key.slice(0, ipns.namespaceLength);\n\n                if (ns.toString() === ipns.namespace) {\n                  stringifiedTopic = toB58String(key);\n                  id = toB58String(key.slice(ipns.namespaceLength));\n                  this._subscriptions[stringifiedTopic] = id;\n                  log(\"subscribed to pubsub topic \".concat(stringifiedTopic, \", id \").concat(id));\n                } // If no data was obtained, after storing the subscription, return the error.\n\n\n                if (!err) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                throw err;\n\n              case 13:\n                return _context2.abrupt(\"return\", res);\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 6]]);\n      }));\n\n      function get(_x3) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }() // Modify subscription key to have a proper encoding\n\n  }, {\n    key: \"_handleSubscriptionKey\",\n    value: function _handleSubscriptionKey(key) {\n      if (Buffer.isBuffer(key)) {\n        key = toB58String(key);\n      }\n\n      var subscriber = this._subscriptions[key];\n\n      if (!subscriber) {\n        throw errcode(new Error(\"key \".concat(key, \" does not correspond to a subscription\")), 'ERR_INVALID_KEY');\n      }\n\n      var keys;\n\n      try {\n        keys = ipns.getIdKeys(fromB58String(subscriber));\n      } catch (err) {\n        log.error(err);\n        throw err;\n      }\n\n      return keys.routingKey.toBuffer();\n    }\n    /**\n     * Get pubsub subscriptions related to ipns.\n     * @param {function(Error, Object)} callback\n     * @returns {Array<Object>}\n     */\n\n  }, {\n    key: \"getSubscriptions\",\n    value: function getSubscriptions() {\n      var subscriptions = Object.values(this._subscriptions).filter(Boolean);\n      return subscriptions.map(function (sub) {\n        return \"\".concat(ipns.namespace).concat(sub);\n      });\n    }\n    /**\n     * Cancel pubsub subscriptions related to ipns.\n     * @param {String} name ipns path to cancel the pubsub subscription.\n     * @param {function(Error, Object)} callback\n     * @returns {void}\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function () {\n      var _cancel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(name) {\n        var _this = this;\n\n        var stringifiedTopic, bufTopic;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(typeof name !== 'string')) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw errcode(new Error('invalid subscription name'), 'ERR_INVALID_SUBSCRIPTION_NAME');\n\n              case 2:\n                // Trim /ipns/ prefix from the name\n                if (name.startsWith(ipns.namespace)) {\n                  name = name.substring(ipns.namespaceLength);\n                }\n\n                stringifiedTopic = Object.keys(this._subscriptions).find(function (key) {\n                  return _this._subscriptions[key] === name;\n                }); // Not found topic\n\n                if (stringifiedTopic) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", {\n                  canceled: false\n                });\n\n              case 6:\n                // Unsubscribe topic\n                bufTopic = Buffer.from(stringifiedTopic);\n\n                this._pubsubDs.unsubscribe(bufTopic);\n\n                this._subscriptions[stringifiedTopic] = undefined;\n                log(\"unsubscribed pubsub \".concat(stringifiedTopic, \": \").concat(name));\n                return _context3.abrupt(\"return\", {\n                  canceled: true\n                });\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function cancel(_x4) {\n        return _cancel.apply(this, arguments);\n      }\n\n      return cancel;\n    }()\n  }]);\n\n  return IpnsPubsubDatastore;\n}();\n\nexports = module.exports = withIs(IpnsPubsubDatastore, {\n  className: 'IpnsPubsubDatastore',\n  symbolName: '@js-ipfs/ipns/IpnsPubsubDatastore'\n});","map":null,"metadata":{},"sourceType":"script"}