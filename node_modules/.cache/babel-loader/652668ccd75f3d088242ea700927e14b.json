{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext } from 'react';\nimport { isEmpty } from 'lodash';\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext';\n\nconst useI18n = () => {\n  _s();\n\n  const {\n    translations\n  } = useContext(TranslationsContext);\n  return (translationId, fallback, data = {}) => {\n    if (translations.length === 0) {\n      return fallback;\n    }\n\n    const foundTranslation = translations.find(translation => {\n      return translation.data.stringId === translationId;\n    });\n\n    if (foundTranslation) {\n      const {\n        text\n      } = foundTranslation.data;\n      const includesVariable = text.includes('%');\n\n      if (includesVariable) {\n        let interpolatedText = text; // If dynamic tags are found but no data was passed return the fallback\n\n        if (isEmpty(data)) {\n          return fallback;\n        }\n\n        Object.keys(data).forEach(dataKey => {\n          const templateKey = new RegExp(`%${dataKey}%`, 'g');\n          interpolatedText = interpolatedText.replace(templateKey, data[dataKey]);\n        });\n        return interpolatedText;\n      }\n\n      return text;\n    }\n\n    return fallback;\n  };\n};\n\n_s(useI18n, \"hOCbFljQBxvGM0d3yrZWVY+RT6k=\");\n\nexport default useI18n;","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/hooks/useI18n.ts"],"names":["useContext","isEmpty","TranslationsContext","useI18n","translations","translationId","fallback","data","length","foundTranslation","find","translation","stringId","text","includesVariable","includes","interpolatedText","Object","keys","forEach","dataKey","templateKey","RegExp","replace"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,SAASC,mBAAT,QAAoC,8CAApC;;AAMA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM;AAAEC,IAAAA;AAAF,MAAmBJ,UAAU,CAACE,mBAAD,CAAnC;AAEA,SAAO,CAACG,aAAD,EAAwBC,QAAxB,EAA0CC,IAAiB,GAAG,EAA9D,KAAqE;AAC1E,QAAIH,YAAY,CAACI,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,aAAOF,QAAP;AACD;;AAED,UAAMG,gBAAgB,GAAGL,YAAY,CAACM,IAAb,CAAmBC,WAAD,IAAiB;AAC1D,aAAOA,WAAW,CAACJ,IAAZ,CAAiBK,QAAjB,KAA8BP,aAArC;AACD,KAFwB,CAAzB;;AAIA,QAAII,gBAAJ,EAAsB;AACpB,YAAM;AAAEI,QAAAA;AAAF,UAAWJ,gBAAgB,CAACF,IAAlC;AACA,YAAMO,gBAAgB,GAAGD,IAAI,CAACE,QAAL,CAAc,GAAd,CAAzB;;AAEA,UAAID,gBAAJ,EAAsB;AACpB,YAAIE,gBAAgB,GAAGH,IAAvB,CADoB,CAGpB;;AACA,YAAIZ,OAAO,CAACM,IAAD,CAAX,EAAmB;AACjB,iBAAOD,QAAP;AACD;;AAEDW,QAAAA,MAAM,CAACC,IAAP,CAAYX,IAAZ,EAAkBY,OAAlB,CAA2BC,OAAD,IAAa;AACrC,gBAAMC,WAAW,GAAG,IAAIC,MAAJ,CAAY,IAAGF,OAAQ,GAAvB,EAA2B,GAA3B,CAApB;AACAJ,UAAAA,gBAAgB,GAAGA,gBAAgB,CAACO,OAAjB,CAAyBF,WAAzB,EAAsCd,IAAI,CAACa,OAAD,CAA1C,CAAnB;AACD,SAHD;AAKA,eAAOJ,gBAAP;AACD;;AAED,aAAOH,IAAP;AACD;;AAED,WAAOP,QAAP;AACD,GAjCD;AAkCD,CArCD;;GAAMH,O;;AAuCN,eAAeA,OAAf","sourcesContent":["import { useContext } from 'react'\nimport { isEmpty } from 'lodash'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\ninterface ContextData {\n  [key: string]: number | string\n}\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string, data: ContextData = {}) => {\n    if (translations.length === 0) {\n      return fallback\n    }\n\n    const foundTranslation = translations.find((translation) => {\n      return translation.data.stringId === translationId\n    })\n\n    if (foundTranslation) {\n      const { text } = foundTranslation.data\n      const includesVariable = text.includes('%')\n\n      if (includesVariable) {\n        let interpolatedText = text\n\n        // If dynamic tags are found but no data was passed return the fallback\n        if (isEmpty(data)) {\n          return fallback\n        }\n\n        Object.keys(data).forEach((dataKey) => {\n          const templateKey = new RegExp(`%${dataKey}%`, 'g')\n          interpolatedText = interpolatedText.replace(templateKey, data[dataKey])\n        })\n\n        return interpolatedText\n      }\n\n      return text\n    }\n\n    return fallback\n  }\n}\n\nexport default useI18n\n"]},"metadata":{},"sourceType":"module"}