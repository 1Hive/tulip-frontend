{"ast":null,"code":"var _objectSpread = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar io = require('orbit-db-io');\n\nvar Buffer = require('safe-buffer').Buffer; //const AccessController = require('./access-controller-interface')\n\n\nvar type = 'legacy-ipfs-3box';\n\nvar LegacyIPFS3BoxAccessController = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function LegacyIPFS3BoxAccessController(ipfs, options) {\n    _classCallCheck(this, LegacyIPFS3BoxAccessController);\n\n    //super()\n    this._ipfs = ipfs;\n    this._write = Array.from(options.write || []);\n    this._resolver = options.resolver;\n  } // Returns the type of the access controller\n\n\n  _createClass(LegacyIPFS3BoxAccessController, [{\n    key: \"write\",\n    get: // Return a Set of keys that have `access` capability\n    function get() {\n      return this._write;\n    }\n  }, {\n    key: \"canAppend\",\n    value: function () {\n      var _canAppend = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(entry, identityProvider) {\n        var publicKey;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(entry.v === 0)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                _context.t0 = entry.key;\n                _context.next = 7;\n                break;\n\n              case 4:\n                _context.next = 6;\n                return this._publicKeyFromDID(entry.identity.id);\n\n              case 6:\n                _context.t0 = _context.sent;\n\n              case 7:\n                publicKey = _context.t0;\n\n                if (!(this.write.includes(publicKey) || this.write.includes('*'))) {\n                  _context.next = 17;\n                  break;\n                }\n\n                if (!(entry.v === 0)) {\n                  _context.next = 13;\n                  break;\n                }\n\n                _context.t1 = true;\n                _context.next = 16;\n                break;\n\n              case 13:\n                _context.next = 15;\n                return identityProvider.verifyIdentity(entry.identity);\n\n              case 15:\n                _context.t1 = _context.sent;\n\n              case 16:\n                return _context.abrupt(\"return\", _context.t1);\n\n              case 17:\n                return _context.abrupt(\"return\", false);\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function canAppend(_x, _x2) {\n        return _canAppend.apply(this, arguments);\n      }\n\n      return canAppend;\n    }()\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(address) {\n        var access;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // Transform '/ipfs/QmPFtHi3cmfZerxtH9ySLdzpg1yFhocYDZgEZywdUXHxFU'\n                // to 'QmPFtHi3cmfZerxtH9ySLdzpg1yFhocYDZgEZywdUXHxFU'\n                if (address.indexOf('/ipfs') === 0) {\n                  address = address.split('/')[2];\n                }\n\n                _context2.prev = 1;\n                _context2.next = 4;\n                return io.read(this._ipfs, address);\n\n              case 4:\n                access = _context2.sent;\n                this._write = access.write;\n                _context2.next = 11;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](1);\n                console.log('LegacyIPFS3BoxAccessController.load ERROR:', _context2.t0);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 8]]);\n      }));\n\n      function load(_x3) {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }, {\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(options) {\n        var cid, access;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                access = {\n                  admin: [],\n                  write: this.write,\n                  read: []\n                };\n                _context3.prev = 1;\n                _context3.next = 4;\n                return io.write(this._ipfs, 'raw', Buffer.from(JSON.stringify(access, null, 2)), {\n                  format: 'dag-pb'\n                });\n\n              case 4:\n                cid = _context3.sent;\n                _context3.next = 10;\n                break;\n\n              case 7:\n                _context3.prev = 7;\n                _context3.t0 = _context3[\"catch\"](1);\n                console.log('LegacyIPFS3BoxAccessController.save ERROR:', _context3.t0);\n\n              case 10:\n                return _context3.abrupt(\"return\", {\n                  address: cid,\n                  skipManifest: true\n                });\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[1, 7]]);\n      }));\n\n      function save(_x4) {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }()\n  }, {\n    key: \"_publicKeyFromDID\",\n    value: function () {\n      var _publicKeyFromDID2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(did) {\n        var doc;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this._resolver.resolve(did);\n\n              case 2:\n                doc = _context4.sent;\n                return _context4.abrupt(\"return\", doc.publicKey.find(function (entry) {\n                  var id = entry.id.split('#');\n                  return id[0] === doc.id && (id[1] === 'subSigningKey' || id[1] === 'signingKey');\n                }).publicKeyHex);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function _publicKeyFromDID(_x5) {\n        return _publicKeyFromDID2.apply(this, arguments);\n      }\n\n      return _publicKeyFromDID;\n    }()\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return type;\n    }\n  }, {\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(orbitdb) {\n        var options,\n            _args5 = arguments;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                options = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n                options = _objectSpread(_objectSpread({}, options), {\n                  write: options.write || [orbitdb.identity.publicKey]\n                });\n                return _context5.abrupt(\"return\", new LegacyIPFS3BoxAccessController(orbitdb._ipfs, options));\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function create(_x6) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }]);\n\n  return LegacyIPFS3BoxAccessController;\n}();\n\nmodule.exports = LegacyIPFS3BoxAccessController;","map":null,"metadata":{},"sourceType":"script"}