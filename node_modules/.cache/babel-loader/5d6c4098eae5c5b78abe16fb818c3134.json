{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar mafmt = require('mafmt');\n\nvar multiaddr = require('multiaddr');\n\nvar PeerId = require('peer-id');\n\nvar PeerInfo = require('peer-info');\n\nvar withIs = require('class-is');\n\nvar _require = require('./protocol'),\n    CircuitPB = _require.CircuitRelay;\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:circuit');\nlog.error = debug('libp2p:circuit:error');\n\nvar toConnection = require('libp2p-utils/src/stream-to-ma-conn');\n\nvar _require2 = require('./multicodec'),\n    multicodec = _require2.relay;\n\nvar _createListener = require('./listener');\n\nvar _require3 = require('./circuit/hop'),\n    handleCanHop = _require3.handleCanHop,\n    handleHop = _require3.handleHop,\n    hop = _require3.hop;\n\nvar _require4 = require('./circuit/stop'),\n    handleStop = _require4.handleStop;\n\nvar StreamHandler = require('./circuit/stream-handler');\n\nvar Circuit = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of Circuit.\n   *\n   * @constructor\n   * @param {object} options\n   * @param {Libp2p} options.libp2p\n   * @param {Upgrader} options.upgrader\n   */\n  function Circuit(_ref) {\n    var libp2p = _ref.libp2p,\n        upgrader = _ref.upgrader;\n\n    _classCallCheck(this, Circuit);\n\n    this._dialer = libp2p.dialer;\n    this._registrar = libp2p.registrar;\n    this._upgrader = upgrader;\n    this._options = libp2p._config.relay;\n    this.peerInfo = libp2p.peerInfo;\n\n    this._registrar.handle(multicodec, this._onProtocol.bind(this));\n  }\n\n  _createClass(Circuit, [{\n    key: \"_onProtocol\",\n    value: function () {\n      var _onProtocol2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n        var connection, stream, protocol, streamHandler, request, circuit, virtualConnection, remoteAddr, localAddr, maConn, type, conn;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                connection = _ref2.connection, stream = _ref2.stream, protocol = _ref2.protocol;\n                streamHandler = new StreamHandler({\n                  stream: stream\n                });\n                _context.next = 4;\n                return streamHandler.read();\n\n              case 4:\n                request = _context.sent;\n                circuit = this;\n                _context.t0 = request.type;\n                _context.next = _context.t0 === CircuitPB.Type.CAN_HOP ? 9 : _context.t0 === CircuitPB.Type.HOP ? 13 : _context.t0 === CircuitPB.Type.STOP ? 18 : 23;\n                break;\n\n              case 9:\n                log('received CAN_HOP request from %s', connection.remotePeer.toB58String());\n                _context.next = 12;\n                return handleCanHop({\n                  circuit: circuit,\n                  connection: connection,\n                  streamHandler: streamHandler\n                });\n\n              case 12:\n                return _context.abrupt(\"break\", 24);\n\n              case 13:\n                log('received HOP request from %s', connection.remotePeer.toB58String());\n                _context.next = 16;\n                return handleHop({\n                  connection: connection,\n                  request: request,\n                  streamHandler: streamHandler,\n                  circuit: circuit\n                });\n\n              case 16:\n                virtualConnection = _context.sent;\n                return _context.abrupt(\"break\", 24);\n\n              case 18:\n                log('received STOP request from %s', connection.remotePeer.toB58String());\n                _context.next = 21;\n                return handleStop({\n                  connection: connection,\n                  request: request,\n                  streamHandler: streamHandler,\n                  circuit: circuit\n                });\n\n              case 21:\n                virtualConnection = _context.sent;\n                return _context.abrupt(\"break\", 24);\n\n              case 23:\n                log('Request of type %s not supported', request.type);\n\n              case 24:\n                if (!virtualConnection) {\n                  _context.next = 35;\n                  break;\n                }\n\n                remoteAddr = multiaddr(request.dstPeer.addrs[0]);\n                localAddr = multiaddr(request.srcPeer.addrs[0]);\n                maConn = toConnection({\n                  stream: virtualConnection,\n                  remoteAddr: remoteAddr,\n                  localAddr: localAddr\n                });\n                type = CircuitPB.Type === CircuitPB.Type.HOP ? 'relay' : 'inbound';\n                log('new %s connection %s', type, maConn.remoteAddr);\n                _context.next = 32;\n                return this._upgrader.upgradeInbound(maConn);\n\n              case 32:\n                conn = _context.sent;\n                log('%s connection %s upgraded', type, maConn.remoteAddr);\n                this.handler && this.handler(conn);\n\n              case 35:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _onProtocol(_x) {\n        return _onProtocol2.apply(this, arguments);\n      }\n\n      return _onProtocol;\n    }()\n    /**\n     * Dial a peer over a relay\n     *\n     * @param {multiaddr} ma - the multiaddr of the peer to dial\n     * @param {Object} options - dial options\n     * @param {AbortSignal} [options.signal] - An optional abort signal\n     * @returns {Connection} - the connection\n     */\n\n  }, {\n    key: \"dial\",\n    value: function () {\n      var _dial = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ma, options) {\n        var addrs, relayAddr, destinationAddr, relayPeer, destinationPeer, disconnectOnFailure, relayConnection, virtualConnection, localAddr, maConn;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // Check the multiaddr to see if it contains a relay and a destination peer\n                addrs = ma.toString().split('/p2p-circuit');\n                relayAddr = multiaddr(addrs[0]);\n                destinationAddr = multiaddr(addrs[addrs.length - 1]);\n                relayPeer = PeerId.createFromCID(relayAddr.getPeerId());\n                destinationPeer = PeerId.createFromCID(destinationAddr.getPeerId());\n                disconnectOnFailure = false;\n                relayConnection = this._registrar.getConnection(new PeerInfo(relayPeer));\n\n                if (relayConnection) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                _context2.next = 10;\n                return this._dialer.connectToPeer(relayAddr, options);\n\n              case 10:\n                relayConnection = _context2.sent;\n                disconnectOnFailure = true;\n\n              case 12:\n                _context2.prev = 12;\n                _context2.next = 15;\n                return hop({\n                  connection: relayConnection,\n                  circuit: this,\n                  request: {\n                    type: CircuitPB.Type.HOP,\n                    srcPeer: {\n                      id: this.peerInfo.id.toBytes(),\n                      addrs: this.peerInfo.multiaddrs.toArray().map(function (addr) {\n                        return addr.buffer;\n                      })\n                    },\n                    dstPeer: {\n                      id: destinationPeer.toBytes(),\n                      addrs: [multiaddr(destinationAddr).buffer]\n                    }\n                  }\n                });\n\n              case 15:\n                virtualConnection = _context2.sent;\n                localAddr = relayAddr.encapsulate(\"/p2p-circuit/p2p/\".concat(this.peerInfo.id.toB58String()));\n                maConn = toConnection({\n                  stream: virtualConnection,\n                  remoteAddr: ma,\n                  localAddr: localAddr\n                });\n                log('new outbound connection %s', maConn.remoteAddr);\n                return _context2.abrupt(\"return\", this._upgrader.upgradeOutbound(maConn));\n\n              case 22:\n                _context2.prev = 22;\n                _context2.t0 = _context2[\"catch\"](12);\n                log.error('Circuit relay dial failed', _context2.t0);\n                _context2.t1 = disconnectOnFailure;\n\n                if (!_context2.t1) {\n                  _context2.next = 29;\n                  break;\n                }\n\n                _context2.next = 29;\n                return relayConnection.close();\n\n              case 29:\n                throw _context2.t0;\n\n              case 30:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[12, 22]]);\n      }));\n\n      function dial(_x2, _x3) {\n        return _dial.apply(this, arguments);\n      }\n\n      return dial;\n    }()\n    /**\n     * Create a listener\n     *\n     * @param {any} options\n     * @param {Function} handler\n     * @return {listener}\n     */\n\n  }, {\n    key: \"createListener\",\n    value: function createListener(options, handler) {\n      if (typeof options === 'function') {\n        handler = options;\n        options = {};\n      } // Called on successful HOP and STOP requests\n\n\n      this.handler = handler;\n      return _createListener(this, options);\n    }\n    /**\n     * Filter check for all Multiaddrs that this transport can dial on\n     *\n     * @param {Array<Multiaddr>} multiaddrs\n     * @returns {Array<Multiaddr>}\n     */\n\n  }, {\n    key: \"filter\",\n    value: function filter(multiaddrs) {\n      multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs];\n      return multiaddrs.filter(function (ma) {\n        return mafmt.Circuit.matches(ma);\n      });\n    }\n  }]);\n\n  return Circuit;\n}();\n/**\n * @type {Circuit}\n */\n\n\nmodule.exports = withIs(Circuit, {\n  className: 'Circuit',\n  symbolName: '@libp2p/js-libp2p-circuit/circuit'\n});","map":null,"metadata":{},"sourceType":"script"}