{"ast":null,"code":"'use strict';\n\nconst pSettle = require('p-settle');\n\nconst {\n  codes\n} = require('./errors');\n\nconst errCode = require('err-code');\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:transports');\nlog.error = debug('libp2p:transports:error');\n\nclass TransportManager {\n  /**\n   * @constructor\n   * @param {object} options\n   * @param {Libp2p} options.libp2p The Libp2p instance. It will be passed to the transports.\n   * @param {Upgrader} options.upgrader The upgrader to provide to the transports\n   */\n  constructor({\n    libp2p,\n    upgrader\n  }) {\n    this.libp2p = libp2p;\n    this.upgrader = upgrader;\n    this._transports = new Map();\n    this._listeners = new Map();\n  }\n  /**\n   * Adds a `Transport` to the manager\n   *\n   * @param {String} key\n   * @param {Transport} Transport\n   * @param {*} transportOptions Additional options to pass to the transport\n   * @returns {void}\n   */\n\n\n  add(key, Transport, transportOptions = {}) {\n    log('adding %s', key);\n\n    if (!key) {\n      throw errCode(new Error(`Transport must have a valid key, was given '${key}'`), codes.ERR_INVALID_KEY);\n    }\n\n    if (this._transports.has(key)) {\n      throw errCode(new Error('There is already a transport with this key'), codes.ERR_DUPLICATE_TRANSPORT);\n    }\n\n    const transport = new Transport({ ...transportOptions,\n      libp2p: this.libp2p,\n      upgrader: this.upgrader\n    });\n\n    this._transports.set(key, transport);\n\n    if (!this._listeners.has(key)) {\n      this._listeners.set(key, []);\n    }\n  }\n  /**\n   * Stops all listeners\n   * @async\n   */\n\n\n  async close() {\n    const tasks = [];\n\n    for (const [key, listeners] of this._listeners) {\n      log('closing listeners for %s', key);\n\n      while (listeners.length) {\n        const listener = listeners.pop();\n        tasks.push(listener.close());\n      }\n    }\n\n    await Promise.all(tasks);\n    log('all listeners closed');\n\n    for (const key of this._listeners.keys()) {\n      this._listeners.set(key, []);\n    }\n  }\n  /**\n   * Dials the given Multiaddr over it's supported transport\n   * @param {Multiaddr} ma\n   * @param {*} options\n   * @returns {Promise<Connection>}\n   */\n\n\n  async dial(ma, options) {\n    const transport = this.transportForMultiaddr(ma);\n\n    if (!transport) {\n      throw errCode(new Error(`No transport available for address ${String(ma)}`), codes.ERR_TRANSPORT_UNAVAILABLE);\n    }\n\n    try {\n      return await transport.dial(ma, options);\n    } catch (err) {\n      if (!err.code) err.code = codes.ERR_TRANSPORT_DIAL_FAILED;\n      throw err;\n    }\n  }\n  /**\n   * Returns all Multiaddr's the listeners are using\n   * @returns {Multiaddr[]}\n   */\n\n\n  getAddrs() {\n    let addrs = [];\n\n    for (const listeners of this._listeners.values()) {\n      for (const listener of listeners) {\n        addrs = [...addrs, ...listener.getAddrs()];\n      }\n    }\n\n    return addrs;\n  }\n  /**\n   * Returns all the transports instances.\n   * @returns {Iterator<Transport>}\n   */\n\n\n  getTransports() {\n    return this._transports.values();\n  }\n  /**\n   * Finds a transport that matches the given Multiaddr\n   * @param {Multiaddr} ma\n   * @returns {Transport|null}\n   */\n\n\n  transportForMultiaddr(ma) {\n    for (const transport of this._transports.values()) {\n      const addrs = transport.filter([ma]);\n      if (addrs.length) return transport;\n    }\n\n    return null;\n  }\n  /**\n   * Starts listeners for each given Multiaddr.\n   * @async\n   * @param {Multiaddr[]} addrs\n   */\n\n\n  async listen(addrs) {\n    if (addrs.length === 0) {\n      log('no addresses were provided for listening, this node is dial only');\n      return;\n    }\n\n    const couldNotListen = [];\n\n    for (const [key, transport] of this._transports.entries()) {\n      const supportedAddrs = transport.filter(addrs);\n      const tasks = []; // For each supported multiaddr, create a listener\n\n      for (const addr of supportedAddrs) {\n        log('creating listener for %s on %s', key, addr);\n        const listener = transport.createListener({}, this.onConnection);\n\n        this._listeners.get(key).push(listener); // We need to attempt to listen on everything\n\n\n        tasks.push(listener.listen(addr));\n      } // Keep track of transports we had no addresses for\n\n\n      if (tasks.length === 0) {\n        couldNotListen.push(key);\n        continue;\n      }\n\n      const results = await pSettle(tasks); // If we are listening on at least 1 address, succeed.\n      // TODO: we should look at adding a retry (`p-retry`) here to better support\n      // listening on remote addresses as they may be offline. We could then potentially\n      // just wait for any (`p-any`) listener to succeed on each transport before returning\n\n      const isListening = results.find(r => r.isFulfilled === true);\n\n      if (!isListening) {\n        throw errCode(new Error(`Transport (${key}) could not listen on any available address`), codes.ERR_NO_VALID_ADDRESSES);\n      }\n    } // If no transports were able to listen, throw an error. This likely\n    // means we were given addresses we do not have transports for\n\n\n    if (couldNotListen.length === this._transports.size) {\n      throw errCode(new Error(`no valid addresses were provided for transports [${couldNotListen}]`), codes.ERR_NO_VALID_ADDRESSES);\n    }\n  }\n  /**\n   * Removes the given transport from the manager.\n   * If a transport has any running listeners, they will be closed.\n   *\n   * @async\n   * @param {string} key\n   */\n\n\n  async remove(key) {\n    log('removing %s', key);\n\n    if (this._listeners.has(key)) {\n      // Close any running listeners\n      for (const listener of this._listeners.get(key)) {\n        await listener.close();\n      }\n    }\n\n    this._transports.delete(key);\n\n    this._listeners.delete(key);\n  }\n  /**\n   * Removes all transports from the manager.\n   * If any listeners are running, they will be closed.\n   * @async\n   */\n\n\n  async removeAll() {\n    const tasks = [];\n\n    for (const key of this._transports.keys()) {\n      tasks.push(this.remove(key));\n    }\n\n    await Promise.all(tasks);\n  }\n\n}\n\nmodule.exports = TransportManager;","map":null,"metadata":{},"sourceType":"script"}