{"ast":null,"code":"'use strict';\n\nconst crypto = require('libp2p-crypto');\n\nconst multihashing = require('multihashing-async');\n\nconst PeerId = require('peer-id');\n\nconst AbortController = require('abort-controller');\n\nconst errcode = require('err-code');\n\nconst times = require('p-times');\n\nconst c = require('./constants');\n\nconst {\n  logger\n} = require('./utils');\n\nclass RandomWalk {\n  /**\n   * @constructor\n   * @param {DHT} dht\n   * @param {object} options\n   * @param {randomWalkOptions.enabled} options.enabled\n   * @param {randomWalkOptions.queriesPerPeriod} options.queriesPerPeriod\n   * @param {randomWalkOptions.interval} options.interval\n   * @param {randomWalkOptions.timeout} options.timeout\n   * @param {randomWalkOptions.delay} options.delay\n   * @param {DHT} options.dht\n   */\n  constructor(dht, options) {\n    if (!dht) {\n      throw new Error('Random Walk needs an instance of the Kademlia DHT');\n    }\n\n    this._kadDHT = dht;\n    this._options = { ...c.defaultRandomWalk,\n      ...options\n    };\n    this.log = logger(dht.peerInfo.id, 'random-walk');\n    this._timeoutId = undefined;\n  }\n  /**\n   * Start the Random Walk process. This means running a number of queries\n   * every interval requesting random data. This is done to keep the dht\n   * healthy over time.\n   *\n   * @returns {void}\n   */\n\n\n  start() {\n    // Don't run twice\n    if (this._timeoutId || !this._options.enabled) {\n      return;\n    } // Start doing random walks after `this._options.delay`\n\n\n    this._timeoutId = setTimeout(() => {\n      // Start runner immediately\n      this._runPeriodically();\n    }, this._options.delay);\n  }\n  /**\n   * Stop the random-walk process. Any active\n   * queries will be aborted.\n   *\n   * @returns {void}\n   */\n\n\n  stop() {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n      this._timeoutId = undefined;\n    }\n\n    this._controller && this._controller.abort();\n  }\n  /**\n   * Run function `randomWalk._walk` on every `options.interval` ms\n   *\n   * @private\n   */\n\n\n  async _runPeriodically() {\n    // run until the walk has been stopped\n    while (this._timeoutId) {\n      try {\n        await this._walk(this._options.queriesPerPeriod, this._options.timeout);\n      } catch (err) {\n        this._kadDHT._log.error('random-walk:error', err);\n      } // Each subsequent walk should run on a `this._options.interval` interval\n\n\n      await new Promise(resolve => {\n        this._timeoutId = setTimeout(resolve, this._options.interval);\n      });\n    }\n  }\n  /**\n   * Do the random walk work.\n   *\n   * @param {number} queries\n   * @param {number} walkTimeout\n   * @returns {Promise}\n   *\n   * @private\n   */\n\n\n  async _walk(queries, walkTimeout) {\n    this.log('start');\n    this._controller = new AbortController();\n\n    try {\n      await times(queries, async index => {\n        this.log('running query %d', index);\n\n        try {\n          const id = await this._randomPeerId(); // Check if we've happened to already abort\n\n          if (!this._controller) return;\n          await this._query(id, {\n            timeout: walkTimeout,\n            signal: this._controller.signal\n          });\n        } catch (err) {\n          if (err && err.code !== 'ETIMEDOUT') {\n            this.log.error('query %d finished with error', index, err);\n            throw err;\n          }\n        }\n\n        this.log('finished query %d', index);\n      });\n    } finally {\n      this._controller = null;\n      this.log('finished queries');\n    }\n  }\n  /**\n   * The query run during a random walk request.\n   *\n   * TODO: While query currently supports an abort controller, it is not\n   * yet supported by `DHT.findPeer`. Once https://github.com/libp2p/js-libp2p-kad-dht/pull/82\n   * is complete, and AbortController support has been added to the\n   * DHT query functions, the abort here will just work, provided the\n   * functions support `options.signal`. Once done, this todo should be\n   * removed.\n   *\n   * @param {PeerId} id\n   * @param {object} options\n   * @param {number} options.timeout\n   * @param {AbortControllerSignal} options.signal\n   * @returns {Promise}\n   *\n   * @private\n   */\n\n\n  async _query(id, options) {\n    this.log('query:%s', id.toB58String());\n    let peer;\n\n    try {\n      peer = await this._kadDHT.findPeer(id, options);\n    } catch (err) {\n      if (err && err.code === 'ERR_NOT_FOUND') {\n        // expected case, we asked for random stuff after all\n        return;\n      }\n\n      throw err;\n    }\n\n    this.log('query:found', peer); // wait what, there was something found? Lucky day!\n\n    throw errcode(`random-walk: ACTUALLY FOUND PEER: ${peer}, ${id.toB58String()}`, 'ERR_FOUND_RANDOM_PEER');\n  }\n  /**\n   * Generate a random peer id for random-walk purposes.\n   *\n   * @returns {Promise<PeerId>}\n   *\n   * @private\n   */\n\n\n  async _randomPeerId() {\n    const digest = await multihashing(crypto.randomBytes(16), 'sha2-256');\n    return new PeerId(digest);\n  }\n\n}\n\nmodule.exports = RandomWalk;","map":null,"metadata":{},"sourceType":"script"}