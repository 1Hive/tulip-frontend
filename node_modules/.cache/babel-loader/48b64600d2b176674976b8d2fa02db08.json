{"ast":null,"code":"\"use strict\"; // Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Package poly1305 implements Poly1305 one-time message authentication algorithm.\n */\n\nvar constant_time_1 = require(\"@stablelib/constant-time\");\n\nvar wipe_1 = require(\"@stablelib/wipe\");\n\nexports.DIGEST_LENGTH = 16; // Port of Andrew Moon's Poly1305-donna-16. Public domain.\n// https://github.com/floodyberry/poly1305-donna\n\n/**\n * Poly1305 computes 16-byte authenticator of message using\n * a one-time 32-byte key.\n *\n * Important: key should be used for only one message,\n * it should never repeat.\n */\n\nvar Poly1305 =\n/** @class */\nfunction () {\n  function Poly1305(key) {\n    this.digestLength = exports.DIGEST_LENGTH;\n    this._buffer = new Uint8Array(16);\n    this._r = new Uint16Array(10);\n    this._h = new Uint16Array(10);\n    this._pad = new Uint16Array(8);\n    this._leftover = 0;\n    this._fin = 0;\n    this._finished = false;\n    var t0 = key[0] | key[1] << 8;\n    this._r[0] = t0 & 0x1fff;\n    var t1 = key[2] | key[3] << 8;\n    this._r[1] = (t0 >>> 13 | t1 << 3) & 0x1fff;\n    var t2 = key[4] | key[5] << 8;\n    this._r[2] = (t1 >>> 10 | t2 << 6) & 0x1f03;\n    var t3 = key[6] | key[7] << 8;\n    this._r[3] = (t2 >>> 7 | t3 << 9) & 0x1fff;\n    var t4 = key[8] | key[9] << 8;\n    this._r[4] = (t3 >>> 4 | t4 << 12) & 0x00ff;\n    this._r[5] = t4 >>> 1 & 0x1ffe;\n    var t5 = key[10] | key[11] << 8;\n    this._r[6] = (t4 >>> 14 | t5 << 2) & 0x1fff;\n    var t6 = key[12] | key[13] << 8;\n    this._r[7] = (t5 >>> 11 | t6 << 5) & 0x1f81;\n    var t7 = key[14] | key[15] << 8;\n    this._r[8] = (t6 >>> 8 | t7 << 8) & 0x1fff;\n    this._r[9] = t7 >>> 5 & 0x007f;\n    this._pad[0] = key[16] | key[17] << 8;\n    this._pad[1] = key[18] | key[19] << 8;\n    this._pad[2] = key[20] | key[21] << 8;\n    this._pad[3] = key[22] | key[23] << 8;\n    this._pad[4] = key[24] | key[25] << 8;\n    this._pad[5] = key[26] | key[27] << 8;\n    this._pad[6] = key[28] | key[29] << 8;\n    this._pad[7] = key[30] | key[31] << 8;\n  }\n\n  Poly1305.prototype._blocks = function (m, mpos, bytes) {\n    var hibit = this._fin ? 0 : 1 << 11;\n    var h0 = this._h[0],\n        h1 = this._h[1],\n        h2 = this._h[2],\n        h3 = this._h[3],\n        h4 = this._h[4],\n        h5 = this._h[5],\n        h6 = this._h[6],\n        h7 = this._h[7],\n        h8 = this._h[8],\n        h9 = this._h[9];\n    var r0 = this._r[0],\n        r1 = this._r[1],\n        r2 = this._r[2],\n        r3 = this._r[3],\n        r4 = this._r[4],\n        r5 = this._r[5],\n        r6 = this._r[6],\n        r7 = this._r[7],\n        r8 = this._r[8],\n        r9 = this._r[9];\n\n    while (bytes >= 16) {\n      var t0 = m[mpos + 0] | m[mpos + 1] << 8;\n      h0 += t0 & 0x1fff;\n      var t1 = m[mpos + 2] | m[mpos + 3] << 8;\n      h1 += (t0 >>> 13 | t1 << 3) & 0x1fff;\n      var t2 = m[mpos + 4] | m[mpos + 5] << 8;\n      h2 += (t1 >>> 10 | t2 << 6) & 0x1fff;\n      var t3 = m[mpos + 6] | m[mpos + 7] << 8;\n      h3 += (t2 >>> 7 | t3 << 9) & 0x1fff;\n      var t4 = m[mpos + 8] | m[mpos + 9] << 8;\n      h4 += (t3 >>> 4 | t4 << 12) & 0x1fff;\n      h5 += t4 >>> 1 & 0x1fff;\n      var t5 = m[mpos + 10] | m[mpos + 11] << 8;\n      h6 += (t4 >>> 14 | t5 << 2) & 0x1fff;\n      var t6 = m[mpos + 12] | m[mpos + 13] << 8;\n      h7 += (t5 >>> 11 | t6 << 5) & 0x1fff;\n      var t7 = m[mpos + 14] | m[mpos + 15] << 8;\n      h8 += (t6 >>> 8 | t7 << 8) & 0x1fff;\n      h9 += t7 >>> 5 | hibit;\n      var c = 0;\n      var d0 = c;\n      d0 += h0 * r0;\n      d0 += h1 * (5 * r9);\n      d0 += h2 * (5 * r8);\n      d0 += h3 * (5 * r7);\n      d0 += h4 * (5 * r6);\n      c = d0 >>> 13;\n      d0 &= 0x1fff;\n      d0 += h5 * (5 * r5);\n      d0 += h6 * (5 * r4);\n      d0 += h7 * (5 * r3);\n      d0 += h8 * (5 * r2);\n      d0 += h9 * (5 * r1);\n      c += d0 >>> 13;\n      d0 &= 0x1fff;\n      var d1 = c;\n      d1 += h0 * r1;\n      d1 += h1 * r0;\n      d1 += h2 * (5 * r9);\n      d1 += h3 * (5 * r8);\n      d1 += h4 * (5 * r7);\n      c = d1 >>> 13;\n      d1 &= 0x1fff;\n      d1 += h5 * (5 * r6);\n      d1 += h6 * (5 * r5);\n      d1 += h7 * (5 * r4);\n      d1 += h8 * (5 * r3);\n      d1 += h9 * (5 * r2);\n      c += d1 >>> 13;\n      d1 &= 0x1fff;\n      var d2 = c;\n      d2 += h0 * r2;\n      d2 += h1 * r1;\n      d2 += h2 * r0;\n      d2 += h3 * (5 * r9);\n      d2 += h4 * (5 * r8);\n      c = d2 >>> 13;\n      d2 &= 0x1fff;\n      d2 += h5 * (5 * r7);\n      d2 += h6 * (5 * r6);\n      d2 += h7 * (5 * r5);\n      d2 += h8 * (5 * r4);\n      d2 += h9 * (5 * r3);\n      c += d2 >>> 13;\n      d2 &= 0x1fff;\n      var d3 = c;\n      d3 += h0 * r3;\n      d3 += h1 * r2;\n      d3 += h2 * r1;\n      d3 += h3 * r0;\n      d3 += h4 * (5 * r9);\n      c = d3 >>> 13;\n      d3 &= 0x1fff;\n      d3 += h5 * (5 * r8);\n      d3 += h6 * (5 * r7);\n      d3 += h7 * (5 * r6);\n      d3 += h8 * (5 * r5);\n      d3 += h9 * (5 * r4);\n      c += d3 >>> 13;\n      d3 &= 0x1fff;\n      var d4 = c;\n      d4 += h0 * r4;\n      d4 += h1 * r3;\n      d4 += h2 * r2;\n      d4 += h3 * r1;\n      d4 += h4 * r0;\n      c = d4 >>> 13;\n      d4 &= 0x1fff;\n      d4 += h5 * (5 * r9);\n      d4 += h6 * (5 * r8);\n      d4 += h7 * (5 * r7);\n      d4 += h8 * (5 * r6);\n      d4 += h9 * (5 * r5);\n      c += d4 >>> 13;\n      d4 &= 0x1fff;\n      var d5 = c;\n      d5 += h0 * r5;\n      d5 += h1 * r4;\n      d5 += h2 * r3;\n      d5 += h3 * r2;\n      d5 += h4 * r1;\n      c = d5 >>> 13;\n      d5 &= 0x1fff;\n      d5 += h5 * r0;\n      d5 += h6 * (5 * r9);\n      d5 += h7 * (5 * r8);\n      d5 += h8 * (5 * r7);\n      d5 += h9 * (5 * r6);\n      c += d5 >>> 13;\n      d5 &= 0x1fff;\n      var d6 = c;\n      d6 += h0 * r6;\n      d6 += h1 * r5;\n      d6 += h2 * r4;\n      d6 += h3 * r3;\n      d6 += h4 * r2;\n      c = d6 >>> 13;\n      d6 &= 0x1fff;\n      d6 += h5 * r1;\n      d6 += h6 * r0;\n      d6 += h7 * (5 * r9);\n      d6 += h8 * (5 * r8);\n      d6 += h9 * (5 * r7);\n      c += d6 >>> 13;\n      d6 &= 0x1fff;\n      var d7 = c;\n      d7 += h0 * r7;\n      d7 += h1 * r6;\n      d7 += h2 * r5;\n      d7 += h3 * r4;\n      d7 += h4 * r3;\n      c = d7 >>> 13;\n      d7 &= 0x1fff;\n      d7 += h5 * r2;\n      d7 += h6 * r1;\n      d7 += h7 * r0;\n      d7 += h8 * (5 * r9);\n      d7 += h9 * (5 * r8);\n      c += d7 >>> 13;\n      d7 &= 0x1fff;\n      var d8 = c;\n      d8 += h0 * r8;\n      d8 += h1 * r7;\n      d8 += h2 * r6;\n      d8 += h3 * r5;\n      d8 += h4 * r4;\n      c = d8 >>> 13;\n      d8 &= 0x1fff;\n      d8 += h5 * r3;\n      d8 += h6 * r2;\n      d8 += h7 * r1;\n      d8 += h8 * r0;\n      d8 += h9 * (5 * r9);\n      c += d8 >>> 13;\n      d8 &= 0x1fff;\n      var d9 = c;\n      d9 += h0 * r9;\n      d9 += h1 * r8;\n      d9 += h2 * r7;\n      d9 += h3 * r6;\n      d9 += h4 * r5;\n      c = d9 >>> 13;\n      d9 &= 0x1fff;\n      d9 += h5 * r4;\n      d9 += h6 * r3;\n      d9 += h7 * r2;\n      d9 += h8 * r1;\n      d9 += h9 * r0;\n      c += d9 >>> 13;\n      d9 &= 0x1fff;\n      c = (c << 2) + c | 0;\n      c = c + d0 | 0;\n      d0 = c & 0x1fff;\n      c = c >>> 13;\n      d1 += c;\n      h0 = d0;\n      h1 = d1;\n      h2 = d2;\n      h3 = d3;\n      h4 = d4;\n      h5 = d5;\n      h6 = d6;\n      h7 = d7;\n      h8 = d8;\n      h9 = d9;\n      mpos += 16;\n      bytes -= 16;\n    }\n\n    this._h[0] = h0;\n    this._h[1] = h1;\n    this._h[2] = h2;\n    this._h[3] = h3;\n    this._h[4] = h4;\n    this._h[5] = h5;\n    this._h[6] = h6;\n    this._h[7] = h7;\n    this._h[8] = h8;\n    this._h[9] = h9;\n  };\n\n  Poly1305.prototype.finish = function (mac, macpos) {\n    if (macpos === void 0) {\n      macpos = 0;\n    }\n\n    var g = new Uint16Array(10);\n    var c;\n    var mask;\n    var f;\n    var i;\n\n    if (this._leftover) {\n      i = this._leftover;\n      this._buffer[i++] = 1;\n\n      for (; i < 16; i++) {\n        this._buffer[i] = 0;\n      }\n\n      this._fin = 1;\n\n      this._blocks(this._buffer, 0, 16);\n    }\n\n    c = this._h[1] >>> 13;\n    this._h[1] &= 0x1fff;\n\n    for (i = 2; i < 10; i++) {\n      this._h[i] += c;\n      c = this._h[i] >>> 13;\n      this._h[i] &= 0x1fff;\n    }\n\n    this._h[0] += c * 5;\n    c = this._h[0] >>> 13;\n    this._h[0] &= 0x1fff;\n    this._h[1] += c;\n    c = this._h[1] >>> 13;\n    this._h[1] &= 0x1fff;\n    this._h[2] += c;\n    g[0] = this._h[0] + 5;\n    c = g[0] >>> 13;\n    g[0] &= 0x1fff;\n\n    for (i = 1; i < 10; i++) {\n      g[i] = this._h[i] + c;\n      c = g[i] >>> 13;\n      g[i] &= 0x1fff;\n    }\n\n    g[9] -= 1 << 13;\n    mask = (c ^ 1) - 1;\n\n    for (i = 0; i < 10; i++) {\n      g[i] &= mask;\n    }\n\n    mask = ~mask;\n\n    for (i = 0; i < 10; i++) {\n      this._h[i] = this._h[i] & mask | g[i];\n    }\n\n    this._h[0] = (this._h[0] | this._h[1] << 13) & 0xffff;\n    this._h[1] = (this._h[1] >>> 3 | this._h[2] << 10) & 0xffff;\n    this._h[2] = (this._h[2] >>> 6 | this._h[3] << 7) & 0xffff;\n    this._h[3] = (this._h[3] >>> 9 | this._h[4] << 4) & 0xffff;\n    this._h[4] = (this._h[4] >>> 12 | this._h[5] << 1 | this._h[6] << 14) & 0xffff;\n    this._h[5] = (this._h[6] >>> 2 | this._h[7] << 11) & 0xffff;\n    this._h[6] = (this._h[7] >>> 5 | this._h[8] << 8) & 0xffff;\n    this._h[7] = (this._h[8] >>> 8 | this._h[9] << 5) & 0xffff;\n    f = this._h[0] + this._pad[0];\n    this._h[0] = f & 0xffff;\n\n    for (i = 1; i < 8; i++) {\n      f = (this._h[i] + this._pad[i] | 0) + (f >>> 16) | 0;\n      this._h[i] = f & 0xffff;\n    }\n\n    mac[macpos + 0] = this._h[0] >>> 0;\n    mac[macpos + 1] = this._h[0] >>> 8;\n    mac[macpos + 2] = this._h[1] >>> 0;\n    mac[macpos + 3] = this._h[1] >>> 8;\n    mac[macpos + 4] = this._h[2] >>> 0;\n    mac[macpos + 5] = this._h[2] >>> 8;\n    mac[macpos + 6] = this._h[3] >>> 0;\n    mac[macpos + 7] = this._h[3] >>> 8;\n    mac[macpos + 8] = this._h[4] >>> 0;\n    mac[macpos + 9] = this._h[4] >>> 8;\n    mac[macpos + 10] = this._h[5] >>> 0;\n    mac[macpos + 11] = this._h[5] >>> 8;\n    mac[macpos + 12] = this._h[6] >>> 0;\n    mac[macpos + 13] = this._h[6] >>> 8;\n    mac[macpos + 14] = this._h[7] >>> 0;\n    mac[macpos + 15] = this._h[7] >>> 8;\n    this._finished = true;\n    return this;\n  };\n\n  Poly1305.prototype.update = function (m) {\n    var mpos = 0;\n    var bytes = m.length;\n    var want;\n\n    if (this._leftover) {\n      want = 16 - this._leftover;\n\n      if (want > bytes) {\n        want = bytes;\n      }\n\n      for (var i = 0; i < want; i++) {\n        this._buffer[this._leftover + i] = m[mpos + i];\n      }\n\n      bytes -= want;\n      mpos += want;\n      this._leftover += want;\n\n      if (this._leftover < 16) {\n        return this;\n      }\n\n      this._blocks(this._buffer, 0, 16);\n\n      this._leftover = 0;\n    }\n\n    if (bytes >= 16) {\n      want = bytes - bytes % 16;\n\n      this._blocks(m, mpos, want);\n\n      mpos += want;\n      bytes -= want;\n    }\n\n    if (bytes) {\n      for (var i = 0; i < bytes; i++) {\n        this._buffer[this._leftover + i] = m[mpos + i];\n      }\n\n      this._leftover += bytes;\n    }\n\n    return this;\n  };\n\n  Poly1305.prototype.digest = function () {\n    // TODO(dchest): it behaves differently than other hashes/HMAC,\n    // because it throws when finished — others just return saved result.\n    if (this._finished) {\n      throw new Error(\"Poly1305 was finished\");\n    }\n\n    var mac = new Uint8Array(16);\n    this.finish(mac);\n    return mac;\n  };\n\n  Poly1305.prototype.clean = function () {\n    wipe_1.wipe(this._buffer);\n    wipe_1.wipe(this._r);\n    wipe_1.wipe(this._h);\n    wipe_1.wipe(this._pad);\n    this._leftover = 0;\n    this._fin = 0;\n    this._finished = true; // mark as finished even if not\n\n    return this;\n  };\n\n  return Poly1305;\n}();\n\nexports.Poly1305 = Poly1305;\n/**\n * Returns 16-byte authenticator of data using a one-time 32-byte key.\n *\n * Important: key should be used for only one message, it should never repeat.\n */\n\nfunction oneTimeAuth(key, data) {\n  var h = new Poly1305(key);\n  h.update(data);\n  var digest = h.digest();\n  h.clean();\n  return digest;\n}\n\nexports.oneTimeAuth = oneTimeAuth;\n/**\n * Returns true if two authenticators are 16-byte long and equal.\n * Uses contant-time comparison to avoid leaking timing information.\n */\n\nfunction equal(a, b) {\n  if (a.length !== exports.DIGEST_LENGTH || b.length !== exports.DIGEST_LENGTH) {\n    return false;\n  }\n\n  return constant_time_1.equal(a, b);\n}\n\nexports.equal = equal;","map":null,"metadata":{},"sourceType":"script"}