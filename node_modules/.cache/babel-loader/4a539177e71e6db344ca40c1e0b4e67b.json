{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar ensureAddress = require('orbit-db-access-controllers/src/utils/ensure-ac-address');\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar entryIPFS = require('ipfs-log/src/entry');\n\nvar isIPFS = require('is-ipfs');\n\nvar orbitAddress = require('orbit-db/src/orbit-db-address');\n\nvar type = 'thread-access';\nvar MODERATOR = 'MODERATOR';\nvar MEMBER = 'MEMBER';\n\nvar isValid3ID = function isValid3ID(did) {\n  var parts = did.split(':');\n  if (!parts[0] === 'did' || !parts[1] === '3') return false;\n  return isIPFS.cid(parts[2]);\n};\n\nvar ThreadAccessController = /*#__PURE__*/function (_EventEmitter) {\n  \"use strict\";\n\n  _inherits(ThreadAccessController, _EventEmitter);\n\n  var _super = _createSuper(ThreadAccessController);\n\n  function ThreadAccessController(orbitdb, ipfs, identity, firstModerator, options) {\n    var _this;\n\n    _classCallCheck(this, ThreadAccessController);\n\n    _this = _super.call(this);\n    _this._orbitdb = orbitdb;\n    _this._db = null;\n    _this._options = options || {};\n    _this._ipfs = ipfs;\n    _this._members = Boolean(options.members);\n    _this._firstModerator = firstModerator;\n    _this._threadName = options.threadName;\n    _this._identity = identity;\n    _this._encKeyId = options.encKeyId;\n    return _this;\n  }\n\n  _createClass(ThreadAccessController, [{\n    key: \"address\",\n    get: // return address of AC (in this case orbitdb address of AC)\n    function get() {\n      return this._db.address;\n    }\n  }, {\n    key: \"canAppend\",\n    value: function () {\n      var _canAppend = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(entry, identityProvider) {\n        var trueIfValidSig, op, mods, members, isMod, isMember, hash, delEntry;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                trueIfValidSig = /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return identityProvider.verifyIdentity(entry.identity);\n\n                          case 2:\n                            return _context.abrupt(\"return\", _context.sent);\n\n                          case 3:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function trueIfValidSig() {\n                    return _ref.apply(this, arguments);\n                  };\n                }();\n\n                op = entry.payload.op;\n                mods = this.capabilities['moderators'];\n                members = this.capabilities['members'];\n                isMod = mods.includes(entry.identity.id);\n                isMember = members.includes(entry.identity.id);\n\n                if (!(op === 'ADD')) {\n                  _context2.next = 15;\n                  break;\n                }\n\n                if (this._members) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                _context2.next = 10;\n                return trueIfValidSig();\n\n              case 10:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 11:\n                if (!(isMember || isMod)) {\n                  _context2.next = 15;\n                  break;\n                }\n\n                _context2.next = 14;\n                return trueIfValidSig();\n\n              case 14:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 15:\n                if (!(op === 'DEL')) {\n                  _context2.next = 28;\n                  break;\n                }\n\n                hash = entry.payload.value;\n                _context2.next = 19;\n                return entryIPFS.fromMultihash(this._ipfs, hash);\n\n              case 19:\n                delEntry = _context2.sent;\n\n                if (!(delEntry.identity.id === entry.identity.id)) {\n                  _context2.next = 24;\n                  break;\n                }\n\n                _context2.next = 23;\n                return trueIfValidSig();\n\n              case 23:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 24:\n                if (!isMod) {\n                  _context2.next = 28;\n                  break;\n                }\n\n                _context2.next = 27;\n                return trueIfValidSig();\n\n              case 27:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 28:\n                return _context2.abrupt(\"return\", false);\n\n              case 29:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function canAppend(_x, _x2) {\n        return _canAppend.apply(this, arguments);\n      }\n\n      return canAppend;\n    }()\n  }, {\n    key: \"capabilities\",\n    get: function get() {\n      if (!this._capabilities) this._updateCapabilites();\n      return this._capabilities;\n    }\n  }, {\n    key: \"getEncryptedKey\",\n    value: function getEncryptedKey(did) {\n      if (!this._encKeyId) throw new Error(\"getEncryptedKey: only available for confidential threads\");\n      var didEntries = Object.entries(this._db.index).map(function (entry) {\n        return {\n          id: entry[1].payload.value.id,\n          encryptedReadKey: entry[1].payload.value.encryptedReadKey\n        };\n      }).filter(function (entry) {\n        return entry.id === did;\n      });\n      if (didEntries.length === 0) throw new Error(\"getEncryptedKey: no access for \".concat(did));\n      return didEntries[0].encryptedReadKey;\n    }\n  }, {\n    key: \"_updateCapabilites\",\n    value: function _updateCapabilites() {\n      var moderators = [],\n          members = [];\n\n      if (this._db) {\n        moderators.push(this._db.access._firstModerator);\n        Object.entries(this._db.index).forEach(function (entry) {\n          var capability = entry[1].payload.value.capability;\n          var id = entry[1].payload.value.id;\n\n          if (capability === MODERATOR) {\n            if (!moderators.includes(id)) moderators.push(id);\n          }\n\n          if (capability === MEMBER) members.push(id);\n        });\n      }\n\n      this._capabilities = {\n        moderators: moderators,\n        members: members\n      };\n      return this._capabilities;\n    }\n  }, {\n    key: \"get\",\n    value: function get(capability) {\n      return this.capabilities[capability] || [];\n    }\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this._db.close();\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function close() {\n        return _close.apply(this, arguments);\n      }\n\n      return close;\n    }()\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(address) {\n        var isAddress;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                isAddress = orbitAddress.isValid(address);\n\n                if (!this._db) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                _context4.next = 4;\n                return this._db.close();\n\n              case 4:\n                _context4.next = 6;\n                return this._orbitdb.feed(ensureAddress(address), this._createOrbitOpts(isAddress));\n\n              case 6:\n                this._db = _context4.sent;\n\n                this._db.events.on('ready', this._onUpdate.bind(this));\n\n                this._db.events.on('write', this._onUpdate.bind(this));\n\n                this._db.events.on('replicated', this._onUpdate.bind(this));\n\n                _context4.next = 12;\n                return this._db.load();\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function load(_x3) {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }, {\n    key: \"_createOrbitOpts\",\n    value: function _createOrbitOpts() {\n      var loadByAddress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var accessController = {\n        type: 'moderator-access',\n        firstModerator: this._firstModerator,\n        members: this._members,\n        encKeyId: this._encKeyId\n      };\n      var opts = {\n        identity: this._identity,\n        sync: true\n      };\n      return Object.assign(opts, loadByAddress ? {} : {\n        accessController: accessController\n      });\n    }\n  }, {\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var address, manifest;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._orbitdb.determineAddress(\"\".concat(this._threadName, \"/_access\"), 'feed', this._createOrbitOpts());\n\n              case 2:\n                address = _context5.sent;\n                manifest = {\n                  address: address.toString(),\n                  firstModerator: this._firstModerator,\n                  members: this._members\n                };\n                if (this._encKeyId) manifest.encKeyId = this._encKeyId;\n                return _context5.abrupt(\"return\", manifest);\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function save() {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }()\n  }, {\n    key: \"grant\",\n    value: function () {\n      var _grant = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(capability, id, encryptedReadKey) {\n        var entry;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (this._db.access.isValidCapability(capability)) {\n                  _context6.next = 2;\n                  break;\n                }\n\n                throw new Error('grant: Invalid capability to grant');\n\n              case 2:\n                if (!(capability === MEMBER && this.capabilities['members'].includes(id))) {\n                  _context6.next = 4;\n                  break;\n                }\n\n                throw new Error(\"grant: capability \".concat(capability, \" has already been granted to \").concat(id));\n\n              case 4:\n                if (!(capability === MODERATOR && this.capabilities['moderators'].includes(id) && this.capabilities['moderators'].length !== 1)) {\n                  _context6.next = 6;\n                  break;\n                }\n\n                throw new Error(\"grant: capability \".concat(capability, \" has already been granted to \").concat(id));\n\n              case 6:\n                if (!(this._encKeyId && !encryptedReadKey)) {\n                  _context6.next = 8;\n                  break;\n                }\n\n                throw new Error('grant: confidential threads require access to be granted with encrypted key');\n\n              case 8:\n                _context6.prev = 8;\n                entry = {\n                  capability: capability,\n                  id: id\n                };\n                if (encryptedReadKey) entry.encryptedReadKey = encryptedReadKey;\n                _context6.next = 13;\n                return this._db.add(entry);\n\n              case 13:\n                _context6.next = 20;\n                break;\n\n              case 15:\n                _context6.prev = 15;\n                _context6.t0 = _context6[\"catch\"](8);\n\n                if (!_context6.t0.toString().includes('not append entry')) {\n                  _context6.next = 19;\n                  break;\n                }\n\n                throw new Error(\"grant: Capability \".concat(capability, \" can not be granted to \").concat(id));\n\n              case 19:\n                throw _context6.t0;\n\n              case 20:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[8, 15]]);\n      }));\n\n      function grant(_x4, _x5, _x6) {\n        return _grant.apply(this, arguments);\n      }\n\n      return grant;\n    }()\n  }, {\n    key: \"_onUpdate\",\n    value: function _onUpdate() {\n      this._updateCapabilites();\n\n      this.emit('updated');\n    }\n    /* Factory */\n\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return type;\n    }\n  }, {\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(orbitdb) {\n        var options,\n            _args7 = arguments;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                options = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n\n                if (options.firstModerator) {\n                  _context7.next = 3;\n                  break;\n                }\n\n                throw new Error('Thread AC: firstModerator required');\n\n              case 3:\n                if (options.address) options.threadName = options.address.split('/')[3];\n                return _context7.abrupt(\"return\", new ThreadAccessController(orbitdb, orbitdb._ipfs, options.identity, options.firstModerator, options));\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function create(_x7) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }]);\n\n  return ThreadAccessController;\n}(EventEmitter);\n\nmodule.exports = ThreadAccessController;","map":null,"metadata":{},"sourceType":"script"}