{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar Big = require('bignumber.js');\n\nvar parseDuration = require('parse-duration');\n\nvar errCode = require('err-code');\n\nvar _require = require('../../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nfunction getBandwidthStats(libp2p, opts) {\n  var stats;\n\n  if (opts.peer) {\n    stats = libp2p.metrics.forPeer(opts.peer);\n  } else if (opts.proto) {\n    stats = libp2p.metrics.forProtocol(opts.proto);\n  } else {\n    stats = libp2p.metrics.global;\n  }\n\n  if (!stats) {\n    return {\n      totalIn: new Big(0),\n      totalOut: new Big(0),\n      rateIn: new Big(0),\n      rateOut: new Big(0)\n    };\n  }\n\n  var _stats = stats,\n      movingAverages = _stats.movingAverages,\n      snapshot = _stats.snapshot;\n  return {\n    totalIn: snapshot.dataReceived,\n    totalOut: snapshot.dataSent,\n    rateIn: new Big(movingAverages.dataReceived[60000].movingAverage() / 60),\n    rateOut: new Big(movingAverages.dataSent[60000].movingAverage() / 60)\n  };\n}\n\nmodule.exports = function (_ref2) {\n  var libp2p = _ref2.libp2p;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {\n      var interval, timeoutId;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = options || {};\n\n              if (options.poll) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 4;\n              return getBandwidthStats(libp2p, options);\n\n            case 4:\n              return _context.abrupt(\"return\");\n\n            case 5:\n              interval = options.interval || 1000;\n              _context.prev = 6;\n              interval = typeof interval === 'string' ? parseDuration(interval) : interval;\n\n              if (!(!interval || interval < 0)) {\n                _context.next = 10;\n                break;\n              }\n\n              throw new Error('invalid poll interval');\n\n            case 10:\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](6);\n              throw errCode(_context.t0, 'ERR_INVALID_POLL_INTERVAL');\n\n            case 15:\n              _context.prev = 15;\n\n            case 16:\n              if (!true) {\n                _context.next = 23;\n                break;\n              }\n\n              _context.next = 19;\n              return getBandwidthStats(libp2p, options);\n\n            case 19:\n              _context.next = 21;\n              return _awaitAsyncGenerator(new Promise(function (resolve) {\n                timeoutId = setTimeout(resolve, interval);\n              }));\n\n            case 21:\n              _context.next = 16;\n              break;\n\n            case 23:\n              _context.prev = 23;\n              clearTimeout(timeoutId);\n              return _context.finish(23);\n\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[6, 12], [15,, 23, 26]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};","map":null,"metadata":{},"sourceType":"script"}