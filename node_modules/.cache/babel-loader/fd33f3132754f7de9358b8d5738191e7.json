{"ast":null,"code":"var _jsxFileName = \"/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/views/Profile/ProfileCreation/contexts/ProfileCreationProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useMemo, useReducer } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { getBunnyFactoryContract } from 'utils/contractHelpers';\nimport { MINT_COST, REGISTER_COST, ALLOWANCE_MULTIPLIER } from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst totalCost = MINT_COST + REGISTER_COST;\nconst allowance = totalCost * ALLOWANCE_MULTIPLIER;\nconst initialState = {\n  isInitialized: false,\n  currentStep: 0,\n  teamId: null,\n  tokenId: null,\n  userName: '',\n  minimumCakeRequired: new BigNumber(totalCost).multipliedBy(new BigNumber(10).pow(18)),\n  allowance: new BigNumber(allowance).multipliedBy(new BigNumber(10).pow(18))\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'initialize':\n      return { ...state,\n        isInitialized: true,\n        currentStep: action.step\n      };\n\n    case 'next_step':\n      return { ...state,\n        currentStep: state.currentStep + 1\n      };\n\n    case 'set_team':\n      return { ...state,\n        teamId: action.teamId\n      };\n\n    case 'set_tokenid':\n      return { ...state,\n        tokenId: action.tokenId\n      };\n\n    case 'set_username':\n      return { ...state,\n        userName: action.userName\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const ProfileCreationContext = /*#__PURE__*/createContext(null);\n\nconst ProfileCreationProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const {\n    account\n  } = useWallet(); // Initial checks\n\n  useEffect(() => {\n    let isSubscribed = true;\n\n    const fetchData = async () => {\n      const bunnyFactoryContract = getBunnyFactoryContract();\n      const canMint = await bunnyFactoryContract.methods.canMint(account).call();\n      dispatch({\n        type: 'initialize',\n        step: canMint ? 0 : 1\n      }); // When changing wallets quickly unmounting before the hasClaim finished causes a React error\n\n      if (isSubscribed) {\n        dispatch({\n          type: 'initialize',\n          step: canMint ? 0 : 1\n        });\n      }\n    };\n\n    if (account) {\n      fetchData();\n    }\n\n    return () => {\n      isSubscribed = false;\n    };\n  }, [account, dispatch]);\n  const actions = useMemo(() => ({\n    nextStep: () => dispatch({\n      type: 'next_step'\n    }),\n    setTeamId: teamId => dispatch({\n      type: 'set_team',\n      teamId\n    }),\n    setTokenId: tokenId => dispatch({\n      type: 'set_tokenid',\n      tokenId\n    }),\n    setUserName: userName => dispatch({\n      type: 'set_username',\n      userName\n    })\n  }), [dispatch]);\n  return /*#__PURE__*/_jsxDEV(ProfileCreationContext.Provider, {\n    value: { ...state,\n      actions\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 10\n  }, this);\n};\n\n_s(ProfileCreationProvider, \"iEEslrGikEKfCHQzfiTLjtOopqA=\", false, function () {\n  return [useWallet];\n});\n\n_c = ProfileCreationProvider;\nexport default ProfileCreationProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileCreationProvider\");","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/views/Profile/ProfileCreation/contexts/ProfileCreationProvider.tsx"],"names":["React","createContext","useEffect","useMemo","useReducer","BigNumber","useWallet","getBunnyFactoryContract","MINT_COST","REGISTER_COST","ALLOWANCE_MULTIPLIER","totalCost","allowance","initialState","isInitialized","currentStep","teamId","tokenId","userName","minimumCakeRequired","multipliedBy","pow","reducer","state","action","type","step","ProfileCreationContext","ProfileCreationProvider","children","dispatch","account","isSubscribed","fetchData","bunnyFactoryContract","canMint","methods","call","actions","nextStep","setTeamId","setTokenId","setUserName"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useMemo, useReducer } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { getBunnyFactoryContract } from 'utils/contractHelpers'\nimport { MINT_COST, REGISTER_COST, ALLOWANCE_MULTIPLIER } from '../config'\nimport { Actions, State, ContextType } from './types'\n\nconst totalCost = MINT_COST + REGISTER_COST\nconst allowance = totalCost * ALLOWANCE_MULTIPLIER\n\nconst initialState: State = {\n  isInitialized: false,\n  currentStep: 0,\n  teamId: null,\n  tokenId: null,\n  userName: '',\n  minimumCakeRequired: new BigNumber(totalCost).multipliedBy(new BigNumber(10).pow(18)),\n  allowance: new BigNumber(allowance).multipliedBy(new BigNumber(10).pow(18)),\n}\n\nconst reducer = (state: State, action: Actions): State => {\n  switch (action.type) {\n    case 'initialize':\n      return {\n        ...state,\n        isInitialized: true,\n        currentStep: action.step,\n      }\n    case 'next_step':\n      return {\n        ...state,\n        currentStep: state.currentStep + 1,\n      }\n    case 'set_team':\n      return {\n        ...state,\n        teamId: action.teamId,\n      }\n    case 'set_tokenid':\n      return {\n        ...state,\n        tokenId: action.tokenId,\n      }\n    case 'set_username':\n      return {\n        ...state,\n        userName: action.userName,\n      }\n    default:\n      return state\n  }\n}\n\nexport const ProfileCreationContext = createContext<ContextType>(null)\n\nconst ProfileCreationProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const { account } = useWallet()\n\n  // Initial checks\n  useEffect(() => {\n    let isSubscribed = true\n\n    const fetchData = async () => {\n      const bunnyFactoryContract = getBunnyFactoryContract()\n      const canMint = await bunnyFactoryContract.methods.canMint(account).call()\n      dispatch({ type: 'initialize', step: canMint ? 0 : 1 })\n\n      // When changing wallets quickly unmounting before the hasClaim finished causes a React error\n      if (isSubscribed) {\n        dispatch({ type: 'initialize', step: canMint ? 0 : 1 })\n      }\n    }\n\n    if (account) {\n      fetchData()\n    }\n\n    return () => {\n      isSubscribed = false\n    }\n  }, [account, dispatch])\n\n  const actions: ContextType['actions'] = useMemo(\n    () => ({\n      nextStep: () => dispatch({ type: 'next_step' }),\n      setTeamId: (teamId: number) => dispatch({ type: 'set_team', teamId }),\n      setTokenId: (tokenId: number) => dispatch({ type: 'set_tokenid', tokenId }),\n      setUserName: (userName: string) => dispatch({ type: 'set_username', userName }),\n    }),\n    [dispatch],\n  )\n\n  return <ProfileCreationContext.Provider value={{ ...state, actions }}>{children}</ProfileCreationContext.Provider>\n}\n\nexport default ProfileCreationProvider\n"]},"metadata":{},"sourceType":"module"}