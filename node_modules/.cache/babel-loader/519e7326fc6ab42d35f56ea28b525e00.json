{"ast":null,"code":"const Multiaddr = require('multiaddr');\n\nconst reduceValue = (_, v) => v;\n\nconst tcpUri = (str, port, parts, opts) => {\n  // return tcp when explicitly requested\n  if (opts && opts.assumeHttp === false) return `tcp://${str}:${port}`; // check if tcp is the last protocol in multiaddr\n\n  let protocol = 'tcp';\n  let explicitPort = `:${port}`;\n  const last = parts[parts.length - 1];\n\n  if (last.protocol === 'tcp') {\n    // assume http and produce clean urls\n    protocol = port === '443' ? 'https' : 'http';\n    explicitPort = port === '443' || port === '80' ? '' : explicitPort;\n  }\n\n  return `${protocol}://${str}${explicitPort}`;\n};\n\nconst Reducers = {\n  ip4: reduceValue,\n  ip6: (str, content, i, parts) => parts.length === 1 && parts[0].protocol === 'ip6' ? content : `[${content}]`,\n  tcp: (str, content, i, parts, opts) => parts.some(p => ['http', 'https', 'ws', 'wss'].includes(p.protocol)) ? `${str}:${content}` : tcpUri(str, content, parts, opts),\n  udp: (str, content) => `udp://${str}:${content}`,\n  dnsaddr: reduceValue,\n  dns4: reduceValue,\n  dns6: reduceValue,\n  ipfs: (str, content) => `${str}/ipfs/${content}`,\n  p2p: (str, content) => `${str}/p2p/${content}`,\n  http: str => `http://${str}`,\n  https: str => `https://${str}`,\n  ws: str => `ws://${str}`,\n  wss: str => `wss://${str}`,\n  'p2p-websocket-star': str => `${str}/p2p-websocket-star`,\n  'p2p-webrtc-star': str => `${str}/p2p-webrtc-star`,\n  'p2p-webrtc-direct': str => `${str}/p2p-webrtc-direct`\n};\n\nmodule.exports = (multiaddr, opts) => {\n  const ma = Multiaddr(multiaddr);\n  const parts = multiaddr.toString().split('/').slice(1);\n  return ma.tuples().map(tuple => ({\n    protocol: parts.shift(),\n    content: tuple[1] ? parts.shift() : null\n  })).reduce((str, part, i, parts) => {\n    const reduce = Reducers[part.protocol];\n    if (!reduce) throw new Error(`Unsupported protocol ${part.protocol}`);\n    return reduce(str, part.content, i, parts, opts);\n  }, '');\n};","map":null,"metadata":{},"sourceType":"script"}