{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar batch = require('it-batch');\n/**\n * @template T\n * @typedef {{ok:true, value:T}} Success\n */\n\n/**\n * @typedef {{ok:false, err:Error}} Failure\n */\n\n/**\n * Takes an (async) iterator that emits promise-returning functions,\n * invokes them in parallel and emits the results as they become available but\n * in the same order as the input\n *\n * @template T\n * @param {AsyncIterable<() => Promise<T>>} source\n * @param {number} [size=1]\n * @returns {AsyncIterable<T>}\n */\n\n\nfunction parallelBatch(_x) {\n  return _parallelBatch.apply(this, arguments);\n}\n\nfunction _parallelBatch() {\n  _parallelBatch = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source) {\n    var size,\n        _iteratorNormalCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        _value,\n        tasks,\n        things,\n        i,\n        result,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            size = _args.length > 1 && _args[1] !== undefined ? _args[1] : 1;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 3;\n            _iterator = _asyncIterator(batch(source, size));\n\n          case 5:\n            _context.next = 7;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 7:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 11;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 11:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 32;\n              break;\n            }\n\n            tasks = _value;\n\n            /** @type {Promise<Success<T>|Failure>[]} */\n            things = tasks.map(\n            /**\n             * @param {() => Promise<T>} p\n             */\n            function (p) {\n              return p().then(function (value) {\n                return {\n                  ok: true,\n                  value: value\n                };\n              }, function (err) {\n                return {\n                  ok: false,\n                  err: err\n                };\n              });\n            });\n            i = 0;\n\n          case 16:\n            if (!(i < things.length)) {\n              _context.next = 29;\n              break;\n            }\n\n            _context.next = 19;\n            return _awaitAsyncGenerator(things[i]);\n\n          case 19:\n            result = _context.sent;\n\n            if (!result.ok) {\n              _context.next = 25;\n              break;\n            }\n\n            _context.next = 23;\n            return result.value;\n\n          case 23:\n            _context.next = 26;\n            break;\n\n          case 25:\n            throw result.err;\n\n          case 26:\n            i++;\n            _context.next = 16;\n            break;\n\n          case 29:\n            _iteratorNormalCompletion = true;\n            _context.next = 5;\n            break;\n\n          case 32:\n            _context.next = 38;\n            break;\n\n          case 34:\n            _context.prev = 34;\n            _context.t0 = _context[\"catch\"](3);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 38:\n            _context.prev = 38;\n            _context.prev = 39;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 43;\n              break;\n            }\n\n            _context.next = 43;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 43:\n            _context.prev = 43;\n\n            if (!_didIteratorError) {\n              _context.next = 46;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 46:\n            return _context.finish(43);\n\n          case 47:\n            return _context.finish(38);\n\n          case 48:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 34, 38, 48], [39,, 43, 47]]);\n  }));\n  return _parallelBatch.apply(this, arguments);\n}\n\nmodule.exports = parallelBatch;","map":null,"metadata":{},"sourceType":"script"}