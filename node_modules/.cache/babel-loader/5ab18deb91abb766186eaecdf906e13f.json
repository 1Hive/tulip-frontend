{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst PeerInfo = require('peer-info');\n\nconst errcode = require('err-code');\n\nconst Message = require('../../message');\n\nconst utils = require('../../utils');\n\nmodule.exports = dht => {\n  const log = utils.logger(dht.peerInfo.id, 'rpc:get-providers');\n  /**\n   * Process `GetProviders` DHT messages.\n   *\n   * @param {PeerInfo} peer\n   * @param {Message} msg\n   * @returns {Promise<Message>}\n   */\n\n  return async function getProviders(peer, msg) {\n    let cid;\n\n    try {\n      cid = new CID(msg.key);\n    } catch (err) {\n      throw errcode(new Error(`Invalid CID: ${err.message}`), 'ERR_INVALID_CID');\n    }\n\n    log('%s', cid.toBaseEncodedString());\n    const dsKey = utils.bufferToKey(cid.buffer);\n    const [has, peers, closer] = await Promise.all([dht.datastore.has(dsKey), dht.providers.getProviders(cid), dht._betterPeersToQuery(msg, peer)]);\n    const providers = peers.map(p => {\n      if (dht.peerStore.has(p)) {\n        return dht.peerStore.get(p);\n      }\n\n      return dht.peerStore.put(new PeerInfo(p));\n    });\n\n    if (has) {\n      providers.push(dht.peerInfo);\n    }\n\n    const response = new Message(msg.type, msg.key, msg.clusterLevel);\n\n    if (providers.length > 0) {\n      response.providerPeers = providers;\n    }\n\n    if (closer.length > 0) {\n      response.closerPeers = closer;\n    }\n\n    log('got %s providers %s closerPeers', providers.length, closer.length);\n    return response;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}