{"ast":null,"code":"import frame from'./icons/Frame.png';import cipher from'./icons/Cipher.png';import metamask from'./icons/Metamask.png';import status from'./icons/Status.png';import wallet from\"./icons/wallet.svg\";import fortmatic from\"./icons/Fortmatic.svg\";import portis from\"./icons/Portis.svg\";// See the corresponding prop type, EthereumProviderType, in prop-types.js.\nvar PROVIDERS=new Map([{id:'frame',name:'Frame',type:'Desktop',image:frame,strings:{'your Ethereum wallet':'Frame'}},{id:'metamask',name:'Metamask',type:'Desktop',image:metamask,strings:{'your Ethereum wallet':'Metamask'}},{id:'status',name:'Status',type:'Mobile',image:status,strings:{'your Ethereum wallet':'Status'}},{id:'cipher',name:'Cipher',type:'Mobile',image:cipher,strings:{'your Ethereum wallet':'Cipher'}},{id:'fortmatic',name:'Fortmatic',type:'Any',image:fortmatic,strings:{'your Ethereum wallet':'Fortmatic'}},{id:'portis',name:'Portis',type:'Any',image:portis,strings:{'your Ethereum wallet':'Portis'}},{id:'unknown',name:'Unknown',type:'Desktop',image:wallet,strings:{'your Ethereum wallet':'your wallet'}}].map(function(provider){return[provider.id,provider];}));// Get a providers object for a given ID.\nfunction getProvider(providerId){return PROVIDERS.get(providerId);}// Get a string that depends on the current Ethereum provider.\n// The default string is used as an identifier (à la gettext).\nfunction getProviderString(string){var providerId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'unknown';var provider=getProvider(providerId);return provider&&provider.strings[string]||string;}// Get an identifier for the provider, if it can be detected.\nfunction identifyProvider(provider){if(provider&&provider.isMetaMask){return'metamask';}return'unknown';}// Get a provider from its useWallet() identifier.\nfunction getProviderFromUseWalletId(id){if(id==='injected'){return getProvider(identifyProvider(window.ethereum))||getProvider('unknown');}return getProvider(id)||getProvider('unknown');}export{getProvider,identifyProvider,getProviderString,getProviderFromUseWalletId};export default PROVIDERS;","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/ethereum-providers/index.js"],"names":["frame","cipher","metamask","status","PROVIDERS","Map","id","name","type","image","strings","fortmatic","portis","wallet","map","provider","getProvider","providerId","get","getProviderString","string","identifyProvider","isMetaMask","getProviderFromUseWalletId","window","ethereum"],"mappings":"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","sourcesContent":["import frame from './icons/Frame.png'\r\nimport cipher from './icons/Cipher.png'\r\nimport metamask from './icons/Metamask.png'\r\nimport status from './icons/Status.png'\r\nimport wallet from './icons/wallet.svg'\r\nimport fortmatic from './icons/Fortmatic.svg'\r\nimport portis from './icons/Portis.svg'\r\n\r\n// See the corresponding prop type, EthereumProviderType, in prop-types.js.\r\nconst PROVIDERS = new Map(\r\n  [\r\n    {\r\n      id: 'frame',\r\n      name: 'Frame',\r\n      type: 'Desktop',\r\n      image: frame,\r\n      strings: {\r\n        'your Ethereum wallet': 'Frame',\r\n      },\r\n    },\r\n    {\r\n      id: 'metamask',\r\n      name: 'Metamask',\r\n      type: 'Desktop',\r\n      image: metamask,\r\n      strings: {\r\n        'your Ethereum wallet': 'Metamask',\r\n      },\r\n    },\r\n    {\r\n      id: 'status',\r\n      name: 'Status',\r\n      type: 'Mobile',\r\n      image: status,\r\n      strings: {\r\n        'your Ethereum wallet': 'Status',\r\n      },\r\n    },\r\n    {\r\n      id: 'cipher',\r\n      name: 'Cipher',\r\n      type: 'Mobile',\r\n      image: cipher,\r\n      strings: {\r\n        'your Ethereum wallet': 'Cipher',\r\n      },\r\n    },\r\n    {\r\n      id: 'fortmatic',\r\n      name: 'Fortmatic',\r\n      type: 'Any',\r\n      image: fortmatic,\r\n      strings: {\r\n        'your Ethereum wallet': 'Fortmatic',\r\n      },\r\n    },\r\n    {\r\n      id: 'portis',\r\n      name: 'Portis',\r\n      type: 'Any',\r\n      image: portis,\r\n      strings: {\r\n        'your Ethereum wallet': 'Portis',\r\n      },\r\n    },\r\n    {\r\n      id: 'unknown',\r\n      name: 'Unknown',\r\n      type: 'Desktop',\r\n      image: wallet,\r\n      strings: {\r\n        'your Ethereum wallet': 'your wallet',\r\n      },\r\n    },\r\n  ].map(provider => [provider.id, provider])\r\n)\r\n\r\n// Get a providers object for a given ID.\r\nfunction getProvider(providerId) {\r\n  return PROVIDERS.get(providerId)\r\n}\r\n\r\n// Get a string that depends on the current Ethereum provider.\r\n// The default string is used as an identifier (à la gettext).\r\nfunction getProviderString(string, providerId = 'unknown') {\r\n  const provider = getProvider(providerId)\r\n  return (provider && provider.strings[string]) || string\r\n}\r\n\r\n// Get an identifier for the provider, if it can be detected.\r\nfunction identifyProvider(provider) {\r\n  if (provider && provider.isMetaMask) {\r\n    return 'metamask'\r\n  }\r\n  return 'unknown'\r\n}\r\n\r\n// Get a provider from its useWallet() identifier.\r\nfunction getProviderFromUseWalletId(id) {\r\n  if (id === 'injected') {\r\n    return (\r\n      getProvider(identifyProvider(window.ethereum)) || getProvider('unknown')\r\n    )\r\n  }\r\n  return getProvider(id) || getProvider('unknown')\r\n}\r\n\r\nexport {\r\n  getProvider,\r\n  identifyProvider,\r\n  getProviderString,\r\n  getProviderFromUseWalletId,\r\n}\r\nexport default PROVIDERS\r\n"]},"metadata":{},"sourceType":"module"}