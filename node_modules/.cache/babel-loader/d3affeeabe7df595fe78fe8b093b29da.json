{"ast":null,"code":"import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { captureException } from '@sentry/browser'; // hooks\n\nimport { useCourtConfig } from '../providers/CourtConfig';\nimport { useActivity } from '../providers/ActivityProvider';\nimport { useRequestQueue } from '../providers/RequestQueue';\nimport { useRequestProcessor } from './useRequestProcessor';\nimport { useContract } from '../web3-contracts'; // utils\n\nimport radspec from '../radspec';\nimport { retryMax } from '../utils/retry-max';\nimport actions from '../actions/court-action-types';\nimport { getModuleAddress } from '../utils/court-utils';\nimport { bigNum, formatUnits } from '../lib/math-utils';\nimport { encodeFunctionData, getFunctionSignature, sanitizeSignature } from '../lib/web3-utils';\nimport { CourtModuleType } from '../types/court-module-types';\nimport { getVoteId, hashPassword, hashVote, saveCodeInLocalStorage } from '../utils/crvoting-utils'; // abis\n\nimport agreementAbi from '../abi/Agreement.json';\nimport aragonCourtAbi from '../abi/AragonCourt.json';\nimport brightIdRegisterAbi from '../abi/BrightIdRegister.json';\nimport courtSubscriptionsAbi from '../abi/CourtSubscriptions.json';\nimport courtTreasuryAbi from '../abi/CourtTreasury.json';\nimport disputeManagerAbi from '../abi/DisputeManager.json';\nimport jurorRegistryAbi from '../abi/JurorRegistry.json';\nimport tokenAbi from '../abi/ERC20.json';\nimport votingAbi from '../abi/CRVoting.json';\nconst GAS_LIMIT = 1200000;\nconst HNY_ACTIVATE_GAS_LIMIT = 1000000;\nconst HNY_ACTIONS_GAS_LIMIT = 400000;\nconst ACTIVATE_SELECTOR = getFunctionSignature('activate(uint256)');\nexport function useAgreementContract(subject) {\n  return useContract(subject, agreementAbi);\n} // HNY contract\n\nfunction useHNYTokenContract() {\n  const {\n    anjToken\n  } = useCourtConfig();\n  const anjTokenAddress = anjToken ? anjToken.id : null;\n  return useContract(anjTokenAddress, tokenAbi);\n} // Fee token contract\n\n\nfunction useFeeTokenContract() {\n  const {\n    feeToken\n  } = useCourtConfig();\n  const feeTokenAddress = feeToken ? feeToken.id : null;\n  return useContract(feeTokenAddress, tokenAbi);\n} // Court contracts\n\n\nfunction useCourtContract(moduleType, abi) {\n  const {\n    id,\n    modules\n  } = useCourtConfig() || {};\n  let contractAddress;\n\n  if (moduleType === CourtModuleType.AragonCourt) {\n    contractAddress = id;\n  } else {\n    contractAddress = getModuleAddress(modules, moduleType);\n  }\n\n  return useContract(contractAddress, abi);\n}\n/**\n * All HNY interactions\n * @returns {Object} all available functions around HNY balances\n */\n\n\nexport function useHNYActions() {\n  const processRequests = useRequestProcessor();\n  const jurorRegistryContract = useCourtContract(CourtModuleType.JurorsRegistry, jurorRegistryAbi);\n  const brightIdRegisterContract = useCourtContract(CourtModuleType.BrightIdRegister, brightIdRegisterAbi);\n  const hnyTokenContract = useHNYTokenContract();\n  const brightIdRegisterAndCall = useCallback(async (jurorAddress, brightIdData, calldata) => {\n    const signature = sanitizeSignature(brightIdData.signature);\n    return brightIdRegisterContract.register(brightIdData.userAddresses, [brightIdData.timestamp], [signature.v], [signature.r], [signature.s], jurorRegistryContract.address, calldata);\n  }, [brightIdRegisterContract, jurorRegistryContract]);\n  const approve = useCallback(value => {\n    return {\n      action: () => hnyTokenContract.approve(jurorRegistryContract.address, value),\n      description: radspec[actions.APPROVE_ACTIVATION_AMOUNT]({\n        amount: formatUnits(value)\n      }),\n      type: actions.APPROVE_ACTIVATION_AMOUNT\n    };\n  }, [hnyTokenContract, jurorRegistryContract]); // activate HNY directly from available balance\n\n  const activateHNY = useCallback((jurorAddress, amount, brightIdData) => {\n    const formattedAmount = formatUnits(amount);\n    const activationData = encodeFunctionData(jurorRegistryContract, 'activate', [amount.toHexString()]);\n    return processRequests([{\n      action: () => brightIdData.hasUniqueUserId ? jurorRegistryContract.activate(amount, {\n        gasLimit: HNY_ACTIVATE_GAS_LIMIT\n      }) : brightIdRegisterAndCall(jurorAddress, brightIdData, activationData, {\n        gasLimit: HNY_ACTIVATE_GAS_LIMIT\n      }),\n      description: radspec[actions.ACTIVATE_HNY]({\n        amount: formattedAmount\n      }),\n      type: actions.ACTIVATE_HNY\n    }]);\n  }, [brightIdRegisterAndCall, jurorRegistryContract, processRequests]);\n  const deactivateHNY = useCallback(amount => {\n    const formattedAmount = formatUnits(amount);\n    return processRequests([{\n      action: () => jurorRegistryContract.deactivate(amount, {\n        gasLimit: HNY_ACTIONS_GAS_LIMIT\n      }),\n      description: radspec[actions.DEACTIVATE_HNY]({\n        amount: formattedAmount\n      }),\n      type: actions.DEACTIVATE_HNY\n    }]);\n  }, [jurorRegistryContract, processRequests]); // approve, stake and activate HNY\n\n  const stakeActivateHNY = useCallback((jurorAddress, amount, brightIdData, allowance) => {\n    const formattedAmount = formatUnits(amount);\n    const requestQueue = [];\n\n    if (brightIdData.hasUniqueUserId) {\n      requestQueue.push({\n        action: () => hnyTokenContract.approveAndCall(jurorRegistryContract.address, amount, ACTIVATE_SELECTOR, {\n          gasLimit: HNY_ACTIVATE_GAS_LIMIT\n        }),\n        description: radspec[actions.ACTIVATE_HNY]({\n          amount: formattedAmount\n        }),\n        type: actions.ACTIVATE_HNY\n      });\n    } else {\n      // Check if requires pre-transactions\n      if (allowance.lt(amount)) {\n        // Some ERC20s don't allow setting a new allowance if the current allowance is positive\n        if (!allowance.eq(0)) {\n          // Reset allowance\n          requestQueue.push({ ...approve(bigNum(0)),\n            ensureConfirmation: true\n          });\n        } // Approve activation amount\n\n\n        requestQueue.push({ ...approve(amount),\n          ensureConfirmation: true\n        });\n      }\n\n      const calldata = encodeFunctionData(jurorRegistryContract, 'stake', [amount, ACTIVATE_SELECTOR]);\n      requestQueue.push({\n        action: () => brightIdRegisterAndCall(jurorAddress, brightIdData, calldata, {\n          gasLimit: HNY_ACTIVATE_GAS_LIMIT\n        }),\n        description: radspec[actions.ACTIVATE_HNY]({\n          amount: formattedAmount\n        }),\n        type: actions.ACTIVATE_HNY\n      });\n    }\n\n    return processRequests(requestQueue);\n  }, [approve, brightIdRegisterAndCall, hnyTokenContract, jurorRegistryContract, processRequests]);\n  const withdrawHNY = useCallback(amount => {\n    const formattedAmount = formatUnits(amount);\n    return processRequests([{\n      action: () => jurorRegistryContract.unstake(amount, '0x', {\n        gasLimit: HNY_ACTIONS_GAS_LIMIT\n      }),\n      description: radspec[actions.WITHDRAW_HNY]({\n        amount: formattedAmount\n      }),\n      type: actions.WITHDRAW_HNY\n    }]);\n  }, [jurorRegistryContract, processRequests]);\n  return {\n    activateHNY,\n    deactivateHNY,\n    stakeActivateHNY,\n    withdrawHNY\n  };\n}\n/**\n * All dispute interactions\n * @returns {Object} all available functions around a dispute\n */\n\nexport function useDisputeActions() {\n  const processRequests = useRequestProcessor();\n  const disputeManagerContract = useCourtContract(CourtModuleType.DisputeManager, disputeManagerAbi);\n  const votingContract = useCourtContract(CourtModuleType.Voting, votingAbi);\n  const feeTokenContract = useFeeTokenContract(); // Draft jurors\n\n  const draft = useCallback(disputeId => {\n    return processRequests([{\n      action: () => disputeManagerContract.draft(disputeId, {\n        gasLimit: GAS_LIMIT\n      }),\n      description: radspec[actions.DRAFT_JURY]({\n        disputeId\n      }),\n      type: actions.DRAFT_JURY\n    }]);\n  }, [disputeManagerContract, processRequests]); // Commit\n\n  const commit = useCallback((account, disputeId, roundId, outcome, password) => {\n    const voteId = getVoteId(disputeId, roundId);\n    const commitment = hashVote(outcome, password);\n    const requestQueue = [{\n      action: () => votingContract.commit(voteId, commitment),\n      description: radspec[actions.COMMIT_VOTE]({\n        disputeId,\n        roundId,\n        outcome\n      }),\n      type: actions.COMMIT_VOTE,\n      ensureConfirmation: true,\n      // Callback function to run after main tx\n      callback: () => saveCodeInLocalStorage(account, disputeId, password)\n    }];\n    return processRequests(requestQueue);\n  }, [processRequests, votingContract]); // Reveal\n\n  const reveal = useCallback((disputeId, roundId, voter, outcome, password) => {\n    const voteId = getVoteId(disputeId, roundId);\n    return processRequests([{\n      action: () => votingContract.reveal(voteId, voter, outcome, hashPassword(password)),\n      description: radspec[actions.REVEAL_VOTE]({\n        disputeId,\n        roundId\n      }),\n      type: actions.REVEAL_VOTE\n    }]);\n  }, [processRequests, votingContract]); // Leak\n\n  const leak = useCallback((voteId, voter, outcome, salt) => {\n    return processRequests([{\n      action: () => votingContract.leak(voteId, voter, outcome, salt),\n      description: radspec[actions.LEAK_VOTE]({\n        voteId,\n        voter\n      }),\n      type: actions.LEAK_VOTE\n    }]);\n  }, [processRequests, votingContract]);\n  const approveFeeDeposit = useCallback(value => {\n    return {\n      action: () => feeTokenContract.approve(disputeManagerContract.address, value),\n      description: radspec[actions.APPROVE_FEE_DEPOSIT]({\n        amount: formatUnits(value)\n      }),\n      type: actions.APPROVE_FEE_DEPOSIT\n    };\n  }, [disputeManagerContract, feeTokenContract]); // Appeal round of dispute\n\n  const appeal = useCallback((disputeId, roundId, ruling) => {\n    return {\n      action: () => disputeManagerContract.createAppeal(disputeId, roundId, ruling, {\n        gasLimit: GAS_LIMIT\n      }),\n      description: radspec[actions.APPEAL_RULING]({\n        disputeId,\n        roundId,\n        ruling\n      }),\n      type: actions.APPEAL_RULING\n    };\n  }, [disputeManagerContract]); // Confirm appeal round of dispute\n\n  const confirmAppeal = useCallback((disputeId, roundId, ruling) => {\n    return {\n      action: () => disputeManagerContract.confirmAppeal(disputeId, roundId, ruling, {\n        gasLimit: GAS_LIMIT\n      }),\n      description: radspec[actions.CONFIRM_APPEAL]({\n        disputeId,\n        roundId,\n        ruling\n      }),\n      type: actions.CONFIRM_APPEAL\n    };\n  }, [disputeManagerContract]); // General function that will appeal or confirm appeal a given round on a given dispute\n\n  const appealRound = useCallback((disputeId, roundId, ruling, requiredDeposit, allowance, confirm) => {\n    const requestQueue = []; // Check if requires pre-transactions\n\n    if (allowance.lt(requiredDeposit)) {\n      // Some ERC20s don't allow setting a new allowance if the current allowance is positive\n      if (!allowance.eq(0)) {\n        // Reset allowance\n        requestQueue.push({ ...approveFeeDeposit(0),\n          ensureConfirmation: true\n        });\n      } // Approve fee deposit for appealing\n\n\n      requestQueue.push({ ...approveFeeDeposit(requiredDeposit),\n        ensureConfirmation: true\n      });\n    }\n\n    const request = confirm ? confirmAppeal : appeal;\n    requestQueue.push(request(disputeId, roundId, ruling));\n    return processRequests(requestQueue);\n  }, [appeal, approveFeeDeposit, confirmAppeal, processRequests]);\n  const resolveRuling = useCallback((arbitrableContract, disputeId) => {\n    return processRequests([{\n      action: () => arbitrableContract.resolve(disputeId, {\n        gasLimit: GAS_LIMIT\n      }),\n      description: radspec[actions.EXECUTE_RULING]({\n        disputeId\n      }),\n      type: actions.EXECUTE_RULING\n    }]);\n  }, [processRequests]);\n  return {\n    appealRound,\n    commit,\n    draft,\n    resolveRuling,\n    leak,\n    reveal\n  };\n}\nexport function useHeartbeat() {\n  const {\n    addActivity\n  } = useActivity();\n  const {\n    addRequests\n  } = useRequestQueue();\n  const aragonCourtContract = useCourtContract(CourtModuleType.AragonCourt, aragonCourtAbi);\n  const heartbeatRequest = useCallback((transitions, ensureConfirmation = false) => {\n    const description = radspec[actions.HEARTBEAT]({\n      transitions\n    });\n    return {\n      intent: () => addActivity(aragonCourtContract.heartbeat(transitions), actions.HEARTBEAT, description),\n      description,\n      isTx: true,\n      ensureConfirmation\n    };\n  }, [addActivity, aragonCourtContract]);\n  const heartbeat = useCallback(transitions => {\n    return addRequests(heartbeatRequest(transitions));\n  }, [addRequests, heartbeatRequest]);\n  return {\n    heartbeat,\n    heartbeatRequest\n  };\n}\nexport function useRewardActions() {\n  const processRequests = useRequestProcessor();\n  const {\n    claimFees\n  } = useCourtSubscriptionActions();\n  const disputeManagerContract = useCourtContract(CourtModuleType.DisputeManager, disputeManagerAbi);\n  const treasuryContract = useCourtContract(CourtModuleType.Treasury, courtTreasuryAbi);\n  const settleReward = useCallback((disputeId, roundId, juror) => {\n    return {\n      action: () => disputeManagerContract.settleReward(disputeId, roundId, juror, {\n        gasLimit: GAS_LIMIT\n      }),\n      description: radspec[actions.SETTLE_REWARD]({\n        roundId,\n        disputeId\n      }),\n      type: actions.SETTLE_REWARD\n    };\n  }, [disputeManagerContract]);\n  const settleAppealDeposit = useCallback((disputeId, roundId) => {\n    return {\n      action: () => disputeManagerContract.settleAppealDeposit(disputeId, roundId, {\n        gasLimit: GAS_LIMIT\n      }),\n      description: radspec[actions.SETTLE_APPEAL_DEPOSIT]({\n        roundId,\n        disputeId\n      }),\n      type: actions.SETTLE_APPEAL_DEPOSIT\n    };\n  }, [disputeManagerContract]);\n  const withdraw = useCallback((token, to, amount) => {\n    return {\n      action: () => treasuryContract.withdraw(token, to, amount, {\n        gasLimit: HNY_ACTIONS_GAS_LIMIT\n      }),\n      description: radspec[actions.CLAIM_REWARDS]({\n        amount: formatUnits(amount)\n      }),\n      type: actions.CLAIM_REWARDS\n    };\n  }, [treasuryContract]);\n  const claimRewards = useCallback((account, arbitrableFees, appealFees, treasuryFees, subscriptionFees, feeTokenAddress) => {\n    const requestQueue = []; // Claim all arbitrable fee rewards\n\n    for (const arbitrableFee of arbitrableFees) {\n      const {\n        disputeId,\n        rounds\n      } = arbitrableFee;\n\n      for (const roundId of rounds) {\n        requestQueue.push(settleReward(disputeId, roundId, account));\n      }\n    } // Claim all appeal fee rewards\n\n\n    for (const appealFee of appealFees) {\n      const {\n        disputeId,\n        rounds\n      } = appealFee;\n\n      for (const roundId of rounds) {\n        requestQueue.push(settleAppealDeposit(disputeId, roundId));\n      }\n    } // If we have settlements to do, then we'll make sure that the last\n    // settlement is confirmed before withdrawing total fees from the treasury\n\n\n    if (requestQueue.length > 0) {\n      const lastSettlement = requestQueue.pop();\n      requestQueue.push({ ...lastSettlement,\n        ensureConfirmation: true\n      });\n    } // Withdraw funds from treasury\n\n\n    if (treasuryFees.gt(0)) {\n      requestQueue.push(withdraw(feeTokenAddress, account, treasuryFees));\n    } // Claim subscription fees\n\n\n    for (const subscriptionFee of subscriptionFees) {\n      requestQueue.push(claimFees(subscriptionFee.periodId));\n    }\n\n    return processRequests(requestQueue);\n  }, [claimFees, processRequests, settleAppealDeposit, settleReward, withdraw]);\n  return {\n    claimRewards\n  };\n}\nexport function useCourtSubscriptionActions() {\n  const courtSubscriptionsContract = useCourtContract(CourtModuleType.Subscriptions, courtSubscriptionsAbi);\n  const claimFees = useCallback(periodId => {\n    return {\n      action: () => courtSubscriptionsContract.claimFees(periodId),\n      description: radspec[actions.CLAIM_SUBSCRIPTION_FEES]({\n        periodId\n      }),\n      type: actions.CLAIM_SUBSCRIPTION_FEES\n    };\n  }, [courtSubscriptionsContract]);\n  const getJurorShare = useCallback((juror, periodId) => {\n    return courtSubscriptionsContract.getJurorShare(juror, periodId);\n  }, [courtSubscriptionsContract]);\n  const getters = useMemo(() => courtSubscriptionsContract ? {\n    getJurorShare\n  } : null, [courtSubscriptionsContract, getJurorShare]);\n  return {\n    claimFees,\n    getters\n  };\n}\n/**\n *\n * @param {string} disputeId id of the dispute\n * @param {string} roundId id of the round\n * @returns {Object} appeal deposit and confirm appeal deposit amounts\n */\n\nexport function useAppealDeposits(disputeId, roundId) {\n  const [appealDeposits, setAppealDeposits] = useState({\n    amounts: [bigNum(0), bigNum(0)],\n    error: false\n  });\n  const disputeManagerContract = useCourtContract(CourtModuleType.DisputeManager, disputeManagerAbi);\n  useEffect(() => {\n    let cancelled = false;\n\n    const fetchNextRoundDetails = async () => {\n      if (!disputeManagerContract) {\n        return;\n      }\n\n      retryMax(() => disputeManagerContract.getNextRoundDetails(disputeId, roundId).then(nextRound => {\n        const appealDeposit = nextRound[6];\n        const confirmAppealDeposit = nextRound[7];\n\n        if (!cancelled) {\n          setAppealDeposits({\n            amounts: [appealDeposit, confirmAppealDeposit],\n            error: false\n          });\n        }\n      }).catch(err => {\n        captureException(err);\n\n        if (!cancelled) {\n          setAppealDeposits(appealDeposits => ({ ...appealDeposits,\n            error: true\n          }));\n        }\n      }));\n    };\n\n    fetchNextRoundDetails();\n    return () => {\n      cancelled = true;\n    };\n  }, [disputeId, disputeManagerContract, roundId]);\n  return [appealDeposits.amounts, appealDeposits.error];\n}\nexport function useFeeBalanceOf(account) {\n  const [feeBalance, setFeeBalance] = useState({\n    amount: bigNum(0),\n    error: false\n  });\n  const feeTokenContract = useFeeTokenContract();\n  useEffect(() => {\n    let cancelled = false;\n\n    const getFeeBalance = async () => {\n      if (!feeTokenContract) return;\n      retryMax(() => feeTokenContract.balanceOf(account)).then(balance => {\n        if (!cancelled) {\n          setFeeBalance({\n            amount: balance,\n            error: false\n          });\n        }\n      }).catch(err => {\n        captureException(err);\n\n        if (!cancelled) {\n          setFeeBalance(feeBalance => ({ ...feeBalance,\n            error: true\n          }));\n        }\n      });\n    };\n\n    getFeeBalance();\n    return () => {\n      cancelled = true;\n    };\n  }, [account, feeTokenContract]);\n  return [feeBalance.amount, feeBalance.error];\n}\nexport function useAppealFeeAllowance(owner) {\n  const courtConfig = useCourtConfig();\n  const disputeManagerAddress = getModuleAddress(courtConfig.modules, CourtModuleType.DisputeManager);\n  const feeTokenContract = useFeeTokenContract();\n  const allowance = useTokenAllowance(feeTokenContract, owner, disputeManagerAddress);\n  return [allowance.amount, allowance.error];\n}\nexport function useHNYTokenAllowance(owner) {\n  const courtConfig = useCourtConfig();\n  const jurorRegistryAddress = getModuleAddress(courtConfig.modules, CourtModuleType.JurorsRegistry);\n  const hnyTokenContract = useHNYTokenContract();\n  const allowance = useTokenAllowance(hnyTokenContract, owner, jurorRegistryAddress);\n  return [allowance.amount, allowance.error];\n}\n\nfunction useTokenAllowance(contract, owner, spender) {\n  const [allowance, setAllowance] = useState({\n    amount: bigNum(0),\n    error: false\n  });\n  useEffect(() => {\n    let cancelled = false;\n\n    const fetchAllowance = async () => {\n      if (!contract) return;\n      retryMax(() => contract.allowance(owner, spender)).then(allowance => {\n        if (!cancelled) {\n          setAllowance({\n            amount: allowance,\n            error: false\n          });\n        }\n      }).catch(err => {\n        captureException(err);\n\n        if (!cancelled) {\n          setAllowance(allowance => ({ ...allowance,\n            error: true\n          }));\n        }\n      });\n    };\n\n    fetchAllowance();\n    return () => {\n      cancelled = true;\n    };\n  }, [contract, owner, spender]);\n  return allowance;\n}\n\nexport function useActiveBalanceOfAt(juror, termId) {\n  const jurorRegistryContract = useCourtContract(CourtModuleType.JurorsRegistry, jurorRegistryAbi);\n  const [activeBalance, setActiveBalance] = useState({\n    amount: bigNum(-1),\n    error: false\n  });\n  useEffect(() => {\n    let cancelled = false;\n\n    const getActiveBalanceOfAt = async () => {\n      if (!jurorRegistryContract) return;\n      retryMax(() => jurorRegistryContract.activeBalanceOfAt(juror, termId)).then(balance => {\n        if (!cancelled) {\n          setActiveBalance({\n            amount: balance,\n            error: false\n          });\n        }\n      }).catch(err => {\n        captureException(err);\n\n        if (!cancelled) {\n          setActiveBalance(balance => ({ ...balance,\n            error: true\n          }));\n        }\n      });\n    };\n\n    getActiveBalanceOfAt();\n    return () => {\n      cancelled = true;\n    };\n  }, [juror, jurorRegistryContract, termId]);\n  return [activeBalance.amount, activeBalance.error];\n}\nexport function useHNYBalanceOfPolling(juror) {\n  const hnyTokenContract = useHNYTokenContract();\n  const [balance, setBalance] = useState(bigNum(-1));\n  const timer = 3000;\n  useEffect(() => {\n    let cancelled = false;\n    if (!hnyTokenContract) return; // Assumes jurorDraft exists\n\n    const pollActiveBalanceOf = async () => {\n      try {\n        const balance = await hnyTokenContract.balanceOf(juror);\n\n        if (!cancelled) {\n          setBalance(balance);\n        }\n      } catch (err) {\n        console.error(`Error fetching balance: ${err} retrying…`);\n      }\n\n      if (!cancelled) {\n        setTimeout(pollActiveBalanceOf, timer);\n      }\n    };\n\n    pollActiveBalanceOf();\n    return () => {\n      cancelled = true;\n    };\n  }, [hnyTokenContract, juror, timer]);\n  return balance;\n}\nexport function useMaxActiveBalance(termId) {\n  const [maxActiveBalance, setMaxActiveBalance] = useState(bigNum(0));\n  const jurorRegistryContract = useCourtContract(CourtModuleType.JurorsRegistry, jurorRegistryAbi);\n  useEffect(() => {\n    if (!jurorRegistryContract) {\n      return;\n    }\n\n    let cancelled = false;\n\n    const fetchMaxActiveBalance = async () => {\n      try {\n        const maxActiveBalance = await jurorRegistryContract.maxActiveBalance(termId);\n\n        if (!cancelled) {\n          setMaxActiveBalance(maxActiveBalance);\n        }\n      } catch (err) {\n        console.error(`Error ${err}`);\n      }\n    };\n\n    fetchMaxActiveBalance();\n    return () => {\n      cancelled = true;\n    };\n  }, [jurorRegistryContract, termId]);\n  return maxActiveBalance;\n}\nexport function useJurorUniqueUserId(juror) {\n  const [uniqueUserId, setUniqueUserID] = useState(null);\n  const brightIdRegisterContract = useCourtContract(CourtModuleType.BrightIdRegister, brightIdRegisterAbi);\n  useEffect(() => {\n    if (!brightIdRegisterContract) {\n      return;\n    }\n\n    let cancelled = false;\n\n    const fetchUniqueUserID = async () => {\n      try {\n        const uniqueUserId = await brightIdRegisterContract.uniqueUserId(juror);\n\n        if (!cancelled) {\n          setUniqueUserID(uniqueUserId);\n        }\n      } catch (err) {\n        console.error(`Error ${err}`);\n      }\n    };\n\n    fetchUniqueUserID();\n    return () => {\n      cancelled = true;\n    };\n  }, [brightIdRegisterContract, juror]);\n  return uniqueUserId;\n}","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/hooks/useCourtContracts.js"],"names":["useCallback","useEffect","useMemo","useState","captureException","useCourtConfig","useActivity","useRequestQueue","useRequestProcessor","useContract","radspec","retryMax","actions","getModuleAddress","bigNum","formatUnits","encodeFunctionData","getFunctionSignature","sanitizeSignature","CourtModuleType","getVoteId","hashPassword","hashVote","saveCodeInLocalStorage","agreementAbi","aragonCourtAbi","brightIdRegisterAbi","courtSubscriptionsAbi","courtTreasuryAbi","disputeManagerAbi","jurorRegistryAbi","tokenAbi","votingAbi","GAS_LIMIT","HNY_ACTIVATE_GAS_LIMIT","HNY_ACTIONS_GAS_LIMIT","ACTIVATE_SELECTOR","useAgreementContract","subject","useHNYTokenContract","anjToken","anjTokenAddress","id","useFeeTokenContract","feeToken","feeTokenAddress","useCourtContract","moduleType","abi","modules","contractAddress","AragonCourt","useHNYActions","processRequests","jurorRegistryContract","JurorsRegistry","brightIdRegisterContract","BrightIdRegister","hnyTokenContract","brightIdRegisterAndCall","jurorAddress","brightIdData","calldata","signature","register","userAddresses","timestamp","v","r","s","address","approve","value","action","description","APPROVE_ACTIVATION_AMOUNT","amount","type","activateHNY","formattedAmount","activationData","toHexString","hasUniqueUserId","activate","gasLimit","ACTIVATE_HNY","deactivateHNY","deactivate","DEACTIVATE_HNY","stakeActivateHNY","allowance","requestQueue","push","approveAndCall","lt","eq","ensureConfirmation","withdrawHNY","unstake","WITHDRAW_HNY","useDisputeActions","disputeManagerContract","DisputeManager","votingContract","Voting","feeTokenContract","draft","disputeId","DRAFT_JURY","commit","account","roundId","outcome","password","voteId","commitment","COMMIT_VOTE","callback","reveal","voter","REVEAL_VOTE","leak","salt","LEAK_VOTE","approveFeeDeposit","APPROVE_FEE_DEPOSIT","appeal","ruling","createAppeal","APPEAL_RULING","confirmAppeal","CONFIRM_APPEAL","appealRound","requiredDeposit","confirm","request","resolveRuling","arbitrableContract","resolve","EXECUTE_RULING","useHeartbeat","addActivity","addRequests","aragonCourtContract","heartbeatRequest","transitions","HEARTBEAT","intent","heartbeat","isTx","useRewardActions","claimFees","useCourtSubscriptionActions","treasuryContract","Treasury","settleReward","juror","SETTLE_REWARD","settleAppealDeposit","SETTLE_APPEAL_DEPOSIT","withdraw","token","to","CLAIM_REWARDS","claimRewards","arbitrableFees","appealFees","treasuryFees","subscriptionFees","arbitrableFee","rounds","appealFee","length","lastSettlement","pop","gt","subscriptionFee","periodId","courtSubscriptionsContract","Subscriptions","CLAIM_SUBSCRIPTION_FEES","getJurorShare","getters","useAppealDeposits","appealDeposits","setAppealDeposits","amounts","error","cancelled","fetchNextRoundDetails","getNextRoundDetails","then","nextRound","appealDeposit","confirmAppealDeposit","catch","err","useFeeBalanceOf","feeBalance","setFeeBalance","getFeeBalance","balanceOf","balance","useAppealFeeAllowance","owner","courtConfig","disputeManagerAddress","useTokenAllowance","useHNYTokenAllowance","jurorRegistryAddress","contract","spender","setAllowance","fetchAllowance","useActiveBalanceOfAt","termId","activeBalance","setActiveBalance","getActiveBalanceOfAt","activeBalanceOfAt","useHNYBalanceOfPolling","setBalance","timer","pollActiveBalanceOf","console","setTimeout","useMaxActiveBalance","maxActiveBalance","setMaxActiveBalance","fetchMaxActiveBalance","useJurorUniqueUserId","uniqueUserId","setUniqueUserID","fetchUniqueUserID"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { captureException } from '@sentry/browser'\n\n// hooks\nimport { useCourtConfig } from '../providers/CourtConfig'\nimport { useActivity } from '../providers/ActivityProvider'\nimport { useRequestQueue } from '../providers/RequestQueue'\nimport { useRequestProcessor } from './useRequestProcessor'\nimport { useContract } from '../web3-contracts'\n\n// utils\nimport radspec from '../radspec'\nimport { retryMax } from '../utils/retry-max'\nimport actions from '../actions/court-action-types'\nimport { getModuleAddress } from '../utils/court-utils'\nimport { bigNum, formatUnits } from '../lib/math-utils'\nimport {\n  encodeFunctionData,\n  getFunctionSignature,\n  sanitizeSignature,\n} from '../lib/web3-utils'\nimport { CourtModuleType } from '../types/court-module-types'\nimport {\n  getVoteId,\n  hashPassword,\n  hashVote,\n  saveCodeInLocalStorage,\n} from '../utils/crvoting-utils'\n\n// abis\nimport agreementAbi from '../abi/Agreement.json'\nimport aragonCourtAbi from '../abi/AragonCourt.json'\nimport brightIdRegisterAbi from '../abi/BrightIdRegister.json'\nimport courtSubscriptionsAbi from '../abi/CourtSubscriptions.json'\nimport courtTreasuryAbi from '../abi/CourtTreasury.json'\nimport disputeManagerAbi from '../abi/DisputeManager.json'\nimport jurorRegistryAbi from '../abi/JurorRegistry.json'\nimport tokenAbi from '../abi/ERC20.json'\nimport votingAbi from '../abi/CRVoting.json'\n\nconst GAS_LIMIT = 1200000\nconst HNY_ACTIVATE_GAS_LIMIT = 1000000\nconst HNY_ACTIONS_GAS_LIMIT = 400000\nconst ACTIVATE_SELECTOR = getFunctionSignature('activate(uint256)')\n\nexport function useAgreementContract(subject) {\n  return useContract(subject, agreementAbi)\n}\n\n// HNY contract\nfunction useHNYTokenContract() {\n  const { anjToken } = useCourtConfig()\n\n  const anjTokenAddress = anjToken ? anjToken.id : null\n\n  return useContract(anjTokenAddress, tokenAbi)\n}\n\n// Fee token contract\nfunction useFeeTokenContract() {\n  const { feeToken } = useCourtConfig()\n\n  const feeTokenAddress = feeToken ? feeToken.id : null\n\n  return useContract(feeTokenAddress, tokenAbi)\n}\n\n// Court contracts\nfunction useCourtContract(moduleType, abi) {\n  const { id, modules } = useCourtConfig() || {}\n\n  let contractAddress\n  if (moduleType === CourtModuleType.AragonCourt) {\n    contractAddress = id\n  } else {\n    contractAddress = getModuleAddress(modules, moduleType)\n  }\n\n  return useContract(contractAddress, abi)\n}\n\n/**\n * All HNY interactions\n * @returns {Object} all available functions around HNY balances\n */\nexport function useHNYActions() {\n  const processRequests = useRequestProcessor()\n  const jurorRegistryContract = useCourtContract(\n    CourtModuleType.JurorsRegistry,\n    jurorRegistryAbi\n  )\n\n  const brightIdRegisterContract = useCourtContract(\n    CourtModuleType.BrightIdRegister,\n    brightIdRegisterAbi\n  )\n\n  const hnyTokenContract = useHNYTokenContract()\n\n  const brightIdRegisterAndCall = useCallback(\n    async (jurorAddress, brightIdData, calldata) => {\n      const signature = sanitizeSignature(brightIdData.signature)\n      return brightIdRegisterContract.register(\n        brightIdData.userAddresses,\n        [brightIdData.timestamp],\n        [signature.v],\n        [signature.r],\n        [signature.s],\n        jurorRegistryContract.address,\n        calldata\n      )\n    },\n    [brightIdRegisterContract, jurorRegistryContract]\n  )\n\n  const approve = useCallback(\n    value => {\n      return {\n        action: () =>\n          hnyTokenContract.approve(jurorRegistryContract.address, value),\n        description: radspec[actions.APPROVE_ACTIVATION_AMOUNT]({\n          amount: formatUnits(value),\n        }),\n        type: actions.APPROVE_ACTIVATION_AMOUNT,\n      }\n    },\n    [hnyTokenContract, jurorRegistryContract]\n  )\n\n  // activate HNY directly from available balance\n  const activateHNY = useCallback(\n    (jurorAddress, amount, brightIdData) => {\n      const formattedAmount = formatUnits(amount)\n\n      const activationData = encodeFunctionData(\n        jurorRegistryContract,\n        'activate',\n        [amount.toHexString()]\n      )\n\n      return processRequests([\n        {\n          action: () =>\n            brightIdData.hasUniqueUserId\n              ? jurorRegistryContract.activate(amount, {\n                  gasLimit: HNY_ACTIVATE_GAS_LIMIT,\n                })\n              : brightIdRegisterAndCall(\n                  jurorAddress,\n                  brightIdData,\n                  activationData,\n                  {\n                    gasLimit: HNY_ACTIVATE_GAS_LIMIT,\n                  }\n                ),\n          description: radspec[actions.ACTIVATE_HNY]({\n            amount: formattedAmount,\n          }),\n          type: actions.ACTIVATE_HNY,\n        },\n      ])\n    },\n    [brightIdRegisterAndCall, jurorRegistryContract, processRequests]\n  )\n\n  const deactivateHNY = useCallback(\n    amount => {\n      const formattedAmount = formatUnits(amount)\n\n      return processRequests([\n        {\n          action: () =>\n            jurorRegistryContract.deactivate(amount, {\n              gasLimit: HNY_ACTIONS_GAS_LIMIT,\n            }),\n          description: radspec[actions.DEACTIVATE_HNY]({\n            amount: formattedAmount,\n          }),\n          type: actions.DEACTIVATE_HNY,\n        },\n      ])\n    },\n    [jurorRegistryContract, processRequests]\n  )\n\n  // approve, stake and activate HNY\n  const stakeActivateHNY = useCallback(\n    (jurorAddress, amount, brightIdData, allowance) => {\n      const formattedAmount = formatUnits(amount)\n\n      const requestQueue = []\n      if (brightIdData.hasUniqueUserId) {\n        requestQueue.push({\n          action: () =>\n            hnyTokenContract.approveAndCall(\n              jurorRegistryContract.address,\n              amount,\n              ACTIVATE_SELECTOR,\n              { gasLimit: HNY_ACTIVATE_GAS_LIMIT }\n            ),\n          description: radspec[actions.ACTIVATE_HNY]({\n            amount: formattedAmount,\n          }),\n          type: actions.ACTIVATE_HNY,\n        })\n      } else {\n        // Check if requires pre-transactions\n        if (allowance.lt(amount)) {\n          // Some ERC20s don't allow setting a new allowance if the current allowance is positive\n          if (!allowance.eq(0)) {\n            // Reset allowance\n            requestQueue.push({\n              ...approve(bigNum(0)),\n              ensureConfirmation: true,\n            })\n          }\n\n          // Approve activation amount\n          requestQueue.push({\n            ...approve(amount),\n            ensureConfirmation: true,\n          })\n        }\n\n        const calldata = encodeFunctionData(jurorRegistryContract, 'stake', [\n          amount,\n          ACTIVATE_SELECTOR,\n        ])\n\n        requestQueue.push({\n          action: () =>\n            brightIdRegisterAndCall(jurorAddress, brightIdData, calldata, {\n              gasLimit: HNY_ACTIVATE_GAS_LIMIT,\n            }),\n          description: radspec[actions.ACTIVATE_HNY]({\n            amount: formattedAmount,\n          }),\n          type: actions.ACTIVATE_HNY,\n        })\n      }\n\n      return processRequests(requestQueue)\n    },\n    [\n      approve,\n      brightIdRegisterAndCall,\n      hnyTokenContract,\n      jurorRegistryContract,\n      processRequests,\n    ]\n  )\n\n  const withdrawHNY = useCallback(\n    amount => {\n      const formattedAmount = formatUnits(amount)\n\n      return processRequests([\n        {\n          action: () =>\n            jurorRegistryContract.unstake(amount, '0x', {\n              gasLimit: HNY_ACTIONS_GAS_LIMIT,\n            }),\n          description: radspec[actions.WITHDRAW_HNY]({\n            amount: formattedAmount,\n          }),\n          type: actions.WITHDRAW_HNY,\n        },\n      ])\n    },\n    [jurorRegistryContract, processRequests]\n  )\n\n  return { activateHNY, deactivateHNY, stakeActivateHNY, withdrawHNY }\n}\n\n/**\n * All dispute interactions\n * @returns {Object} all available functions around a dispute\n */\nexport function useDisputeActions() {\n  const processRequests = useRequestProcessor()\n  const disputeManagerContract = useCourtContract(\n    CourtModuleType.DisputeManager,\n    disputeManagerAbi\n  )\n  const votingContract = useCourtContract(CourtModuleType.Voting, votingAbi)\n  const feeTokenContract = useFeeTokenContract()\n\n  // Draft jurors\n  const draft = useCallback(\n    disputeId => {\n      return processRequests([\n        {\n          action: () =>\n            disputeManagerContract.draft(disputeId, {\n              gasLimit: GAS_LIMIT,\n            }),\n          description: radspec[actions.DRAFT_JURY]({ disputeId }),\n          type: actions.DRAFT_JURY,\n        },\n      ])\n    },\n    [disputeManagerContract, processRequests]\n  )\n\n  // Commit\n  const commit = useCallback(\n    (account, disputeId, roundId, outcome, password) => {\n      const voteId = getVoteId(disputeId, roundId)\n      const commitment = hashVote(outcome, password)\n\n      const requestQueue = [\n        {\n          action: () => votingContract.commit(voteId, commitment),\n          description: radspec[actions.COMMIT_VOTE]({\n            disputeId,\n            roundId,\n            outcome,\n          }),\n          type: actions.COMMIT_VOTE,\n          ensureConfirmation: true,\n          // Callback function to run after main tx\n          callback: () => saveCodeInLocalStorage(account, disputeId, password),\n        },\n      ]\n\n      return processRequests(requestQueue)\n    },\n    [processRequests, votingContract]\n  )\n\n  // Reveal\n  const reveal = useCallback(\n    (disputeId, roundId, voter, outcome, password) => {\n      const voteId = getVoteId(disputeId, roundId)\n\n      return processRequests([\n        {\n          action: () =>\n            votingContract.reveal(\n              voteId,\n              voter,\n              outcome,\n              hashPassword(password)\n            ),\n          description: radspec[actions.REVEAL_VOTE]({\n            disputeId,\n            roundId,\n          }),\n          type: actions.REVEAL_VOTE,\n        },\n      ])\n    },\n    [processRequests, votingContract]\n  )\n\n  // Leak\n  const leak = useCallback(\n    (voteId, voter, outcome, salt) => {\n      return processRequests([\n        {\n          action: () => votingContract.leak(voteId, voter, outcome, salt),\n          description: radspec[actions.LEAK_VOTE]({ voteId, voter }),\n          type: actions.LEAK_VOTE,\n        },\n      ])\n    },\n    [processRequests, votingContract]\n  )\n\n  const approveFeeDeposit = useCallback(\n    value => {\n      return {\n        action: () =>\n          feeTokenContract.approve(disputeManagerContract.address, value),\n        description: radspec[actions.APPROVE_FEE_DEPOSIT]({\n          amount: formatUnits(value),\n        }),\n        type: actions.APPROVE_FEE_DEPOSIT,\n      }\n    },\n    [disputeManagerContract, feeTokenContract]\n  )\n\n  // Appeal round of dispute\n  const appeal = useCallback(\n    (disputeId, roundId, ruling) => {\n      return {\n        action: () =>\n          disputeManagerContract.createAppeal(disputeId, roundId, ruling, {\n            gasLimit: GAS_LIMIT,\n          }),\n        description: radspec[actions.APPEAL_RULING]({\n          disputeId,\n          roundId,\n          ruling,\n        }),\n        type: actions.APPEAL_RULING,\n      }\n    },\n    [disputeManagerContract]\n  )\n\n  // Confirm appeal round of dispute\n  const confirmAppeal = useCallback(\n    (disputeId, roundId, ruling) => {\n      return {\n        action: () =>\n          disputeManagerContract.confirmAppeal(disputeId, roundId, ruling, {\n            gasLimit: GAS_LIMIT,\n          }),\n        description: radspec[actions.CONFIRM_APPEAL]({\n          disputeId,\n          roundId,\n          ruling,\n        }),\n        type: actions.CONFIRM_APPEAL,\n      }\n    },\n    [disputeManagerContract]\n  )\n\n  // General function that will appeal or confirm appeal a given round on a given dispute\n  const appealRound = useCallback(\n    (disputeId, roundId, ruling, requiredDeposit, allowance, confirm) => {\n      const requestQueue = []\n\n      // Check if requires pre-transactions\n      if (allowance.lt(requiredDeposit)) {\n        // Some ERC20s don't allow setting a new allowance if the current allowance is positive\n        if (!allowance.eq(0)) {\n          // Reset allowance\n          requestQueue.push({\n            ...approveFeeDeposit(0),\n            ensureConfirmation: true,\n          })\n        }\n\n        // Approve fee deposit for appealing\n        requestQueue.push({\n          ...approveFeeDeposit(requiredDeposit),\n          ensureConfirmation: true,\n        })\n      }\n\n      const request = confirm ? confirmAppeal : appeal\n\n      requestQueue.push(request(disputeId, roundId, ruling))\n\n      return processRequests(requestQueue)\n    },\n    [appeal, approveFeeDeposit, confirmAppeal, processRequests]\n  )\n\n  const resolveRuling = useCallback(\n    (arbitrableContract, disputeId) => {\n      return processRequests([\n        {\n          action: () =>\n            arbitrableContract.resolve(disputeId, {\n              gasLimit: GAS_LIMIT,\n            }),\n          description: radspec[actions.EXECUTE_RULING]({ disputeId }),\n          type: actions.EXECUTE_RULING,\n        },\n      ])\n    },\n    [processRequests]\n  )\n\n  return {\n    appealRound,\n    commit,\n    draft,\n    resolveRuling,\n    leak,\n    reveal,\n  }\n}\n\nexport function useHeartbeat() {\n  const { addActivity } = useActivity()\n  const { addRequests } = useRequestQueue()\n  const aragonCourtContract = useCourtContract(\n    CourtModuleType.AragonCourt,\n    aragonCourtAbi\n  )\n\n  const heartbeatRequest = useCallback(\n    (transitions, ensureConfirmation = false) => {\n      const description = radspec[actions.HEARTBEAT]({ transitions })\n\n      return {\n        intent: () =>\n          addActivity(\n            aragonCourtContract.heartbeat(transitions),\n            actions.HEARTBEAT,\n            description\n          ),\n        description,\n        isTx: true,\n        ensureConfirmation,\n      }\n    },\n    [addActivity, aragonCourtContract]\n  )\n\n  const heartbeat = useCallback(\n    transitions => {\n      return addRequests(heartbeatRequest(transitions))\n    },\n    [addRequests, heartbeatRequest]\n  )\n\n  return { heartbeat, heartbeatRequest }\n}\n\nexport function useRewardActions() {\n  const processRequests = useRequestProcessor()\n  const { claimFees } = useCourtSubscriptionActions()\n  const disputeManagerContract = useCourtContract(\n    CourtModuleType.DisputeManager,\n    disputeManagerAbi\n  )\n\n  const treasuryContract = useCourtContract(\n    CourtModuleType.Treasury,\n    courtTreasuryAbi\n  )\n\n  const settleReward = useCallback(\n    (disputeId, roundId, juror) => {\n      return {\n        action: () =>\n          disputeManagerContract.settleReward(disputeId, roundId, juror, {\n            gasLimit: GAS_LIMIT,\n          }),\n        description: radspec[actions.SETTLE_REWARD]({ roundId, disputeId }),\n        type: actions.SETTLE_REWARD,\n      }\n    },\n    [disputeManagerContract]\n  )\n\n  const settleAppealDeposit = useCallback(\n    (disputeId, roundId) => {\n      return {\n        action: () =>\n          disputeManagerContract.settleAppealDeposit(disputeId, roundId, {\n            gasLimit: GAS_LIMIT,\n          }),\n        description: radspec[actions.SETTLE_APPEAL_DEPOSIT]({\n          roundId,\n          disputeId,\n        }),\n        type: actions.SETTLE_APPEAL_DEPOSIT,\n      }\n    },\n    [disputeManagerContract]\n  )\n\n  const withdraw = useCallback(\n    (token, to, amount) => {\n      return {\n        action: () =>\n          treasuryContract.withdraw(token, to, amount, {\n            gasLimit: HNY_ACTIONS_GAS_LIMIT,\n          }),\n        description: radspec[actions.CLAIM_REWARDS]({\n          amount: formatUnits(amount),\n        }),\n        type: actions.CLAIM_REWARDS,\n      }\n    },\n    [treasuryContract]\n  )\n\n  const claimRewards = useCallback(\n    (\n      account,\n      arbitrableFees,\n      appealFees,\n      treasuryFees,\n      subscriptionFees,\n      feeTokenAddress\n    ) => {\n      const requestQueue = []\n\n      // Claim all arbitrable fee rewards\n      for (const arbitrableFee of arbitrableFees) {\n        const { disputeId, rounds } = arbitrableFee\n        for (const roundId of rounds) {\n          requestQueue.push(settleReward(disputeId, roundId, account))\n        }\n      }\n\n      // Claim all appeal fee rewards\n      for (const appealFee of appealFees) {\n        const { disputeId, rounds } = appealFee\n        for (const roundId of rounds) {\n          requestQueue.push(settleAppealDeposit(disputeId, roundId))\n        }\n      }\n\n      // If we have settlements to do, then we'll make sure that the last\n      // settlement is confirmed before withdrawing total fees from the treasury\n      if (requestQueue.length > 0) {\n        const lastSettlement = requestQueue.pop()\n        requestQueue.push({\n          ...lastSettlement,\n          ensureConfirmation: true,\n        })\n      }\n\n      // Withdraw funds from treasury\n      if (treasuryFees.gt(0)) {\n        requestQueue.push(withdraw(feeTokenAddress, account, treasuryFees))\n      }\n\n      // Claim subscription fees\n      for (const subscriptionFee of subscriptionFees) {\n        requestQueue.push(claimFees(subscriptionFee.periodId))\n      }\n\n      return processRequests(requestQueue)\n    },\n    [claimFees, processRequests, settleAppealDeposit, settleReward, withdraw]\n  )\n\n  return { claimRewards }\n}\n\nexport function useCourtSubscriptionActions() {\n  const courtSubscriptionsContract = useCourtContract(\n    CourtModuleType.Subscriptions,\n    courtSubscriptionsAbi\n  )\n\n  const claimFees = useCallback(\n    periodId => {\n      return {\n        action: () => courtSubscriptionsContract.claimFees(periodId),\n        description: radspec[actions.CLAIM_SUBSCRIPTION_FEES]({\n          periodId,\n        }),\n        type: actions.CLAIM_SUBSCRIPTION_FEES,\n      }\n    },\n    [courtSubscriptionsContract]\n  )\n\n  const getJurorShare = useCallback(\n    (juror, periodId) => {\n      return courtSubscriptionsContract.getJurorShare(juror, periodId)\n    },\n    [courtSubscriptionsContract]\n  )\n\n  const getters = useMemo(\n    () => (courtSubscriptionsContract ? { getJurorShare } : null),\n    [courtSubscriptionsContract, getJurorShare]\n  )\n\n  return {\n    claimFees,\n    getters,\n  }\n}\n\n/**\n *\n * @param {string} disputeId id of the dispute\n * @param {string} roundId id of the round\n * @returns {Object} appeal deposit and confirm appeal deposit amounts\n */\nexport function useAppealDeposits(disputeId, roundId) {\n  const [appealDeposits, setAppealDeposits] = useState({\n    amounts: [bigNum(0), bigNum(0)],\n    error: false,\n  })\n\n  const disputeManagerContract = useCourtContract(\n    CourtModuleType.DisputeManager,\n    disputeManagerAbi\n  )\n\n  useEffect(() => {\n    let cancelled = false\n\n    const fetchNextRoundDetails = async () => {\n      if (!disputeManagerContract) {\n        return\n      }\n\n      retryMax(() =>\n        disputeManagerContract\n          .getNextRoundDetails(disputeId, roundId)\n          .then(nextRound => {\n            const appealDeposit = nextRound[6]\n            const confirmAppealDeposit = nextRound[7]\n\n            if (!cancelled) {\n              setAppealDeposits({\n                amounts: [appealDeposit, confirmAppealDeposit],\n                error: false,\n              })\n            }\n          })\n          .catch(err => {\n            captureException(err)\n            if (!cancelled) {\n              setAppealDeposits(appealDeposits => ({\n                ...appealDeposits,\n                error: true,\n              }))\n            }\n          })\n      )\n    }\n\n    fetchNextRoundDetails()\n\n    return () => {\n      cancelled = true\n    }\n  }, [disputeId, disputeManagerContract, roundId])\n\n  return [appealDeposits.amounts, appealDeposits.error]\n}\n\nexport function useFeeBalanceOf(account) {\n  const [feeBalance, setFeeBalance] = useState({\n    amount: bigNum(0),\n    error: false,\n  })\n\n  const feeTokenContract = useFeeTokenContract()\n\n  useEffect(() => {\n    let cancelled = false\n\n    const getFeeBalance = async () => {\n      if (!feeTokenContract) return\n\n      retryMax(() => feeTokenContract.balanceOf(account))\n        .then(balance => {\n          if (!cancelled) {\n            setFeeBalance({ amount: balance, error: false })\n          }\n        })\n        .catch(err => {\n          captureException(err)\n          if (!cancelled) {\n            setFeeBalance(feeBalance => ({\n              ...feeBalance,\n              error: true,\n            }))\n          }\n        })\n    }\n\n    getFeeBalance()\n\n    return () => {\n      cancelled = true\n    }\n  }, [account, feeTokenContract])\n\n  return [feeBalance.amount, feeBalance.error]\n}\n\nexport function useAppealFeeAllowance(owner) {\n  const courtConfig = useCourtConfig()\n  const disputeManagerAddress = getModuleAddress(\n    courtConfig.modules,\n    CourtModuleType.DisputeManager\n  )\n  const feeTokenContract = useFeeTokenContract()\n\n  const allowance = useTokenAllowance(\n    feeTokenContract,\n    owner,\n    disputeManagerAddress\n  )\n\n  return [allowance.amount, allowance.error]\n}\n\nexport function useHNYTokenAllowance(owner) {\n  const courtConfig = useCourtConfig()\n  const jurorRegistryAddress = getModuleAddress(\n    courtConfig.modules,\n    CourtModuleType.JurorsRegistry\n  )\n  const hnyTokenContract = useHNYTokenContract()\n\n  const allowance = useTokenAllowance(\n    hnyTokenContract,\n    owner,\n    jurorRegistryAddress\n  )\n\n  return [allowance.amount, allowance.error]\n}\n\nfunction useTokenAllowance(contract, owner, spender) {\n  const [allowance, setAllowance] = useState({\n    amount: bigNum(0),\n    error: false,\n  })\n\n  useEffect(() => {\n    let cancelled = false\n\n    const fetchAllowance = async () => {\n      if (!contract) return\n\n      retryMax(() => contract.allowance(owner, spender))\n        .then(allowance => {\n          if (!cancelled) {\n            setAllowance({ amount: allowance, error: false })\n          }\n        })\n        .catch(err => {\n          captureException(err)\n          if (!cancelled) {\n            setAllowance(allowance => ({\n              ...allowance,\n              error: true,\n            }))\n          }\n        })\n    }\n\n    fetchAllowance()\n\n    return () => {\n      cancelled = true\n    }\n  }, [contract, owner, spender])\n\n  return allowance\n}\n\nexport function useActiveBalanceOfAt(juror, termId) {\n  const jurorRegistryContract = useCourtContract(\n    CourtModuleType.JurorsRegistry,\n    jurorRegistryAbi\n  )\n  const [activeBalance, setActiveBalance] = useState({\n    amount: bigNum(-1),\n    error: false,\n  })\n\n  useEffect(() => {\n    let cancelled = false\n\n    const getActiveBalanceOfAt = async () => {\n      if (!jurorRegistryContract) return\n\n      retryMax(() => jurorRegistryContract.activeBalanceOfAt(juror, termId))\n        .then(balance => {\n          if (!cancelled) {\n            setActiveBalance({ amount: balance, error: false })\n          }\n        })\n        .catch(err => {\n          captureException(err)\n          if (!cancelled) {\n            setActiveBalance(balance => ({\n              ...balance,\n              error: true,\n            }))\n          }\n        })\n    }\n\n    getActiveBalanceOfAt()\n\n    return () => {\n      cancelled = true\n    }\n  }, [juror, jurorRegistryContract, termId])\n\n  return [activeBalance.amount, activeBalance.error]\n}\n\nexport function useHNYBalanceOfPolling(juror) {\n  const hnyTokenContract = useHNYTokenContract()\n  const [balance, setBalance] = useState(bigNum(-1))\n\n  const timer = 3000\n\n  useEffect(() => {\n    let cancelled = false\n\n    if (!hnyTokenContract) return\n\n    // Assumes jurorDraft exists\n    const pollActiveBalanceOf = async () => {\n      try {\n        const balance = await hnyTokenContract.balanceOf(juror)\n\n        if (!cancelled) {\n          setBalance(balance)\n        }\n      } catch (err) {\n        console.error(`Error fetching balance: ${err} retrying…`)\n      }\n\n      if (!cancelled) {\n        setTimeout(pollActiveBalanceOf, timer)\n      }\n    }\n\n    pollActiveBalanceOf()\n\n    return () => {\n      cancelled = true\n    }\n  }, [hnyTokenContract, juror, timer])\n\n  return balance\n}\n\nexport function useMaxActiveBalance(termId) {\n  const [maxActiveBalance, setMaxActiveBalance] = useState(bigNum(0))\n  const jurorRegistryContract = useCourtContract(\n    CourtModuleType.JurorsRegistry,\n    jurorRegistryAbi\n  )\n\n  useEffect(() => {\n    if (!jurorRegistryContract) {\n      return\n    }\n\n    let cancelled = false\n\n    const fetchMaxActiveBalance = async () => {\n      try {\n        const maxActiveBalance = await jurorRegistryContract.maxActiveBalance(\n          termId\n        )\n\n        if (!cancelled) {\n          setMaxActiveBalance(maxActiveBalance)\n        }\n      } catch (err) {\n        console.error(`Error ${err}`)\n      }\n    }\n\n    fetchMaxActiveBalance()\n\n    return () => {\n      cancelled = true\n    }\n  }, [jurorRegistryContract, termId])\n\n  return maxActiveBalance\n}\nexport function useJurorUniqueUserId(juror) {\n  const [uniqueUserId, setUniqueUserID] = useState(null)\n  const brightIdRegisterContract = useCourtContract(\n    CourtModuleType.BrightIdRegister,\n    brightIdRegisterAbi\n  )\n\n  useEffect(() => {\n    if (!brightIdRegisterContract) {\n      return\n    }\n\n    let cancelled = false\n\n    const fetchUniqueUserID = async () => {\n      try {\n        const uniqueUserId = await brightIdRegisterContract.uniqueUserId(juror)\n\n        if (!cancelled) {\n          setUniqueUserID(uniqueUserId)\n        }\n      } catch (err) {\n        console.error(`Error ${err}`)\n      }\n    }\n\n    fetchUniqueUserID()\n\n    return () => {\n      cancelled = true\n    }\n  }, [brightIdRegisterContract, juror])\n\n  return uniqueUserId\n}\n"]},"metadata":{},"sourceType":"module"}