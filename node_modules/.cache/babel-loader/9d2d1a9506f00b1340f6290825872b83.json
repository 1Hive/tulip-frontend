{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar IdentityProvider = require('./identity-provider-interface');\n\nvar Keystore = require('orbit-db-keystore');\n\nvar type = 'orbitdb';\n\nvar OrbitDBIdentityProvider = /*#__PURE__*/function (_IdentityProvider) {\n  _inherits(OrbitDBIdentityProvider, _IdentityProvider);\n\n  var _super = _createSuper(OrbitDBIdentityProvider);\n\n  function OrbitDBIdentityProvider(keystore) {\n    var _this;\n\n    _classCallCheck(this, OrbitDBIdentityProvider);\n\n    _this = _super.call(this);\n\n    if (!keystore) {\n      throw new Error('OrbitDBIdentityProvider requires a keystore');\n    }\n\n    _this._keystore = keystore;\n    return _this;\n  } // Returns the type of the identity provider\n\n\n  _createClass(OrbitDBIdentityProvider, [{\n    key: \"getId\",\n    value: function () {\n      var _getId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var options,\n            id,\n            keystore,\n            key,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n                id = options.id;\n\n                if (id) {\n                  _context.next = 4;\n                  break;\n                }\n\n                throw new Error('id is required');\n\n              case 4:\n                keystore = this._keystore;\n                _context.next = 7;\n                return keystore.getKey(id);\n\n              case 7:\n                _context.t0 = _context.sent;\n\n                if (_context.t0) {\n                  _context.next = 12;\n                  break;\n                }\n\n                _context.next = 11;\n                return keystore.createKey(id);\n\n              case 11:\n                _context.t0 = _context.sent;\n\n              case 12:\n                key = _context.t0;\n                return _context.abrupt(\"return\", key.public.marshal().toString('hex'));\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getId() {\n        return _getId.apply(this, arguments);\n      }\n\n      return getId;\n    }()\n  }, {\n    key: \"signIdentity\",\n    value: function () {\n      var _signIdentity = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data) {\n        var options,\n            id,\n            keystore,\n            key,\n            _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n                id = options.id;\n\n                if (id) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                throw new Error('id is required');\n\n              case 4:\n                keystore = this._keystore;\n                _context2.next = 7;\n                return keystore.getKey(id);\n\n              case 7:\n                key = _context2.sent;\n\n                if (key) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                throw new Error(\"Signing key for '\".concat(id, \"' not found\"));\n\n              case 10:\n                return _context2.abrupt(\"return\", keystore.sign(key, data));\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function signIdentity(_x) {\n        return _signIdentity.apply(this, arguments);\n      }\n\n      return signIdentity;\n    }()\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return type;\n    }\n  }, {\n    key: \"verifyIdentity\",\n    value: function () {\n      var _verifyIdentity = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(identity) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", Keystore.verify(identity.signatures.publicKey, identity.id, identity.publicKey + identity.signatures.id));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function verifyIdentity(_x2) {\n        return _verifyIdentity.apply(this, arguments);\n      }\n\n      return verifyIdentity;\n    }()\n  }]);\n\n  return OrbitDBIdentityProvider;\n}(IdentityProvider);\n\nmodule.exports = OrbitDBIdentityProvider;","map":null,"metadata":{},"sourceType":"script"}