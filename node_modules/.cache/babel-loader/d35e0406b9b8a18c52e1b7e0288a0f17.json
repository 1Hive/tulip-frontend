{"ast":null,"code":"'use strict';\n\nconst levelup = require('levelup');\n\nconst level = require('level');\n\nconst fs = typeof window === 'object' || typeof self === 'object' ? null : eval('require(\"fs\")'); // eslint-disable-line\n// Should work for all abstract-leveldown compliant stores\n\n/*\n * createIfMissing (boolean, default: true): If true, will initialise an empty database at the specified location if one doesn't already exist. If false and a database doesn't exist you will receive an error in your open() callback and your database won't open.\n *\n * errorIfExists (boolean, default: false): If true, you will receive an error in your open() callback if the database exists at the specified location.\n *\n * compression (boolean, default: true): If true, all compressible data will be run through the Snappy compression algorithm before being stored. Snappy is very fast and shouldn't gain much speed by disabling so leave this on unless you have good reason to turn it off.\n *\n * cacheSize (number, default: 8 * 1024 * 1024 = 8MB): The size (in bytes) of the in-memory LRU cache with frequently used uncompressed block contents.\n */\n\nclass Storage {\n  constructor(storage, options = {}) {\n    const defaults = {\n      createIfMissing: true,\n      errorIfExists: false,\n      compression: true,\n      cacheSize: 8 * 1024 * 1024\n    };\n    this.storage = storage;\n    this.preCreate = options.preCreate ? options.preCreate : () => {};\n    const leveldownOptions = Object.assign({}, options, defaults);\n    delete leveldownOptions.preCreate;\n    this.options = {\n      down: leveldownOptions\n    };\n  }\n\n  createStore(directory = './orbitdb', options = {}) {\n    return new Promise(async (resolve, reject) => {\n      this.options.up = options;\n      await this.preCreate(directory, this.options);\n      let store, db;\n\n      if (this.storage) {\n        db = this.storage(directory, this.options.down); // For compatibility with older abstract-leveldown stores\n\n        if (!db.status) db.status = 'unknown-shim';\n        if (!db.location) db.location = directory;\n        store = levelup(db, options);\n        store.open(err => {\n          if (err) {\n            return reject(err);\n          } // More backwards compatibility\n\n\n          if (db && db.status === 'unknown-shim') db.status = 'open';\n          resolve(store);\n        });\n      } else {\n        // Default leveldown or level-js store with directory creation\n        if (fs && fs.mkdirSync) fs.mkdirSync(directory, {\n          recursive: true\n        });\n        const db = level(directory, options);\n        await db.open();\n        resolve(db);\n      }\n    });\n  }\n\n  destroy(store) {\n    return new Promise((resolve, reject) => {\n      // TODO: Clean this up\n      if (!this.storage.destroy) resolve();\n      this.storage.destroy(store._db.location, err => {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve();\n      });\n    });\n  }\n\n  async preCreate(directory, options) {} // to be overridden\n\n\n}\n\nmodule.exports = (storage, options) => new Storage(storage, options);","map":null,"metadata":{},"sourceType":"script"}