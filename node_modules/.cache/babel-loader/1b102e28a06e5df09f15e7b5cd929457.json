{"ast":null,"code":"import React from 'react';\nimport { P as PropTypes } from './index-097535f1.js';\nimport { _ as _defineProperty } from './defineProperty-a0480c32.js';\nimport { _ as _inherits, a as _createClass, b as _classCallCheck, e as _assertThisInitialized, c as _getPrototypeOf, d as _possibleConstructorReturn } from './getPrototypeOf-97db713a.js';\nimport { g as getDisplayName } from './getDisplayName-d5fc7707.js';\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n} // For a discussion on pitfalls, see\n// https://gist.github.com/staltz/08bf613199092eeb41ac8137d51eb5e6\n\n\nvar Redraw = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(Redraw, _React$PureComponent);\n\n  var _super = _createSuper(Redraw);\n\n  function Redraw() {\n    var _this;\n\n    _classCallCheck(this, Redraw);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      lastDraw: -1\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"draw\", function () {\n      _this.raf = requestAnimationFrame(_this.draw);\n      var interval = _this.props.interval;\n      var lastDraw = _this.state.lastDraw;\n      var now = Date.now();\n      var delta = now - lastDraw;\n\n      if (lastDraw === -1 || delta > interval) {\n        _this.setState({\n          lastDraw: Math.round(now / interval) * interval\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Redraw, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.raf = null;\n      this.draw();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.raf && cancelAnimationFrame(this.raf);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.children();\n    }\n  }]);\n\n  return Redraw;\n}(React.PureComponent);\n\n_defineProperty(Redraw, \"propTypes\", {\n  interval: PropTypes.number,\n  children: PropTypes.func.isRequired\n});\n\n_defineProperty(Redraw, \"defaultProps\", {\n  interval: 1000\n});\n\nvar hocWrap = function hocWrap(Component, interval) {\n  var HOC = function HOC(props) {\n    return /*#__PURE__*/React.createElement(Redraw, {\n      interval: interval\n    }, function () {\n      return /*#__PURE__*/React.createElement(Component, props);\n    });\n  };\n\n  HOC.displayName = \"Redraw(\".concat(getDisplayName(Component), \")\");\n  return HOC;\n};\n\nRedraw.hocWrap = hocWrap;\nexport { Redraw as R };","map":null,"metadata":{},"sourceType":"module"}