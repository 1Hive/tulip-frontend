{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst varint = require('varint');\n\nconst BufferList = require('bl/BufferList');\n\nconst POOL_SIZE = 10 * 1024;\n\nclass Encoder {\n  constructor() {\n    this._pool = Buffer.allocUnsafe(POOL_SIZE);\n    this._poolOffset = 0;\n  }\n  /**\n   * Encodes the given message and returns it and its header\n   * @param {*} msg The message object to encode\n   * @returns {Buffer|Buffer[]}\n   */\n\n\n  write(msg) {\n    const pool = this._pool;\n    let offset = this._poolOffset;\n    varint.encode(msg.id << 3 | msg.type, pool, offset);\n    offset += varint.encode.bytes;\n    varint.encode(msg.data ? msg.data.length : 0, pool, offset);\n    offset += varint.encode.bytes;\n    const header = pool.slice(this._poolOffset, offset);\n\n    if (POOL_SIZE - offset < 100) {\n      this._pool = Buffer.allocUnsafe(POOL_SIZE);\n      this._poolOffset = 0;\n    } else {\n      this._poolOffset = offset;\n    }\n\n    if (!msg.data) return header;\n    return [header, msg.data];\n  }\n\n}\n\nconst encoder = new Encoder(); // Encode one or more messages and yield a BufferList of encoded messages\n\nmodule.exports = source => async function* encode() {\n  for await (const msg of source) {\n    if (Array.isArray(msg)) {\n      yield new BufferList(msg.map(m => encoder.write(m)));\n    } else {\n      yield new BufferList(encoder.write(msg));\n    }\n  }\n}();","map":null,"metadata":{},"sourceType":"script"}