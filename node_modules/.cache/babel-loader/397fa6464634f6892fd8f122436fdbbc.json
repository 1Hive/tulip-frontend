{"ast":null,"code":"import env from './environment';\nimport { graphEndpoint, IPFS_ENDPOINT } from './endpoints';\nconst DEFAULT_ETH_NODE = 'DEFAULT_ETH_NODE';\nconst IPFS_GATEWAY = 'IPFS_GATEWAY';\nconst PACKAGE_VERSION = 'PACKAGE_VERSION';\nconst SUBGRAPH_HTTP_ENDPOINT = 'SUBGRAPH_HTTP_ENDPOINT';\nconst DEFAULT_SUBGRAPH_HTTP_ENDPOINT = graphEndpoint(); // Get a setting from localStorage\n\nfunction getLocalStorageSetting(confKey) {\n  const storageKey = `${confKey}_KEY`;\n  return window.localStorage.getItem(storageKey);\n} // Get a local setting: from the local storage if available, or the env vars.\n\n\nfunction getLocalSetting(confKey) {\n  return getLocalStorageSetting(confKey) || env(confKey);\n}\n\nfunction setLocalSetting(confKey, value) {\n  const storageKey = `${confKey}_KEY`;\n  return window.localStorage.setItem(storageKey, value);\n}\n\nexport function clearLocalStorageNetworkSettings() {\n  window.localStorage.removeItem('DEFAULT_ETH_NODE_KEY');\n  window.localStorage.removeItem('IPFS_GATEWAY_KEY');\n  window.localStorage.removeItem('SUBGRAPH_HTTP_ENDPOINT_KEY');\n}\nexport function getDefaultEthNode() {\n  // Let the network configuration handle node defaults\n  return getLocalSetting(DEFAULT_ETH_NODE) || '';\n}\nexport function setDefaultEthNode(node) {\n  return setLocalSetting(DEFAULT_ETH_NODE, node);\n}\nexport function getIpfsGateway() {\n  return getLocalSetting(IPFS_GATEWAY) || IPFS_ENDPOINT;\n}\nexport function setIpfsGateway(gateway) {\n  return setLocalSetting(IPFS_GATEWAY, gateway);\n} // The previous package version is stored in localStorage,\n// while the current one is coming from the environment.\n\nexport function getPackageVersion() {\n  return env(PACKAGE_VERSION) || '';\n}\nexport function getLastPackageVersion() {\n  return getLocalStorageSetting(PACKAGE_VERSION) || '';\n}\nexport function setPackageVersion(version) {\n  return setLocalSetting(PACKAGE_VERSION, version);\n}\nexport function getSubgraphHttpEndpoint() {\n  return getLocalSetting(SUBGRAPH_HTTP_ENDPOINT) || DEFAULT_SUBGRAPH_HTTP_ENDPOINT;\n}\nexport function setSubgraphHttpEndpoint(endpoint) {\n  return setLocalSetting(SUBGRAPH_HTTP_ENDPOINT, endpoint);\n}","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/local-settings.js"],"names":["env","graphEndpoint","IPFS_ENDPOINT","DEFAULT_ETH_NODE","IPFS_GATEWAY","PACKAGE_VERSION","SUBGRAPH_HTTP_ENDPOINT","DEFAULT_SUBGRAPH_HTTP_ENDPOINT","getLocalStorageSetting","confKey","storageKey","window","localStorage","getItem","getLocalSetting","setLocalSetting","value","setItem","clearLocalStorageNetworkSettings","removeItem","getDefaultEthNode","setDefaultEthNode","node","getIpfsGateway","setIpfsGateway","gateway","getPackageVersion","getLastPackageVersion","setPackageVersion","version","getSubgraphHttpEndpoint","setSubgraphHttpEndpoint","endpoint"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,eAAhB;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,aAA7C;AAEA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,YAAY,GAAG,cAArB;AACA,MAAMC,eAAe,GAAG,iBAAxB;AACA,MAAMC,sBAAsB,GAAG,wBAA/B;AACA,MAAMC,8BAA8B,GAAGN,aAAa,EAApD,C,CAEA;;AACA,SAASO,sBAAT,CAAgCC,OAAhC,EAAyC;AACvC,QAAMC,UAAU,GAAI,GAAED,OAAQ,MAA9B;AACA,SAAOE,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BH,UAA5B,CAAP;AACD,C,CAED;;;AACA,SAASI,eAAT,CAAyBL,OAAzB,EAAkC;AAChC,SAAOD,sBAAsB,CAACC,OAAD,CAAtB,IAAmCT,GAAG,CAACS,OAAD,CAA7C;AACD;;AAED,SAASM,eAAT,CAAyBN,OAAzB,EAAkCO,KAAlC,EAAyC;AACvC,QAAMN,UAAU,GAAI,GAAED,OAAQ,MAA9B;AACA,SAAOE,MAAM,CAACC,YAAP,CAAoBK,OAApB,CAA4BP,UAA5B,EAAwCM,KAAxC,CAAP;AACD;;AAED,OAAO,SAASE,gCAAT,GAA4C;AACjDP,EAAAA,MAAM,CAACC,YAAP,CAAoBO,UAApB,CAA+B,sBAA/B;AACAR,EAAAA,MAAM,CAACC,YAAP,CAAoBO,UAApB,CAA+B,kBAA/B;AACAR,EAAAA,MAAM,CAACC,YAAP,CAAoBO,UAApB,CAA+B,4BAA/B;AACD;AAED,OAAO,SAASC,iBAAT,GAA6B;AAClC;AACA,SAAON,eAAe,CAACX,gBAAD,CAAf,IAAqC,EAA5C;AACD;AAED,OAAO,SAASkB,iBAAT,CAA2BC,IAA3B,EAAiC;AACtC,SAAOP,eAAe,CAACZ,gBAAD,EAAmBmB,IAAnB,CAAtB;AACD;AAED,OAAO,SAASC,cAAT,GAA0B;AAC/B,SAAOT,eAAe,CAACV,YAAD,CAAf,IAAiCF,aAAxC;AACD;AAED,OAAO,SAASsB,cAAT,CAAwBC,OAAxB,EAAiC;AACtC,SAAOV,eAAe,CAACX,YAAD,EAAeqB,OAAf,CAAtB;AACD,C,CAED;AACA;;AACA,OAAO,SAASC,iBAAT,GAA6B;AAClC,SAAO1B,GAAG,CAACK,eAAD,CAAH,IAAwB,EAA/B;AACD;AAED,OAAO,SAASsB,qBAAT,GAAiC;AACtC,SAAOnB,sBAAsB,CAACH,eAAD,CAAtB,IAA2C,EAAlD;AACD;AAED,OAAO,SAASuB,iBAAT,CAA2BC,OAA3B,EAAoC;AACzC,SAAOd,eAAe,CAACV,eAAD,EAAkBwB,OAAlB,CAAtB;AACD;AAED,OAAO,SAASC,uBAAT,GAAmC;AACxC,SACEhB,eAAe,CAACR,sBAAD,CAAf,IAA2CC,8BAD7C;AAGD;AAED,OAAO,SAASwB,uBAAT,CAAiCC,QAAjC,EAA2C;AAChD,SAAOjB,eAAe,CAACT,sBAAD,EAAyB0B,QAAzB,CAAtB;AACD","sourcesContent":["import env from './environment'\r\nimport { graphEndpoint, IPFS_ENDPOINT } from './endpoints'\r\n\r\nconst DEFAULT_ETH_NODE = 'DEFAULT_ETH_NODE'\r\nconst IPFS_GATEWAY = 'IPFS_GATEWAY'\r\nconst PACKAGE_VERSION = 'PACKAGE_VERSION'\r\nconst SUBGRAPH_HTTP_ENDPOINT = 'SUBGRAPH_HTTP_ENDPOINT'\r\nconst DEFAULT_SUBGRAPH_HTTP_ENDPOINT = graphEndpoint()\r\n\r\n// Get a setting from localStorage\r\nfunction getLocalStorageSetting(confKey) {\r\n  const storageKey = `${confKey}_KEY`\r\n  return window.localStorage.getItem(storageKey)\r\n}\r\n\r\n// Get a local setting: from the local storage if available, or the env vars.\r\nfunction getLocalSetting(confKey) {\r\n  return getLocalStorageSetting(confKey) || env(confKey)\r\n}\r\n\r\nfunction setLocalSetting(confKey, value) {\r\n  const storageKey = `${confKey}_KEY`\r\n  return window.localStorage.setItem(storageKey, value)\r\n}\r\n\r\nexport function clearLocalStorageNetworkSettings() {\r\n  window.localStorage.removeItem('DEFAULT_ETH_NODE_KEY')\r\n  window.localStorage.removeItem('IPFS_GATEWAY_KEY')\r\n  window.localStorage.removeItem('SUBGRAPH_HTTP_ENDPOINT_KEY')\r\n}\r\n\r\nexport function getDefaultEthNode() {\r\n  // Let the network configuration handle node defaults\r\n  return getLocalSetting(DEFAULT_ETH_NODE) || ''\r\n}\r\n\r\nexport function setDefaultEthNode(node) {\r\n  return setLocalSetting(DEFAULT_ETH_NODE, node)\r\n}\r\n\r\nexport function getIpfsGateway() {\r\n  return getLocalSetting(IPFS_GATEWAY) || IPFS_ENDPOINT\r\n}\r\n\r\nexport function setIpfsGateway(gateway) {\r\n  return setLocalSetting(IPFS_GATEWAY, gateway)\r\n}\r\n\r\n// The previous package version is stored in localStorage,\r\n// while the current one is coming from the environment.\r\nexport function getPackageVersion() {\r\n  return env(PACKAGE_VERSION) || ''\r\n}\r\n\r\nexport function getLastPackageVersion() {\r\n  return getLocalStorageSetting(PACKAGE_VERSION) || ''\r\n}\r\n\r\nexport function setPackageVersion(version) {\r\n  return setLocalSetting(PACKAGE_VERSION, version)\r\n}\r\n\r\nexport function getSubgraphHttpEndpoint() {\r\n  return (\r\n    getLocalSetting(SUBGRAPH_HTTP_ENDPOINT) || DEFAULT_SUBGRAPH_HTTP_ENDPOINT\r\n  )\r\n}\r\n\r\nexport function setSubgraphHttpEndpoint(endpoint) {\r\n  return setLocalSetting(SUBGRAPH_HTTP_ENDPOINT, endpoint)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}