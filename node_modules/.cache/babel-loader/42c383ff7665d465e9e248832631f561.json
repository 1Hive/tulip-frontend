{"ast":null,"code":"var _jsxFileName = \"/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/views/Collectibles/components/NftList.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport orderBy from 'lodash/orderBy';\nimport nfts from 'config/constants/nfts';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { getBunnySpecialContract } from 'utils/contractHelpers';\nimport useGetWalletNfts from 'hooks/useGetWalletNfts';\nimport makeBatchRequest from 'utils/makeBatchRequest';\nimport { useToast } from 'state/hooks';\nimport NftCard from './NftCard';\nimport NftGrid from './NftGrid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst bunnySpecialContract = getBunnySpecialContract();\n\nconst NftList = () => {\n  _s();\n\n  const [claimableNfts, setClaimableNfts] = useState({});\n  const {\n    nfts: nftTokenIds,\n    refresh\n  } = useGetWalletNfts();\n  const {\n    account\n  } = useWallet();\n  const {\n    toastError\n  } = useToast();\n  const fetchClaimableStatuses = useCallback(async walletAddress => {\n    try {\n      const claimStatuses = await makeBatchRequest(nfts.map(nft => {\n        return bunnySpecialContract.methods.canClaimSingle(walletAddress, nft.bunnyId).call;\n      }));\n      setClaimableNfts(claimStatuses.reduce((accum, claimStatus, index) => {\n        return { ...accum,\n          [nfts[index].bunnyId]: claimStatus\n        };\n      }, {}));\n    } catch (error) {\n      console.error(error);\n      toastError('Error checking NFT claimable status');\n    }\n  }, [setClaimableNfts, toastError]);\n\n  const handleSuccess = () => {\n    refresh();\n    fetchClaimableStatuses(account);\n  };\n\n  useEffect(() => {\n    if (account) {\n      fetchClaimableStatuses(account);\n    }\n  }, [account, fetchClaimableStatuses]);\n  return /*#__PURE__*/_jsxDEV(NftGrid, {\n    children: orderBy(nfts, 'sortOrder').map(nft => {\n      const tokenIds = nftTokenIds[nft.bunnyId] ? nftTokenIds[nft.bunnyId].tokenIds : [];\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(NftCard, {\n          nft: nft,\n          canClaim: claimableNfts[nft.bunnyId],\n          tokenIds: tokenIds,\n          onSuccess: handleSuccess\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)\n      }, nft.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NftList, \"aFVneUkIxdVEW5zeWk4IjbT5MLs=\", false, function () {\n  return [useGetWalletNfts, useWallet, useToast];\n});\n\n_c = NftList;\nexport default NftList;\n\nvar _c;\n\n$RefreshReg$(_c, \"NftList\");","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/views/Collectibles/components/NftList.tsx"],"names":["React","useCallback","useEffect","useState","orderBy","nfts","useWallet","getBunnySpecialContract","useGetWalletNfts","makeBatchRequest","useToast","NftCard","NftGrid","bunnySpecialContract","NftList","claimableNfts","setClaimableNfts","nftTokenIds","refresh","account","toastError","fetchClaimableStatuses","walletAddress","claimStatuses","map","nft","methods","canClaimSingle","bunnyId","call","reduce","accum","claimStatus","index","error","console","handleSuccess","tokenIds","name"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\nimport orderBy from 'lodash/orderBy'\nimport nfts from 'config/constants/nfts'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { getBunnySpecialContract } from 'utils/contractHelpers'\nimport useGetWalletNfts from 'hooks/useGetWalletNfts'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { useToast } from 'state/hooks'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\n\ntype State = {\n  [key: string]: boolean\n}\n\nconst bunnySpecialContract = getBunnySpecialContract()\n\nconst NftList = () => {\n  const [claimableNfts, setClaimableNfts] = useState<State>({})\n  const { nfts: nftTokenIds, refresh } = useGetWalletNfts()\n  const { account } = useWallet()\n  const { toastError } = useToast()\n\n  const fetchClaimableStatuses = useCallback(\n    async (walletAddress: string) => {\n      try {\n        const claimStatuses = (await makeBatchRequest(\n          nfts.map((nft) => {\n            return bunnySpecialContract.methods.canClaimSingle(walletAddress, nft.bunnyId).call\n          }),\n        )) as boolean[]\n\n        setClaimableNfts(\n          claimStatuses.reduce((accum, claimStatus, index) => {\n            return {\n              ...accum,\n              [nfts[index].bunnyId]: claimStatus,\n            }\n          }, {}),\n        )\n      } catch (error) {\n        console.error(error)\n        toastError('Error checking NFT claimable status')\n      }\n    },\n    [setClaimableNfts, toastError],\n  )\n\n  const handleSuccess = () => {\n    refresh()\n    fetchClaimableStatuses(account)\n  }\n\n  useEffect(() => {\n    if (account) {\n      fetchClaimableStatuses(account)\n    }\n  }, [account, fetchClaimableStatuses])\n\n  return (\n    <NftGrid>\n      {orderBy(nfts, 'sortOrder').map((nft) => {\n        const tokenIds = nftTokenIds[nft.bunnyId] ? nftTokenIds[nft.bunnyId].tokenIds : []\n\n        return (\n          <div key={nft.name}>\n            <NftCard nft={nft} canClaim={claimableNfts[nft.bunnyId]} tokenIds={tokenIds} onSuccess={handleSuccess} />\n          </div>\n        )\n      })}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n"]},"metadata":{},"sourceType":"module"}