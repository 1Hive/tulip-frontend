{"ast":null,"code":"'use strict';\n\nconst multihashing = require('multihashing-async');\n\nconst errcode = require('err-code');\n\nconst {\n  Buffer\n} = require('buffer');\n/**\n * Validator for publick key records.\n * Verifies that the passed in record value is the PublicKey\n * that matches the passed in key.\n * If validation fails the returned Promise will reject with the error.\n *\n * @param {Buffer} key - A valid key is of the form `'/pk/<keymultihash>'`\n * @param {Buffer} publicKey - The public key to validate against (protobuf encoded).\n * @returns {Promise}\n */\n\n\nconst validatePublicKeyRecord = async (key, publicKey) => {\n  if (!Buffer.isBuffer(key)) {\n    throw errcode(new Error('\"key\" must be a Buffer'), 'ERR_INVALID_RECORD_KEY_NOT_BUFFER');\n  }\n\n  if (key.length < 5) {\n    throw errcode(new Error('invalid public key record'), 'ERR_INVALID_RECORD_KEY_TOO_SHORT');\n  }\n\n  const prefix = key.slice(0, 4).toString();\n\n  if (prefix !== '/pk/') {\n    throw errcode(new Error('key was not prefixed with /pk/'), 'ERR_INVALID_RECORD_KEY_BAD_PREFIX');\n  }\n\n  const keyhash = key.slice(4);\n  const publicKeyHash = await multihashing(publicKey, 'sha2-256');\n\n  if (!keyhash.equals(publicKeyHash)) {\n    throw errcode(new Error('public key does not match passed in key'), 'ERR_INVALID_RECORD_HASH_MISMATCH');\n  }\n};\n\nmodule.exports = {\n  func: validatePublicKeyRecord,\n  sign: false\n};","map":null,"metadata":{},"sourceType":"script"}