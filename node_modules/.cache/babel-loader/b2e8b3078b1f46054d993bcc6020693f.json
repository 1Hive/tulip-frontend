{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _toConsumableArray = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar pMapSeries = require('p-map-series');\n\nvar AccessController = require('./access-controller-interface');\n\nvar ensureAddress = require('./utils/ensure-ac-address');\n\nvar type = 'orbitdb';\n\nvar OrbitDBAccessController = /*#__PURE__*/function (_AccessController) {\n  _inherits(OrbitDBAccessController, _AccessController);\n\n  var _super = _createSuper(OrbitDBAccessController);\n\n  function OrbitDBAccessController(orbitdb, options) {\n    var _this;\n\n    _classCallCheck(this, OrbitDBAccessController);\n\n    _this = _super.call(this);\n    _this._orbitdb = orbitdb;\n    _this._db = null;\n    _this._options = options || {};\n    return _this;\n  } // Returns the type of the access controller\n\n\n  _createClass(OrbitDBAccessController, [{\n    key: \"address\",\n    get: // Returns the address of the OrbitDB used as the AC\n    function get() {\n      return this._db.address;\n    } // Return true if entry is allowed to be added to the database\n\n  }, {\n    key: \"canAppend\",\n    value: function () {\n      var _canAppend = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(entry, identityProvider) {\n        var access, verifiedIdentity;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Write keys and admins keys are allowed\n                access = new Set([].concat(_toConsumableArray(this.get('write')), _toConsumableArray(this.get('admin')))); // If the ACL contains the writer's public key or it contains '*'\n\n                if (!(access.has(entry.identity.id) || access.has('*'))) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 4;\n                return identityProvider.verifyIdentity(entry.identity);\n\n              case 4:\n                verifiedIdentity = _context.sent;\n                return _context.abrupt(\"return\", verifiedIdentity);\n\n              case 6:\n                return _context.abrupt(\"return\", false);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function canAppend(_x, _x2) {\n        return _canAppend.apply(this, arguments);\n      }\n\n      return canAppend;\n    }()\n  }, {\n    key: \"capabilities\",\n    get: function get() {\n      if (this._db) {\n        var capabilities = this._db.index;\n\n        var toSet = function toSet(e) {\n          var key = e[0];\n          capabilities[key] = new Set([].concat(_toConsumableArray(capabilities[key] || []), _toConsumableArray(e[1])));\n        }; // Merge with the access controller of the database\n        // and make sure all values are Sets\n\n\n        Object.entries(_objectSpread(_objectSpread({}, capabilities), {\n          admin: new Set([].concat(_toConsumableArray(capabilities.admin || []), _toConsumableArray(this._db.access.write)))\n        })).forEach(toSet);\n        return capabilities;\n      }\n\n      return {};\n    }\n  }, {\n    key: \"get\",\n    value: function get(capability) {\n      return this.capabilities[capability] || new Set([]);\n    }\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._db.close();\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function close() {\n        return _close.apply(this, arguments);\n      }\n\n      return close;\n    }()\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(address) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this._db) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                _context3.next = 3;\n                return this._db.close();\n\n              case 3:\n                _context3.next = 5;\n                return this._orbitdb.keyvalue(ensureAddress(address), {\n                  // use ipfs controller as a immutable \"root controller\"\n                  accessController: {\n                    type: 'ipfs',\n                    write: this._options.admin || [this._orbitdb.identity.id]\n                  },\n                  sync: true\n                });\n\n              case 5:\n                this._db = _context3.sent;\n\n                this._db.events.on('ready', this._onUpdate.bind(this));\n\n                this._db.events.on('write', this._onUpdate.bind(this));\n\n                this._db.events.on('replicated', this._onUpdate.bind(this));\n\n                _context3.next = 11;\n                return this._db.load();\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function load(_x3) {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }, {\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", {\n                  address: this._db.address.toString()\n                });\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function save() {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }()\n  }, {\n    key: \"grant\",\n    value: function () {\n      var _grant = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(capability, key) {\n        var capabilities;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                // Merge current keys with the new key\n                capabilities = new Set([].concat(_toConsumableArray(this._db.get(capability) || []), [key]));\n                _context5.next = 3;\n                return this._db.put(capability, Array.from(capabilities.values()));\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function grant(_x4, _x5) {\n        return _grant.apply(this, arguments);\n      }\n\n      return grant;\n    }()\n  }, {\n    key: \"revoke\",\n    value: function () {\n      var _revoke = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(capability, key) {\n        var capabilities;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                capabilities = new Set(this._db.get(capability) || []);\n                capabilities.delete(key);\n\n                if (!(capabilities.size > 0)) {\n                  _context6.next = 7;\n                  break;\n                }\n\n                _context6.next = 5;\n                return this._db.put(capability, Array.from(capabilities.values()));\n\n              case 5:\n                _context6.next = 9;\n                break;\n\n              case 7:\n                _context6.next = 9;\n                return this._db.del(capability);\n\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function revoke(_x6, _x7) {\n        return _revoke.apply(this, arguments);\n      }\n\n      return revoke;\n    }()\n    /* Private methods */\n\n  }, {\n    key: \"_onUpdate\",\n    value: function _onUpdate() {\n      this.emit('updated');\n    }\n    /* Factory */\n\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return type;\n    }\n  }, {\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(orbitdb) {\n        var options,\n            ac,\n            _args8 = arguments;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                options = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};\n                ac = new OrbitDBAccessController(orbitdb, options);\n                _context8.next = 4;\n                return ac.load(options.address || options.name || 'default-access-controller');\n\n              case 4:\n                if (!(options.write && !options.address)) {\n                  _context8.next = 7;\n                  break;\n                }\n\n                _context8.next = 7;\n                return pMapSeries(options.write, /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(e) {\n                    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n                      while (1) {\n                        switch (_context7.prev = _context7.next) {\n                          case 0:\n                            return _context7.abrupt(\"return\", ac.grant('write', e));\n\n                          case 1:\n                          case \"end\":\n                            return _context7.stop();\n                        }\n                      }\n                    }, _callee7);\n                  }));\n\n                  return function (_x9) {\n                    return _ref.apply(this, arguments);\n                  };\n                }());\n\n              case 7:\n                return _context8.abrupt(\"return\", ac);\n\n              case 8:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function create(_x8) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }]);\n\n  return OrbitDBAccessController;\n}(AccessController);\n\nmodule.exports = OrbitDBAccessController;","map":null,"metadata":{},"sourceType":"script"}