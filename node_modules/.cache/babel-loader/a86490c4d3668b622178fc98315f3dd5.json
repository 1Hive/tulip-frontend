{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _toConsumableArray = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar log = require('debug')('mss:select');\n\nvar errCode = require('err-code');\n\nvar multistream = require('./multistream');\n\nvar handshake = require('it-handshake');\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(stream, protocols, protocolId) {\n    var _handshake, reader, writer, rest, shakeStream, protocol, response, _iterator, _step, _protocol, _response;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            protocols = Array.isArray(protocols) ? _toConsumableArray(protocols) : [protocols];\n            _handshake = handshake(stream), reader = _handshake.reader, writer = _handshake.writer, rest = _handshake.rest, shakeStream = _handshake.stream;\n            protocol = protocols.shift();\n\n            if (protocolId) {\n              log('select: write [\"%s\", \"%s\"]', protocolId, protocol);\n              multistream.writeAll(writer, [protocolId, protocol]);\n            } else {\n              log('select: write \"%s\"', protocol);\n              multistream.write(writer, protocol);\n            }\n\n            _context.next = 6;\n            return multistream.read(reader);\n\n          case 6:\n            response = _context.sent.toString();\n            log('select: read \"%s\"', response); // Read the protocol response if we got the protocolId in return\n\n            if (!(response === protocolId)) {\n              _context.next = 13;\n              break;\n            }\n\n            _context.next = 11;\n            return multistream.read(reader);\n\n          case 11:\n            response = _context.sent.toString();\n            log('select: read \"%s\"', response);\n\n          case 13:\n            if (!(response === protocol)) {\n              _context.next = 16;\n              break;\n            }\n\n            rest();\n            return _context.abrupt(\"return\", {\n              stream: shakeStream,\n              protocol: protocol\n            });\n\n          case 16:\n            // We haven't gotten a valid ack, try the other protocols\n            _iterator = _createForOfIteratorHelper(protocols);\n            _context.prev = 17;\n\n            _iterator.s();\n\n          case 19:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 32;\n              break;\n            }\n\n            _protocol = _step.value;\n            log('select: write \"%s\"', _protocol);\n            multistream.write(writer, _protocol);\n            _context.next = 25;\n            return multistream.read(reader);\n\n          case 25:\n            _response = _context.sent.toString();\n            log('select: read \"%s\" for \"%s\"', _response, _protocol);\n\n            if (!(_response === _protocol)) {\n              _context.next = 30;\n              break;\n            }\n\n            rest(); // End our writer so others can start writing to stream\n\n            return _context.abrupt(\"return\", {\n              stream: shakeStream,\n              protocol: _protocol\n            });\n\n          case 30:\n            _context.next = 19;\n            break;\n\n          case 32:\n            _context.next = 37;\n            break;\n\n          case 34:\n            _context.prev = 34;\n            _context.t0 = _context[\"catch\"](17);\n\n            _iterator.e(_context.t0);\n\n          case 37:\n            _context.prev = 37;\n\n            _iterator.f();\n\n            return _context.finish(37);\n\n          case 40:\n            rest();\n            throw errCode(new Error('protocol selection failed'), 'ERR_UNSUPPORTED_PROTOCOL');\n\n          case 42:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[17, 34, 37, 40]]);\n  }));\n\n  return function (_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}