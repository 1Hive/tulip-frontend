{"ast":null,"code":"/* global document */\n\n/**\n * This code is based on `latency-monitor` (https://github.com/mlucool/latency-monitor) by `mlucool` (https://github.com/mlucool), available under Apache License 2.0 (https://github.com/mlucool/latency-monitor/blob/master/LICENSE)\n */\n'use strict';\n\nconst EventEmitter = require('events');\n\nconst debug = require('debug')('latency-monitor:VisibilityChangeEmitter');\n/**\n * Listen to page visibility change events (i.e. when the page is focused / blurred) by an event emitter.\n *\n * Warning: This does not work on all browsers, but should work on all modern browsers\n *\n * @example\n *\n *     const myVisibilityEmitter = new VisibilityChangeEmitter();\n *\n *     myVisibilityEmitter.on('visibilityChange', (pageInFocus) => {\n *        if ( pageInFocus ){\n *            // Page is in focus\n *            console.log('In focus');\n *        }\n *        else {\n *            // Page is blurred\n *            console.log('Out of focus');\n *        }\n *     });\n *     // To access the visibility state directly, call:\n *     console.log('Am I focused now? ' + myVisibilityEmitter.isVisible());\n *\n * @class VisibilityChangeEmitter\n */\n\n\nmodule.exports = class VisibilityChangeEmitter extends EventEmitter {\n  /**\n     * Creates a VisibilityChangeEmitter\n     */\n  constructor() {\n    super();\n\n    if (typeof document === 'undefined') {\n      debug('This is not a browser, no \"document\" found. Stopping.');\n      return;\n    }\n\n    this._initializeVisibilityVarNames();\n\n    this._addVisibilityChangeListener();\n  }\n  /**\n     * document.hidden and document.visibilityChange are the two variables we need to check for;\n     * Since these variables are named differently in different browsers, this function sets\n     * the appropriate name based on the browser being used. Once executed, tha actual names of\n     * document.hidden and document.visibilityChange are found in this._hidden and this._visibilityChange\n     * respectively\n     * @private\n     */\n\n\n  _initializeVisibilityVarNames() {\n    let hidden;\n    let visibilityChange;\n\n    if (typeof document.hidden !== 'undefined') {\n      // Opera 12.10 and Firefox 18 and later support\n      hidden = 'hidden';\n      visibilityChange = 'visibilitychange';\n    } else if (typeof document.mozHidden !== 'undefined') {\n      hidden = 'mozHidden';\n      visibilityChange = 'mozvisibilitychange';\n    } else if (typeof document.msHidden !== 'undefined') {\n      hidden = 'msHidden';\n      visibilityChange = 'msvisibilitychange';\n    } else if (typeof document.webkitHidden !== 'undefined') {\n      hidden = 'webkitHidden';\n      visibilityChange = 'webkitvisibilitychange';\n    }\n\n    this._hidden = hidden;\n    this._visibilityChange = visibilityChange;\n  }\n  /**\n     * Adds an event listener on the document that listens to changes in document.visibilityChange\n     * (or whatever name by which the visibilityChange variable is known in the browser)\n     * @private\n     */\n\n\n  _addVisibilityChangeListener() {\n    if (typeof document.addEventListener === 'undefined' || typeof document[this._hidden] === 'undefined') {\n      debug('Checking page visibility requires a browser that supports the Page Visibility API.');\n    } else {\n      // Handle page visibility change\n      document.addEventListener(this._visibilityChange, this._handleVisibilityChange.bind(this), false);\n    }\n  }\n  /**\n     * The function returns ```true``` if the page is visible or ```false``` if the page is not visible and\n     * ```undefined``` if the page visibility API is not supported by the browser.\n     * @returns {Boolean|void} whether the page is now visible or not (undefined is unknown)\n     */\n\n\n  isVisible() {\n    if (this._hidden === undefined || document[this._hidden] === undefined) {\n      return undefined;\n    }\n\n    return !document[this._hidden];\n  }\n  /**\n     * The function that is called when document.visibilityChange has changed\n     * It emits an event called visibilityChange and sends the value of document.hidden as a\n     * parameter\n     *\n     * @private\n     */\n\n\n  _handleVisibilityChange() {\n    const visible = !document[this._hidden];\n    debug(visible ? 'Page Visible' : 'Page Hidden'); // Emit the event\n\n    this.emit('visibilityChange', visible);\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}