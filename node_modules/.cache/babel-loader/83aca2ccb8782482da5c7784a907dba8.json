{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar PeerId = require('peer-id');\n\nvar _require2 = require('./index'),\n    Message = _require2.Message;\n\nvar SignPrefix = Buffer.from('libp2p-pubsub:');\n/**\n * Signs the provided message with the given `peerId`\n *\n * @param {PeerId} peerId\n * @param {Message} message\n * @returns {Promise<Message>}\n */\n\nfunction signMessage(_x, _x2) {\n  return _signMessage.apply(this, arguments);\n}\n/**\n * Verifies the signature of the given message\n * @param {rpc.RPC.Message} message\n * @returns {Promise<Boolean>}\n */\n\n\nfunction _signMessage() {\n  _signMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peerId, message) {\n    var bytes, signature;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // Get the message in bytes, and prepend with the pubsub prefix\n            bytes = Buffer.concat([SignPrefix, Message.encode(message)]);\n            _context.next = 3;\n            return peerId.privKey.sign(bytes);\n\n          case 3:\n            signature = _context.sent;\n            return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, message), {}, {\n              signature: signature,\n              key: peerId.pubKey.bytes\n            }));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _signMessage.apply(this, arguments);\n}\n\nfunction verifySignature(_x3) {\n  return _verifySignature.apply(this, arguments);\n}\n/**\n * Returns the PublicKey associated with the given message.\n * If no, valid PublicKey can be retrieved an error will be returned.\n *\n * @param {Message} message\n * @returns {Promise<PublicKey>}\n */\n\n\nfunction _verifySignature() {\n  _verifySignature = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(message) {\n    var baseMessage, bytes, pubKey;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // Get message sans the signature\n            baseMessage = _objectSpread({}, message);\n            delete baseMessage.signature;\n            delete baseMessage.key;\n            bytes = Buffer.concat([SignPrefix, Message.encode(baseMessage)]); // Get the public key\n\n            _context2.next = 6;\n            return messagePublicKey(message);\n\n          case 6:\n            pubKey = _context2.sent;\n            return _context2.abrupt(\"return\", pubKey.verify(bytes, message.signature));\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _verifySignature.apply(this, arguments);\n}\n\nfunction messagePublicKey(_x4) {\n  return _messagePublicKey.apply(this, arguments);\n}\n\nfunction _messagePublicKey() {\n  _messagePublicKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(message) {\n    var peerId, from;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!message.key) {\n              _context3.next = 9;\n              break;\n            }\n\n            _context3.next = 3;\n            return PeerId.createFromPubKey(message.key);\n\n          case 3:\n            peerId = _context3.sent;\n\n            if (!peerId.isEqual(message.from)) {\n              _context3.next = 6;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", peerId.pubKey);\n\n          case 6:\n            throw new Error('Public Key does not match the originator');\n\n          case 9:\n            // should be available in the from property of the message (peer id)\n            from = PeerId.createFromBytes(message.from);\n\n            if (!from.pubKey) {\n              _context3.next = 14;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", from.pubKey);\n\n          case 14:\n            throw new Error('Could not get the public key from the originator id');\n\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _messagePublicKey.apply(this, arguments);\n}\n\nmodule.exports = {\n  messagePublicKey: messagePublicKey,\n  signMessage: signMessage,\n  SignPrefix: SignPrefix,\n  verifySignature: verifySignature\n};","map":null,"metadata":{},"sourceType":"script"}