{"ast":null,"code":"import _regeneratorRuntime from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Buffer } from \"buffer\";\nimport { XX } from \"./handshakes/xx\";\nimport { decodePayload, getPeerIdFromPayload, verifySignedPayload } from \"./utils\";\nimport { logger, logLocalStaticKeys, logLocalEphemeralKeys, logRemoteEphemeralKey, logRemoteStaticKey, logCipherState } from \"./logger\";\nimport { decode0, decode1, decode2, encode0, encode1, encode2 } from \"./encoder\";\nexport var XXHandshake = /*#__PURE__*/function () {\n  function XXHandshake(isInitiator, payload, prologue, staticKeypair, connection, remotePeer, handshake) {\n    _classCallCheck(this, XXHandshake);\n\n    _defineProperty(this, \"isInitiator\", void 0);\n\n    _defineProperty(this, \"session\", void 0);\n\n    _defineProperty(this, \"remotePeer\", void 0);\n\n    _defineProperty(this, \"remoteEarlyData\", void 0);\n\n    _defineProperty(this, \"payload\", void 0);\n\n    _defineProperty(this, \"connection\", void 0);\n\n    _defineProperty(this, \"xx\", void 0);\n\n    _defineProperty(this, \"staticKeypair\", void 0);\n\n    _defineProperty(this, \"prologue\", void 0);\n\n    this.isInitiator = isInitiator;\n    this.payload = payload;\n    this.prologue = prologue;\n    this.staticKeypair = staticKeypair;\n    this.connection = connection;\n\n    if (remotePeer) {\n      this.remotePeer = remotePeer;\n    }\n\n    this.xx = handshake || new XX();\n    this.session = this.xx.initSession(this.isInitiator, this.prologue, this.staticKeypair);\n    this.remoteEarlyData = Buffer.alloc(0);\n  } // stage 0\n\n\n  _createClass(XXHandshake, [{\n    key: \"propose\",\n    value: function () {\n      var _propose = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var messageBuffer, receivedMessageBuffer, _this$xx$recvMessage, valid;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                logLocalStaticKeys(this.session.hs.s);\n\n                if (!this.isInitiator) {\n                  _context.next = 9;\n                  break;\n                }\n\n                logger(\"Stage 0 - Initiator starting to send first message.\");\n                messageBuffer = this.xx.sendMessage(this.session, Buffer.alloc(0));\n                this.connection.writeLP(encode0(messageBuffer));\n                logger(\"Stage 0 - Initiator finished sending first message.\");\n                logLocalEphemeralKeys(this.session.hs.e);\n                _context.next = 20;\n                break;\n\n              case 9:\n                logger(\"Stage 0 - Responder waiting to receive first message...\");\n                _context.t0 = decode0;\n                _context.next = 13;\n                return this.connection.readLP();\n\n              case 13:\n                _context.t1 = _context.sent.slice();\n                receivedMessageBuffer = (0, _context.t0)(_context.t1);\n                _this$xx$recvMessage = this.xx.recvMessage(this.session, receivedMessageBuffer), valid = _this$xx$recvMessage.valid;\n\n                if (valid) {\n                  _context.next = 18;\n                  break;\n                }\n\n                throw new Error(\"xx handshake stage 0 validation fail\");\n\n              case 18:\n                logger(\"Stage 0 - Responder received first message.\");\n                logRemoteEphemeralKey(this.session.hs.re);\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function propose() {\n        return _propose.apply(this, arguments);\n      }\n\n      return propose;\n    }() // stage 1\n\n  }, {\n    key: \"exchange\",\n    value: function () {\n      var _exchange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var receivedMessageBuffer, _this$xx$recvMessage2, plaintext, valid, decodedPayload, messageBuffer;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this.isInitiator) {\n                  _context2.next = 36;\n                  break;\n                }\n\n                logger('Stage 1 - Initiator waiting to receive first message from responder...');\n                _context2.t0 = decode1;\n                _context2.next = 5;\n                return this.connection.readLP();\n\n              case 5:\n                _context2.t1 = _context2.sent.slice();\n                receivedMessageBuffer = (0, _context2.t0)(_context2.t1);\n                _this$xx$recvMessage2 = this.xx.recvMessage(this.session, receivedMessageBuffer), plaintext = _this$xx$recvMessage2.plaintext, valid = _this$xx$recvMessage2.valid;\n\n                if (valid) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                throw new Error(\"xx handshake stage 1 validation fail\");\n\n              case 10:\n                logger('Stage 1 - Initiator received the message.');\n                logRemoteEphemeralKey(this.session.hs.re);\n                logRemoteStaticKey(this.session.hs.rs);\n                logger(\"Initiator going to check remote's signature...\");\n                _context2.prev = 14;\n                _context2.next = 17;\n                return decodePayload(plaintext);\n\n              case 17:\n                decodedPayload = _context2.sent;\n                _context2.t2 = this.remotePeer;\n\n                if (_context2.t2) {\n                  _context2.next = 23;\n                  break;\n                }\n\n                _context2.next = 22;\n                return getPeerIdFromPayload(decodedPayload);\n\n              case 22:\n                _context2.t2 = _context2.sent;\n\n              case 23:\n                this.remotePeer = _context2.t2;\n                _context2.next = 26;\n                return verifySignedPayload(receivedMessageBuffer.ns, decodedPayload, this.remotePeer);\n\n              case 26:\n                this.remotePeer = _context2.sent;\n                this.setRemoteEarlyData(decodedPayload.data);\n                _context2.next = 33;\n                break;\n\n              case 30:\n                _context2.prev = 30;\n                _context2.t3 = _context2[\"catch\"](14);\n                throw new Error(\"Error occurred while verifying signed payload: \".concat(_context2.t3.message));\n\n              case 33:\n                logger(\"All good with the signature!\");\n                _context2.next = 41;\n                break;\n\n              case 36:\n                logger('Stage 1 - Responder sending out first message with signed payload and static key.');\n                messageBuffer = this.xx.sendMessage(this.session, this.payload);\n                this.connection.writeLP(encode1(messageBuffer));\n                logger('Stage 1 - Responder sent the second handshake message with signed payload.');\n                logLocalEphemeralKeys(this.session.hs.e);\n\n              case 41:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[14, 30]]);\n      }));\n\n      function exchange() {\n        return _exchange.apply(this, arguments);\n      }\n\n      return exchange;\n    }() // stage 2\n\n  }, {\n    key: \"finish\",\n    value: function () {\n      var _finish = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var messageBuffer, receivedMessageBuffer, _this$xx$recvMessage3, plaintext, valid, decodedPayload;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this.isInitiator) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                logger('Stage 2 - Initiator sending third handshake message.');\n                messageBuffer = this.xx.sendMessage(this.session, this.payload);\n                this.connection.writeLP(encode2(messageBuffer));\n                logger('Stage 2 - Initiator sent message with signed payload.');\n                _context3.next = 35;\n                break;\n\n              case 7:\n                logger('Stage 2 - Responder waiting for third handshake message...');\n                _context3.t0 = decode2;\n                _context3.next = 11;\n                return this.connection.readLP();\n\n              case 11:\n                _context3.t1 = _context3.sent.slice();\n                receivedMessageBuffer = (0, _context3.t0)(_context3.t1);\n                _this$xx$recvMessage3 = this.xx.recvMessage(this.session, receivedMessageBuffer), plaintext = _this$xx$recvMessage3.plaintext, valid = _this$xx$recvMessage3.valid;\n\n                if (valid) {\n                  _context3.next = 16;\n                  break;\n                }\n\n                throw new Error(\"xx handshake stage 2 validation fail\");\n\n              case 16:\n                logger('Stage 2 - Responder received the message, finished handshake.');\n                _context3.prev = 17;\n                _context3.next = 20;\n                return decodePayload(plaintext);\n\n              case 20:\n                decodedPayload = _context3.sent;\n                _context3.t2 = this.remotePeer;\n\n                if (_context3.t2) {\n                  _context3.next = 26;\n                  break;\n                }\n\n                _context3.next = 25;\n                return getPeerIdFromPayload(decodedPayload);\n\n              case 25:\n                _context3.t2 = _context3.sent;\n\n              case 26:\n                this.remotePeer = _context3.t2;\n                _context3.next = 29;\n                return verifySignedPayload(this.session.hs.rs, decodedPayload, this.remotePeer);\n\n              case 29:\n                this.setRemoteEarlyData(decodedPayload.data);\n                _context3.next = 35;\n                break;\n\n              case 32:\n                _context3.prev = 32;\n                _context3.t3 = _context3[\"catch\"](17);\n                throw new Error(\"Error occurred while verifying signed payload: \".concat(_context3.t3.message));\n\n              case 35:\n                logCipherState(this.session);\n\n              case 36:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[17, 32]]);\n      }));\n\n      function finish() {\n        return _finish.apply(this, arguments);\n      }\n\n      return finish;\n    }()\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(plaintext, session) {\n      var cs = this.getCS(session);\n      return this.xx.encryptWithAd(cs, Buffer.alloc(0), plaintext);\n    }\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(ciphertext, session) {\n      var cs = this.getCS(session, false);\n      return this.xx.decryptWithAd(cs, Buffer.alloc(0), ciphertext);\n    }\n  }, {\n    key: \"getRemoteStaticKey\",\n    value: function getRemoteStaticKey() {\n      return this.session.hs.rs;\n    }\n  }, {\n    key: \"getCS\",\n    value: function getCS(session) {\n      var encryption = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (!session.cs1 || !session.cs2) {\n        throw new Error(\"Handshake not completed properly, cipher state does not exist.\");\n      }\n\n      if (this.isInitiator) {\n        return encryption ? session.cs1 : session.cs2;\n      } else {\n        return encryption ? session.cs2 : session.cs1;\n      }\n    }\n  }, {\n    key: \"setRemoteEarlyData\",\n    value: function setRemoteEarlyData(data) {\n      if (data) {\n        this.remoteEarlyData = Buffer.from(data.buffer, data.byteOffset, data.length);\n      }\n    }\n  }]);\n\n  return XXHandshake;\n}();","map":null,"metadata":{},"sourceType":"module"}