{"ast":null,"code":"import { isString } from './is';\nimport { normalize } from './object';\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\n\nexport function isNodeEnv() {\n  return Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n}\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nexport function dynamicRequire(mod, request) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return mod.require(request);\n}\n/** Default request keys that'll be used to extract data from the request */\n\nvar DEFAULT_REQUEST_KEYS = ['cookies', 'data', 'headers', 'method', 'query_string', 'url'];\n/**\n * Normalizes data from the request object, accounting for framework differences.\n *\n * @param req The request object from which to extract data\n * @param keys An optional array of keys to include in the normalized data. Defaults to DEFAULT_REQUEST_KEYS if not\n * provided.\n * @returns An object containing normalized request data\n */\n\nexport function extractNodeRequestData(req, keys) {\n  if (keys === void 0) {\n    keys = DEFAULT_REQUEST_KEYS;\n  } // make sure we can safely use dynamicRequire below\n\n\n  if (!isNodeEnv()) {\n    throw new Error(\"Can't get node request data outside of a node environment\");\n  }\n\n  var requestData = {}; // headers:\n  //   node, express: req.headers\n  //   koa: req.header\n\n  var headers = req.headers || req.header || {}; // method:\n  //   node, express, koa: req.method\n\n  var method = req.method; // host:\n  //   express: req.hostname in > 4 and req.host in < 4\n  //   koa: req.host\n  //   node: req.headers.host\n\n  var host = req.hostname || req.host || headers.host || '<no host>'; // protocol:\n  //   node: <n/a>\n  //   express, koa: req.protocol\n\n  var protocol = req.protocol === 'https' || req.secure || (req.socket || {}).encrypted ? 'https' : 'http'; // url (including path and query string):\n  //   node, express: req.originalUrl\n  //   koa: req.url\n\n  var originalUrl = req.originalUrl || req.url || ''; // absolute url\n\n  var absoluteUrl = protocol + \"://\" + host + originalUrl;\n  keys.forEach(function (key) {\n    switch (key) {\n      case 'headers':\n        requestData.headers = headers;\n        break;\n\n      case 'method':\n        requestData.method = method;\n        break;\n\n      case 'url':\n        requestData.url = absoluteUrl;\n        break;\n\n      case 'cookies':\n        // cookies:\n        //   node, express, koa: req.headers.cookie\n        //   vercel, sails.js, express (w/ cookie middleware): req.cookies\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        requestData.cookies = req.cookies || dynamicRequire(module, 'cookie').parse(headers.cookie || '');\n        break;\n\n      case 'query_string':\n        // query string:\n        //   node: req.url (raw)\n        //   express, koa: req.query\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        requestData.query_string = dynamicRequire(module, 'url').parse(originalUrl || '', false).query;\n        break;\n\n      case 'data':\n        if (method === 'GET' || method === 'HEAD') {\n          break;\n        } // body data:\n        //   node, express, koa: req.body\n\n\n        if (req.body !== undefined) {\n          requestData.data = isString(req.body) ? req.body : JSON.stringify(normalize(req.body));\n        }\n\n        break;\n\n      default:\n        if ({}.hasOwnProperty.call(req, key)) {\n          requestData[key] = req[key];\n        }\n\n    }\n  });\n  return requestData;\n}","map":null,"metadata":{},"sourceType":"module"}