{"ast":null,"code":"'use strict';\n\nconst importer = require('ipfs-unixfs-importer');\n\nconst normaliseAddInput = require('ipfs-core-utils/src/files/normalise-input');\n\nconst {\n  parseChunkerString\n} = require('./utils');\n\nconst pipe = require('it-pipe');\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n\nmodule.exports = ({\n  block,\n  gcLock,\n  preload,\n  pin,\n  options: constructorOptions\n}) => {\n  const isShardingEnabled = constructorOptions.EXPERIMENTAL && constructorOptions.EXPERIMENTAL.sharding;\n  return withTimeoutOption(async function* add(source, options) {\n    options = options || {};\n    const opts = {\n      shardSplitThreshold: isShardingEnabled ? 1000 : Infinity,\n      ...options,\n      strategy: 'balanced',\n      ...parseChunkerString(options.chunker)\n    }; // CID v0 is for multihashes encoded with sha2-256\n\n    if (opts.hashAlg && opts.hashAlg !== 'sha2-256' && opts.cidVersion !== 1) {\n      opts.cidVersion = 1;\n    }\n\n    if (opts.trickle) {\n      opts.strategy = 'trickle';\n    }\n\n    delete opts.trickle;\n\n    if (opts.progress) {\n      let total = 0;\n      const prog = opts.progress;\n\n      opts.progress = bytes => {\n        total += bytes;\n        prog(total);\n      };\n    }\n\n    const iterator = pipe(normaliseAddInput(source), source => importer(source, block, { ...opts,\n      pin: false\n    }), transformFile(opts), preloadFile(preload, opts), pinFile(pin, opts));\n    const releaseLock = await gcLock.readLock();\n\n    try {\n      yield* iterator;\n    } finally {\n      releaseLock();\n    }\n  });\n};\n\nfunction transformFile(opts) {\n  return async function* (source) {\n    for await (const file of source) {\n      let cid = file.cid;\n\n      if (opts.cidVersion === 1) {\n        cid = cid.toV1();\n      }\n\n      let path = file.path ? file.path : cid.toString();\n\n      if (opts.wrapWithDirectory && !file.path) {\n        path = '';\n      }\n\n      yield {\n        path,\n        cid,\n        size: file.size,\n        mode: file.unixfs && file.unixfs.mode,\n        mtime: file.unixfs && file.unixfs.mtime\n      };\n    }\n  };\n}\n\nfunction preloadFile(preload, opts) {\n  return async function* (source) {\n    for await (const file of source) {\n      const isRootFile = !file.path || opts.wrapWithDirectory ? file.path === '' : !file.path.includes('/');\n      const shouldPreload = isRootFile && !opts.onlyHash && opts.preload !== false;\n\n      if (shouldPreload) {\n        preload(file.cid);\n      }\n\n      yield file;\n    }\n  };\n}\n\nfunction pinFile(pin, opts) {\n  return async function* (source) {\n    for await (const file of source) {\n      // Pin a file if it is the root dir of a recursive add or the single file\n      // of a direct add.\n      const isRootDir = !file.path.includes('/');\n      const shouldPin = (opts.pin == null ? true : opts.pin) && isRootDir && !opts.onlyHash;\n\n      if (shouldPin) {\n        // Note: addAsyncIterator() has already taken a GC lock, so tell\n        // pin.add() not to take a (second) GC lock\n        await pin.add(file.cid, {\n          preload: false,\n          lock: false\n        });\n      }\n\n      yield file;\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}