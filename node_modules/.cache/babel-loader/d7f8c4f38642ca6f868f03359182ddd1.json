{"ast":null,"code":"/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport teamsList from 'config/constants/teams';\nimport { getTeam, getTeams } from './helpers';\nconst teamsById = teamsList.reduce((accum, team) => {\n  return { ...accum,\n    [team.id]: team\n  };\n}, {});\nconst initialState = {\n  isInitialized: false,\n  isLoading: true,\n  data: teamsById\n};\nexport const teamsSlice = createSlice({\n  name: 'teams',\n  initialState,\n  reducers: {\n    fetchStart: state => {\n      state.isLoading = true;\n    },\n    fetchFailed: state => {\n      state.isLoading = false;\n      state.isInitialized = true;\n    },\n    teamFetchSucceeded: (state, action) => {\n      state.isInitialized = true;\n      state.isLoading = false;\n      state.data[action.payload.id] = action.payload;\n    },\n    teamsFetchSucceeded: (state, action) => {\n      state.isInitialized = true;\n      state.isLoading = false;\n      state.data = action.payload;\n    }\n  }\n}); // Actions\n\nexport const {\n  fetchStart,\n  teamFetchSucceeded,\n  fetchFailed,\n  teamsFetchSucceeded\n} = teamsSlice.actions; // Thunks\n\nexport const fetchTeam = teamId => async dispatch => {\n  try {\n    dispatch(fetchStart());\n    const team = await getTeam(teamId);\n    dispatch(teamFetchSucceeded(team));\n  } catch (error) {\n    dispatch(fetchFailed());\n  }\n};\nexport const fetchTeams = () => async dispatch => {\n  try {\n    dispatch(fetchStart());\n    const teams = await getTeams();\n    dispatch(teamsFetchSucceeded(teams));\n  } catch (error) {\n    dispatch(fetchFailed());\n  }\n};\nexport default teamsSlice.reducer;","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/state/teams/index.tsx"],"names":["createSlice","teamsList","getTeam","getTeams","teamsById","reduce","accum","team","id","initialState","isInitialized","isLoading","data","teamsSlice","name","reducers","fetchStart","state","fetchFailed","teamFetchSucceeded","action","payload","teamsFetchSucceeded","actions","fetchTeam","teamId","dispatch","error","fetchTeams","teams","reducer"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA2C,kBAA3C;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AAGA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,WAAlC;AAEA,MAAMC,SAAoB,GAAGH,SAAS,CAACI,MAAV,CAAiB,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAC7D,SAAO,EACL,GAAGD,KADE;AAEL,KAACC,IAAI,CAACC,EAAN,GAAWD;AAFN,GAAP;AAID,CAL4B,EAK1B,EAL0B,CAA7B;AAOA,MAAME,YAAwB,GAAG;AAC/BC,EAAAA,aAAa,EAAE,KADgB;AAE/BC,EAAAA,SAAS,EAAE,IAFoB;AAG/BC,EAAAA,IAAI,EAAER;AAHyB,CAAjC;AAMA,OAAO,MAAMS,UAAU,GAAGb,WAAW,CAAC;AACpCc,EAAAA,IAAI,EAAE,OAD8B;AAEpCL,EAAAA,YAFoC;AAGpCM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAGC,KAAD,IAAW;AACrBA,MAAAA,KAAK,CAACN,SAAN,GAAkB,IAAlB;AACD,KAHO;AAIRO,IAAAA,WAAW,EAAGD,KAAD,IAAW;AACtBA,MAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACAM,MAAAA,KAAK,CAACP,aAAN,GAAsB,IAAtB;AACD,KAPO;AAQRS,IAAAA,kBAAkB,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAwC;AAC1DH,MAAAA,KAAK,CAACP,aAAN,GAAsB,IAAtB;AACAO,MAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACAM,MAAAA,KAAK,CAACL,IAAN,CAAWQ,MAAM,CAACC,OAAP,CAAeb,EAA1B,IAAgCY,MAAM,CAACC,OAAvC;AACD,KAZO;AAaRC,IAAAA,mBAAmB,EAAE,CAACL,KAAD,EAAQG,MAAR,KAA6C;AAChEH,MAAAA,KAAK,CAACP,aAAN,GAAsB,IAAtB;AACAO,MAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACAM,MAAAA,KAAK,CAACL,IAAN,GAAaQ,MAAM,CAACC,OAApB;AACD;AAjBO;AAH0B,CAAD,CAA9B,C,CAwBP;;AACA,OAAO,MAAM;AAAEL,EAAAA,UAAF;AAAcG,EAAAA,kBAAd;AAAkCD,EAAAA,WAAlC;AAA+CI,EAAAA;AAA/C,IAAuET,UAAU,CAACU,OAAxF,C,CAEP;;AACA,OAAO,MAAMC,SAAS,GAAIC,MAAD,IAAoB,MAAOC,QAAP,IAAoB;AAC/D,MAAI;AACFA,IAAAA,QAAQ,CAACV,UAAU,EAAX,CAAR;AACA,UAAMT,IAAI,GAAG,MAAML,OAAO,CAACuB,MAAD,CAA1B;AACAC,IAAAA,QAAQ,CAACP,kBAAkB,CAACZ,IAAD,CAAnB,CAAR;AACD,GAJD,CAIE,OAAOoB,KAAP,EAAc;AACdD,IAAAA,QAAQ,CAACR,WAAW,EAAZ,CAAR;AACD;AACF,CARM;AAUP,OAAO,MAAMU,UAAU,GAAG,MAAM,MAAOF,QAAP,IAAoB;AAClD,MAAI;AACFA,IAAAA,QAAQ,CAACV,UAAU,EAAX,CAAR;AACA,UAAMa,KAAK,GAAG,MAAM1B,QAAQ,EAA5B;AACAuB,IAAAA,QAAQ,CAACJ,mBAAmB,CAACO,KAAD,CAApB,CAAR;AACD,GAJD,CAIE,OAAOF,KAAP,EAAc;AACdD,IAAAA,QAAQ,CAACR,WAAW,EAAZ,CAAR;AACD;AACF,CARM;AAUP,eAAeL,UAAU,CAACiB,OAA1B","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport teamsList from 'config/constants/teams'\nimport { Team } from 'config/constants/types'\nimport { TeamsById, TeamsState } from '../types'\nimport { getTeam, getTeams } from './helpers'\n\nconst teamsById: TeamsById = teamsList.reduce((accum, team) => {\n  return {\n    ...accum,\n    [team.id]: team,\n  }\n}, {})\n\nconst initialState: TeamsState = {\n  isInitialized: false,\n  isLoading: true,\n  data: teamsById,\n}\n\nexport const teamsSlice = createSlice({\n  name: 'teams',\n  initialState,\n  reducers: {\n    fetchStart: (state) => {\n      state.isLoading = true\n    },\n    fetchFailed: (state) => {\n      state.isLoading = false\n      state.isInitialized = true\n    },\n    teamFetchSucceeded: (state, action: PayloadAction<Team>) => {\n      state.isInitialized = true\n      state.isLoading = false\n      state.data[action.payload.id] = action.payload\n    },\n    teamsFetchSucceeded: (state, action: PayloadAction<TeamsById>) => {\n      state.isInitialized = true\n      state.isLoading = false\n      state.data = action.payload\n    },\n  },\n})\n\n// Actions\nexport const { fetchStart, teamFetchSucceeded, fetchFailed, teamsFetchSucceeded } = teamsSlice.actions\n\n// Thunks\nexport const fetchTeam = (teamId: number) => async (dispatch) => {\n  try {\n    dispatch(fetchStart())\n    const team = await getTeam(teamId)\n    dispatch(teamFetchSucceeded(team))\n  } catch (error) {\n    dispatch(fetchFailed())\n  }\n}\n\nexport const fetchTeams = () => async (dispatch) => {\n  try {\n    dispatch(fetchStart())\n    const teams = await getTeams()\n    dispatch(teamsFetchSucceeded(teams))\n  } catch (error) {\n    dispatch(fetchFailed())\n  }\n}\n\nexport default teamsSlice.reducer\n"]},"metadata":{},"sourceType":"module"}