{"ast":null,"code":"import _slicedToArray from\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _styled from\"styled-components\";import React,{useCallback,useEffect,useMemo,useRef,useState}from'react';import{useWallet}from'use-wallet';import{Button,GU,IconConnect,useViewport}from'@1hive/1hive-ui';import AccountButton from'./AccountButton';import AccountPopover from'./AccountPopover';import ScreenConnected from'./ScreenConnected';import ScreenConnecting from'./ScreenConnecting';import ScreenError from'./ScreenError';import ScreenProviders from'./ScreenProviders';var SCREENS=[{id:'providers',title:'Use account from'},{id:'connecting',title:'Use account from'},{id:'connected',title:'Active account'},{id:'error',title:'Connection error'}];var _StyledDiv=_styled(\"div\").withConfig({displayName:\"AccountModule___StyledDiv\",componentId:\"sc-15uzi7u-0\"})([\"display:flex;align-items:center;justify-content:space-around;width:\",\";outline:0;\"],function(p){return p._css;});function AccountModule(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),opened=_useState2[0],setOpened=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),activatingDelayed=_useState4[0],setActivatingDelayed=_useState4[1];var buttonRef=useRef();var _useViewport=useViewport(),below=_useViewport.below;var compactMode=below('medium');var wallet=useWallet();var account=wallet.account,connector=wallet.connector,error=wallet.error,status=wallet.status;var open=useCallback(function(){return setOpened(true);},[]);var toggle=useCallback(function(){return setOpened(function(opened){return!opened;});},[]);useEffect(function(){var timer;if(status==='error'){setActivatingDelayed(null);}if(status==='connecting'){setActivatingDelayed(connector);timer=setTimeout(function(){setActivatingDelayed(null);},400);}return function(){return clearTimeout(timer);};},[connector,status]);var handleResetConnection=useCallback(function(){wallet.reset();},[wallet]);var handleActivate=useCallback(function(providerId){return wallet.connect(providerId);},[wallet]);var previousScreenIndex=useRef(-1);var _useMemo=useMemo(function(){var screenId=status==='disconnected'?'providers':status;var screenIndex=SCREENS.findIndex(function(screen){return screen.id===screenId;});var direction=previousScreenIndex.current>screenIndex?-1:1;previousScreenIndex.current=screenIndex;return{direction:direction,screenIndex:screenIndex};},[status]),screenIndex=_useMemo.screenIndex,direction=_useMemo.direction;var screen=SCREENS[screenIndex];var screenId=screen.id;var handlePopoverClose=useCallback(function(){if(screenId==='connecting'||screenId==='error'){// reject closing the popover\nreturn false;}setOpened(false);},[screenId]);return/*#__PURE__*/React.createElement(_StyledDiv,{ref:buttonRef,tabIndex:\"0\",_css:compactMode?'auto':\"\".concat(24.5*GU,\"px\")},screen.id==='connected'?/*#__PURE__*/React.createElement(AccountButton,{onClick:toggle}):/*#__PURE__*/React.createElement(Button,{icon:/*#__PURE__*/React.createElement(IconConnect,null),label:\"Connect account\",onClick:toggle,display:compactMode?'icon':'all'}),/*#__PURE__*/React.createElement(AccountPopover,{direction:direction,heading:screen.title,keys:function keys(_ref){var screenId=_ref.screenId;return screenId+status+error.name;},onClose:handlePopoverClose,onOpen:open,opener:buttonRef.current,screenId:screenId,screenData:{account:account,activating:activatingDelayed,activationError:error,status:status,screenId:screenId},screenKey:function screenKey(_ref2){var account=_ref2.account,activating=_ref2.activating,activationError=_ref2.activationError,screenId=_ref2.screenId;return(activationError?activationError.name:'')+account+activating+screenId;},visible:opened},function(_ref3){var activating=_ref3.activating,activationError=_ref3.activationError,screenId=_ref3.screenId;if(screenId==='connecting'){return/*#__PURE__*/React.createElement(ScreenConnecting,{providerId:activating,onCancel:handleResetConnection});}if(screenId==='connected'){return/*#__PURE__*/React.createElement(ScreenConnected,{wallet:wallet});}if(screenId==='error'){return/*#__PURE__*/React.createElement(ScreenError,{error:activationError,onBack:handleResetConnection});}return/*#__PURE__*/React.createElement(ScreenProviders,{onActivate:handleActivate});}));}export default AccountModule;","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/components/Account/AccountModule.js"],"names":["React","useCallback","useEffect","useMemo","useRef","useState","useWallet","Button","GU","IconConnect","useViewport","AccountButton","AccountPopover","ScreenConnected","ScreenConnecting","ScreenError","ScreenProviders","SCREENS","id","title","AccountModule","opened","setOpened","activatingDelayed","setActivatingDelayed","buttonRef","below","compactMode","wallet","account","connector","error","status","open","toggle","timer","setTimeout","clearTimeout","handleResetConnection","reset","handleActivate","providerId","connect","previousScreenIndex","screenId","screenIndex","findIndex","screen","direction","current","handlePopoverClose","name","activating","activationError"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\r\nimport { useWallet } from 'use-wallet'\r\nimport { Button, GU, IconConnect, useViewport } from '@1hive/1hive-ui'\r\nimport AccountButton from './AccountButton'\r\nimport AccountPopover from './AccountPopover'\r\nimport ScreenConnected from './ScreenConnected'\r\nimport ScreenConnecting from './ScreenConnecting'\r\nimport ScreenError from './ScreenError'\r\nimport ScreenProviders from './ScreenProviders'\r\n\r\nconst SCREENS = [\r\n  { id: 'providers', title: 'Use account from' },\r\n  { id: 'connecting', title: 'Use account from' },\r\n  { id: 'connected', title: 'Active account' },\r\n  { id: 'error', title: 'Connection error' },\r\n]\r\n\r\nfunction AccountModule() {\r\n  const [opened, setOpened] = useState(false)\r\n  const [activatingDelayed, setActivatingDelayed] = useState(null)\r\n  const buttonRef = useRef()\r\n  const { below } = useViewport()\r\n  const compactMode = below('medium')\r\n  const wallet = useWallet()\r\n  const { account, connector, error, status } = wallet\r\n\r\n  const open = useCallback(() => setOpened(true), [])\r\n  const toggle = useCallback(() => setOpened(opened => !opened), [])\r\n\r\n  useEffect(() => {\r\n    let timer\r\n\r\n    if (status === 'error') {\r\n      setActivatingDelayed(null)\r\n    }\r\n\r\n    if (status === 'connecting') {\r\n      setActivatingDelayed(connector)\r\n      timer = setTimeout(() => {\r\n        setActivatingDelayed(null)\r\n      }, 400)\r\n    }\r\n\r\n    return () => clearTimeout(timer)\r\n  }, [connector, status])\r\n\r\n  const handleResetConnection = useCallback(() => {\r\n    wallet.reset()\r\n  }, [wallet])\r\n\r\n  const handleActivate = useCallback(providerId => wallet.connect(providerId), [\r\n    wallet,\r\n  ])\r\n\r\n  const previousScreenIndex = useRef(-1)\r\n\r\n  const { screenIndex, direction } = useMemo(() => {\r\n    const screenId = status === 'disconnected' ? 'providers' : status\r\n\r\n    const screenIndex = SCREENS.findIndex(screen => screen.id === screenId)\r\n    const direction = previousScreenIndex.current > screenIndex ? -1 : 1\r\n\r\n    previousScreenIndex.current = screenIndex\r\n\r\n    return { direction, screenIndex }\r\n  }, [status])\r\n\r\n  const screen = SCREENS[screenIndex]\r\n  const screenId = screen.id\r\n\r\n  const handlePopoverClose = useCallback(() => {\r\n    if (screenId === 'connecting' || screenId === 'error') {\r\n      // reject closing the popover\r\n      return false\r\n    }\r\n    setOpened(false)\r\n  }, [screenId])\r\n\r\n  return (\r\n    <div\r\n      ref={buttonRef}\r\n      tabIndex=\"0\"\r\n      css={`\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-around;\r\n        width: ${compactMode ? 'auto' : `${24.5 * GU}px`};\r\n        outline: 0;\r\n      `}\r\n    >\r\n      {screen.id === 'connected' ? (\r\n        <AccountButton onClick={toggle} />\r\n      ) : (\r\n        <Button\r\n          icon={<IconConnect />}\r\n          label=\"Connect account\"\r\n          onClick={toggle}\r\n          display={compactMode ? 'icon' : 'all'}\r\n        />\r\n      )}\r\n      <AccountPopover\r\n        direction={direction}\r\n        heading={screen.title}\r\n        keys={({ screenId }) => screenId + status + error.name}\r\n        onClose={handlePopoverClose}\r\n        onOpen={open}\r\n        opener={buttonRef.current}\r\n        screenId={screenId}\r\n        screenData={{\r\n          account,\r\n          activating: activatingDelayed,\r\n          activationError: error,\r\n          status,\r\n          screenId,\r\n        }}\r\n        screenKey={({ account, activating, activationError, screenId }) =>\r\n          (activationError ? activationError.name : '') +\r\n          account +\r\n          activating +\r\n          screenId\r\n        }\r\n        visible={opened}\r\n      >\r\n        {({ activating, activationError, screenId }) => {\r\n          if (screenId === 'connecting') {\r\n            return (\r\n              <ScreenConnecting\r\n                providerId={activating}\r\n                onCancel={handleResetConnection}\r\n              />\r\n            )\r\n          }\r\n          if (screenId === 'connected') {\r\n            return <ScreenConnected wallet={wallet} />\r\n          }\r\n          if (screenId === 'error') {\r\n            return (\r\n              <ScreenError\r\n                error={activationError}\r\n                onBack={handleResetConnection}\r\n              />\r\n            )\r\n          }\r\n          return <ScreenProviders onActivate={handleActivate} />\r\n        }}\r\n      </AccountPopover>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AccountModule\r\n"]},"metadata":{},"sourceType":"module"}