{"ast":null,"code":"var Multiaddr = require('multiaddr');\n\nvar reduceValue = function reduceValue(_, v) {\n  return v;\n};\n\nvar tcpUri = function tcpUri(str, port, parts, opts) {\n  // return tcp when explicitly requested\n  if (opts && opts.assumeHttp === false) return \"tcp://\".concat(str, \":\").concat(port); // check if tcp is the last protocol in multiaddr\n\n  var protocol = 'tcp';\n  var explicitPort = \":\".concat(port);\n  var last = parts[parts.length - 1];\n\n  if (last.protocol === 'tcp') {\n    // assume http and produce clean urls\n    protocol = port === '443' ? 'https' : 'http';\n    explicitPort = port === '443' || port === '80' ? '' : explicitPort;\n  }\n\n  return \"\".concat(protocol, \"://\").concat(str).concat(explicitPort);\n};\n\nvar Reducers = {\n  ip4: reduceValue,\n  ip6: function ip6(str, content, i, parts) {\n    return parts.length === 1 && parts[0].protocol === 'ip6' ? content : \"[\".concat(content, \"]\");\n  },\n  tcp: function tcp(str, content, i, parts, opts) {\n    return parts.some(function (p) {\n      return ['http', 'https', 'ws', 'wss'].includes(p.protocol);\n    }) ? \"\".concat(str, \":\").concat(content) : tcpUri(str, content, parts, opts);\n  },\n  udp: function udp(str, content) {\n    return \"udp://\".concat(str, \":\").concat(content);\n  },\n  dnsaddr: reduceValue,\n  dns4: reduceValue,\n  dns6: reduceValue,\n  ipfs: function ipfs(str, content) {\n    return \"\".concat(str, \"/ipfs/\").concat(content);\n  },\n  p2p: function p2p(str, content) {\n    return \"\".concat(str, \"/p2p/\").concat(content);\n  },\n  http: function http(str) {\n    return \"http://\".concat(str);\n  },\n  https: function https(str) {\n    return \"https://\".concat(str);\n  },\n  ws: function ws(str) {\n    return \"ws://\".concat(str);\n  },\n  wss: function wss(str) {\n    return \"wss://\".concat(str);\n  },\n  'p2p-websocket-star': function p2pWebsocketStar(str) {\n    return \"\".concat(str, \"/p2p-websocket-star\");\n  },\n  'p2p-webrtc-star': function p2pWebrtcStar(str) {\n    return \"\".concat(str, \"/p2p-webrtc-star\");\n  },\n  'p2p-webrtc-direct': function p2pWebrtcDirect(str) {\n    return \"\".concat(str, \"/p2p-webrtc-direct\");\n  }\n};\n\nmodule.exports = function (multiaddr, opts) {\n  var ma = Multiaddr(multiaddr);\n  var parts = multiaddr.toString().split('/').slice(1);\n  return ma.tuples().map(function (tuple) {\n    return {\n      protocol: parts.shift(),\n      content: tuple[1] ? parts.shift() : null\n    };\n  }).reduce(function (str, part, i, parts) {\n    var reduce = Reducers[part.protocol];\n    if (!reduce) throw new Error(\"Unsupported protocol \".concat(part.protocol));\n    return reduce(str, part.content, i, parts, opts);\n  }, '');\n};","map":null,"metadata":{},"sourceType":"script"}