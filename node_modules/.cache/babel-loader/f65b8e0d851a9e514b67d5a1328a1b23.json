{"ast":null,"code":"import { useEffect, useMemo, useState } from 'react';\nimport { wallet } from 'tulip-data';\nimport { useWallet } from 'use-wallet';\nexport function useWalletData() {\n  const [walletInfo, setWalletInfo] = useState([]);\n  const [isFetching, setIsFetching] = useState(false);\n  const {\n    account\n  } = useWallet();\n  useEffect(() => {\n    let cancelled = false;\n\n    if (!account) {\n      return setWalletInfo([]);\n    }\n\n    const fetchWalletData = async () => {\n      try {\n        setIsFetching(true);\n        const balances = await wallet.tokenBalances({\n          user_address: account\n        });\n        console.log(balances);\n\n        if (!cancelled) {\n          setIsFetching(false);\n          return setWalletInfo(balances);\n        }\n      } catch (err) {\n        console.error(`Could not fetch wallet data `, err);\n      }\n    };\n\n    fetchWalletData();\n    return () => {\n      setIsFetching(false);\n      cancelled = true;\n    };\n  }, [account]);\n  return [walletInfo, isFetching];\n}\nexport function useNetBalance() {\n  const [walletInfo, isFetching] = useWalletData();\n  console.log(walletInfo, isFetching);\n  return useMemo(() => {\n    if (!walletInfo || walletInfo.length === 0) {\n      return [0, isFetching];\n    }\n\n    console.log(walletInfo);\n    let netBalance = 0;\n    walletInfo.map(value => {\n      console.log(value);\n\n      if (value && parseFloat(value.valueUSD)) {\n        netBalance = netBalance + parseFloat(value.valueUSD);\n      }\n    });\n    return [netBalance.toFixed(2), isFetching];\n  }, [walletInfo, isFetching]);\n}","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/hooks/useWalletData.js"],"names":["useEffect","useMemo","useState","wallet","useWallet","useWalletData","walletInfo","setWalletInfo","isFetching","setIsFetching","account","cancelled","fetchWalletData","balances","tokenBalances","user_address","console","log","err","error","useNetBalance","length","netBalance","map","value","parseFloat","valueUSD","toFixed"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,SAASC,SAAT,QAA0B,YAA1B;AAEA,OAAO,SAASC,aAAT,GAAyB;AAC9B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACM,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAcN,SAAS,EAA7B;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,SAAS,GAAG,KAAhB;;AACA,QAAI,CAACD,OAAL,EAAc;AACZ,aAAOH,aAAa,CAAC,EAAD,CAApB;AACD;;AAED,UAAMK,eAAe,GAAG,YAAY;AAClC,UAAI;AACFH,QAAAA,aAAa,CAAC,IAAD,CAAb;AACA,cAAMI,QAAQ,GAAG,MAAMV,MAAM,CAACW,aAAP,CAAqB;AAC1CC,UAAAA,YAAY,EAAEL;AAD4B,SAArB,CAAvB;AAGAM,QAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;;AACA,YAAI,CAACF,SAAL,EAAgB;AACdF,UAAAA,aAAa,CAAC,KAAD,CAAb;AACA,iBAAOF,aAAa,CAACM,QAAD,CAApB;AACD;AACF,OAVD,CAUE,OAAOK,GAAP,EAAY;AACZF,QAAAA,OAAO,CAACG,KAAR,CAAe,8BAAf,EAA8CD,GAA9C;AACD;AACF,KAdD;;AAgBAN,IAAAA,eAAe;AACf,WAAO,MAAM;AACXH,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAE,MAAAA,SAAS,GAAG,IAAZ;AACD,KAHD;AAID,GA3BQ,EA2BN,CAACD,OAAD,CA3BM,CAAT;AA6BA,SAAO,CAACJ,UAAD,EAAaE,UAAb,CAAP;AACD;AAED,OAAO,SAASY,aAAT,GAAyB;AAC9B,QAAM,CAACd,UAAD,EAAaE,UAAb,IAA2BH,aAAa,EAA9C;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAYX,UAAZ,EAAwBE,UAAxB;AACA,SAAOP,OAAO,CAAC,MAAM;AACnB,QAAI,CAACK,UAAD,IAAeA,UAAU,CAACe,MAAX,KAAsB,CAAzC,EAA4C;AAC1C,aAAO,CAAC,CAAD,EAAIb,UAAJ,CAAP;AACD;;AAEDQ,IAAAA,OAAO,CAACC,GAAR,CAAYX,UAAZ;AACA,QAAIgB,UAAU,GAAG,CAAjB;AACAhB,IAAAA,UAAU,CAACiB,GAAX,CAAeC,KAAK,IAAI;AACtBR,MAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;;AACA,UAAIA,KAAK,IAAIC,UAAU,CAACD,KAAK,CAACE,QAAP,CAAvB,EAAyC;AACvCJ,QAAAA,UAAU,GAAGA,UAAU,GAAGG,UAAU,CAACD,KAAK,CAACE,QAAP,CAApC;AACD;AACF,KALD;AAOA,WAAO,CAACJ,UAAU,CAACK,OAAX,CAAmB,CAAnB,CAAD,EAAwBnB,UAAxB,CAAP;AACD,GAfa,EAeX,CAACF,UAAD,EAAaE,UAAb,CAfW,CAAd;AAgBD","sourcesContent":["import { useEffect, useMemo, useState } from 'react'\r\nimport { wallet } from 'tulip-data'\r\nimport { useWallet } from 'use-wallet'\r\n\r\nexport function useWalletData() {\r\n  const [walletInfo, setWalletInfo] = useState([])\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const { account } = useWallet()\r\n\r\n  useEffect(() => {\r\n    let cancelled = false\r\n    if (!account) {\r\n      return setWalletInfo([])\r\n    }\r\n\r\n    const fetchWalletData = async () => {\r\n      try {\r\n        setIsFetching(true)\r\n        const balances = await wallet.tokenBalances({\r\n          user_address: account,\r\n        })\r\n        console.log(balances)\r\n        if (!cancelled) {\r\n          setIsFetching(false)\r\n          return setWalletInfo(balances)\r\n        }\r\n      } catch (err) {\r\n        console.error(`Could not fetch wallet data `, err)\r\n      }\r\n    }\r\n\r\n    fetchWalletData()\r\n    return () => {\r\n      setIsFetching(false)\r\n      cancelled = true\r\n    }\r\n  }, [account])\r\n\r\n  return [walletInfo, isFetching]\r\n}\r\n\r\nexport function useNetBalance() {\r\n  const [walletInfo, isFetching] = useWalletData()\r\n  console.log(walletInfo, isFetching)\r\n  return useMemo(() => {\r\n    if (!walletInfo || walletInfo.length === 0) {\r\n      return [0, isFetching]\r\n    }\r\n\r\n    console.log(walletInfo)\r\n    let netBalance = 0\r\n    walletInfo.map(value => {\r\n      console.log(value)\r\n      if (value && parseFloat(value.valueUSD)) {\r\n        netBalance = netBalance + parseFloat(value.valueUSD)\r\n      }\r\n    })\r\n\r\n    return [netBalance.toFixed(2), isFetching]\r\n  }, [walletInfo, isFetching])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}