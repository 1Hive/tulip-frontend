{"ast":null,"code":"'use strict';\n/**\n * Parses chunker string into options used by DAGBuilder in ipfs-unixfs-engine\n *\n *\n * @param  {String}   chunker Chunker algorithm supported formats:\n *                    \"size-{size}\"\n *                    \"rabin\"\n *                    \"rabin-{avg}\"\n *                    \"rabin-{min}-{avg}-{max}\"\n *\n * @return {Object}   Chunker options for DAGBuilder\n */\n\nvar _objectSpread = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar parseChunkerString = function parseChunkerString(chunker) {\n  if (!chunker) {\n    return {\n      chunker: 'fixed'\n    };\n  } else if (chunker.startsWith('size-')) {\n    var sizeStr = chunker.split('-')[1];\n    var size = parseInt(sizeStr);\n\n    if (isNaN(size)) {\n      throw new Error('Chunker parameter size must be an integer');\n    }\n\n    return {\n      chunker: 'fixed',\n      maxChunkSize: size\n    };\n  } else if (chunker.startsWith('rabin')) {\n    return _objectSpread({\n      chunker: 'rabin'\n    }, parseRabinString(chunker));\n  } else {\n    throw new Error(\"Unrecognized chunker option: \".concat(chunker));\n  }\n};\n/**\n * Parses rabin chunker string\n *\n * @param  {String}   chunker Chunker algorithm supported formats:\n *                            \"rabin\"\n *                            \"rabin-{avg}\"\n *                            \"rabin-{min}-{avg}-{max}\"\n *\n * @return {Object}   rabin chunker options\n */\n\n\nvar parseRabinString = function parseRabinString(chunker) {\n  var options = {};\n  var parts = chunker.split('-');\n\n  switch (parts.length) {\n    case 1:\n      options.avgChunkSize = 262144;\n      break;\n\n    case 2:\n      options.avgChunkSize = parseChunkSize(parts[1], 'avg');\n      break;\n\n    case 4:\n      options.minChunkSize = parseChunkSize(parts[1], 'min');\n      options.avgChunkSize = parseChunkSize(parts[2], 'avg');\n      options.maxChunkSize = parseChunkSize(parts[3], 'max');\n      break;\n\n    default:\n      throw new Error('Incorrect chunker format (expected \"rabin\" \"rabin-[avg]\" or \"rabin-[min]-[avg]-[max]\"');\n  }\n\n  return options;\n};\n\nvar parseChunkSize = function parseChunkSize(str, name) {\n  var size = parseInt(str);\n\n  if (isNaN(size)) {\n    throw new Error(\"Chunker parameter \".concat(name, \" must be an integer\"));\n  }\n\n  return size;\n};\n\nmodule.exports = {\n  parseChunkSize: parseChunkSize,\n  parseRabinString: parseRabinString,\n  parseChunkerString: parseChunkerString\n};","map":null,"metadata":{},"sourceType":"script"}