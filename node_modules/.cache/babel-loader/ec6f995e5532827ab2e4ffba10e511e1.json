{"ast":null,"code":"'use strict';\n\nconst errCode = require('err-code');\n\nmodule.exports = (options = {}, defaults) => {\n  if (Array.isArray(options)) {\n    options = options.filter(arg => typeof arg === 'object').pop() || {};\n  }\n\n  const output = {};\n\n  for (const key in defaults) {\n    if (options[key] !== null && options[key] !== undefined) {\n      output[key] = options[key];\n    } else {\n      output[key] = defaults[key];\n    }\n  } // support legacy go arguments\n\n\n  if (options.count !== undefined) {\n    output.length = options.count;\n  }\n\n  if (options.p !== undefined) {\n    output.parents = options.p;\n  }\n\n  if (options.l !== undefined) {\n    output.long = options.l;\n  }\n\n  if (!output.length && output.length !== 0) {\n    output.length = Infinity;\n  }\n\n  if (output.offset < 0) {\n    throw errCode(new Error('cannot have negative write offset'), 'ERR_INVALID_PARAMS');\n  }\n\n  if (output.length < 0) {\n    throw errCode(new Error('cannot have negative byte count'), 'ERR_INVALID_PARAMS');\n  }\n\n  return output;\n};","map":null,"metadata":{},"sourceType":"script"}