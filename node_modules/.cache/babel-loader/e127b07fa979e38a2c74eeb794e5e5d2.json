{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { getProfileForAccount } from '../lib/profile';\nconst addressCache = new Map();\nexport default function useProfileName(account) {\n  const [profileName, setProfileName] = useState(null);\n  useEffect(() => {\n    let cancelled = false;\n\n    async function fetchProfile() {\n      if (addressCache.get(account)) {\n        setProfileName(addressCache.get(account));\n        return;\n      }\n\n      const profile = await getProfileForAccount(account);\n\n      if (profile && !cancelled) {\n        setProfileName(profile.name);\n        addressCache.set(account, profile.name);\n      }\n    }\n\n    fetchProfile();\n    return () => {\n      cancelled = true;\n    };\n  }, [account]);\n  return profileName;\n}","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/hooks/useProfileName.js"],"names":["useEffect","useState","getProfileForAccount","addressCache","Map","useProfileName","account","profileName","setProfileName","cancelled","fetchProfile","get","profile","name","set"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,oBAAT,QAAqC,gBAArC;AAEA,MAAMC,YAAY,GAAG,IAAIC,GAAJ,EAArB;AAEA,eAAe,SAASC,cAAT,CAAwBC,OAAxB,EAAiC;AAC9C,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,IAAD,CAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,SAAS,GAAG,KAAhB;;AACA,mBAAeC,YAAf,GAA8B;AAC5B,UAAIP,YAAY,CAACQ,GAAb,CAAiBL,OAAjB,CAAJ,EAA+B;AAC7BE,QAAAA,cAAc,CAACL,YAAY,CAACQ,GAAb,CAAiBL,OAAjB,CAAD,CAAd;AACA;AACD;;AACD,YAAMM,OAAO,GAAG,MAAMV,oBAAoB,CAACI,OAAD,CAA1C;;AACA,UAAIM,OAAO,IAAI,CAACH,SAAhB,EAA2B;AACzBD,QAAAA,cAAc,CAACI,OAAO,CAACC,IAAT,CAAd;AACAV,QAAAA,YAAY,CAACW,GAAb,CAAiBR,OAAjB,EAA0BM,OAAO,CAACC,IAAlC;AACD;AACF;;AAEDH,IAAAA,YAAY;AACZ,WAAO,MAAM;AACXD,MAAAA,SAAS,GAAG,IAAZ;AACD,KAFD;AAGD,GAlBQ,EAkBN,CAACH,OAAD,CAlBM,CAAT;AAoBA,SAAOC,WAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport { getProfileForAccount } from '../lib/profile'\r\n\r\nconst addressCache = new Map()\r\n\r\nexport default function useProfileName(account) {\r\n  const [profileName, setProfileName] = useState(null)\r\n\r\n  useEffect(() => {\r\n    let cancelled = false\r\n    async function fetchProfile() {\r\n      if (addressCache.get(account)) {\r\n        setProfileName(addressCache.get(account))\r\n        return\r\n      }\r\n      const profile = await getProfileForAccount(account)\r\n      if (profile && !cancelled) {\r\n        setProfileName(profile.name)\r\n        addressCache.set(account, profile.name)\r\n      }\r\n    }\r\n\r\n    fetchProfile()\r\n    return () => {\r\n      cancelled = true\r\n    }\r\n  }, [account])\r\n\r\n  return profileName\r\n}\r\n"]},"metadata":{},"sourceType":"module"}