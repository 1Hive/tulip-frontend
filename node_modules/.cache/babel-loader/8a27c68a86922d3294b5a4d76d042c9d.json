{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('ipld-dag-pb'),\n    DAGLink = _require.DAGLink,\n    DAGNode = _require.DAGNode;\n\nvar _require2 = require('buffer'),\n    Buffer = _require2.Buffer;\n\nvar UnixFS = require('ipfs-unixfs');\n\nvar multihashing = require('multihashing-async');\n\nvar Dir = require('./dir');\n\nvar persist = require('./utils/persist');\n\nvar Bucket = require('hamt-sharding');\n\nvar mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nvar hashFn = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(value) {\n    var hash, justHash, length, result, i;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return multihashing(Buffer.from(value, 'utf8'), 'murmur3-128');\n\n          case 2:\n            hash = _context.sent;\n            // Multihashing inserts preamble of 2 bytes. Remove it.\n            // Also, murmur3 outputs 128 bit but, accidently, IPFS Go's\n            // implementation only uses the first 64, so we must do the same\n            // for parity..\n            justHash = hash.slice(2, 10);\n            length = justHash.length;\n            result = Buffer.alloc(length); // TODO: invert buffer because that's how Go impl does it\n\n            for (i = 0; i < length; i++) {\n              result[length - i - 1] = justHash[i];\n            }\n\n            return _context.abrupt(\"return\", result);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function hashFn(_x6) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nhashFn.code = 0x22; // TODO: get this from multihashing-async?\n\nvar defaultOptions = {\n  hamtHashFn: hashFn,\n  hamtBucketBits: 8\n};\n\nvar DirSharded = /*#__PURE__*/function (_Dir) {\n  _inherits(DirSharded, _Dir);\n\n  var _super = _createSuper(DirSharded);\n\n  function DirSharded(props, options) {\n    var _this3;\n\n    _classCallCheck(this, DirSharded);\n\n    options = mergeOptions(defaultOptions, options);\n    _this3 = _super.call(this, props, options);\n    _this3._bucket = Bucket({\n      hashFn: options.hamtHashFn,\n      bits: options.hamtBucketBits\n    });\n    return _this3;\n  }\n\n  _createClass(DirSharded, [{\n    key: \"put\",\n    value: function () {\n      var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(name, value) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._bucket.put(name, value);\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function put(_x7, _x8) {\n        return _put.apply(this, arguments);\n      }\n\n      return put;\n    }()\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      return this._bucket.get(name);\n    }\n  }, {\n    key: \"childCount\",\n    value: function childCount() {\n      return this._bucket.leafCount();\n    }\n  }, {\n    key: \"directChildrenCount\",\n    value: function directChildrenCount() {\n      return this._bucket.childrenCount();\n    }\n  }, {\n    key: \"onlyChild\",\n    value: function onlyChild() {\n      return this._bucket.onlyChild();\n    }\n  }, {\n    key: \"eachChildSeries\",\n    value: function eachChildSeries() {\n      var _this = this;\n\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _value5, key, value;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context3.prev = 2;\n                _iterator = _asyncIterator(_this._bucket.eachLeafSeries());\n\n              case 4:\n                _context3.next = 6;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 6:\n                _step = _context3.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context3.next = 10;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 10:\n                _value = _context3.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                _value5 = _value, key = _value5.key, value = _value5.value;\n                _context3.next = 15;\n                return {\n                  key: key,\n                  child: value\n                };\n\n              case 15:\n                _iteratorNormalCompletion = true;\n                _context3.next = 4;\n                break;\n\n              case 18:\n                _context3.next = 24;\n                break;\n\n              case 20:\n                _context3.prev = 20;\n                _context3.t0 = _context3[\"catch\"](2);\n                _didIteratorError = true;\n                _iteratorError = _context3.t0;\n\n              case 24:\n                _context3.prev = 24;\n                _context3.prev = 25;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                _context3.next = 29;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 29:\n                _context3.prev = 29;\n\n                if (!_didIteratorError) {\n                  _context3.next = 32;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 32:\n                return _context3.finish(29);\n\n              case 33:\n                return _context3.finish(24);\n\n              case 34:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[2, 20, 24, 34], [25,, 29, 33]]);\n      }))();\n    }\n  }, {\n    key: \"flush\",\n    value: function flush(path, block) {\n      var _this2 = this;\n\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, entry;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _iteratorNormalCompletion2 = true;\n                _didIteratorError2 = false;\n                _context4.prev = 2;\n                _iterator2 = _asyncIterator(_flush2(path, _this2._bucket, block, _this2, _this2.options));\n\n              case 4:\n                _context4.next = 6;\n                return _awaitAsyncGenerator(_iterator2.next());\n\n              case 6:\n                _step2 = _context4.sent;\n                _iteratorNormalCompletion2 = _step2.done;\n                _context4.next = 10;\n                return _awaitAsyncGenerator(_step2.value);\n\n              case 10:\n                _value2 = _context4.sent;\n\n                if (_iteratorNormalCompletion2) {\n                  _context4.next = 18;\n                  break;\n                }\n\n                entry = _value2;\n                _context4.next = 15;\n                return entry;\n\n              case 15:\n                _iteratorNormalCompletion2 = true;\n                _context4.next = 4;\n                break;\n\n              case 18:\n                _context4.next = 24;\n                break;\n\n              case 20:\n                _context4.prev = 20;\n                _context4.t0 = _context4[\"catch\"](2);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context4.t0;\n\n              case 24:\n                _context4.prev = 24;\n                _context4.prev = 25;\n\n                if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n                  _context4.next = 29;\n                  break;\n                }\n\n                _context4.next = 29;\n                return _awaitAsyncGenerator(_iterator2.return());\n\n              case 29:\n                _context4.prev = 29;\n\n                if (!_didIteratorError2) {\n                  _context4.next = 32;\n                  break;\n                }\n\n                throw _iteratorError2;\n\n              case 32:\n                return _context4.finish(29);\n\n              case 33:\n                return _context4.finish(24);\n\n              case 34:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[2, 20, 24, 34], [25,, 29, 33]]);\n      }))();\n    }\n  }]);\n\n  return DirSharded;\n}(Dir);\n\nmodule.exports = DirSharded;\nmodule.exports.hashFn = hashFn;\n\nfunction _flush2(_x, _x2, _x3, _x4, _x5) {\n  return _flush.apply(this, arguments);\n}\n\nfunction _flush() {\n  _flush = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(path, bucket, block, shardRoot, options) {\n    var children, links, childrenSize, i, child, labelPrefix, shard, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _value3, subShard, _dir, flushedDir, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _value4, entry, label, value, _label, _size, data, dir, node, buffer, cid, size;\n\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            children = bucket._children;\n            links = [];\n            childrenSize = 0;\n            i = 0;\n\n          case 4:\n            if (!(i < children.length)) {\n              _context5.next = 105;\n              break;\n            }\n\n            child = children.get(i);\n\n            if (child) {\n              _context5.next = 8;\n              break;\n            }\n\n            return _context5.abrupt(\"continue\", 102);\n\n          case 8:\n            labelPrefix = i.toString(16).toUpperCase().padStart(2, '0');\n\n            if (!Bucket.isBucket(child)) {\n              _context5.next = 52;\n              break;\n            }\n\n            shard = void 0;\n            _iteratorNormalCompletion3 = true;\n            _didIteratorError3 = false;\n            _context5.prev = 13;\n            _context5.t0 = _asyncIterator;\n            _context5.next = 17;\n            return _awaitAsyncGenerator(_flush2('', child, block, null, options));\n\n          case 17:\n            _context5.t1 = _context5.sent;\n            _iterator3 = (0, _context5.t0)(_context5.t1);\n\n          case 19:\n            _context5.next = 21;\n            return _awaitAsyncGenerator(_iterator3.next());\n\n          case 21:\n            _step3 = _context5.sent;\n            _iteratorNormalCompletion3 = _step3.done;\n            _context5.next = 25;\n            return _awaitAsyncGenerator(_step3.value);\n\n          case 25:\n            _value3 = _context5.sent;\n\n            if (_iteratorNormalCompletion3) {\n              _context5.next = 32;\n              break;\n            }\n\n            subShard = _value3;\n            shard = subShard;\n\n          case 29:\n            _iteratorNormalCompletion3 = true;\n            _context5.next = 19;\n            break;\n\n          case 32:\n            _context5.next = 38;\n            break;\n\n          case 34:\n            _context5.prev = 34;\n            _context5.t2 = _context5[\"catch\"](13);\n            _didIteratorError3 = true;\n            _iteratorError3 = _context5.t2;\n\n          case 38:\n            _context5.prev = 38;\n            _context5.prev = 39;\n\n            if (!(!_iteratorNormalCompletion3 && _iterator3.return != null)) {\n              _context5.next = 43;\n              break;\n            }\n\n            _context5.next = 43;\n            return _awaitAsyncGenerator(_iterator3.return());\n\n          case 43:\n            _context5.prev = 43;\n\n            if (!_didIteratorError3) {\n              _context5.next = 46;\n              break;\n            }\n\n            throw _iteratorError3;\n\n          case 46:\n            return _context5.finish(43);\n\n          case 47:\n            return _context5.finish(38);\n\n          case 48:\n            links.push(new DAGLink(labelPrefix, shard.size, shard.cid));\n            childrenSize += shard.size;\n            _context5.next = 102;\n            break;\n\n          case 52:\n            if (!(typeof child.value.flush === 'function')) {\n              _context5.next = 95;\n              break;\n            }\n\n            _dir = child.value;\n            flushedDir = void 0;\n            _iteratorNormalCompletion4 = true;\n            _didIteratorError4 = false;\n            _context5.prev = 57;\n            _iterator4 = _asyncIterator(_dir.flush(_dir.path, block));\n\n          case 59:\n            _context5.next = 61;\n            return _awaitAsyncGenerator(_iterator4.next());\n\n          case 61:\n            _step4 = _context5.sent;\n            _iteratorNormalCompletion4 = _step4.done;\n            _context5.next = 65;\n            return _awaitAsyncGenerator(_step4.value);\n\n          case 65:\n            _value4 = _context5.sent;\n\n            if (_iteratorNormalCompletion4) {\n              _context5.next = 74;\n              break;\n            }\n\n            entry = _value4;\n            flushedDir = entry;\n            _context5.next = 71;\n            return flushedDir;\n\n          case 71:\n            _iteratorNormalCompletion4 = true;\n            _context5.next = 59;\n            break;\n\n          case 74:\n            _context5.next = 80;\n            break;\n\n          case 76:\n            _context5.prev = 76;\n            _context5.t3 = _context5[\"catch\"](57);\n            _didIteratorError4 = true;\n            _iteratorError4 = _context5.t3;\n\n          case 80:\n            _context5.prev = 80;\n            _context5.prev = 81;\n\n            if (!(!_iteratorNormalCompletion4 && _iterator4.return != null)) {\n              _context5.next = 85;\n              break;\n            }\n\n            _context5.next = 85;\n            return _awaitAsyncGenerator(_iterator4.return());\n\n          case 85:\n            _context5.prev = 85;\n\n            if (!_didIteratorError4) {\n              _context5.next = 88;\n              break;\n            }\n\n            throw _iteratorError4;\n\n          case 88:\n            return _context5.finish(85);\n\n          case 89:\n            return _context5.finish(80);\n\n          case 90:\n            label = labelPrefix + child.key;\n            links.push(new DAGLink(label, flushedDir.size, flushedDir.cid));\n            childrenSize += flushedDir.size;\n            _context5.next = 102;\n            break;\n\n          case 95:\n            value = child.value;\n\n            if (value.cid) {\n              _context5.next = 98;\n              break;\n            }\n\n            return _context5.abrupt(\"continue\", 102);\n\n          case 98:\n            _label = labelPrefix + child.key;\n            _size = value.size;\n            links.push(new DAGLink(_label, _size, value.cid));\n            childrenSize += _size;\n\n          case 102:\n            i++;\n            _context5.next = 4;\n            break;\n\n          case 105:\n            // go-ipfs uses little endian, that's why we have to\n            // reverse the bit field before storing it\n            data = Buffer.from(children.bitField().reverse());\n            dir = new UnixFS({\n              type: 'hamt-sharded-directory',\n              data: data,\n              fanout: bucket.tableSize(),\n              hashType: options.hamtHashFn.code,\n              mtime: shardRoot && shardRoot.mtime,\n              mode: shardRoot && shardRoot.mode\n            });\n            node = new DAGNode(dir.marshal(), links);\n            buffer = node.serialize();\n            _context5.next = 111;\n            return _awaitAsyncGenerator(persist(buffer, block, options));\n\n          case 111:\n            cid = _context5.sent;\n            size = buffer.length + childrenSize;\n            _context5.next = 115;\n            return {\n              cid: cid,\n              unixfs: dir,\n              path: path,\n              size: size\n            };\n\n          case 115:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[13, 34, 38, 48], [39,, 43, 47], [57, 76, 80, 90], [81,, 85, 89]]);\n  }));\n  return _flush.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"script"}