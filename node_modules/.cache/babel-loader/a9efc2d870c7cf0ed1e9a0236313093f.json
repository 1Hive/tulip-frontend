{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _asyncGeneratorDelegate = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\");\n\nvar CID = require('cids');\n\nvar errCode = require('err-code');\n\nvar _require = require('streaming-iterables'),\n    parallelMap = _require.parallelMap,\n    filter = _require.filter;\n\nvar pipe = require('it-pipe');\n\nvar _require2 = require('../pin/pin-manager'),\n    PinTypes = _require2.PinTypes;\n\nvar _require3 = require('./utils'),\n    cleanCid = _require3.cleanCid;\n\nvar _require4 = require('../../utils'),\n    withTimeoutOption = _require4.withTimeoutOption;\n\nvar BLOCK_RM_CONCURRENCY = 8;\n\nmodule.exports = function (_ref) {\n  var blockService = _ref.blockService,\n      gcLock = _ref.gcLock,\n      pinManager = _ref.pinManager;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _rm = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(cids, options) {\n      var release;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              options = options || {};\n\n              if (!Array.isArray(cids)) {\n                cids = [cids];\n              } // We need to take a write lock here to ensure that adding and removing\n              // blocks are exclusive operations\n\n\n              _context2.next = 4;\n              return _awaitAsyncGenerator(gcLock.writeLock());\n\n            case 4:\n              release = _context2.sent;\n              _context2.prev = 5;\n              return _context2.delegateYield(_asyncGeneratorDelegate(_asyncIterator(pipe(cids, parallelMap(BLOCK_RM_CONCURRENCY, /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cid) {\n                  var result, pinResult, has;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          cid = cleanCid(cid);\n                          result = {\n                            cid: cid\n                          };\n                          _context.prev = 2;\n                          _context.next = 5;\n                          return pinManager.isPinnedWithType(cid, PinTypes.all);\n\n                        case 5:\n                          pinResult = _context.sent;\n\n                          if (!pinResult.pinned) {\n                            _context.next = 10;\n                            break;\n                          }\n\n                          if (!CID.isCID(pinResult.reason)) {\n                            _context.next = 9;\n                            break;\n                          }\n\n                          throw errCode(new Error(\"pinned via \".concat(pinResult.reason)));\n\n                        case 9:\n                          throw errCode(new Error(\"pinned: \".concat(pinResult.reason)));\n\n                        case 10:\n                          _context.next = 12;\n                          return blockService._repo.blocks.has(cid);\n\n                        case 12:\n                          has = _context.sent;\n\n                          if (has) {\n                            _context.next = 15;\n                            break;\n                          }\n\n                          throw errCode(new Error('block not found'), 'ERR_BLOCK_NOT_FOUND');\n\n                        case 15:\n                          _context.next = 17;\n                          return blockService.delete(cid);\n\n                        case 17:\n                          _context.next = 22;\n                          break;\n\n                        case 19:\n                          _context.prev = 19;\n                          _context.t0 = _context[\"catch\"](2);\n\n                          if (!options.force) {\n                            _context.t0.message = \"cannot remove \".concat(cid, \": \").concat(_context.t0.message);\n                            result.error = _context.t0;\n                          }\n\n                        case 22:\n                          return _context.abrupt(\"return\", result);\n\n                        case 23:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, null, [[2, 19]]);\n                }));\n\n                return function (_x3) {\n                  return _ref2.apply(this, arguments);\n                };\n              }()), filter(function () {\n                return !options.quiet;\n              }))), _awaitAsyncGenerator), \"t0\", 7);\n\n            case 7:\n              _context2.prev = 7;\n              release();\n              return _context2.finish(7);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[5,, 7, 10]]);\n    }));\n\n    function rm(_x, _x2) {\n      return _rm.apply(this, arguments);\n    }\n\n    return rm;\n  }());\n};","map":null,"metadata":{},"sourceType":"script"}