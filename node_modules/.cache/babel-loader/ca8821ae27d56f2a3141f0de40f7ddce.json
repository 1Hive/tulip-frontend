{"ast":null,"code":"'use strict';\n\nvar _commonjsHelpers = require('./_commonjsHelpers-1b94f6bc.js');\n\nvar environment = require('./environment.js');\n\nvar sha3 = _commonjsHelpers.createCommonjsModule(function (module) {\n  /**\n   * [js-sha3]{@link https://github.com/emn178/js-sha3}\n   *\n   * @version 0.8.0\n   * @author Chen, Yi-Cyuan [emn178@gmail.com]\n   * @copyright Chen, Yi-Cyuan 2015-2018\n   * @license MIT\n   */\n\n  /*jslint bitwise: true */\n  (function () {\n    var INPUT_ERROR = 'input is invalid type';\n    var FINALIZE_ERROR = 'finalize already called';\n    var WINDOW = typeof window === 'object';\n    var root = WINDOW ? window : {};\n\n    if (root.JS_SHA3_NO_WINDOW) {\n      WINDOW = false;\n    }\n\n    var WEB_WORKER = !WINDOW && typeof self === 'object';\n    var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n\n    if (NODE_JS) {\n      root = _commonjsHelpers.commonjsGlobal;\n    } else if (WEB_WORKER) {\n      root = self;\n    }\n\n    var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;\n    var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n    var HEX_CHARS = '0123456789abcdef'.split('');\n    var SHAKE_PADDING = [31, 7936, 2031616, 520093696];\n    var CSHAKE_PADDING = [4, 1024, 262144, 67108864];\n    var KECCAK_PADDING = [1, 256, 65536, 16777216];\n    var PADDING = [6, 1536, 393216, 100663296];\n    var SHIFT = [0, 8, 16, 24];\n    var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\n    var BITS = [224, 256, 384, 512];\n    var SHAKE_BITS = [128, 256];\n    var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];\n    var CSHAKE_BYTEPAD = {\n      '128': 168,\n      '256': 136\n    };\n\n    if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {\n      Array.isArray = function (obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n      };\n    }\n\n    if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n      ArrayBuffer.isView = function (obj) {\n        return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n      };\n    }\n\n    var createOutputMethod = function (bits, padding, outputType) {\n      return function (message) {\n        return new Keccak(bits, padding, bits).update(message)[outputType]();\n      };\n    };\n\n    var createShakeOutputMethod = function (bits, padding, outputType) {\n      return function (message, outputBits) {\n        return new Keccak(bits, padding, outputBits).update(message)[outputType]();\n      };\n    };\n\n    var createCshakeOutputMethod = function (bits, padding, outputType) {\n      return function (message, outputBits, n, s) {\n        return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();\n      };\n    };\n\n    var createKmacOutputMethod = function (bits, padding, outputType) {\n      return function (key, message, outputBits, s) {\n        return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();\n      };\n    };\n\n    var createOutputMethods = function (method, createMethod, bits, padding) {\n      for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n        var type = OUTPUT_TYPES[i];\n        method[type] = createMethod(bits, padding, type);\n      }\n\n      return method;\n    };\n\n    var createMethod = function (bits, padding) {\n      var method = createOutputMethod(bits, padding, 'hex');\n\n      method.create = function () {\n        return new Keccak(bits, padding, bits);\n      };\n\n      method.update = function (message) {\n        return method.create().update(message);\n      };\n\n      return createOutputMethods(method, createOutputMethod, bits, padding);\n    };\n\n    var createShakeMethod = function (bits, padding) {\n      var method = createShakeOutputMethod(bits, padding, 'hex');\n\n      method.create = function (outputBits) {\n        return new Keccak(bits, padding, outputBits);\n      };\n\n      method.update = function (message, outputBits) {\n        return method.create(outputBits).update(message);\n      };\n\n      return createOutputMethods(method, createShakeOutputMethod, bits, padding);\n    };\n\n    var createCshakeMethod = function (bits, padding) {\n      var w = CSHAKE_BYTEPAD[bits];\n      var method = createCshakeOutputMethod(bits, padding, 'hex');\n\n      method.create = function (outputBits, n, s) {\n        if (!n && !s) {\n          return methods['shake' + bits].create(outputBits);\n        } else {\n          return new Keccak(bits, padding, outputBits).bytepad([n, s], w);\n        }\n      };\n\n      method.update = function (message, outputBits, n, s) {\n        return method.create(outputBits, n, s).update(message);\n      };\n\n      return createOutputMethods(method, createCshakeOutputMethod, bits, padding);\n    };\n\n    var createKmacMethod = function (bits, padding) {\n      var w = CSHAKE_BYTEPAD[bits];\n      var method = createKmacOutputMethod(bits, padding, 'hex');\n\n      method.create = function (key, outputBits, s) {\n        return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);\n      };\n\n      method.update = function (key, message, outputBits, s) {\n        return method.create(key, outputBits, s).update(message);\n      };\n\n      return createOutputMethods(method, createKmacOutputMethod, bits, padding);\n    };\n\n    var algorithms = [{\n      name: 'keccak',\n      padding: KECCAK_PADDING,\n      bits: BITS,\n      createMethod: createMethod\n    }, {\n      name: 'sha3',\n      padding: PADDING,\n      bits: BITS,\n      createMethod: createMethod\n    }, {\n      name: 'shake',\n      padding: SHAKE_PADDING,\n      bits: SHAKE_BITS,\n      createMethod: createShakeMethod\n    }, {\n      name: 'cshake',\n      padding: CSHAKE_PADDING,\n      bits: SHAKE_BITS,\n      createMethod: createCshakeMethod\n    }, {\n      name: 'kmac',\n      padding: CSHAKE_PADDING,\n      bits: SHAKE_BITS,\n      createMethod: createKmacMethod\n    }];\n    var methods = {},\n        methodNames = [];\n\n    for (var i = 0; i < algorithms.length; ++i) {\n      var algorithm = algorithms[i];\n      var bits = algorithm.bits;\n\n      for (var j = 0; j < bits.length; ++j) {\n        var methodName = algorithm.name + '_' + bits[j];\n        methodNames.push(methodName);\n        methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);\n\n        if (algorithm.name !== 'sha3') {\n          var newMethodName = algorithm.name + bits[j];\n          methodNames.push(newMethodName);\n          methods[newMethodName] = methods[methodName];\n        }\n      }\n    }\n\n    function Keccak(bits, padding, outputBits) {\n      this.blocks = [];\n      this.s = [];\n      this.padding = padding;\n      this.outputBits = outputBits;\n      this.reset = true;\n      this.finalized = false;\n      this.block = 0;\n      this.start = 0;\n      this.blockCount = 1600 - (bits << 1) >> 5;\n      this.byteCount = this.blockCount << 2;\n      this.outputBlocks = outputBits >> 5;\n      this.extraBytes = (outputBits & 31) >> 3;\n\n      for (var i = 0; i < 50; ++i) {\n        this.s[i] = 0;\n      }\n    }\n\n    Keccak.prototype.update = function (message) {\n      if (this.finalized) {\n        throw new Error(FINALIZE_ERROR);\n      }\n\n      var notString,\n          type = typeof message;\n\n      if (type !== 'string') {\n        if (type === 'object') {\n          if (message === null) {\n            throw new Error(INPUT_ERROR);\n          } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n            message = new Uint8Array(message);\n          } else if (!Array.isArray(message)) {\n            if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n              throw new Error(INPUT_ERROR);\n            }\n          }\n        } else {\n          throw new Error(INPUT_ERROR);\n        }\n\n        notString = true;\n      }\n\n      var blocks = this.blocks,\n          byteCount = this.byteCount,\n          length = message.length,\n          blockCount = this.blockCount,\n          index = 0,\n          s = this.s,\n          i,\n          code;\n\n      while (index < length) {\n        if (this.reset) {\n          this.reset = false;\n          blocks[0] = this.block;\n\n          for (i = 1; i < blockCount + 1; ++i) {\n            blocks[i] = 0;\n          }\n        }\n\n        if (notString) {\n          for (i = this.start; index < length && i < byteCount; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        } else {\n          for (i = this.start; index < length && i < byteCount; ++index) {\n            code = message.charCodeAt(index);\n\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);\n              blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n            }\n          }\n        }\n\n        this.lastByteIndex = i;\n\n        if (i >= byteCount) {\n          this.start = i - byteCount;\n          this.block = blocks[blockCount];\n\n          for (i = 0; i < blockCount; ++i) {\n            s[i] ^= blocks[i];\n          }\n\n          f(s);\n          this.reset = true;\n        } else {\n          this.start = i;\n        }\n      }\n\n      return this;\n    };\n\n    Keccak.prototype.encode = function (x, right) {\n      var o = x & 255,\n          n = 1;\n      var bytes = [o];\n      x = x >> 8;\n      o = x & 255;\n\n      while (o > 0) {\n        bytes.unshift(o);\n        x = x >> 8;\n        o = x & 255;\n        ++n;\n      }\n\n      if (right) {\n        bytes.push(n);\n      } else {\n        bytes.unshift(n);\n      }\n\n      this.update(bytes);\n      return bytes.length;\n    };\n\n    Keccak.prototype.encodeString = function (str) {\n      var notString,\n          type = typeof str;\n\n      if (type !== 'string') {\n        if (type === 'object') {\n          if (str === null) {\n            throw new Error(INPUT_ERROR);\n          } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {\n            str = new Uint8Array(str);\n          } else if (!Array.isArray(str)) {\n            if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {\n              throw new Error(INPUT_ERROR);\n            }\n          }\n        } else {\n          throw new Error(INPUT_ERROR);\n        }\n\n        notString = true;\n      }\n\n      var bytes = 0,\n          length = str.length;\n\n      if (notString) {\n        bytes = length;\n      } else {\n        for (var i = 0; i < str.length; ++i) {\n          var code = str.charCodeAt(i);\n\n          if (code < 0x80) {\n            bytes += 1;\n          } else if (code < 0x800) {\n            bytes += 2;\n          } else if (code < 0xd800 || code >= 0xe000) {\n            bytes += 3;\n          } else {\n            code = 0x10000 + ((code & 0x3ff) << 10 | str.charCodeAt(++i) & 0x3ff);\n            bytes += 4;\n          }\n        }\n      }\n\n      bytes += this.encode(bytes * 8);\n      this.update(str);\n      return bytes;\n    };\n\n    Keccak.prototype.bytepad = function (strs, w) {\n      var bytes = this.encode(w);\n\n      for (var i = 0; i < strs.length; ++i) {\n        bytes += this.encodeString(strs[i]);\n      }\n\n      var paddingBytes = w - bytes % w;\n      var zeros = [];\n      zeros.length = paddingBytes;\n      this.update(zeros);\n      return this;\n    };\n\n    Keccak.prototype.finalize = function () {\n      if (this.finalized) {\n        return;\n      }\n\n      this.finalized = true;\n      var blocks = this.blocks,\n          i = this.lastByteIndex,\n          blockCount = this.blockCount,\n          s = this.s;\n      blocks[i >> 2] |= this.padding[i & 3];\n\n      if (this.lastByteIndex === this.byteCount) {\n        blocks[0] = blocks[blockCount];\n\n        for (i = 1; i < blockCount + 1; ++i) {\n          blocks[i] = 0;\n        }\n      }\n\n      blocks[blockCount - 1] |= 0x80000000;\n\n      for (i = 0; i < blockCount; ++i) {\n        s[i] ^= blocks[i];\n      }\n\n      f(s);\n    };\n\n    Keccak.prototype.toString = Keccak.prototype.hex = function () {\n      this.finalize();\n      var blockCount = this.blockCount,\n          s = this.s,\n          outputBlocks = this.outputBlocks,\n          extraBytes = this.extraBytes,\n          i = 0,\n          j = 0;\n      var hex = '',\n          block;\n\n      while (j < outputBlocks) {\n        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n          block = s[i];\n          hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];\n        }\n\n        if (j % blockCount === 0) {\n          f(s);\n          i = 0;\n        }\n      }\n\n      if (extraBytes) {\n        block = s[i];\n        hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F];\n\n        if (extraBytes > 1) {\n          hex += HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F];\n        }\n\n        if (extraBytes > 2) {\n          hex += HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F];\n        }\n      }\n\n      return hex;\n    };\n\n    Keccak.prototype.arrayBuffer = function () {\n      this.finalize();\n      var blockCount = this.blockCount,\n          s = this.s,\n          outputBlocks = this.outputBlocks,\n          extraBytes = this.extraBytes,\n          i = 0,\n          j = 0;\n      var bytes = this.outputBits >> 3;\n      var buffer;\n\n      if (extraBytes) {\n        buffer = new ArrayBuffer(outputBlocks + 1 << 2);\n      } else {\n        buffer = new ArrayBuffer(bytes);\n      }\n\n      var array = new Uint32Array(buffer);\n\n      while (j < outputBlocks) {\n        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n          array[j] = s[i];\n        }\n\n        if (j % blockCount === 0) {\n          f(s);\n        }\n      }\n\n      if (extraBytes) {\n        array[i] = s[i];\n        buffer = buffer.slice(0, bytes);\n      }\n\n      return buffer;\n    };\n\n    Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;\n\n    Keccak.prototype.digest = Keccak.prototype.array = function () {\n      this.finalize();\n      var blockCount = this.blockCount,\n          s = this.s,\n          outputBlocks = this.outputBlocks,\n          extraBytes = this.extraBytes,\n          i = 0,\n          j = 0;\n      var array = [],\n          offset,\n          block;\n\n      while (j < outputBlocks) {\n        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n          offset = j << 2;\n          block = s[i];\n          array[offset] = block & 0xFF;\n          array[offset + 1] = block >> 8 & 0xFF;\n          array[offset + 2] = block >> 16 & 0xFF;\n          array[offset + 3] = block >> 24 & 0xFF;\n        }\n\n        if (j % blockCount === 0) {\n          f(s);\n        }\n      }\n\n      if (extraBytes) {\n        offset = j << 2;\n        block = s[i];\n        array[offset] = block & 0xFF;\n\n        if (extraBytes > 1) {\n          array[offset + 1] = block >> 8 & 0xFF;\n        }\n\n        if (extraBytes > 2) {\n          array[offset + 2] = block >> 16 & 0xFF;\n        }\n      }\n\n      return array;\n    };\n\n    function Kmac(bits, padding, outputBits) {\n      Keccak.call(this, bits, padding, outputBits);\n    }\n\n    Kmac.prototype = new Keccak();\n\n    Kmac.prototype.finalize = function () {\n      this.encode(this.outputBits, true);\n      return Keccak.prototype.finalize.call(this);\n    };\n\n    var f = function (s) {\n      var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n\n      for (n = 0; n < 48; n += 2) {\n        c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n        c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n        c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n        c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n        c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n        c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n        c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n        c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n        c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n        c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n        h = c8 ^ (c2 << 1 | c3 >>> 31);\n        l = c9 ^ (c3 << 1 | c2 >>> 31);\n        s[0] ^= h;\n        s[1] ^= l;\n        s[10] ^= h;\n        s[11] ^= l;\n        s[20] ^= h;\n        s[21] ^= l;\n        s[30] ^= h;\n        s[31] ^= l;\n        s[40] ^= h;\n        s[41] ^= l;\n        h = c0 ^ (c4 << 1 | c5 >>> 31);\n        l = c1 ^ (c5 << 1 | c4 >>> 31);\n        s[2] ^= h;\n        s[3] ^= l;\n        s[12] ^= h;\n        s[13] ^= l;\n        s[22] ^= h;\n        s[23] ^= l;\n        s[32] ^= h;\n        s[33] ^= l;\n        s[42] ^= h;\n        s[43] ^= l;\n        h = c2 ^ (c6 << 1 | c7 >>> 31);\n        l = c3 ^ (c7 << 1 | c6 >>> 31);\n        s[4] ^= h;\n        s[5] ^= l;\n        s[14] ^= h;\n        s[15] ^= l;\n        s[24] ^= h;\n        s[25] ^= l;\n        s[34] ^= h;\n        s[35] ^= l;\n        s[44] ^= h;\n        s[45] ^= l;\n        h = c4 ^ (c8 << 1 | c9 >>> 31);\n        l = c5 ^ (c9 << 1 | c8 >>> 31);\n        s[6] ^= h;\n        s[7] ^= l;\n        s[16] ^= h;\n        s[17] ^= l;\n        s[26] ^= h;\n        s[27] ^= l;\n        s[36] ^= h;\n        s[37] ^= l;\n        s[46] ^= h;\n        s[47] ^= l;\n        h = c6 ^ (c0 << 1 | c1 >>> 31);\n        l = c7 ^ (c1 << 1 | c0 >>> 31);\n        s[8] ^= h;\n        s[9] ^= l;\n        s[18] ^= h;\n        s[19] ^= l;\n        s[28] ^= h;\n        s[29] ^= l;\n        s[38] ^= h;\n        s[39] ^= l;\n        s[48] ^= h;\n        s[49] ^= l;\n        b0 = s[0];\n        b1 = s[1];\n        b32 = s[11] << 4 | s[10] >>> 28;\n        b33 = s[10] << 4 | s[11] >>> 28;\n        b14 = s[20] << 3 | s[21] >>> 29;\n        b15 = s[21] << 3 | s[20] >>> 29;\n        b46 = s[31] << 9 | s[30] >>> 23;\n        b47 = s[30] << 9 | s[31] >>> 23;\n        b28 = s[40] << 18 | s[41] >>> 14;\n        b29 = s[41] << 18 | s[40] >>> 14;\n        b20 = s[2] << 1 | s[3] >>> 31;\n        b21 = s[3] << 1 | s[2] >>> 31;\n        b2 = s[13] << 12 | s[12] >>> 20;\n        b3 = s[12] << 12 | s[13] >>> 20;\n        b34 = s[22] << 10 | s[23] >>> 22;\n        b35 = s[23] << 10 | s[22] >>> 22;\n        b16 = s[33] << 13 | s[32] >>> 19;\n        b17 = s[32] << 13 | s[33] >>> 19;\n        b48 = s[42] << 2 | s[43] >>> 30;\n        b49 = s[43] << 2 | s[42] >>> 30;\n        b40 = s[5] << 30 | s[4] >>> 2;\n        b41 = s[4] << 30 | s[5] >>> 2;\n        b22 = s[14] << 6 | s[15] >>> 26;\n        b23 = s[15] << 6 | s[14] >>> 26;\n        b4 = s[25] << 11 | s[24] >>> 21;\n        b5 = s[24] << 11 | s[25] >>> 21;\n        b36 = s[34] << 15 | s[35] >>> 17;\n        b37 = s[35] << 15 | s[34] >>> 17;\n        b18 = s[45] << 29 | s[44] >>> 3;\n        b19 = s[44] << 29 | s[45] >>> 3;\n        b10 = s[6] << 28 | s[7] >>> 4;\n        b11 = s[7] << 28 | s[6] >>> 4;\n        b42 = s[17] << 23 | s[16] >>> 9;\n        b43 = s[16] << 23 | s[17] >>> 9;\n        b24 = s[26] << 25 | s[27] >>> 7;\n        b25 = s[27] << 25 | s[26] >>> 7;\n        b6 = s[36] << 21 | s[37] >>> 11;\n        b7 = s[37] << 21 | s[36] >>> 11;\n        b38 = s[47] << 24 | s[46] >>> 8;\n        b39 = s[46] << 24 | s[47] >>> 8;\n        b30 = s[8] << 27 | s[9] >>> 5;\n        b31 = s[9] << 27 | s[8] >>> 5;\n        b12 = s[18] << 20 | s[19] >>> 12;\n        b13 = s[19] << 20 | s[18] >>> 12;\n        b44 = s[29] << 7 | s[28] >>> 25;\n        b45 = s[28] << 7 | s[29] >>> 25;\n        b26 = s[38] << 8 | s[39] >>> 24;\n        b27 = s[39] << 8 | s[38] >>> 24;\n        b8 = s[48] << 14 | s[49] >>> 18;\n        b9 = s[49] << 14 | s[48] >>> 18;\n        s[0] = b0 ^ ~b2 & b4;\n        s[1] = b1 ^ ~b3 & b5;\n        s[10] = b10 ^ ~b12 & b14;\n        s[11] = b11 ^ ~b13 & b15;\n        s[20] = b20 ^ ~b22 & b24;\n        s[21] = b21 ^ ~b23 & b25;\n        s[30] = b30 ^ ~b32 & b34;\n        s[31] = b31 ^ ~b33 & b35;\n        s[40] = b40 ^ ~b42 & b44;\n        s[41] = b41 ^ ~b43 & b45;\n        s[2] = b2 ^ ~b4 & b6;\n        s[3] = b3 ^ ~b5 & b7;\n        s[12] = b12 ^ ~b14 & b16;\n        s[13] = b13 ^ ~b15 & b17;\n        s[22] = b22 ^ ~b24 & b26;\n        s[23] = b23 ^ ~b25 & b27;\n        s[32] = b32 ^ ~b34 & b36;\n        s[33] = b33 ^ ~b35 & b37;\n        s[42] = b42 ^ ~b44 & b46;\n        s[43] = b43 ^ ~b45 & b47;\n        s[4] = b4 ^ ~b6 & b8;\n        s[5] = b5 ^ ~b7 & b9;\n        s[14] = b14 ^ ~b16 & b18;\n        s[15] = b15 ^ ~b17 & b19;\n        s[24] = b24 ^ ~b26 & b28;\n        s[25] = b25 ^ ~b27 & b29;\n        s[34] = b34 ^ ~b36 & b38;\n        s[35] = b35 ^ ~b37 & b39;\n        s[44] = b44 ^ ~b46 & b48;\n        s[45] = b45 ^ ~b47 & b49;\n        s[6] = b6 ^ ~b8 & b0;\n        s[7] = b7 ^ ~b9 & b1;\n        s[16] = b16 ^ ~b18 & b10;\n        s[17] = b17 ^ ~b19 & b11;\n        s[26] = b26 ^ ~b28 & b20;\n        s[27] = b27 ^ ~b29 & b21;\n        s[36] = b36 ^ ~b38 & b30;\n        s[37] = b37 ^ ~b39 & b31;\n        s[46] = b46 ^ ~b48 & b40;\n        s[47] = b47 ^ ~b49 & b41;\n        s[8] = b8 ^ ~b0 & b2;\n        s[9] = b9 ^ ~b1 & b3;\n        s[18] = b18 ^ ~b10 & b12;\n        s[19] = b19 ^ ~b11 & b13;\n        s[28] = b28 ^ ~b20 & b22;\n        s[29] = b29 ^ ~b21 & b23;\n        s[38] = b38 ^ ~b30 & b32;\n        s[39] = b39 ^ ~b31 & b33;\n        s[48] = b48 ^ ~b40 & b42;\n        s[49] = b49 ^ ~b41 & b43;\n        s[0] ^= RC[n];\n        s[1] ^= RC[n + 1];\n      }\n    };\n\n    if (COMMON_JS) {\n      module.exports = methods;\n    } else {\n      for (i = 0; i < methodNames.length; ++i) {\n        root[methodNames[i]] = methods[methodNames[i]];\n      }\n    }\n  })();\n});\n\nvar keccak256 = sha3.keccak_256;\nvar EMPTY_ADDRESS = '0x0000000000000000000000000000000000000000';\nvar TRANSACTION_REGEX = /^0x[A-Fa-f0-9]{64}$/;\nvar ADDRESS_REGEX = /^0x[0-9a-fA-F]{40}$/;\nvar TRUST_WALLET_BASE_URL = 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum';\nvar ETHERSCAN_NETWORK_TYPES = new Map([['main', ''], ['kovan', 'kovan.'], ['rinkeby', 'rinkeby.'], ['ropsten', 'ropsten.'], ['goerli', 'goerli.']]);\nvar ETHERSCAN_TYPES = new Map([['block', 'block'], ['transaction', 'tx'], ['address', 'address'], ['token', 'token']]);\nvar BLOCK_EXPLORERS = {\n  etherscan: function etherscan(_ref) {\n    var type = _ref.type,\n        value = _ref.value,\n        networkType = _ref.networkType;\n\n    if (networkType === 'private') {\n      return '';\n    }\n\n    if (!ETHERSCAN_NETWORK_TYPES.has(networkType)) {\n      throw new Error('provider not supported.');\n    }\n\n    if (!ETHERSCAN_TYPES.has(type)) {\n      throw new Error('type not supported.');\n    }\n\n    var subdomain = ETHERSCAN_NETWORK_TYPES.get(networkType);\n    var typePart = ETHERSCAN_TYPES.get(type);\n    return \"https://\".concat(subdomain, \"etherscan.io/\").concat(typePart, \"/\").concat(value);\n  }\n};\n/**\n * Converts to a checksum address\n *\n * This function is taken from web3-utils:\n * https://github.com/ethereum/web3.js/blob/22df832303e349f8ae02f0392e56abe10e1dfaac/packages/web3-utils/src/index.js#L287-L315\n * And was adapted to use js-sha3 rather than soliditySha3.js from web3.js, in\n * order to avoid adding the BN.js and underscore dependencies.\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX address\n * @returns {String}\n */\n\nfunction toChecksumAddress(address) {\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n    throw new Error('Given address \"' + address + '\" is not a valid Ethereum address.');\n  }\n\n  address = address.toLowerCase().replace(/^0x/i, '');\n  var addressHash = keccak256(address).replace(/^0x/i, '');\n  var checksumAddress = '0x';\n\n  for (var i = 0; i < address.length; i++) {\n    // If ith character is 9 to f then make it uppercase\n    if (parseInt(addressHash[i], 16) > 7) {\n      checksumAddress += address[i].toUpperCase();\n    } else {\n      checksumAddress += address[i];\n    }\n  }\n\n  return checksumAddress;\n}\n/**\n * Check address equality without checksums\n * @param {string} first First address\n * @param {string} second Second address\n * @returns {boolean} Address equality\n */\n\n\nfunction addressesEqual(first, second) {\n  first = first && first.toLowerCase();\n  second = second && second.toLowerCase();\n  return first === second;\n}\n/**\n * Shorten an Ethereum address. `charsLength` allows to change the number of\n * characters on both sides of the ellipsis.\n *\n * Examples:\n *   shortenAddress('0x19731977931271')    // 0x1973…1271\n *   shortenAddress('0x19731977931271', 2) // 0x19…71\n *   shortenAddress('0x197319')            // 0x197319 (already short enough)\n *\n * @param {string} address The address to shorten\n * @param {number} [charsLength=4] The number of characters to change on both sides of the ellipsis\n * @returns {string} The shortened address\n */\n\n\nfunction shortenAddress(address) {\n  var charsLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  var prefixLength = 2; // \"0x\"\n\n  if (!address) {\n    return '';\n  }\n\n  if (address.length < charsLength * 2 + prefixLength) {\n    return address;\n  }\n\n  return address.slice(0, charsLength + prefixLength) + '…' + address.slice(-charsLength);\n}\n/**\n * Alias for shortenAddress (to generalize its use)\n */\n\n\nvar shortenTransaction = shortenAddress;\n/**\n *\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {string} address the given HEX address\n * @returns {boolean}\n */\n\nfunction isAddress(address) {\n  return ADDRESS_REGEX.test(address);\n}\n/**\n *\n * Checks if the given string is a transaction\n *\n * @method isTransaction\n * @param {string} address the given HEX address\n * @returns {boolean}\n */\n\n\nfunction isTransaction(transaction) {\n  return TRANSACTION_REGEX.test(transaction);\n}\n/**\n * Generates an etherscan URL\n *\n * @param {string} type The type of URL (block, transaction, address or token).\n * @param {string} value Identifier of the object, depending on the type (block number, transaction hash, …).\n * @param {object} options The optional parameters.\n * @param {string} options.networkType The Ethereum network type (main, kovan, rinkeby, ropsten, goerli, or private).\n * @param {string} options.provider The explorer provider (e.g. etherscan).\n * @returns {string} The generated URL, or an empty string if the parameters are invalid.\n */\n\n\nfunction blockExplorerUrl(type, value) {\n  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref2$networkType = _ref2.networkType,\n      networkType = _ref2$networkType === void 0 ? 'main' : _ref2$networkType,\n      _ref2$provider = _ref2.provider,\n      provider = _ref2$provider === void 0 ? 'etherscan' : _ref2$provider;\n\n  var explorer = BLOCK_EXPLORERS[provider];\n\n  if (!explorer) {\n    environment.warn('blockExplorerUrl(): provider not supported.');\n    return '';\n  }\n\n  try {\n    return explorer({\n      type: type,\n      value: value,\n      networkType: networkType\n    });\n  } catch (err) {\n    environment.warn(\"blockExplorerUrl(): \".concat(err.message));\n    return '';\n  }\n}\n/**\n * Get the address of a token icon\n *\n * @param {string} address The contract address of the token, or the zero address (0x000…) to get the Ethereum icon.\n * @returns {string} The generated URL, or an empty string if the parameters are invalid.\n */\n\n\nfunction tokenIconUrl() {\n  var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  try {\n    address = toChecksumAddress(address.trim());\n  } catch (err) {\n    return '';\n  }\n\n  if (address === EMPTY_ADDRESS) {\n    return \"\".concat(TRUST_WALLET_BASE_URL, \"/info/logo.png\");\n  }\n\n  return \"\".concat(TRUST_WALLET_BASE_URL, \"/assets/\").concat(address, \"/logo.png\");\n}\n\nexports.addressesEqual = addressesEqual;\nexports.blockExplorerUrl = blockExplorerUrl;\nexports.isAddress = isAddress;\nexports.isTransaction = isTransaction;\nexports.sha3 = sha3;\nexports.shortenAddress = shortenAddress;\nexports.shortenTransaction = shortenTransaction;\nexports.tokenIconUrl = tokenIconUrl;","map":{"version":3,"sources":["../node_modules/js-sha3/src/sha3.js","../src/utils/web3.js"],"names":["global","keccak_256","keccak256","sha3","EMPTY_ADDRESS","TRANSACTION_REGEX","ADDRESS_REGEX","TRUST_WALLET_BASE_URL","ETHERSCAN_NETWORK_TYPES","ETHERSCAN_TYPES","BLOCK_EXPLORERS","etherscan","type","value","networkType","subdomain","typePart","address","addressHash","checksumAddress","i","parseInt","first","second","charsLength","prefixLength","shortenTransaction","shortenAddress","provider","explorer","warn","err","toChecksumAddress"],"mappings":"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","sourcesContent":["/**\n * [js-sha3]{@link https://github.com/emn178/js-sha3}\n *\n * @version 0.8.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2015-2018\n * @license MIT\n */\n/*jslint bitwise: true */\n(function () {\n  'use strict';\n\n  var INPUT_ERROR = 'input is invalid type';\n  var FINALIZE_ERROR = 'finalize already called';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_SHA3_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];\n  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];\n  var KECCAK_PADDING = [1, 256, 65536, 16777216];\n  var PADDING = [6, 1536, 393216, 100663296];\n  var SHIFT = [0, 8, 16, 24];\n  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,\n    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,\n    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,\n    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,\n    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\n  var BITS = [224, 256, 384, 512];\n  var SHAKE_BITS = [128, 256];\n  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];\n  var CSHAKE_BYTEPAD = {\n    '128': 168,\n    '256': 136\n  };\n\n  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  var createOutputMethod = function (bits, padding, outputType) {\n    return function (message) {\n      return new Keccak(bits, padding, bits).update(message)[outputType]();\n    };\n  };\n\n  var createShakeOutputMethod = function (bits, padding, outputType) {\n    return function (message, outputBits) {\n      return new Keccak(bits, padding, outputBits).update(message)[outputType]();\n    };\n  };\n\n  var createCshakeOutputMethod = function (bits, padding, outputType) {\n    return function (message, outputBits, n, s) {\n      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();\n    };\n  };\n\n  var createKmacOutputMethod = function (bits, padding, outputType) {\n    return function (key, message, outputBits, s) {\n      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();\n    };\n  };\n\n  var createOutputMethods = function (method, createMethod, bits, padding) {\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createMethod(bits, padding, type);\n    }\n    return method;\n  };\n\n  var createMethod = function (bits, padding) {\n    var method = createOutputMethod(bits, padding, 'hex');\n    method.create = function () {\n      return new Keccak(bits, padding, bits);\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    return createOutputMethods(method, createOutputMethod, bits, padding);\n  };\n\n  var createShakeMethod = function (bits, padding) {\n    var method = createShakeOutputMethod(bits, padding, 'hex');\n    method.create = function (outputBits) {\n      return new Keccak(bits, padding, outputBits);\n    };\n    method.update = function (message, outputBits) {\n      return method.create(outputBits).update(message);\n    };\n    return createOutputMethods(method, createShakeOutputMethod, bits, padding);\n  };\n\n  var createCshakeMethod = function (bits, padding) {\n    var w = CSHAKE_BYTEPAD[bits];\n    var method = createCshakeOutputMethod(bits, padding, 'hex');\n    method.create = function (outputBits, n, s) {\n      if (!n && !s) {\n        return methods['shake' + bits].create(outputBits);\n      } else {\n        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);\n      }\n    };\n    method.update = function (message, outputBits, n, s) {\n      return method.create(outputBits, n, s).update(message);\n    };\n    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);\n  };\n\n  var createKmacMethod = function (bits, padding) {\n    var w = CSHAKE_BYTEPAD[bits];\n    var method = createKmacOutputMethod(bits, padding, 'hex');\n    method.create = function (key, outputBits, s) {\n      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);\n    };\n    method.update = function (key, message, outputBits, s) {\n      return method.create(key, outputBits, s).update(message);\n    };\n    return createOutputMethods(method, createKmacOutputMethod, bits, padding);\n  };\n\n  var algorithms = [\n    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },\n    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },\n    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },\n    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },\n    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }\n  ];\n\n  var methods = {}, methodNames = [];\n\n  for (var i = 0; i < algorithms.length; ++i) {\n    var algorithm = algorithms[i];\n    var bits = algorithm.bits;\n    for (var j = 0; j < bits.length; ++j) {\n      var methodName = algorithm.name + '_' + bits[j];\n      methodNames.push(methodName);\n      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);\n      if (algorithm.name !== 'sha3') {\n        var newMethodName = algorithm.name + bits[j];\n        methodNames.push(newMethodName);\n        methods[newMethodName] = methods[methodName];\n      }\n    }\n  }\n\n  function Keccak(bits, padding, outputBits) {\n    this.blocks = [];\n    this.s = [];\n    this.padding = padding;\n    this.outputBits = outputBits;\n    this.reset = true;\n    this.finalized = false;\n    this.block = 0;\n    this.start = 0;\n    this.blockCount = (1600 - (bits << 1)) >> 5;\n    this.byteCount = this.blockCount << 2;\n    this.outputBlocks = outputBits >> 5;\n    this.extraBytes = (outputBits & 31) >> 3;\n\n    for (var i = 0; i < 50; ++i) {\n      this.s[i] = 0;\n    }\n  }\n\n  Keccak.prototype.update = function (message) {\n    if (this.finalized) {\n      throw new Error(FINALIZE_ERROR);\n    }\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw new Error(INPUT_ERROR);\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw new Error(INPUT_ERROR);\n          }\n        }\n      } else {\n        throw new Error(INPUT_ERROR);\n      }\n      notString = true;\n    }\n    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,\n      blockCount = this.blockCount, index = 0, s = this.s, i, code;\n\n    while (index < length) {\n      if (this.reset) {\n        this.reset = false;\n        blocks[0] = this.block;\n        for (i = 1; i < blockCount + 1; ++i) {\n          blocks[i] = 0;\n        }\n      }\n      if (notString) {\n        for (i = this.start; index < length && i < byteCount; ++index) {\n          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n        }\n      } else {\n        for (i = this.start; index < length && i < byteCount; ++index) {\n          code = message.charCodeAt(index);\n          if (code < 0x80) {\n            blocks[i >> 2] |= code << SHIFT[i++ & 3];\n          } else if (code < 0x800) {\n            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else if (code < 0xd800 || code >= 0xe000) {\n            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else {\n            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      if (i >= byteCount) {\n        this.start = i - byteCount;\n        this.block = blocks[blockCount];\n        for (i = 0; i < blockCount; ++i) {\n          s[i] ^= blocks[i];\n        }\n        f(s);\n        this.reset = true;\n      } else {\n        this.start = i;\n      }\n    }\n    return this;\n  };\n\n  Keccak.prototype.encode = function (x, right) {\n    var o = x & 255, n = 1;\n    var bytes = [o];\n    x = x >> 8;\n    o = x & 255;\n    while (o > 0) {\n      bytes.unshift(o);\n      x = x >> 8;\n      o = x & 255;\n      ++n;\n    }\n    if (right) {\n      bytes.push(n);\n    } else {\n      bytes.unshift(n);\n    }\n    this.update(bytes);\n    return bytes.length;\n  };\n\n  Keccak.prototype.encodeString = function (str) {\n    var notString, type = typeof str;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (str === null) {\n          throw new Error(INPUT_ERROR);\n        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {\n          str = new Uint8Array(str);\n        } else if (!Array.isArray(str)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {\n            throw new Error(INPUT_ERROR);\n          }\n        }\n      } else {\n        throw new Error(INPUT_ERROR);\n      }\n      notString = true;\n    }\n    var bytes = 0, length = str.length;\n    if (notString) {\n      bytes = length;\n    } else {\n      for (var i = 0; i < str.length; ++i) {\n        var code = str.charCodeAt(i);\n        if (code < 0x80) {\n          bytes += 1;\n        } else if (code < 0x800) {\n          bytes += 2;\n        } else if (code < 0xd800 || code >= 0xe000) {\n          bytes += 3;\n        } else {\n          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));\n          bytes += 4;\n        }\n      }\n    }\n    bytes += this.encode(bytes * 8);\n    this.update(str);\n    return bytes;\n  };\n\n  Keccak.prototype.bytepad = function (strs, w) {\n    var bytes = this.encode(w);\n    for (var i = 0; i < strs.length; ++i) {\n      bytes += this.encodeString(strs[i]);\n    }\n    var paddingBytes = w - bytes % w;\n    var zeros = [];\n    zeros.length = paddingBytes;\n    this.update(zeros);\n    return this;\n  };\n\n  Keccak.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;\n    blocks[i >> 2] |= this.padding[i & 3];\n    if (this.lastByteIndex === this.byteCount) {\n      blocks[0] = blocks[blockCount];\n      for (i = 1; i < blockCount + 1; ++i) {\n        blocks[i] = 0;\n      }\n    }\n    blocks[blockCount - 1] |= 0x80000000;\n    for (i = 0; i < blockCount; ++i) {\n      s[i] ^= blocks[i];\n    }\n    f(s);\n  };\n\n  Keccak.prototype.toString = Keccak.prototype.hex = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var hex = '', block;\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        block = s[i];\n        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +\n          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +\n          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +\n          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];\n      }\n      if (j % blockCount === 0) {\n        f(s);\n        i = 0;\n      }\n    }\n    if (extraBytes) {\n      block = s[i];\n      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];\n      if (extraBytes > 1) {\n        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];\n      }\n      if (extraBytes > 2) {\n        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];\n      }\n    }\n    return hex;\n  };\n\n  Keccak.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var bytes = this.outputBits >> 3;\n    var buffer;\n    if (extraBytes) {\n      buffer = new ArrayBuffer((outputBlocks + 1) << 2);\n    } else {\n      buffer = new ArrayBuffer(bytes);\n    }\n    var array = new Uint32Array(buffer);\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        array[j] = s[i];\n      }\n      if (j % blockCount === 0) {\n        f(s);\n      }\n    }\n    if (extraBytes) {\n      array[i] = s[i];\n      buffer = buffer.slice(0, bytes);\n    }\n    return buffer;\n  };\n\n  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;\n\n  Keccak.prototype.digest = Keccak.prototype.array = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var array = [], offset, block;\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        offset = j << 2;\n        block = s[i];\n        array[offset] = block & 0xFF;\n        array[offset + 1] = (block >> 8) & 0xFF;\n        array[offset + 2] = (block >> 16) & 0xFF;\n        array[offset + 3] = (block >> 24) & 0xFF;\n      }\n      if (j % blockCount === 0) {\n        f(s);\n      }\n    }\n    if (extraBytes) {\n      offset = j << 2;\n      block = s[i];\n      array[offset] = block & 0xFF;\n      if (extraBytes > 1) {\n        array[offset + 1] = (block >> 8) & 0xFF;\n      }\n      if (extraBytes > 2) {\n        array[offset + 2] = (block >> 16) & 0xFF;\n      }\n    }\n    return array;\n  };\n\n  function Kmac(bits, padding, outputBits) {\n    Keccak.call(this, bits, padding, outputBits);\n  }\n\n  Kmac.prototype = new Keccak();\n\n  Kmac.prototype.finalize = function () {\n    this.encode(this.outputBits, true);\n    return Keccak.prototype.finalize.call(this);\n  };\n\n  var f = function (s) {\n    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,\n      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,\n      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,\n      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n    for (n = 0; n < 48; n += 2) {\n      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n\n      h = c8 ^ ((c2 << 1) | (c3 >>> 31));\n      l = c9 ^ ((c3 << 1) | (c2 >>> 31));\n      s[0] ^= h;\n      s[1] ^= l;\n      s[10] ^= h;\n      s[11] ^= l;\n      s[20] ^= h;\n      s[21] ^= l;\n      s[30] ^= h;\n      s[31] ^= l;\n      s[40] ^= h;\n      s[41] ^= l;\n      h = c0 ^ ((c4 << 1) | (c5 >>> 31));\n      l = c1 ^ ((c5 << 1) | (c4 >>> 31));\n      s[2] ^= h;\n      s[3] ^= l;\n      s[12] ^= h;\n      s[13] ^= l;\n      s[22] ^= h;\n      s[23] ^= l;\n      s[32] ^= h;\n      s[33] ^= l;\n      s[42] ^= h;\n      s[43] ^= l;\n      h = c2 ^ ((c6 << 1) | (c7 >>> 31));\n      l = c3 ^ ((c7 << 1) | (c6 >>> 31));\n      s[4] ^= h;\n      s[5] ^= l;\n      s[14] ^= h;\n      s[15] ^= l;\n      s[24] ^= h;\n      s[25] ^= l;\n      s[34] ^= h;\n      s[35] ^= l;\n      s[44] ^= h;\n      s[45] ^= l;\n      h = c4 ^ ((c8 << 1) | (c9 >>> 31));\n      l = c5 ^ ((c9 << 1) | (c8 >>> 31));\n      s[6] ^= h;\n      s[7] ^= l;\n      s[16] ^= h;\n      s[17] ^= l;\n      s[26] ^= h;\n      s[27] ^= l;\n      s[36] ^= h;\n      s[37] ^= l;\n      s[46] ^= h;\n      s[47] ^= l;\n      h = c6 ^ ((c0 << 1) | (c1 >>> 31));\n      l = c7 ^ ((c1 << 1) | (c0 >>> 31));\n      s[8] ^= h;\n      s[9] ^= l;\n      s[18] ^= h;\n      s[19] ^= l;\n      s[28] ^= h;\n      s[29] ^= l;\n      s[38] ^= h;\n      s[39] ^= l;\n      s[48] ^= h;\n      s[49] ^= l;\n\n      b0 = s[0];\n      b1 = s[1];\n      b32 = (s[11] << 4) | (s[10] >>> 28);\n      b33 = (s[10] << 4) | (s[11] >>> 28);\n      b14 = (s[20] << 3) | (s[21] >>> 29);\n      b15 = (s[21] << 3) | (s[20] >>> 29);\n      b46 = (s[31] << 9) | (s[30] >>> 23);\n      b47 = (s[30] << 9) | (s[31] >>> 23);\n      b28 = (s[40] << 18) | (s[41] >>> 14);\n      b29 = (s[41] << 18) | (s[40] >>> 14);\n      b20 = (s[2] << 1) | (s[3] >>> 31);\n      b21 = (s[3] << 1) | (s[2] >>> 31);\n      b2 = (s[13] << 12) | (s[12] >>> 20);\n      b3 = (s[12] << 12) | (s[13] >>> 20);\n      b34 = (s[22] << 10) | (s[23] >>> 22);\n      b35 = (s[23] << 10) | (s[22] >>> 22);\n      b16 = (s[33] << 13) | (s[32] >>> 19);\n      b17 = (s[32] << 13) | (s[33] >>> 19);\n      b48 = (s[42] << 2) | (s[43] >>> 30);\n      b49 = (s[43] << 2) | (s[42] >>> 30);\n      b40 = (s[5] << 30) | (s[4] >>> 2);\n      b41 = (s[4] << 30) | (s[5] >>> 2);\n      b22 = (s[14] << 6) | (s[15] >>> 26);\n      b23 = (s[15] << 6) | (s[14] >>> 26);\n      b4 = (s[25] << 11) | (s[24] >>> 21);\n      b5 = (s[24] << 11) | (s[25] >>> 21);\n      b36 = (s[34] << 15) | (s[35] >>> 17);\n      b37 = (s[35] << 15) | (s[34] >>> 17);\n      b18 = (s[45] << 29) | (s[44] >>> 3);\n      b19 = (s[44] << 29) | (s[45] >>> 3);\n      b10 = (s[6] << 28) | (s[7] >>> 4);\n      b11 = (s[7] << 28) | (s[6] >>> 4);\n      b42 = (s[17] << 23) | (s[16] >>> 9);\n      b43 = (s[16] << 23) | (s[17] >>> 9);\n      b24 = (s[26] << 25) | (s[27] >>> 7);\n      b25 = (s[27] << 25) | (s[26] >>> 7);\n      b6 = (s[36] << 21) | (s[37] >>> 11);\n      b7 = (s[37] << 21) | (s[36] >>> 11);\n      b38 = (s[47] << 24) | (s[46] >>> 8);\n      b39 = (s[46] << 24) | (s[47] >>> 8);\n      b30 = (s[8] << 27) | (s[9] >>> 5);\n      b31 = (s[9] << 27) | (s[8] >>> 5);\n      b12 = (s[18] << 20) | (s[19] >>> 12);\n      b13 = (s[19] << 20) | (s[18] >>> 12);\n      b44 = (s[29] << 7) | (s[28] >>> 25);\n      b45 = (s[28] << 7) | (s[29] >>> 25);\n      b26 = (s[38] << 8) | (s[39] >>> 24);\n      b27 = (s[39] << 8) | (s[38] >>> 24);\n      b8 = (s[48] << 14) | (s[49] >>> 18);\n      b9 = (s[49] << 14) | (s[48] >>> 18);\n\n      s[0] = b0 ^ (~b2 & b4);\n      s[1] = b1 ^ (~b3 & b5);\n      s[10] = b10 ^ (~b12 & b14);\n      s[11] = b11 ^ (~b13 & b15);\n      s[20] = b20 ^ (~b22 & b24);\n      s[21] = b21 ^ (~b23 & b25);\n      s[30] = b30 ^ (~b32 & b34);\n      s[31] = b31 ^ (~b33 & b35);\n      s[40] = b40 ^ (~b42 & b44);\n      s[41] = b41 ^ (~b43 & b45);\n      s[2] = b2 ^ (~b4 & b6);\n      s[3] = b3 ^ (~b5 & b7);\n      s[12] = b12 ^ (~b14 & b16);\n      s[13] = b13 ^ (~b15 & b17);\n      s[22] = b22 ^ (~b24 & b26);\n      s[23] = b23 ^ (~b25 & b27);\n      s[32] = b32 ^ (~b34 & b36);\n      s[33] = b33 ^ (~b35 & b37);\n      s[42] = b42 ^ (~b44 & b46);\n      s[43] = b43 ^ (~b45 & b47);\n      s[4] = b4 ^ (~b6 & b8);\n      s[5] = b5 ^ (~b7 & b9);\n      s[14] = b14 ^ (~b16 & b18);\n      s[15] = b15 ^ (~b17 & b19);\n      s[24] = b24 ^ (~b26 & b28);\n      s[25] = b25 ^ (~b27 & b29);\n      s[34] = b34 ^ (~b36 & b38);\n      s[35] = b35 ^ (~b37 & b39);\n      s[44] = b44 ^ (~b46 & b48);\n      s[45] = b45 ^ (~b47 & b49);\n      s[6] = b6 ^ (~b8 & b0);\n      s[7] = b7 ^ (~b9 & b1);\n      s[16] = b16 ^ (~b18 & b10);\n      s[17] = b17 ^ (~b19 & b11);\n      s[26] = b26 ^ (~b28 & b20);\n      s[27] = b27 ^ (~b29 & b21);\n      s[36] = b36 ^ (~b38 & b30);\n      s[37] = b37 ^ (~b39 & b31);\n      s[46] = b46 ^ (~b48 & b40);\n      s[47] = b47 ^ (~b49 & b41);\n      s[8] = b8 ^ (~b0 & b2);\n      s[9] = b9 ^ (~b1 & b3);\n      s[18] = b18 ^ (~b10 & b12);\n      s[19] = b19 ^ (~b11 & b13);\n      s[28] = b28 ^ (~b20 & b22);\n      s[29] = b29 ^ (~b21 & b23);\n      s[38] = b38 ^ (~b30 & b32);\n      s[39] = b39 ^ (~b31 & b33);\n      s[48] = b48 ^ (~b40 & b42);\n      s[49] = b49 ^ (~b41 & b43);\n\n      s[0] ^= RC[n];\n      s[1] ^= RC[n + 1];\n    }\n  };\n\n  if (COMMON_JS) {\n    module.exports = methods;\n  } else {\n    for (i = 0; i < methodNames.length; ++i) {\n      root[methodNames[i]] = methods[methodNames[i]];\n    }\n    if (AMD) {\n      define(function () {\n        return methods;\n      });\n    }\n  }\n})();\n","import sha3 from 'js-sha3'\nimport { warn } from './environment'\n\nconst { keccak_256: keccak256 } = sha3\n\nconst EMPTY_ADDRESS = '0x0000000000000000000000000000000000000000'\nconst TRANSACTION_REGEX = /^0x[A-Fa-f0-9]{64}$/\nconst ADDRESS_REGEX = /^0x[0-9a-fA-F]{40}$/\n\nconst TRUST_WALLET_BASE_URL =\n  'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum'\n\nconst ETHERSCAN_NETWORK_TYPES = new Map([\n  ['main', ''],\n  ['kovan', 'kovan.'],\n  ['rinkeby', 'rinkeby.'],\n  ['ropsten', 'ropsten.'],\n  ['goerli', 'goerli.'],\n])\nconst ETHERSCAN_TYPES = new Map([\n  ['block', 'block'],\n  ['transaction', 'tx'],\n  ['address', 'address'],\n  ['token', 'token'],\n])\n\nconst BLOCK_EXPLORERS = {\n  etherscan: ({ type, value, networkType }) => {\n    if (networkType === 'private') {\n      return ''\n    }\n\n    if (!ETHERSCAN_NETWORK_TYPES.has(networkType)) {\n      throw new Error('provider not supported.')\n    }\n    if (!ETHERSCAN_TYPES.has(type)) {\n      throw new Error('type not supported.')\n    }\n\n    const subdomain = ETHERSCAN_NETWORK_TYPES.get(networkType)\n    const typePart = ETHERSCAN_TYPES.get(type)\n    return `https://${subdomain}etherscan.io/${typePart}/${value}`\n  },\n}\n\n/**\n * Converts to a checksum address\n *\n * This function is taken from web3-utils:\n * https://github.com/ethereum/web3.js/blob/22df832303e349f8ae02f0392e56abe10e1dfaac/packages/web3-utils/src/index.js#L287-L315\n * And was adapted to use js-sha3 rather than soliditySha3.js from web3.js, in\n * order to avoid adding the BN.js and underscore dependencies.\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX address\n * @returns {String}\n */\nfunction toChecksumAddress(address) {\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n    throw new Error(\n      'Given address \"' + address + '\" is not a valid Ethereum address.'\n    )\n  }\n\n  address = address.toLowerCase().replace(/^0x/i, '')\n\n  const addressHash = keccak256(address).replace(/^0x/i, '')\n  let checksumAddress = '0x'\n\n  for (let i = 0; i < address.length; i++) {\n    // If ith character is 9 to f then make it uppercase\n    if (parseInt(addressHash[i], 16) > 7) {\n      checksumAddress += address[i].toUpperCase()\n    } else {\n      checksumAddress += address[i]\n    }\n  }\n\n  return checksumAddress\n}\n\n/**\n * Check address equality without checksums\n * @param {string} first First address\n * @param {string} second Second address\n * @returns {boolean} Address equality\n */\nexport function addressesEqual(first, second) {\n  first = first && first.toLowerCase()\n  second = second && second.toLowerCase()\n  return first === second\n}\n\n/**\n * Shorten an Ethereum address. `charsLength` allows to change the number of\n * characters on both sides of the ellipsis.\n *\n * Examples:\n *   shortenAddress('0x19731977931271')    // 0x1973…1271\n *   shortenAddress('0x19731977931271', 2) // 0x19…71\n *   shortenAddress('0x197319')            // 0x197319 (already short enough)\n *\n * @param {string} address The address to shorten\n * @param {number} [charsLength=4] The number of characters to change on both sides of the ellipsis\n * @returns {string} The shortened address\n */\nexport function shortenAddress(address, charsLength = 4) {\n  const prefixLength = 2 // \"0x\"\n  if (!address) {\n    return ''\n  }\n  if (address.length < charsLength * 2 + prefixLength) {\n    return address\n  }\n  return (\n    address.slice(0, charsLength + prefixLength) +\n    '…' +\n    address.slice(-charsLength)\n  )\n}\n\n/**\n * Alias for shortenAddress (to generalize its use)\n */\nexport const shortenTransaction = shortenAddress\n\n/**\n *\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {string} address the given HEX address\n * @returns {boolean}\n */\nexport function isAddress(address) {\n  return ADDRESS_REGEX.test(address)\n}\n\n/**\n *\n * Checks if the given string is a transaction\n *\n * @method isTransaction\n * @param {string} address the given HEX address\n * @returns {boolean}\n */\nexport function isTransaction(transaction) {\n  return TRANSACTION_REGEX.test(transaction)\n}\n\n/**\n * Generates an etherscan URL\n *\n * @param {string} type The type of URL (block, transaction, address or token).\n * @param {string} value Identifier of the object, depending on the type (block number, transaction hash, …).\n * @param {object} options The optional parameters.\n * @param {string} options.networkType The Ethereum network type (main, kovan, rinkeby, ropsten, goerli, or private).\n * @param {string} options.provider The explorer provider (e.g. etherscan).\n * @returns {string} The generated URL, or an empty string if the parameters are invalid.\n */\nexport function blockExplorerUrl(\n  type,\n  value,\n  { networkType = 'main', provider = 'etherscan' } = {}\n) {\n  const explorer = BLOCK_EXPLORERS[provider]\n\n  if (!explorer) {\n    warn('blockExplorerUrl(): provider not supported.')\n    return ''\n  }\n\n  try {\n    return explorer({ type, value, networkType })\n  } catch (err) {\n    warn(`blockExplorerUrl(): ${err.message}`)\n    return ''\n  }\n}\n\n/**\n * Get the address of a token icon\n *\n * @param {string} address The contract address of the token, or the zero address (0x000…) to get the Ethereum icon.\n * @returns {string} The generated URL, or an empty string if the parameters are invalid.\n */\nexport function tokenIconUrl(address = '') {\n  try {\n    address = toChecksumAddress(address.trim())\n  } catch (err) {\n    return ''\n  }\n\n  if (address === EMPTY_ADDRESS) {\n    return `${TRUST_WALLET_BASE_URL}/info/logo.png`\n  }\n\n  return `${TRUST_WALLET_BASE_URL}/assets/${address}/logo.png`\n}\n"]},"metadata":{},"sourceType":"script"}