{"ast":null,"code":"var _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\n/**\n * Rabin fingerprinting\n *\n * @class Rabin\n */\nvar Rabin = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * Creates an instance of Rabin.\n   * @param { import(\"./../dist/rabin-wasm\") } asModule\n   * @param {number} [bits=12]\n   * @param {number} [min=8 * 1024]\n   * @param {number} [max=32 * 1024]\n   * @param {number} polynomial\n   * @memberof Rabin\n   */\n  function Rabin(asModule) {\n    var bits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 12;\n    var min = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8 * 1024;\n    var max = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 32 * 1024;\n    var windowSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 64;\n    var polynomial = arguments.length > 5 ? arguments[5] : undefined;\n\n    _classCallCheck(this, Rabin);\n\n    this.bits = bits;\n    this.min = min;\n    this.max = max;\n    this.asModule = asModule;\n    this.rabin = new asModule.Rabin(bits, min, max, windowSize, polynomial);\n    this.polynomial = polynomial;\n  }\n  /**\n   * Fingerprints the buffer\n   *\n   * @param {Uint8Array} buf\n   * @returns {Array<number>}\n   * @memberof Rabin\n   */\n\n\n  _createClass(Rabin, [{\n    key: \"fingerprint\",\n    value: function fingerprint(buf) {\n      var _this$asModule = this.asModule,\n          __retain = _this$asModule.__retain,\n          __release = _this$asModule.__release,\n          __allocArray = _this$asModule.__allocArray,\n          __getInt32Array = _this$asModule.__getInt32Array,\n          Int32Array_ID = _this$asModule.Int32Array_ID,\n          Uint8Array_ID = _this$asModule.Uint8Array_ID;\n      var lengths = new Int32Array(Math.ceil(buf.length / this.min));\n\n      var lengthsPtr = __retain(__allocArray(Int32Array_ID, lengths));\n\n      var pointer = __retain(__allocArray(Uint8Array_ID, buf));\n\n      var out = this.rabin.fingerprint(pointer, lengthsPtr);\n\n      var processed = __getInt32Array(out);\n\n      __release(pointer);\n\n      __release(lengthsPtr);\n\n      var cleanArr = [];\n\n      for (var i = 0; i < processed.length; i++) {\n        if (processed[i] === 0) break;\n        cleanArr[i] = processed[i];\n      }\n\n      return cleanArr;\n    }\n  }]);\n\n  return Rabin;\n}();\n\nmodule.exports = Rabin;","map":null,"metadata":{},"sourceType":"script"}