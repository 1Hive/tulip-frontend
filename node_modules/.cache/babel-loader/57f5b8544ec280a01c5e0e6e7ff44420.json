{"ast":null,"code":"import { useEffect, useMemo, useState } from 'react';\nimport { wallet } from 'tulip-data';\nimport { useWallet } from 'use-wallet';\nexport function useWalletData() {\n  const [walletInfo, setWalletInfo] = useState([]);\n  const [poolingInfo, setPoolingInfo] = useState([]);\n  const [isFetching, setIsFetching] = useState(false);\n  const {\n    account\n  } = useWallet();\n  useEffect(() => {\n    let cancelled = false;\n\n    if (!account) {\n      return setWalletInfo([]);\n    }\n\n    const fetchWalletData = async () => {\n      try {\n        setIsFetching(true);\n        const balances = await wallet.tokenBalances({\n          user_address: account\n        });\n        const poolingData = await wallet.poolBalances({\n          user_address: account\n        }); // console.log(balances)\n\n        if (!cancelled) {\n          setWalletInfo(balances);\n          setPoolingInfo(poolingData);\n          return setIsFetching(false);\n        }\n      } catch (err) {\n        console.error(`Could not fetch wallet data `, err);\n      }\n    };\n\n    fetchWalletData();\n    return () => {\n      setIsFetching(false);\n      cancelled = true;\n    };\n  }, [account]);\n  return [walletInfo, poolingInfo, isFetching];\n}\nexport function useNetBalance() {\n  const [walletInfo, poolingInfo, isFetching] = useWalletData();\n  console.log(walletInfo, isFetching);\n  return useMemo(() => {\n    if (!walletInfo || walletInfo.length === 0) {\n      return [0, isFetching];\n    }\n\n    console.log(poolingInfo);\n    console.log(walletInfo);\n    let netBalance = 0;\n    walletInfo.map(value => {\n      if (value && parseFloat(value.valueUSD)) {\n        netBalance = netBalance + parseFloat(value.valueUSD);\n      }\n    });\n    return [netBalance.toFixed(2), isFetching];\n  }, [walletInfo, isFetching]);\n}","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/hooks/useWalletData.js"],"names":["useEffect","useMemo","useState","wallet","useWallet","useWalletData","walletInfo","setWalletInfo","poolingInfo","setPoolingInfo","isFetching","setIsFetching","account","cancelled","fetchWalletData","balances","tokenBalances","user_address","poolingData","poolBalances","err","console","error","useNetBalance","log","length","netBalance","map","value","parseFloat","valueUSD","toFixed"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,SAASC,SAAT,QAA0B,YAA1B;AAEA,OAAO,SAASC,aAAT,GAAyB;AAC9B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAcR,SAAS,EAA7B;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,SAAS,GAAG,KAAhB;;AACA,QAAI,CAACD,OAAL,EAAc;AACZ,aAAOL,aAAa,CAAC,EAAD,CAApB;AACD;;AAED,UAAMO,eAAe,GAAG,YAAY;AAClC,UAAI;AACFH,QAAAA,aAAa,CAAC,IAAD,CAAb;AACA,cAAMI,QAAQ,GAAG,MAAMZ,MAAM,CAACa,aAAP,CAAqB;AAC1CC,UAAAA,YAAY,EAAEL;AAD4B,SAArB,CAAvB;AAIA,cAAMM,WAAW,GAAG,MAAMf,MAAM,CAACgB,YAAP,CAAoB;AAC5CF,UAAAA,YAAY,EAAEL;AAD8B,SAApB,CAA1B,CANE,CAUF;;AACA,YAAI,CAACC,SAAL,EAAgB;AACdN,UAAAA,aAAa,CAACQ,QAAD,CAAb;AACAN,UAAAA,cAAc,CAACS,WAAD,CAAd;AACA,iBAAOP,aAAa,CAAC,KAAD,CAApB;AACD;AACF,OAhBD,CAgBE,OAAOS,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAe,8BAAf,EAA8CF,GAA9C;AACD;AACF,KApBD;;AAsBAN,IAAAA,eAAe;AACf,WAAO,MAAM;AACXH,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAE,MAAAA,SAAS,GAAG,IAAZ;AACD,KAHD;AAID,GAjCQ,EAiCN,CAACD,OAAD,CAjCM,CAAT;AAmCA,SAAO,CAACN,UAAD,EAAaE,WAAb,EAA0BE,UAA1B,CAAP;AACD;AAED,OAAO,SAASa,aAAT,GAAyB;AAC9B,QAAM,CAACjB,UAAD,EAAaE,WAAb,EAA0BE,UAA1B,IAAwCL,aAAa,EAA3D;AACAgB,EAAAA,OAAO,CAACG,GAAR,CAAYlB,UAAZ,EAAwBI,UAAxB;AACA,SAAOT,OAAO,CAAC,MAAM;AACnB,QAAI,CAACK,UAAD,IAAeA,UAAU,CAACmB,MAAX,KAAsB,CAAzC,EAA4C;AAC1C,aAAO,CAAC,CAAD,EAAIf,UAAJ,CAAP;AACD;;AACDW,IAAAA,OAAO,CAACG,GAAR,CAAYhB,WAAZ;AACAa,IAAAA,OAAO,CAACG,GAAR,CAAYlB,UAAZ;AACA,QAAIoB,UAAU,GAAG,CAAjB;AACApB,IAAAA,UAAU,CAACqB,GAAX,CAAeC,KAAK,IAAI;AACtB,UAAIA,KAAK,IAAIC,UAAU,CAACD,KAAK,CAACE,QAAP,CAAvB,EAAyC;AACvCJ,QAAAA,UAAU,GAAGA,UAAU,GAAGG,UAAU,CAACD,KAAK,CAACE,QAAP,CAApC;AACD;AACF,KAJD;AAMA,WAAO,CAACJ,UAAU,CAACK,OAAX,CAAmB,CAAnB,CAAD,EAAwBrB,UAAxB,CAAP;AACD,GAda,EAcX,CAACJ,UAAD,EAAaI,UAAb,CAdW,CAAd;AAeD","sourcesContent":["import { useEffect, useMemo, useState } from 'react'\r\nimport { wallet } from 'tulip-data'\r\nimport { useWallet } from 'use-wallet'\r\n\r\nexport function useWalletData() {\r\n  const [walletInfo, setWalletInfo] = useState([])\r\n  const [poolingInfo, setPoolingInfo] = useState([])\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const { account } = useWallet()\r\n\r\n  useEffect(() => {\r\n    let cancelled = false\r\n    if (!account) {\r\n      return setWalletInfo([])\r\n    }\r\n\r\n    const fetchWalletData = async () => {\r\n      try {\r\n        setIsFetching(true)\r\n        const balances = await wallet.tokenBalances({\r\n          user_address: account,\r\n        })\r\n\r\n        const poolingData = await wallet.poolBalances({\r\n          user_address: account,\r\n        })\r\n\r\n        // console.log(balances)\r\n        if (!cancelled) {\r\n          setWalletInfo(balances)\r\n          setPoolingInfo(poolingData)\r\n          return setIsFetching(false)\r\n        }\r\n      } catch (err) {\r\n        console.error(`Could not fetch wallet data `, err)\r\n      }\r\n    }\r\n\r\n    fetchWalletData()\r\n    return () => {\r\n      setIsFetching(false)\r\n      cancelled = true\r\n    }\r\n  }, [account])\r\n\r\n  return [walletInfo, poolingInfo, isFetching]\r\n}\r\n\r\nexport function useNetBalance() {\r\n  const [walletInfo, poolingInfo, isFetching] = useWalletData()\r\n  console.log(walletInfo, isFetching)\r\n  return useMemo(() => {\r\n    if (!walletInfo || walletInfo.length === 0) {\r\n      return [0, isFetching]\r\n    }\r\n    console.log(poolingInfo)\r\n    console.log(walletInfo)\r\n    let netBalance = 0\r\n    walletInfo.map(value => {\r\n      if (value && parseFloat(value.valueUSD)) {\r\n        netBalance = netBalance + parseFloat(value.valueUSD)\r\n      }\r\n    })\r\n\r\n    return [netBalance.toFixed(2), isFetching]\r\n  }, [walletInfo, isFetching])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}