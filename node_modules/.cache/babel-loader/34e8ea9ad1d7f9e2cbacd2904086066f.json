{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar path = require('path');\n\nvar io = require('orbit-db-io'); // Creates a DB manifest file and saves it in IPFS\n\n\nvar createDBManifest = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ipfs, name, type, accessControllerAddress, options) {\n    var manifest;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            manifest = Object.assign({\n              name: name,\n              type: type,\n              accessController: (path.posix || path).join('/ipfs', accessControllerAddress)\n            }, // meta field is only added to manifest if options.meta is defined\n            options.meta !== undefined ? {\n              meta: options.meta\n            } : {});\n            return _context.abrupt(\"return\", io.write(ipfs, options.format || 'dag-cbor', manifest, options));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function createDBManifest(_x, _x2, _x3, _x4, _x5) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = createDBManifest;","map":null,"metadata":{},"sourceType":"script"}