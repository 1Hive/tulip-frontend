{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar crypto = require('libp2p-crypto');\n\nvar Buffer = require('safe-buffer/').Buffer;\n\nmodule.exports = {\n  verify: function () {\n    var _verify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(signature, publicKey, data) {\n      var isValid, res, pubKey;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (signature) {\n                _context.next = 2;\n                break;\n              }\n\n              throw new Error('No signature given');\n\n            case 2:\n              if (publicKey) {\n                _context.next = 4;\n                break;\n              }\n\n              throw new Error('Given publicKey was undefined');\n\n            case 4:\n              if (data) {\n                _context.next = 6;\n                break;\n              }\n\n              throw new Error('Given input data was undefined');\n\n            case 6:\n              if (!Buffer.isBuffer(data)) {\n                data = Buffer.from(data);\n              }\n\n              isValid = function isValid(key, msg, sig) {\n                return new Promise(function (resolve, reject) {\n                  key.verify(msg, sig, function (err, valid) {\n                    if (!err) {\n                      resolve(valid);\n                    }\n\n                    reject(valid);\n                  });\n                });\n              };\n\n              res = false;\n              _context.prev = 9;\n              pubKey = crypto.keys.supportedKeys.secp256k1.unmarshalSecp256k1PublicKey(Buffer.from(publicKey, 'hex'));\n              _context.next = 13;\n              return isValid(pubKey, data, Buffer.from(signature, 'hex'));\n\n            case 13:\n              res = _context.sent;\n              _context.next = 18;\n              break;\n\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](9);\n\n            case 18:\n              return _context.abrupt(\"return\", Promise.resolve(res));\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[9, 16]]);\n    }));\n\n    function verify(_x, _x2, _x3) {\n      return _verify.apply(this, arguments);\n    }\n\n    return verify;\n  }()\n};","map":null,"metadata":{},"sourceType":"script"}