{"ast":null,"code":"'use strict';\n\nconst IdentityProvider = require('./identity-provider-interface');\n\nconst Keystore = require('orbit-db-keystore');\n\nconst type = 'orbitdb';\n\nclass OrbitDBIdentityProvider extends IdentityProvider {\n  constructor(keystore) {\n    super();\n\n    if (!keystore) {\n      throw new Error('OrbitDBIdentityProvider requires a keystore');\n    }\n\n    this._keystore = keystore;\n  } // Returns the type of the identity provider\n\n\n  static get type() {\n    return type;\n  }\n\n  async getId(options = {}) {\n    const id = options.id;\n\n    if (!id) {\n      throw new Error('id is required');\n    }\n\n    const keystore = this._keystore;\n    const key = (await keystore.getKey(id)) || (await keystore.createKey(id));\n    return key.public.marshal().toString('hex');\n  }\n\n  async signIdentity(data, options = {}) {\n    const id = options.id;\n\n    if (!id) {\n      throw new Error('id is required');\n    }\n\n    const keystore = this._keystore;\n    const key = await keystore.getKey(id);\n\n    if (!key) {\n      throw new Error(`Signing key for '${id}' not found`);\n    }\n\n    return keystore.sign(key, data);\n  }\n\n  static async verifyIdentity(identity) {\n    // Verify that identity was signed by the ID\n    return Keystore.verify(identity.signatures.publicKey, identity.id, identity.publicKey + identity.signatures.id);\n  }\n\n}\n\nmodule.exports = OrbitDBIdentityProvider;","map":null,"metadata":{},"sourceType":"script"}