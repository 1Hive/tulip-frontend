{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:secio');\nlog.error = debug('libp2p:secio:error');\n\nconst handshake = require('./handshake');\n\nconst State = require('./state');\n\nconst Wrap = require('it-pb-rpc');\n\nconst {\n  int32BEDecode,\n  int32BEEncode\n} = require('it-length-prefixed');\n\nasync function secure(localPeer, duplex, remotePeer) {\n  // returns duplex\n  if (!localPeer) {\n    throw new Error('no local private key provided');\n  }\n\n  if (!duplex) {\n    throw new Error('no connection for the handshake provided');\n  }\n\n  const state = new State(localPeer, remotePeer);\n  const wrapped = Wrap(duplex, {\n    lengthDecoder: int32BEDecode,\n    lengthEncoder: int32BEEncode\n  });\n  await handshake(state, wrapped);\n  return {\n    conn: state.secure,\n    remotePeer: state.id.remote\n  };\n}\n\nmodule.exports = {\n  protocol: '/secio/1.0.0',\n  // since SECIO is symetric, we only need one function here\n  secureInbound: secure,\n  secureOutbound: secure\n};","map":null,"metadata":{},"sourceType":"script"}