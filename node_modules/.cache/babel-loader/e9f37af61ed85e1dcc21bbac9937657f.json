{"ast":null,"code":"'use strict';\n\nconst getDefaultConfig = require('../runtime/config-nodejs.js');\n\nconst {\n  withTimeoutOption\n} = require('../utils');\n\nconst log = require('debug')('ipfs:core:config');\n\nmodule.exports = ({\n  repo\n}) => {\n  return {\n    get: withTimeoutOption((key, options) => {\n      if (!options && key && typeof key === 'object') {\n        options = key;\n        key = undefined;\n      }\n\n      return repo.config.get(key, options);\n    }),\n    set: withTimeoutOption(repo.config.set),\n    replace: withTimeoutOption(repo.config.replace),\n    profiles: {\n      apply: withTimeoutOption(applyProfile),\n      list: withTimeoutOption(listProfiles)\n    }\n  };\n\n  async function applyProfile(profileName, options = {}) {\n    const {\n      dryRun\n    } = options;\n    const profile = profiles[profileName];\n\n    if (!profile) {\n      throw new Error(`No profile with name '${profileName}' exists`);\n    }\n\n    try {\n      const oldCfg = await repo.config.getAll(options);\n      let newCfg = JSON.parse(JSON.stringify(oldCfg)); // clone\n\n      newCfg = profile.transform(newCfg);\n\n      if (!dryRun) {\n        await repo.config.replace(newCfg, options);\n      } // Scrub private key from output\n\n\n      delete oldCfg.Identity.PrivKey;\n      delete newCfg.Identity.PrivKey;\n      return {\n        original: oldCfg,\n        updated: newCfg\n      };\n    } catch (err) {\n      log(err);\n      throw new Error(`Could not apply profile '${profileName}' to config: ${err.message}`);\n    }\n  }\n};\n\nasync function listProfiles(options) {\n  // eslint-disable-line require-await\n  return Object.keys(profiles).map(name => ({\n    name,\n    description: profiles[name].description\n  }));\n}\n\nconst profiles = {\n  server: {\n    description: 'Recommended for nodes with public IPv4 address (servers, VPSes, etc.), disables host and content discovery in local networks.',\n    transform: config => {\n      config.Discovery.MDNS.Enabled = false;\n      config.Discovery.webRTCStar.Enabled = false;\n      return config;\n    }\n  },\n  'local-discovery': {\n    description: 'Sets default values to fields affected by `server` profile, enables discovery in local networks.',\n    transform: config => {\n      config.Discovery.MDNS.Enabled = true;\n      config.Discovery.webRTCStar.Enabled = true;\n      return config;\n    }\n  },\n  test: {\n    description: 'Reduces external interference, useful for running ipfs in test environments. Note that with these settings node won\\'t be able to talk to the rest of the network without manual bootstrap.',\n    transform: config => {\n      const defaultConfig = getDefaultConfig();\n      config.Addresses.API = defaultConfig.Addresses.API ? '/ip4/127.0.0.1/tcp/0' : '';\n      config.Addresses.Gateway = defaultConfig.Addresses.Gateway ? '/ip4/127.0.0.1/tcp/0' : '';\n      config.Addresses.Swarm = defaultConfig.Addresses.Swarm.length ? ['/ip4/127.0.0.1/tcp/0'] : [];\n      config.Bootstrap = [];\n      config.Discovery.MDNS.Enabled = false;\n      config.Discovery.webRTCStar.Enabled = false;\n      return config;\n    }\n  },\n  'default-networking': {\n    description: 'Restores default network settings. Inverse profile of the `test` profile.',\n    transform: config => {\n      const defaultConfig = getDefaultConfig();\n      config.Addresses.API = defaultConfig.Addresses.API;\n      config.Addresses.Gateway = defaultConfig.Addresses.Gateway;\n      config.Addresses.Swarm = defaultConfig.Addresses.Swarm;\n      config.Bootstrap = defaultConfig.Bootstrap;\n      config.Discovery.MDNS.Enabled = defaultConfig.Discovery.MDNS.Enabled;\n      config.Discovery.webRTCStar.Enabled = defaultConfig.Discovery.webRTCStar.Enabled;\n      return config;\n    }\n  },\n  lowpower: {\n    description: 'Reduces daemon overhead on the system. May affect node functionality,performance of content discovery and data fetching may be degraded. Recommended for low power systems.',\n    transform: config => {\n      config.Swarm = config.Swarm || {};\n      config.Swarm.ConnMgr = config.Swarm.ConnMgr || {};\n      config.Swarm.ConnMgr.LowWater = 20;\n      config.Swarm.ConnMgr.HighWater = 40;\n      return config;\n    }\n  },\n  'default-power': {\n    description: 'Inverse of \"lowpower\" profile.',\n    transform: config => {\n      const defaultConfig = getDefaultConfig();\n      config.Swarm = defaultConfig.Swarm;\n      return config;\n    }\n  }\n};\nmodule.exports.profiles = profiles;","map":null,"metadata":{},"sourceType":"script"}