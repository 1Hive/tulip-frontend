{"ast":null,"code":"import { useEffect, useMemo, useState } from 'react';\nimport { wallet } from 'tulip-data';\nimport { useWallet } from 'use-wallet';\nexport function useWalletData() {\n  const [walletInfo, setWalletInfo] = useState([]);\n  const {\n    account\n  } = useWallet();\n  useEffect(() => {\n    let cancelled = false;\n\n    if (!account) {\n      return setWalletInfo([]);\n    }\n\n    const fetchWalletData = async () => {\n      try {\n        const balances = await wallet.tokenBalances({\n          user_address: account\n        });\n\n        if (!cancelled) {\n          return setWalletInfo(balances);\n        }\n      } catch (err) {\n        console.error(`Could not fetch wallet data `, err);\n      }\n    };\n\n    fetchWalletData();\n    return () => {\n      cancelled = true;\n    };\n  }, [account]);\n  return walletInfo;\n}\nexport function useNetBalance() {\n  const walletInfo = useWalletData();\n  return useMemo(() => {\n    console.log('1', walletInfo);\n\n    if (!walletInfo) {\n      return 0;\n    }\n\n    let netBalance = 0;\n    netBalance += walletInfo.map(value => {\n      console.log(value);\n\n      if (value && value.valueUSD) {\n        return value.valueUSD;\n      }\n    });\n    return netBalance;\n  }, [walletInfo]);\n}","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/hooks/useWalletData.js"],"names":["useEffect","useMemo","useState","wallet","useWallet","useWalletData","walletInfo","setWalletInfo","account","cancelled","fetchWalletData","balances","tokenBalances","user_address","err","console","error","useNetBalance","log","netBalance","map","value","valueUSD"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,SAASC,SAAT,QAA0B,YAA1B;AAEA,OAAO,SAASC,aAAT,GAAyB;AAC9B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAcJ,SAAS,EAA7B;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,SAAS,GAAG,KAAhB;;AACA,QAAI,CAACD,OAAL,EAAc;AACZ,aAAOD,aAAa,CAAC,EAAD,CAApB;AACD;;AAED,UAAMG,eAAe,GAAG,YAAY;AAClC,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMR,MAAM,CAACS,aAAP,CAAqB;AAC1CC,UAAAA,YAAY,EAAEL;AAD4B,SAArB,CAAvB;;AAGA,YAAI,CAACC,SAAL,EAAgB;AACd,iBAAOF,aAAa,CAACI,QAAD,CAApB;AACD;AACF,OAPD,CAOE,OAAOG,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAe,8BAAf,EAA8CF,GAA9C;AACD;AACF,KAXD;;AAaAJ,IAAAA,eAAe;AACf,WAAO,MAAM;AACXD,MAAAA,SAAS,GAAG,IAAZ;AACD,KAFD;AAGD,GAvBQ,EAuBN,CAACD,OAAD,CAvBM,CAAT;AAyBA,SAAOF,UAAP;AACD;AAED,OAAO,SAASW,aAAT,GAAyB;AAC9B,QAAMX,UAAU,GAAGD,aAAa,EAAhC;AACA,SAAOJ,OAAO,CAAC,MAAM;AACnBc,IAAAA,OAAO,CAACG,GAAR,CAAY,GAAZ,EAAiBZ,UAAjB;;AACA,QAAI,CAACA,UAAL,EAAiB;AACf,aAAO,CAAP;AACD;;AAED,QAAIa,UAAU,GAAG,CAAjB;AACAA,IAAAA,UAAU,IAAIb,UAAU,CAACc,GAAX,CAAeC,KAAK,IAAI;AACpCN,MAAAA,OAAO,CAACG,GAAR,CAAYG,KAAZ;;AACA,UAAIA,KAAK,IAAIA,KAAK,CAACC,QAAnB,EAA6B;AAC3B,eAAOD,KAAK,CAACC,QAAb;AACD;AACF,KALa,CAAd;AAOA,WAAOH,UAAP;AACD,GAfa,EAeX,CAACb,UAAD,CAfW,CAAd;AAgBD","sourcesContent":["import { useEffect, useMemo, useState } from 'react'\r\nimport { wallet } from 'tulip-data'\r\nimport { useWallet } from 'use-wallet'\r\n\r\nexport function useWalletData() {\r\n  const [walletInfo, setWalletInfo] = useState([])\r\n  const { account } = useWallet()\r\n\r\n  useEffect(() => {\r\n    let cancelled = false\r\n    if (!account) {\r\n      return setWalletInfo([])\r\n    }\r\n\r\n    const fetchWalletData = async () => {\r\n      try {\r\n        const balances = await wallet.tokenBalances({\r\n          user_address: account,\r\n        })\r\n        if (!cancelled) {\r\n          return setWalletInfo(balances)\r\n        }\r\n      } catch (err) {\r\n        console.error(`Could not fetch wallet data `, err)\r\n      }\r\n    }\r\n\r\n    fetchWalletData()\r\n    return () => {\r\n      cancelled = true\r\n    }\r\n  }, [account])\r\n\r\n  return walletInfo\r\n}\r\n\r\nexport function useNetBalance() {\r\n  const walletInfo = useWalletData()\r\n  return useMemo(() => {\r\n    console.log('1', walletInfo)\r\n    if (!walletInfo) {\r\n      return 0\r\n    }\r\n\r\n    let netBalance = 0\r\n    netBalance += walletInfo.map(value => {\r\n      console.log(value)\r\n      if (value && value.valueUSD) {\r\n        return value.valueUSD\r\n      }\r\n    })\r\n\r\n    return netBalance\r\n  }, [walletInfo])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}