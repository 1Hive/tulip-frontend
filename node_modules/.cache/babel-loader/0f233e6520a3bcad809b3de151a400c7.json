{"ast":null,"code":"import poolsConfig from 'config/constants/pools';\nimport sousChefABI from 'config/abi/sousChef.json';\nimport cakeABI from 'config/abi/cake.json';\nimport wbnbABI from 'config/abi/weth.json';\nimport { QuoteToken } from 'config/constants/types';\nimport multicall from 'utils/multicall';\nimport { getAddress, getWbnbAddress } from 'utils/addressHelpers';\nimport BigNumber from 'bignumber.js';\nexport const fetchPoolsBlockLimits = async () => {\n  const poolsWithEnd = poolsConfig.filter(p => p.sousId !== 0);\n  const callsStartBlock = poolsWithEnd.map(poolConfig => {\n    return {\n      address: getAddress(poolConfig.contractAddress),\n      name: 'startBlock'\n    };\n  });\n  const callsEndBlock = poolsWithEnd.map(poolConfig => {\n    return {\n      address: getAddress(poolConfig.contractAddress),\n      name: 'bonusEndBlock'\n    };\n  });\n  const starts = await multicall(sousChefABI, callsStartBlock);\n  const ends = await multicall(sousChefABI, callsEndBlock);\n  return poolsWithEnd.map((cakePoolConfig, index) => {\n    const startBlock = starts[index];\n    const endBlock = ends[index];\n    return {\n      sousId: cakePoolConfig.sousId,\n      startBlock: new BigNumber(startBlock).toJSON(),\n      endBlock: new BigNumber(endBlock).toJSON()\n    };\n  });\n};\nexport const fetchPoolsTotalStatking = async () => {\n  const nonBnbPools = poolsConfig.filter(p => p.stakingTokenName !== QuoteToken.BNB);\n  const bnbPool = poolsConfig.filter(p => p.stakingTokenName === QuoteToken.BNB);\n  const callsNonBnbPools = nonBnbPools.map(poolConfig => {\n    return {\n      address: poolConfig.stakingTokenAddress,\n      name: 'balanceOf',\n      params: [getAddress(poolConfig.contractAddress)]\n    };\n  });\n  const callsBnbPools = bnbPool.map(poolConfig => {\n    return {\n      address: getWbnbAddress(),\n      name: 'balanceOf',\n      params: [getAddress(poolConfig.contractAddress)]\n    };\n  });\n  const nonBnbPoolsTotalStaked = await multicall(cakeABI, callsNonBnbPools);\n  const bnbPoolsTotalStaked = await multicall(wbnbABI, callsBnbPools);\n  return [...nonBnbPools.map((p, index) => ({\n    sousId: p.sousId,\n    totalStaked: new BigNumber(nonBnbPoolsTotalStaked[index]).toJSON()\n  })), ...bnbPool.map((p, index) => ({\n    sousId: p.sousId,\n    totalStaked: new BigNumber(bnbPoolsTotalStaked[index]).toJSON()\n  }))];\n};","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/state/pools/fetchPools.ts"],"names":["poolsConfig","sousChefABI","cakeABI","wbnbABI","QuoteToken","multicall","getAddress","getWbnbAddress","BigNumber","fetchPoolsBlockLimits","poolsWithEnd","filter","p","sousId","callsStartBlock","map","poolConfig","address","contractAddress","name","callsEndBlock","starts","ends","cakePoolConfig","index","startBlock","endBlock","toJSON","fetchPoolsTotalStatking","nonBnbPools","stakingTokenName","BNB","bnbPool","callsNonBnbPools","stakingTokenAddress","params","callsBnbPools","nonBnbPoolsTotalStaked","bnbPoolsTotalStaked","totalStaked"],"mappings":"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","sourcesContent":["import poolsConfig from 'config/constants/pools'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport cakeABI from 'config/abi/cake.json'\nimport wbnbABI from 'config/abi/weth.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getAddress, getWbnbAddress } from 'utils/addressHelpers'\nimport BigNumber from 'bignumber.js'\n\nexport const fetchPoolsBlockLimits = async () => {\n  const poolsWithEnd = poolsConfig.filter((p) => p.sousId !== 0)\n  const callsStartBlock = poolsWithEnd.map((poolConfig) => {\n    return {\n      address: getAddress(poolConfig.contractAddress),\n      name: 'startBlock',\n    }\n  })\n  const callsEndBlock = poolsWithEnd.map((poolConfig) => {\n    return {\n      address: getAddress(poolConfig.contractAddress),\n      name: 'bonusEndBlock',\n    }\n  })\n\n  const starts = await multicall(sousChefABI, callsStartBlock)\n  const ends = await multicall(sousChefABI, callsEndBlock)\n\n  return poolsWithEnd.map((cakePoolConfig, index) => {\n    const startBlock = starts[index]\n    const endBlock = ends[index]\n    return {\n      sousId: cakePoolConfig.sousId,\n      startBlock: new BigNumber(startBlock).toJSON(),\n      endBlock: new BigNumber(endBlock).toJSON(),\n    }\n  })\n}\n\nexport const fetchPoolsTotalStatking = async () => {\n  const nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\n  const bnbPool = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\n\n  const callsNonBnbPools = nonBnbPools.map((poolConfig) => {\n    return {\n      address: poolConfig.stakingTokenAddress,\n      name: 'balanceOf',\n      params: [getAddress(poolConfig.contractAddress)],\n    }\n  })\n\n  const callsBnbPools = bnbPool.map((poolConfig) => {\n    return {\n      address: getWbnbAddress(),\n      name: 'balanceOf',\n      params: [getAddress(poolConfig.contractAddress)],\n    }\n  })\n\n  const nonBnbPoolsTotalStaked = await multicall(cakeABI, callsNonBnbPools)\n  const bnbPoolsTotalStaked = await multicall(wbnbABI, callsBnbPools)\n\n  return [\n    ...nonBnbPools.map((p, index) => ({\n      sousId: p.sousId,\n      totalStaked: new BigNumber(nonBnbPoolsTotalStaked[index]).toJSON(),\n    })),\n    ...bnbPool.map((p, index) => ({\n      sousId: p.sousId,\n      totalStaked: new BigNumber(bnbPoolsTotalStaked[index]).toJSON(),\n    })),\n  ]\n}\n"]},"metadata":{},"sourceType":"module"}