{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar path = require('path');\n\nvar CID = require('cids');\n\nvar notEmpty = function notEmpty(e) {\n  return e !== '' && e !== ' ';\n};\n\nvar OrbitDBAddress = /*#__PURE__*/function () {\n  function OrbitDBAddress(root, path) {\n    _classCallCheck(this, OrbitDBAddress);\n\n    this.root = root;\n    this.path = path;\n  }\n\n  _createClass(OrbitDBAddress, [{\n    key: \"toString\",\n    value: function toString() {\n      return OrbitDBAddress.join(this.root, this.path);\n    }\n  }], [{\n    key: \"isValid\",\n    value: function isValid(address) {\n      address = address.toString().replace(/\\\\/g, '/');\n\n      var containsProtocolPrefix = function containsProtocolPrefix(e, i) {\n        return !((i === 0 || i === 1) && address.toString().indexOf('/orbit') === 0 && e === 'orbitdb');\n      };\n\n      var parts = address.toString().split('/').filter(containsProtocolPrefix).filter(notEmpty);\n      var accessControllerHash;\n\n      try {\n        accessControllerHash = parts[0].indexOf('zd') > -1 || parts[0].indexOf('Qm') > -1 || parts[0].indexOf('ba') > -1 ? new CID(parts[0]).toBaseEncodedString() : null;\n      } catch (e) {\n        return false;\n      }\n\n      return accessControllerHash !== null;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(address) {\n      if (!address) {\n        throw new Error(\"Not a valid OrbitDB address: \".concat(address));\n      }\n\n      if (!OrbitDBAddress.isValid(address)) {\n        throw new Error(\"Not a valid OrbitDB address: \".concat(address));\n      }\n\n      address = address.toString().replace(/\\\\/g, '/');\n      var parts = address.toString().split('/').filter(function (e, i) {\n        return !((i === 0 || i === 1) && address.toString().indexOf('/orbit') === 0 && e === 'orbitdb');\n      }).filter(function (e) {\n        return e !== '' && e !== ' ';\n      });\n      return new OrbitDBAddress(parts[0], parts.slice(1, parts.length).join('/'));\n    }\n  }, {\n    key: \"join\",\n    value: function join() {\n      var _ref;\n\n      for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n        paths[_key] = arguments[_key];\n      }\n\n      return (_ref = path.posix || path).join.apply(_ref, ['/orbitdb'].concat(paths));\n    }\n  }]);\n\n  return OrbitDBAddress;\n}();\n\nmodule.exports = OrbitDBAddress;","map":null,"metadata":{},"sourceType":"script"}