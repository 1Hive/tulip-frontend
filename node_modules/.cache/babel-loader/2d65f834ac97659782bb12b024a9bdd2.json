{"ast":null,"code":"'use strict';\n\nconst throttle = require('lodash.throttle');\n\nexports = module.exports = TimeCache;\n\nfunction TimeCache(options) {\n  if (!(this instanceof TimeCache)) {\n    return new TimeCache(options);\n  }\n\n  options = options || {};\n  const validity = options.validity || 30; // seconds\n\n  const entries = new Map();\n  const sweep = throttle(() => {\n    entries.forEach((entry, key) => {\n      const v = entry.validity || validity;\n      const delta = getTimeElapsed(entry.timestamp);\n\n      if (delta > v) {\n        entries.delete(key);\n      }\n    });\n  }, 200);\n\n  this.put = (key, value, validity) => {\n    if (!this.has(key)) {\n      entries.set(key, {\n        value: value,\n        timestamp: new Date(),\n        validity: validity\n      });\n    }\n\n    sweep();\n  };\n\n  this.get = key => {\n    if (entries.has(key)) {\n      return entries.get(key).value;\n    } else {\n      throw new Error('key does not exist');\n    }\n  };\n\n  this.has = key => {\n    return entries.has(key);\n  };\n}\n\nfunction getTimeElapsed(prevTime) {\n  const currentTime = new Date();\n  const a = currentTime.getTime() - prevTime.getTime();\n  return Math.floor(a / 1000);\n}","map":null,"metadata":{},"sourceType":"script"}