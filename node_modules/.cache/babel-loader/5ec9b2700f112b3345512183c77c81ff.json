{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar PeerId = require('peer-id');\n\nvar basePacket = {\n  success: true,\n  time: 0,\n  text: ''\n};\n\nvar _require = require('../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nmodule.exports = function (_ref) {\n  var libp2p = _ref.libp2p;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _ping = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peerId, options) {\n      var peerInfo, packetCount, totalTime, i, time, average;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = options || {};\n              options.count = options.count || 10;\n\n              if (!PeerId.isPeerId(peerId)) {\n                peerId = PeerId.createFromCID(peerId);\n              }\n\n              if (!libp2p.peerStore.has(peerId)) {\n                _context.next = 7;\n                break;\n              }\n\n              peerInfo = libp2p.peerStore.get(peerId);\n              _context.next = 12;\n              break;\n\n            case 7:\n              _context.next = 9;\n              return _objectSpread(_objectSpread({}, basePacket), {}, {\n                text: \"Looking up peer \".concat(peerId)\n              });\n\n            case 9:\n              _context.next = 11;\n              return _awaitAsyncGenerator(libp2p.peerRouting.findPeer(peerId));\n\n            case 11:\n              peerInfo = _context.sent;\n\n            case 12:\n              _context.next = 14;\n              return _objectSpread(_objectSpread({}, basePacket), {}, {\n                text: \"PING \".concat(peerInfo.id.toB58String())\n              });\n\n            case 14:\n              packetCount = 0;\n              totalTime = 0;\n              i = 0;\n\n            case 17:\n              if (!(i < options.count)) {\n                _context.next = 35;\n                break;\n              }\n\n              _context.prev = 18;\n              _context.next = 21;\n              return _awaitAsyncGenerator(libp2p.ping(peerInfo));\n\n            case 21:\n              time = _context.sent;\n              totalTime += time;\n              packetCount++;\n              _context.next = 26;\n              return _objectSpread(_objectSpread({}, basePacket), {}, {\n                time: time\n              });\n\n            case 26:\n              _context.next = 32;\n              break;\n\n            case 28:\n              _context.prev = 28;\n              _context.t0 = _context[\"catch\"](18);\n              _context.next = 32;\n              return _objectSpread(_objectSpread({}, basePacket), {}, {\n                success: false,\n                text: _context.t0.toString()\n              });\n\n            case 32:\n              i++;\n              _context.next = 17;\n              break;\n\n            case 35:\n              if (!packetCount) {\n                _context.next = 39;\n                break;\n              }\n\n              average = totalTime / packetCount;\n              _context.next = 39;\n              return _objectSpread(_objectSpread({}, basePacket), {}, {\n                text: \"Average latency: \".concat(average, \"ms\")\n              });\n\n            case 39:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[18, 28]]);\n    }));\n\n    function ping(_x, _x2) {\n      return _ping.apply(this, arguments);\n    }\n\n    return ping;\n  }());\n};","map":null,"metadata":{},"sourceType":"script"}