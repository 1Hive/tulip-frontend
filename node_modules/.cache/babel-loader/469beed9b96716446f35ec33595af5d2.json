{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar errcode = require('err-code');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar webcrypto = require('../webcrypto');\n\nvar _require2 = require('../util'),\n    bufferToBase64url = _require2.bufferToBase64url,\n    base64urlToBuffer = _require2.base64urlToBuffer;\n\nvar validateCurveType = require('./validate-curve-type');\n\nvar bits = {\n  'P-256': 256,\n  'P-384': 384,\n  'P-521': 521\n};\n\nexports.generateEphmeralKeyPair = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(curve) {\n    var pair, genSharedKey, publicKey;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            validateCurveType(Object.keys(bits), curve);\n            _context2.next = 3;\n            return webcrypto.get().subtle.generateKey({\n              name: 'ECDH',\n              namedCurve: curve\n            }, true, ['deriveBits']);\n\n          case 3:\n            pair = _context2.sent;\n\n            // forcePrivate is used for testing only\n            genSharedKey = /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(theirPub, forcePrivate) {\n                var privateKey, keys;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        if (!forcePrivate) {\n                          _context.next = 6;\n                          break;\n                        }\n\n                        _context.next = 3;\n                        return webcrypto.get().subtle.importKey('jwk', unmarshalPrivateKey(curve, forcePrivate), {\n                          name: 'ECDH',\n                          namedCurve: curve\n                        }, false, ['deriveBits']);\n\n                      case 3:\n                        privateKey = _context.sent;\n                        _context.next = 7;\n                        break;\n\n                      case 6:\n                        privateKey = pair.privateKey;\n\n                      case 7:\n                        _context.next = 9;\n                        return webcrypto.get().subtle.importKey('jwk', unmarshalPublicKey(curve, theirPub), {\n                          name: 'ECDH',\n                          namedCurve: curve\n                        }, false, []);\n\n                      case 9:\n                        _context.t0 = _context.sent;\n                        _context.t1 = privateKey;\n                        keys = [_context.t0, _context.t1];\n                        _context.t2 = Buffer;\n                        _context.next = 15;\n                        return webcrypto.get().subtle.deriveBits({\n                          name: 'ECDH',\n                          namedCurve: curve,\n                          public: keys[0]\n                        }, keys[1], bits[curve]);\n\n                      case 15:\n                        _context.t3 = _context.sent;\n                        return _context.abrupt(\"return\", _context.t2.from.call(_context.t2, _context.t3));\n\n                      case 17:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function genSharedKey(_x2, _x3) {\n                return _ref2.apply(this, arguments);\n              };\n            }();\n\n            _context2.next = 7;\n            return webcrypto.get().subtle.exportKey('jwk', pair.publicKey);\n\n          case 7:\n            publicKey = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              key: marshalPublicKey(publicKey),\n              genSharedKey: genSharedKey\n            });\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar curveLengths = {\n  'P-256': 32,\n  'P-384': 48,\n  'P-521': 66\n}; // Marshal converts a jwk encodec ECDH public key into the\n// form specified in section 4.3.6 of ANSI X9.62. (This is the format\n// go-ipfs uses)\n\nfunction marshalPublicKey(jwk) {\n  var byteLen = curveLengths[jwk.crv];\n  return Buffer.concat([Buffer.from([4]), // uncompressed point\n  base64urlToBuffer(jwk.x, byteLen), base64urlToBuffer(jwk.y, byteLen)], 1 + byteLen * 2);\n} // Unmarshal converts a point, serialized by Marshal, into an jwk encoded key\n\n\nfunction unmarshalPublicKey(curve, key) {\n  var byteLen = curveLengths[curve];\n\n  if (!key.slice(0, 1).equals(Buffer.from([4]))) {\n    throw errcode(new Error('Cannot unmarshal public key - invalid key format'), 'ERR_INVALID_KEY_FORMAT');\n  }\n\n  return {\n    kty: 'EC',\n    crv: curve,\n    x: bufferToBase64url(key.slice(1, byteLen + 1), byteLen),\n    y: bufferToBase64url(key.slice(1 + byteLen), byteLen),\n    ext: true\n  };\n}\n\nvar unmarshalPrivateKey = function unmarshalPrivateKey(curve, key) {\n  return _objectSpread(_objectSpread({}, unmarshalPublicKey(curve, key.public)), {}, {\n    d: bufferToBase64url(key.private)\n  });\n};","map":null,"metadata":{},"sourceType":"script"}