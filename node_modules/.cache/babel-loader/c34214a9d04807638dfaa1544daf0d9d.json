{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events');\n\nconst lp = require('it-length-prefixed');\n\nconst pushable = require('it-pushable');\n\nconst pipe = require('it-pipe');\n\nconst debug = require('debug');\n\nconst log = debug('libp2p-pubsub:peer');\nlog.error = debug('libp2p-pubsub:peer:error');\n\nconst {\n  RPC\n} = require('./message');\n/**\n * The known state of a connected peer.\n */\n\n\nclass Peer extends EventEmitter {\n  /**\n   * @param {PeerInfo} info\n   */\n  constructor(info) {\n    super();\n    /**\n     * @type {PeerInfo}\n     */\n\n    this.info = info;\n    /**\n     * @type {Connection}\n     */\n\n    this.conn = null;\n    /**\n     * @type {Set}\n     */\n\n    this.topics = new Set();\n    /**\n     * @type {Pushable}\n     */\n\n    this.stream = null;\n  }\n  /**\n   * Is the peer connected currently?\n   *\n   * @type {boolean}\n   */\n\n\n  get isConnected() {\n    return Boolean(this.conn);\n  }\n  /**\n   * Do we have a connection to write on?\n   *\n   * @type {boolean}\n   */\n\n\n  get isWritable() {\n    return Boolean(this.stream);\n  }\n  /**\n   * Send a message to this peer.\n   * Throws if there is no `stream` to write to available.\n   *\n   * @param {Buffer} msg\n   * @returns {undefined}\n   */\n\n\n  write(msg) {\n    if (!this.isWritable) {\n      const id = this.info.id.toB58String();\n      throw new Error('No writable connection to ' + id);\n    }\n\n    this.stream.push(msg);\n  }\n  /**\n   * Attach the peer to a connection and setup a write stream\n   *\n   * @param {Connection} conn\n   * @returns {void}\n   */\n\n\n  async attachConnection(conn) {\n    const _prevStream = this.stream;\n\n    if (_prevStream) {\n      // End the stream without emitting a close event\n      await _prevStream.end(false);\n    }\n\n    this.stream = pushable({\n      onEnd: emit => {\n        // close readable side of the stream\n        this.conn.reset && this.conn.reset();\n        this.conn = null;\n        this.stream = null;\n\n        if (emit !== false) {\n          this.emit('close');\n        }\n      }\n    });\n    this.conn = conn;\n    pipe(this.stream, lp.encode(), conn).catch(err => {\n      log.error(err);\n    }); // Only emit if the connection is new\n\n    if (!_prevStream) {\n      this.emit('connection');\n    }\n  }\n\n  _sendRawSubscriptions(topics, subscribe) {\n    if (topics.size === 0) {\n      return;\n    }\n\n    const subs = [];\n    topics.forEach(topic => {\n      subs.push({\n        subscribe: subscribe,\n        topicID: topic\n      });\n    });\n    this.write(RPC.encode({\n      subscriptions: subs\n    }));\n  }\n  /**\n   * Send the given subscriptions to this peer.\n   * @param {Set|Array} topics\n   * @returns {undefined}\n   */\n\n\n  sendSubscriptions(topics) {\n    this._sendRawSubscriptions(topics, true);\n  }\n  /**\n   * Send the given unsubscriptions to this peer.\n   * @param {Set|Array} topics\n   * @returns {undefined}\n   */\n\n\n  sendUnsubscriptions(topics) {\n    this._sendRawSubscriptions(topics, false);\n  }\n  /**\n   * Send messages to this peer.\n   *\n   * @param {Array<any>} msgs\n   * @returns {undefined}\n   */\n\n\n  sendMessages(msgs) {\n    this.write(RPC.encode({\n      msgs: msgs\n    }));\n  }\n  /**\n   * Bulk process subscription updates.\n   *\n   * @param {Array} changes\n   * @returns {undefined}\n   */\n\n\n  updateSubscriptions(changes) {\n    changes.forEach(subopt => {\n      if (subopt.subscribe) {\n        this.topics.add(subopt.topicID);\n      } else {\n        this.topics.delete(subopt.topicID);\n      }\n    });\n  }\n  /**\n   * Closes the open connection to peer\n   * @returns {void}\n   */\n\n\n  close() {\n    // End the pushable\n    if (this.stream) {\n      this.stream.end();\n    }\n\n    this.conn = null;\n    this.stream = null;\n    this.emit('close');\n  }\n\n}\n\nmodule.exports = Peer;","map":null,"metadata":{},"sourceType":"script"}