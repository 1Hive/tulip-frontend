{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Clock = require('./lamport-clock');\n\nvar _require = require('./utils'),\n    isDefined = _require.isDefined,\n    io = _require.io;\n\nvar stringify = require('json-stringify-deterministic');\n\nvar IpfsNotDefinedError = function IpfsNotDefinedError() {\n  return new Error('Ipfs instance not defined');\n};\n\nvar IPLD_LINKS = ['next', 'refs'];\n\nvar getWriteFormatForVersion = function getWriteFormatForVersion(v) {\n  return v === 0 ? 'dag-pb' : 'dag-cbor';\n};\n\nvar getWriteFormat = function getWriteFormat(e) {\n  return Entry.isEntry(e) ? getWriteFormatForVersion(e.v) : getWriteFormatForVersion(e);\n};\n\nvar Entry = /*#__PURE__*/function () {\n  function Entry() {\n    _classCallCheck(this, Entry);\n  }\n\n  _createClass(Entry, null, [{\n    key: \"create\",\n    value:\n    /**\n     * Create an Entry\n     * @param {IPFS} ipfs An IPFS instance\n     * @param {Identity} identity The identity instance\n     * @param {string} logId The unique identifier for this log\n     * @param {*} data Data of the entry to be added. Can be any JSON.stringifyable data\n     * @param {Array<string|Entry>} [next=[]] Parent hashes or entries\n     * @param {LamportClock} [clock] The lamport clock\n     * @returns {Promise<Entry>}\n     * @example\n     * const entry = await Entry.create(ipfs, identity, 'hello')\n     * console.log(entry)\n     * // { hash: null, payload: \"hello\", next: [] }\n     */\n    function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ipfs, identity, logId, data) {\n        var next,\n            clock,\n            refs,\n            pin,\n            toEntry,\n            nexts,\n            entry,\n            signature,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                next = _args.length > 4 && _args[4] !== undefined ? _args[4] : [];\n                clock = _args.length > 5 ? _args[5] : undefined;\n                refs = _args.length > 6 && _args[6] !== undefined ? _args[6] : [];\n                pin = _args.length > 7 ? _args[7] : undefined;\n\n                if (isDefined(ipfs)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw IpfsNotDefinedError();\n\n              case 6:\n                if (isDefined(identity)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                throw new Error('Identity is required, cannot create entry');\n\n              case 8:\n                if (isDefined(logId)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                throw new Error('Entry requires an id');\n\n              case 10:\n                if (isDefined(data)) {\n                  _context.next = 12;\n                  break;\n                }\n\n                throw new Error('Entry requires data');\n\n              case 12:\n                if (!(!isDefined(next) || !Array.isArray(next))) {\n                  _context.next = 14;\n                  break;\n                }\n\n                throw new Error(\"'next' argument is not an array\");\n\n              case 14:\n                // Clean the next objects and convert to hashes\n                toEntry = function toEntry(e) {\n                  return e.hash ? e.hash : e;\n                };\n\n                nexts = next.filter(isDefined).map(toEntry);\n                entry = {\n                  hash: null,\n                  // \"zd...Foo\", we'll set the hash after persisting the entry\n                  id: logId,\n                  // For determining a unique chain\n                  payload: data,\n                  // Can be any JSON.stringifyable data\n                  next: nexts,\n                  // Array of hashes\n                  refs: refs,\n                  v: 2,\n                  // To tag the version of this data structure\n                  clock: clock || new Clock(identity.publicKey)\n                };\n                _context.next = 19;\n                return identity.provider.sign(identity, Entry.toBuffer(entry));\n\n              case 19:\n                signature = _context.sent;\n                entry.key = identity.publicKey;\n                entry.identity = identity.toJSON();\n                entry.sig = signature;\n                _context.next = 25;\n                return Entry.toMultihash(ipfs, entry, pin);\n\n              case 25:\n                entry.hash = _context.sent;\n                return _context.abrupt(\"return\", entry);\n\n              case 27:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function create(_x, _x2, _x3, _x4) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n    /**\n     * Verifies an entry signature.\n     *\n     * @param {IdentityProvider} identityProvider The identity provider to use\n     * @param {Entry} entry The entry being verified\n     * @return {Promise} A promise that resolves to a boolean value indicating if the signature is valid\n     */\n\n  }, {\n    key: \"verify\",\n    value: function () {\n      var _verify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(identityProvider, entry) {\n        var e, verifier;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (identityProvider) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new Error('Identity-provider is required, cannot verify entry');\n\n              case 2:\n                if (Entry.isEntry(entry)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                throw new Error('Invalid Log entry');\n\n              case 4:\n                if (entry.key) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Entry doesn't have a key\");\n\n              case 6:\n                if (entry.sig) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                throw new Error(\"Entry doesn't have a signature\");\n\n              case 8:\n                e = Entry.toEntry(entry, {\n                  presigned: true\n                });\n                verifier = entry.v < 1 ? 'v0' : 'v1';\n                return _context2.abrupt(\"return\", identityProvider.verify(entry.sig, entry.key, Entry.toBuffer(e), verifier));\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function verify(_x5, _x6) {\n        return _verify.apply(this, arguments);\n      }\n\n      return verify;\n    }()\n    /**\n     * Transforms an entry into a Buffer.\n     * @param {Entry} entry The entry\n     * @return {Buffer} The buffer\n     */\n\n  }, {\n    key: \"toBuffer\",\n    value: function toBuffer(entry) {\n      var stringifiedEntry = entry.v === 0 ? JSON.stringify(entry) : stringify(entry);\n      return Buffer.from(stringifiedEntry);\n    }\n    /**\n     * Get the multihash of an Entry.\n     * @param {IPFS} ipfs An IPFS instance\n     * @param {Entry} entry Entry to get a multihash for\n     * @returns {Promise<string>}\n     * @example\n     * const multihash = await Entry.toMultihash(ipfs, entry)\n     * console.log(multihash)\n     * // \"Qm...Foo\"\n     * @deprecated\n     */\n\n  }, {\n    key: \"toMultihash\",\n    value: function () {\n      var _toMultihash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(ipfs, entry) {\n        var pin,\n            e,\n            _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                pin = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : false;\n\n                if (ipfs) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                throw IpfsNotDefinedError();\n\n              case 3:\n                if (Entry.isEntry(entry)) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                throw new Error('Invalid object format, cannot generate entry hash');\n\n              case 5:\n                // // Ensure `entry` follows the correct format\n                e = Entry.toEntry(entry);\n                return _context3.abrupt(\"return\", io.write(ipfs, getWriteFormat(e.v), e, {\n                  links: IPLD_LINKS,\n                  pin: pin\n                }));\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function toMultihash(_x7, _x8) {\n        return _toMultihash.apply(this, arguments);\n      }\n\n      return toMultihash;\n    }()\n  }, {\n    key: \"toEntry\",\n    value: function toEntry(entry) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref$presigned = _ref.presigned,\n          presigned = _ref$presigned === void 0 ? false : _ref$presigned,\n          _ref$includeHash = _ref.includeHash,\n          includeHash = _ref$includeHash === void 0 ? false : _ref$includeHash;\n\n      var e = {\n        hash: includeHash ? entry.hash : null,\n        id: entry.id,\n        payload: entry.payload,\n        next: entry.next\n      };\n      var v = entry.v;\n\n      if (v > 1) {\n        e.refs = entry.refs; // added in v2\n      }\n\n      e.v = entry.v;\n      e.clock = new Clock(entry.clock.id, entry.clock.time);\n\n      if (presigned) {\n        return e; // don't include key/sig information\n      }\n\n      e.key = entry.key;\n\n      if (v > 0) {\n        e.identity = entry.identity; // added in v1\n      }\n\n      e.sig = entry.sig;\n      return e;\n    }\n    /**\n     * Create an Entry from a hash.\n     * @param {IPFS} ipfs An IPFS instance\n     * @param {string} hash The hash to create an Entry from\n     * @returns {Promise<Entry>}\n     * @example\n     * const entry = await Entry.fromMultihash(ipfs, \"zd...Foo\")\n     * console.log(entry)\n     * // { hash: \"Zd...Foo\", payload: \"hello\", next: [] }\n     */\n\n  }, {\n    key: \"fromMultihash\",\n    value: function () {\n      var _fromMultihash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(ipfs, hash) {\n        var e, entry;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (ipfs) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw IpfsNotDefinedError();\n\n              case 2:\n                if (hash) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                throw new Error(\"Invalid hash: \".concat(hash));\n\n              case 4:\n                _context4.next = 6;\n                return io.read(ipfs, hash, {\n                  links: IPLD_LINKS\n                });\n\n              case 6:\n                e = _context4.sent;\n                entry = Entry.toEntry(e);\n                entry.hash = hash;\n                return _context4.abrupt(\"return\", entry);\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function fromMultihash(_x9, _x10) {\n        return _fromMultihash.apply(this, arguments);\n      }\n\n      return fromMultihash;\n    }()\n    /**\n     * Check if an object is an Entry.\n     * @param {Entry} obj\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isEntry\",\n    value: function isEntry(obj) {\n      return obj && obj.id !== undefined && obj.next !== undefined && obj.payload !== undefined && obj.v !== undefined && obj.hash !== undefined && obj.clock !== undefined && (obj.refs !== undefined || obj.v < 2); // 'refs' added in v2\n    }\n    /**\n     * Compares two entries.\n     * @param {Entry} a\n     * @param {Entry} b\n     * @returns {number} 1 if a is greater, -1 is b is greater\n     */\n\n  }, {\n    key: \"compare\",\n    value: function compare(a, b) {\n      var distance = Clock.compare(a.clock, b.clock);\n      if (distance === 0) return a.clock.id < b.clock.id ? -1 : 1;\n      return distance;\n    }\n    /**\n     * Check if an entry equals another entry.\n     * @param {Entry} a\n     * @param {Entry} b\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(a, b) {\n      return a.hash === b.hash;\n    }\n    /**\n     * Check if an entry is a parent to another entry.\n     * @param {Entry} entry1 Entry to check\n     * @param {Entry} entry2 The parent Entry\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isParent\",\n    value: function isParent(entry1, entry2) {\n      return entry2.next.indexOf(entry1.hash) > -1;\n    }\n    /**\n     * Find entry's children from an Array of entries.\n     * Returns entry's children as an Array up to the last know child.\n     * @param {Entry} entry Entry for which to find the parents\n     * @param {Array<Entry>} values Entries to search parents from\n     * @returns {Array<Entry>}\n     */\n\n  }, {\n    key: \"findChildren\",\n    value: function findChildren(entry, values) {\n      var stack = [];\n      var parent = values.find(function (e) {\n        return Entry.isParent(entry, e);\n      });\n      var prev = entry;\n\n      while (parent) {\n        stack.push(parent);\n        prev = parent;\n        parent = values.find(function (e) {\n          return Entry.isParent(prev, e);\n        });\n      }\n\n      stack = stack.sort(function (a, b) {\n        return a.clock.time > b.clock.time;\n      });\n      return stack;\n    }\n  }]);\n\n  return Entry;\n}();\n\nmodule.exports = Entry;\nmodule.exports.IPLD_LINKS = IPLD_LINKS;\nmodule.exports.getWriteFormat = getWriteFormat;","map":null,"metadata":{},"sourceType":"script"}