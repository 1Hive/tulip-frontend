{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ClientError =\n/** @class */\nfunction (_super) {\n  __extends(ClientError, _super);\n\n  function ClientError(response, request) {\n    var _this = this;\n\n    var message = ClientError.extractMessage(response) + \": \" + JSON.stringify({\n      response: response,\n      request: request\n    });\n    _this = _super.call(this, message) || this;\n    _this.response = response;\n    _this.request = request; // this is needed as Safari doesn't support .captureStackTrace\n\n    /* tslint:disable-next-line */\n\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(_this, ClientError);\n    }\n\n    return _this;\n  }\n\n  ClientError.extractMessage = function (response) {\n    try {\n      return response.errors[0].message;\n    } catch (e) {\n      return \"GraphQL Error (Code: \" + response.status + \")\";\n    }\n  };\n\n  return ClientError;\n}(Error);\n\nexports.ClientError = ClientError;","map":null,"metadata":{},"sourceType":"script"}