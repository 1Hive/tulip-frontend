{"ast":null,"code":"import _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { Subscribable } from './subscribable';\nimport { isServer } from './utils';\n\nvar FocusManager = /*#__PURE__*/function (_Subscribable) {\n  _inheritsLoose(FocusManager, _Subscribable);\n\n  function FocusManager() {\n    return _Subscribable.apply(this, arguments) || this;\n  }\n\n  var _proto = FocusManager.prototype;\n\n  _proto.onSubscribe = function onSubscribe() {\n    if (!this.removeEventListener) {\n      this.setDefaultEventListener();\n    }\n  };\n\n  _proto.setEventListener = function setEventListener(setup) {\n    var _this = this;\n\n    if (this.removeEventListener) {\n      this.removeEventListener();\n    }\n\n    this.removeEventListener = setup(function (focused) {\n      if (typeof focused === 'boolean') {\n        _this.setFocused(focused);\n      } else {\n        _this.onFocus();\n      }\n    });\n  };\n\n  _proto.setFocused = function setFocused(focused) {\n    this.focused = focused;\n\n    if (focused) {\n      this.onFocus();\n    }\n  };\n\n  _proto.onFocus = function onFocus() {\n    this.listeners.forEach(function (listener) {\n      listener();\n    });\n  };\n\n  _proto.isFocused = function isFocused() {\n    if (typeof this.focused === 'boolean') {\n      return this.focused;\n    } // document global can be unavailable in react native\n\n\n    if (typeof document === 'undefined') {\n      return true;\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(document.visibilityState);\n  };\n\n  _proto.setDefaultEventListener = function setDefaultEventListener() {\n    var _window;\n\n    if (!isServer && ((_window = window) == null ? void 0 : _window.addEventListener)) {\n      this.setEventListener(function (onFocus) {\n        // Listen to visibillitychange and focus\n        window.addEventListener('visibilitychange', onFocus, false);\n        window.addEventListener('focus', onFocus, false);\n        return function () {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', onFocus);\n          window.removeEventListener('focus', onFocus);\n        };\n      });\n    }\n  };\n\n  return FocusManager;\n}(Subscribable);\n\nexport var focusManager = new FocusManager();","map":null,"metadata":{},"sourceType":"module"}