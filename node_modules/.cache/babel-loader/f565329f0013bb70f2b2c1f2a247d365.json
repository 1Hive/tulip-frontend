{"ast":null,"code":"const events = {};\n\nconst observable = worker => {\n  worker.addEventListener('message', event => {\n    observable.dispatchEvent('message', worker, event);\n  });\n\n  if (worker.port) {\n    worker.port.addEventListener('message', event => {\n      observable.dispatchEvent('message', worker, event);\n    });\n  }\n};\n\nobservable.addEventListener = (type, fn) => {\n  if (!events[type]) {\n    events[type] = [];\n  }\n\n  events[type].push(fn);\n};\n\nobservable.removeEventListener = (type, fn) => {\n  if (!events[type]) {\n    return;\n  }\n\n  events[type] = events[type].filter(listener => listener === fn);\n};\n\nobservable.dispatchEvent = function () {\n  const args = Array.prototype.slice.call(arguments);\n  const type = args.shift();\n\n  if (!events[type]) {\n    return;\n  }\n\n  events[type].forEach(fn => fn.apply(null, args));\n};\n\nmodule.exports = observable;","map":null,"metadata":{},"sourceType":"script"}