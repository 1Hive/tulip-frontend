{"ast":null,"code":"'use strict';\n\nvar pMap = function pMap(iterable, mapper, options) {\n  return new Promise(function (resolve, reject) {\n    options = Object.assign({\n      concurrency: Infinity\n    }, options);\n\n    if (typeof mapper !== 'function') {\n      throw new TypeError('Mapper function is required');\n    }\n\n    var _options = options,\n        concurrency = _options.concurrency;\n\n    if (!(typeof concurrency === 'number' && concurrency >= 1)) {\n      throw new TypeError(\"Expected `concurrency` to be a number from 1 and up, got `\".concat(concurrency, \"` (\").concat(typeof concurrency, \")\"));\n    }\n\n    var ret = [];\n    var iterator = iterable[Symbol.iterator]();\n    var isRejected = false;\n    var isIterableDone = false;\n    var resolvingCount = 0;\n    var currentIndex = 0;\n\n    var next = function next() {\n      if (isRejected) {\n        return;\n      }\n\n      var nextItem = iterator.next();\n      var i = currentIndex;\n      currentIndex++;\n\n      if (nextItem.done) {\n        isIterableDone = true;\n\n        if (resolvingCount === 0) {\n          resolve(ret);\n        }\n\n        return;\n      }\n\n      resolvingCount++;\n      Promise.resolve(nextItem.value).then(function (element) {\n        return mapper(element, i);\n      }).then(function (value) {\n        ret[i] = value;\n        resolvingCount--;\n        next();\n      }, function (error) {\n        isRejected = true;\n        reject(error);\n      });\n    };\n\n    for (var i = 0; i < concurrency; i++) {\n      next();\n\n      if (isIterableDone) {\n        break;\n      }\n    }\n  });\n};\n\nmodule.exports = pMap; // TODO: Remove this for the next major release\n\nmodule.exports.default = pMap;","map":null,"metadata":{},"sourceType":"script"}