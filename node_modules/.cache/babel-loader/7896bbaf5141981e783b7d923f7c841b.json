{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar MAX_MSG_SIZE = 1 << 20; // 1MB\n\n/**\n * Creates an iterable transform that restricts message sizes to\n * the given maximum size.\n * @param {number} [max] The maximum message size. Defaults to 1MB\n * @returns {*} An iterable transform.\n */\n\nmodule.exports = function (max) {\n  max = max || MAX_MSG_SIZE;\n\n  var checkSize = function checkSize(msg) {\n    if (msg.data && msg.data.length > max) {\n      throw Object.assign(new Error('message size too large!'), {\n        code: 'ERR_MSG_TOO_BIG'\n      });\n    }\n  };\n\n  return function (source) {\n    return function () {\n      var _restrictSize = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, msg;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context.prev = 2;\n                _iterator = _asyncIterator(source);\n\n              case 4:\n                _context.next = 6;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 6:\n                _step = _context.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context.next = 10;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 10:\n                _value = _context.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context.next = 19;\n                  break;\n                }\n\n                msg = _value;\n\n                if (Array.isArray(msg)) {\n                  msg.forEach(checkSize);\n                } else {\n                  checkSize(msg);\n                }\n\n                _context.next = 16;\n                return msg;\n\n              case 16:\n                _iteratorNormalCompletion = true;\n                _context.next = 4;\n                break;\n\n              case 19:\n                _context.next = 25;\n                break;\n\n              case 21:\n                _context.prev = 21;\n                _context.t0 = _context[\"catch\"](2);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 25:\n                _context.prev = 25;\n                _context.prev = 26;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context.next = 30;\n                  break;\n                }\n\n                _context.next = 30;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 30:\n                _context.prev = 30;\n\n                if (!_didIteratorError) {\n                  _context.next = 33;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 33:\n                return _context.finish(30);\n\n              case 34:\n                return _context.finish(25);\n\n              case 35:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 21, 25, 35], [26,, 30, 34]]);\n      }));\n\n      function restrictSize() {\n        return _restrictSize.apply(this, arguments);\n      }\n\n      return restrictSize;\n    }()();\n  };\n};\n\nmodule.exports.MAX_MSG_SIZE = MAX_MSG_SIZE;","map":null,"metadata":{},"sourceType":"script"}