{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar toUri = require('multiaddr-to-uri');\n\nvar debug = require('debug');\n\nvar CID = require('cids');\n\nvar shuffle = require('array-shuffle');\n\nvar AbortController = require('abort-controller');\n\nvar preload = require('./runtime/preload-nodejs');\n\nvar log = debug('ipfs:preload');\nlog.error = debug('ipfs:preload:error');\n\nmodule.exports = function (options) {\n  options = options || {};\n  options.enabled = Boolean(options.enabled);\n  options.addresses = options.addresses || [];\n\n  if (!options.enabled || !options.addresses.length) {\n    log('preload disabled');\n\n    var _api = function _api() {};\n\n    _api.start = function () {};\n\n    _api.stop = function () {};\n\n    return _api;\n  }\n\n  var stopped = true;\n  var requests = [];\n  var apiUris = options.addresses.map(toUri);\n\n  var api = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {\n      var fallbackApiUris, success, now, _iterator, _step, _loop, _ret;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n\n              if (!stopped) {\n                _context2.next = 3;\n                break;\n              }\n\n              throw new Error(\"preload \".concat(path, \" but preloader is not started\"));\n\n            case 3:\n              if (typeof path !== 'string') {\n                path = new CID(path).toString();\n              }\n\n              fallbackApiUris = shuffle(apiUris);\n              success = false;\n              now = Date.now();\n              _iterator = _createForOfIteratorHelper(fallbackApiUris);\n              _context2.prev = 8;\n              _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n                var uri, controller;\n                return _regeneratorRuntime.wrap(function _loop$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        uri = _step.value;\n\n                        if (!stopped) {\n                          _context.next = 3;\n                          break;\n                        }\n\n                        throw new Error(\"preload aborted for \".concat(path));\n\n                      case 3:\n                        controller = void 0;\n                        _context.prev = 4;\n                        controller = new AbortController();\n                        requests = requests.concat(controller);\n                        _context.next = 9;\n                        return preload(\"\".concat(uri, \"/api/v0/refs?r=true&arg=\").concat(encodeURIComponent(path)), {\n                          signal: controller.signal\n                        });\n\n                      case 9:\n                        success = true;\n                        _context.next = 15;\n                        break;\n\n                      case 12:\n                        _context.prev = 12;\n                        _context.t0 = _context[\"catch\"](4);\n                        if (_context.t0.type !== 'aborted') log.error(_context.t0);\n\n                      case 15:\n                        _context.prev = 15;\n                        requests = requests.filter(function (r) {\n                          return r !== controller;\n                        });\n                        return _context.finish(15);\n\n                      case 18:\n                        if (!success) {\n                          _context.next = 20;\n                          break;\n                        }\n\n                        return _context.abrupt(\"return\", \"break\");\n\n                      case 20:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _loop, null, [[4, 12, 15, 18]]);\n              });\n\n              _iterator.s();\n\n            case 11:\n              if ((_step = _iterator.n()).done) {\n                _context2.next = 18;\n                break;\n              }\n\n              return _context2.delegateYield(_loop(), \"t0\", 13);\n\n            case 13:\n              _ret = _context2.t0;\n\n              if (!(_ret === \"break\")) {\n                _context2.next = 16;\n                break;\n              }\n\n              return _context2.abrupt(\"break\", 18);\n\n            case 16:\n              _context2.next = 11;\n              break;\n\n            case 18:\n              _context2.next = 23;\n              break;\n\n            case 20:\n              _context2.prev = 20;\n              _context2.t1 = _context2[\"catch\"](8);\n\n              _iterator.e(_context2.t1);\n\n            case 23:\n              _context2.prev = 23;\n\n              _iterator.f();\n\n              return _context2.finish(23);\n\n            case 26:\n              log(\"\".concat(success ? '' : 'un', \"successfully preloaded \").concat(path, \" in \").concat(Date.now() - now, \"ms\"));\n              _context2.next = 32;\n              break;\n\n            case 29:\n              _context2.prev = 29;\n              _context2.t2 = _context2[\"catch\"](0);\n              log.error(_context2.t2);\n\n            case 32:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee, null, [[0, 29], [8, 20, 23, 26]]);\n    }));\n\n    return function api(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  api.start = function () {\n    stopped = false;\n  };\n\n  api.stop = function () {\n    stopped = true;\n    log(\"aborting \".concat(requests.length, \" pending preload request(s)\"));\n    requests.forEach(function (r) {\n      return r.abort();\n    });\n    requests = [];\n  };\n\n  return api;\n};","map":null,"metadata":{},"sourceType":"script"}