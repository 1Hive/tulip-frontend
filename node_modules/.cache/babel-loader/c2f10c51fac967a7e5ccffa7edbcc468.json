{"ast":null,"code":"'use strict';\n\nconst errCode = require('err-code');\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst log = require('debug')('ipfs:mfs:utils:to-async-iterator');\n\nconst {\n  MFS_MAX_CHUNK_SIZE\n} = require('../../../utils');\n\nconst toAsyncIterator = content => {\n  if (!content) {\n    throw errCode(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH');\n  }\n\n  if (typeof content === 'string' || content instanceof String) {\n    log('Content was a string');\n    content = Buffer.from(content);\n  }\n\n  if (content.length) {\n    log('Content was array-like');\n    return {\n      [Symbol.asyncIterator]: function* bufferContent() {\n        yield content;\n      }\n    };\n  }\n\n  if (content[Symbol.asyncIterator]) {\n    log('Content was an async iterator');\n    return content;\n  }\n\n  if (content[Symbol.iterator]) {\n    log('Content was an iterator');\n    return content;\n  }\n\n  if (global.Blob && content instanceof global.Blob) {\n    // HTML5 Blob objects (including Files)\n    log('Content was an HTML5 Blob');\n    let index = 0;\n    const iterator = {\n      next: () => {\n        if (index > content.size) {\n          return {\n            done: true\n          };\n        }\n\n        return new Promise((resolve, reject) => {\n          const chunk = content.slice(index, MFS_MAX_CHUNK_SIZE);\n          index += MFS_MAX_CHUNK_SIZE;\n          const reader = new global.FileReader();\n\n          const handleLoad = ev => {\n            reader.removeEventListener('loadend', handleLoad, false);\n\n            if (ev.error) {\n              return reject(ev.error);\n            }\n\n            resolve({\n              done: false,\n              value: Buffer.from(reader.result)\n            });\n          };\n\n          reader.addEventListener('loadend', handleLoad);\n          reader.readAsArrayBuffer(chunk);\n        });\n      }\n    };\n    return {\n      [Symbol.asyncIterator]: () => {\n        return iterator;\n      }\n    };\n  }\n\n  throw errCode(new Error(`Don't know how to convert ${content} into an async iterator`), 'ERR_INVALID_PARAMS');\n};\n\nmodule.exports = toAsyncIterator;","map":null,"metadata":{},"sourceType":"script"}