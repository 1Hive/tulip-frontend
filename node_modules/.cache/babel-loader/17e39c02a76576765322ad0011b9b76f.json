{"ast":null,"code":"\"use strict\"; // Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar binary_1 = require(\"@stablelib/binary\");\n\nvar wipe_1 = require(\"@stablelib/wipe\");\n\nexports.DIGEST_LENGTH = 32;\nexports.BLOCK_SIZE = 64;\n/**\n * SHA2-256 cryptographic hash algorithm.\n */\n\nvar SHA256 =\n/** @class */\nfunction () {\n  function SHA256() {\n    /** Length of hash output */\n    this.digestLength = exports.DIGEST_LENGTH;\n    /** Block size */\n\n    this.blockSize = exports.BLOCK_SIZE; // Note: Int32Array is used instead of Uint32Array for performance reasons.\n\n    this._state = new Int32Array(8); // hash state\n\n    this._temp = new Int32Array(64); // temporary state\n\n    this._buffer = new Uint8Array(128); // buffer for data to hash\n\n    this._bufferLength = 0; // number of bytes in buffer\n\n    this._bytesHashed = 0; // number of total bytes hashed\n\n    this._finished = false; // indicates whether the hash was finalized\n\n    this.reset();\n  }\n\n  SHA256.prototype._initState = function () {\n    this._state[0] = 0x6a09e667;\n    this._state[1] = 0xbb67ae85;\n    this._state[2] = 0x3c6ef372;\n    this._state[3] = 0xa54ff53a;\n    this._state[4] = 0x510e527f;\n    this._state[5] = 0x9b05688c;\n    this._state[6] = 0x1f83d9ab;\n    this._state[7] = 0x5be0cd19;\n  };\n  /**\n   * Resets hash state making it possible\n   * to re-use this instance to hash other data.\n   */\n\n\n  SHA256.prototype.reset = function () {\n    this._initState();\n\n    this._bufferLength = 0;\n    this._bytesHashed = 0;\n    this._finished = false;\n    return this;\n  };\n  /**\n   * Cleans internal buffers and resets hash state.\n   */\n\n\n  SHA256.prototype.clean = function () {\n    wipe_1.wipe(this._buffer);\n    wipe_1.wipe(this._temp);\n    this.reset();\n  };\n  /**\n   * Updates hash state with the given data.\n   *\n   * Throws error when trying to update already finalized hash:\n   * instance must be reset to update it again.\n   */\n\n\n  SHA256.prototype.update = function (data, dataLength) {\n    if (dataLength === void 0) {\n      dataLength = data.length;\n    }\n\n    if (this._finished) {\n      throw new Error(\"SHA256: can't update because hash was finished.\");\n    }\n\n    var dataPos = 0;\n    this._bytesHashed += dataLength;\n\n    if (this._bufferLength > 0) {\n      while (this._bufferLength < this.blockSize && dataLength > 0) {\n        this._buffer[this._bufferLength++] = data[dataPos++];\n        dataLength--;\n      }\n\n      if (this._bufferLength === this.blockSize) {\n        hashBlocks(this._temp, this._state, this._buffer, 0, this.blockSize);\n        this._bufferLength = 0;\n      }\n    }\n\n    if (dataLength >= this.blockSize) {\n      dataPos = hashBlocks(this._temp, this._state, data, dataPos, dataLength);\n      dataLength %= this.blockSize;\n    }\n\n    while (dataLength > 0) {\n      this._buffer[this._bufferLength++] = data[dataPos++];\n      dataLength--;\n    }\n\n    return this;\n  };\n  /**\n   * Finalizes hash state and puts hash into out.\n   * If hash was already finalized, puts the same value.\n   */\n\n\n  SHA256.prototype.finish = function (out) {\n    if (!this._finished) {\n      var bytesHashed = this._bytesHashed;\n      var left = this._bufferLength;\n      var bitLenHi = bytesHashed / 0x20000000 | 0;\n      var bitLenLo = bytesHashed << 3;\n      var padLength = bytesHashed % 64 < 56 ? 64 : 128;\n      this._buffer[left] = 0x80;\n\n      for (var i = left + 1; i < padLength - 8; i++) {\n        this._buffer[i] = 0;\n      }\n\n      binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);\n      binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);\n      hashBlocks(this._temp, this._state, this._buffer, 0, padLength);\n      this._finished = true;\n    }\n\n    for (var i = 0; i < this.digestLength / 4; i++) {\n      binary_1.writeUint32BE(this._state[i], out, i * 4);\n    }\n\n    return this;\n  };\n  /**\n   * Returns the final hash digest.\n   */\n\n\n  SHA256.prototype.digest = function () {\n    var out = new Uint8Array(this.digestLength);\n    this.finish(out);\n    return out;\n  };\n  /**\n   * Function useful for HMAC/PBKDF2 optimization.\n   * Returns hash state to be used with restoreState().\n   * Only chain value is saved, not buffers or other\n   * state variables.\n   */\n\n\n  SHA256.prototype.saveState = function () {\n    if (this._finished) {\n      throw new Error(\"SHA256: cannot save finished state\");\n    }\n\n    return {\n      state: new Int32Array(this._state),\n      buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : undefined,\n      bufferLength: this._bufferLength,\n      bytesHashed: this._bytesHashed\n    };\n  };\n  /**\n   * Function useful for HMAC/PBKDF2 optimization.\n   * Restores state saved by saveState() and sets bytesHashed\n   * to the given value.\n   */\n\n\n  SHA256.prototype.restoreState = function (savedState) {\n    this._state.set(savedState.state);\n\n    this._bufferLength = savedState.bufferLength;\n\n    if (savedState.buffer) {\n      this._buffer.set(savedState.buffer);\n    }\n\n    this._bytesHashed = savedState.bytesHashed;\n    this._finished = false;\n    return this;\n  };\n  /**\n   * Cleans state returned by saveState().\n   */\n\n\n  SHA256.prototype.cleanSavedState = function (savedState) {\n    wipe_1.wipe(savedState.state);\n\n    if (savedState.buffer) {\n      wipe_1.wipe(savedState.buffer);\n    }\n\n    savedState.bufferLength = 0;\n    savedState.bytesHashed = 0;\n  };\n\n  return SHA256;\n}();\n\nexports.SHA256 = SHA256; // Constants\n\nvar K = new Int32Array([0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]);\n\nfunction hashBlocks(w, v, p, pos, len) {\n  while (len >= 64) {\n    var a = v[0];\n    var b = v[1];\n    var c = v[2];\n    var d = v[3];\n    var e = v[4];\n    var f = v[5];\n    var g = v[6];\n    var h = v[7];\n\n    for (var i = 0; i < 16; i++) {\n      var j = pos + i * 4;\n      w[i] = binary_1.readUint32BE(p, j);\n    }\n\n    for (var i = 16; i < 64; i++) {\n      var u = w[i - 2];\n      var t1 = (u >>> 17 | u << 32 - 17) ^ (u >>> 19 | u << 32 - 19) ^ u >>> 10;\n      u = w[i - 15];\n      var t2 = (u >>> 7 | u << 32 - 7) ^ (u >>> 18 | u << 32 - 18) ^ u >>> 3;\n      w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);\n    }\n\n    for (var i = 0; i < 64; i++) {\n      var t1 = (((e >>> 6 | e << 32 - 6) ^ (e >>> 11 | e << 32 - 11) ^ (e >>> 25 | e << 32 - 25)) + (e & f ^ ~e & g) | 0) + (h + (K[i] + w[i] | 0) | 0) | 0;\n      var t2 = ((a >>> 2 | a << 32 - 2) ^ (a >>> 13 | a << 32 - 13) ^ (a >>> 22 | a << 32 - 22)) + (a & b ^ a & c ^ b & c) | 0;\n      h = g;\n      g = f;\n      f = e;\n      e = d + t1 | 0;\n      d = c;\n      c = b;\n      b = a;\n      a = t1 + t2 | 0;\n    }\n\n    v[0] += a;\n    v[1] += b;\n    v[2] += c;\n    v[3] += d;\n    v[4] += e;\n    v[5] += f;\n    v[6] += g;\n    v[7] += h;\n    pos += 64;\n    len -= 64;\n  }\n\n  return pos;\n}\n\nfunction hash(data) {\n  var h = new SHA256();\n  h.update(data);\n  var digest = h.digest();\n  h.clean();\n  return digest;\n}\n\nexports.hash = hash;","map":null,"metadata":{},"sourceType":"script"}