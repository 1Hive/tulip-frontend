{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar multihashing = require('multihashing-async');\n\nvar errcode = require('err-code');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n/**\n * Validator for publick key records.\n * Verifies that the passed in record value is the PublicKey\n * that matches the passed in key.\n * If validation fails the returned Promise will reject with the error.\n *\n * @param {Buffer} key - A valid key is of the form `'/pk/<keymultihash>'`\n * @param {Buffer} publicKey - The public key to validate against (protobuf encoded).\n * @returns {Promise}\n */\n\n\nvar validatePublicKeyRecord = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key, publicKey) {\n    var prefix, keyhash, publicKeyHash;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (Buffer.isBuffer(key)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw errcode(new Error('\"key\" must be a Buffer'), 'ERR_INVALID_RECORD_KEY_NOT_BUFFER');\n\n          case 2:\n            if (!(key.length < 5)) {\n              _context.next = 4;\n              break;\n            }\n\n            throw errcode(new Error('invalid public key record'), 'ERR_INVALID_RECORD_KEY_TOO_SHORT');\n\n          case 4:\n            prefix = key.slice(0, 4).toString();\n\n            if (!(prefix !== '/pk/')) {\n              _context.next = 7;\n              break;\n            }\n\n            throw errcode(new Error('key was not prefixed with /pk/'), 'ERR_INVALID_RECORD_KEY_BAD_PREFIX');\n\n          case 7:\n            keyhash = key.slice(4);\n            _context.next = 10;\n            return multihashing(publicKey, 'sha2-256');\n\n          case 10:\n            publicKeyHash = _context.sent;\n\n            if (keyhash.equals(publicKeyHash)) {\n              _context.next = 13;\n              break;\n            }\n\n            throw errcode(new Error('public key does not match passed in key'), 'ERR_INVALID_RECORD_HASH_MISMATCH');\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function validatePublicKeyRecord(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = {\n  func: validatePublicKeyRecord,\n  sign: false\n};","map":null,"metadata":{},"sourceType":"script"}