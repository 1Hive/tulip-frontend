{"ast":null,"code":"class StoredList {\n  // name: the key used by StoredList to save the list in localStorage.\n  // preStringify: use this to transform an item of the list before being saved.\n  // postParse: use this to transform an item of the list after it got loaded.\n  constructor(name, {\n    preStringify = v => v,\n    postParse = v => v\n  } = {}) {\n    this.options = {\n      preStringify,\n      postParse\n    };\n    this.name = name;\n    this.items = this.loadItems();\n  }\n\n  loadItems() {\n    let items = null;\n    const value = localStorage.getItem(this.name);\n\n    if (value === null) {\n      return [];\n    }\n\n    try {\n      items = JSON.parse(value);\n    } catch (err) {\n      console.error(`StoredList (${this.name}) couldn’t parse the loaded items`, err);\n    }\n\n    if (!Array.isArray(items)) {\n      items = null;\n      console.error(`The data loaded by StoredList (${this.name}) is not an array`, items);\n    }\n\n    return items === null ? [] : items.map(this.options.postParse);\n  }\n\n  saveItems() {\n    localStorage.setItem(this.name, JSON.stringify(this.items.map(this.options.preStringify)));\n  }\n\n  getItems() {\n    return this.items;\n  }\n\n  update(items = []) {\n    this.items = items;\n    this.saveItems();\n    return items;\n  }\n\n  add(value) {\n    return this.update([...this.items, value]);\n  }\n\n  remove(index) {\n    return this.update([...this.items.slice(0, index), ...this.items.slice(index + 1)]);\n  }\n\n  has(cond) {\n    return this.items.some(cond);\n  }\n\n}\n\nexport default StoredList;","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/StoredList.js"],"names":["StoredList","constructor","name","preStringify","v","postParse","options","items","loadItems","value","localStorage","getItem","JSON","parse","err","console","error","Array","isArray","map","saveItems","setItem","stringify","getItems","update","add","remove","index","slice","has","cond","some"],"mappings":"AAAA,MAAMA,UAAN,CAAiB;AACf;AACA;AACA;AACAC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAAEC,IAAAA,YAAY,GAAGC,CAAC,IAAIA,CAAtB;AAAyBC,IAAAA,SAAS,GAAGD,CAAC,IAAIA;AAA1C,MAAgD,EAAvD,EAA2D;AACpE,SAAKE,OAAL,GAAe;AAAEH,MAAAA,YAAF;AAAgBE,MAAAA;AAAhB,KAAf;AACA,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKK,KAAL,GAAa,KAAKC,SAAL,EAAb;AACD;;AAEDA,EAAAA,SAAS,GAAG;AACV,QAAID,KAAK,GAAG,IAAZ;AACA,UAAME,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,KAAKT,IAA1B,CAAd;;AAEA,QAAIO,KAAK,KAAK,IAAd,EAAoB;AAClB,aAAO,EAAP;AACD;;AAED,QAAI;AACFF,MAAAA,KAAK,GAAGK,IAAI,CAACC,KAAL,CAAWJ,KAAX,CAAR;AACD,KAFD,CAEE,OAAOK,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,KAAR,CACG,eAAc,KAAKd,IAAK,mCAD3B,EAEEY,GAFF;AAID;;AAED,QAAI,CAACG,KAAK,CAACC,OAAN,CAAcX,KAAd,CAAL,EAA2B;AACzBA,MAAAA,KAAK,GAAG,IAAR;AACAQ,MAAAA,OAAO,CAACC,KAAR,CACG,kCAAiC,KAAKd,IAAK,mBAD9C,EAEEK,KAFF;AAID;;AAED,WAAOA,KAAK,KAAK,IAAV,GAAiB,EAAjB,GAAsBA,KAAK,CAACY,GAAN,CAAU,KAAKb,OAAL,CAAaD,SAAvB,CAA7B;AACD;;AAEDe,EAAAA,SAAS,GAAG;AACVV,IAAAA,YAAY,CAACW,OAAb,CACE,KAAKnB,IADP,EAEEU,IAAI,CAACU,SAAL,CAAe,KAAKf,KAAL,CAAWY,GAAX,CAAe,KAAKb,OAAL,CAAaH,YAA5B,CAAf,CAFF;AAID;;AAEDoB,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKhB,KAAZ;AACD;;AAEDiB,EAAAA,MAAM,CAACjB,KAAK,GAAG,EAAT,EAAa;AACjB,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKa,SAAL;AACA,WAAOb,KAAP;AACD;;AAEDkB,EAAAA,GAAG,CAAChB,KAAD,EAAQ;AACT,WAAO,KAAKe,MAAL,CAAY,CAAC,GAAG,KAAKjB,KAAT,EAAgBE,KAAhB,CAAZ,CAAP;AACD;;AAEDiB,EAAAA,MAAM,CAACC,KAAD,EAAQ;AACZ,WAAO,KAAKH,MAAL,CAAY,CACjB,GAAG,KAAKjB,KAAL,CAAWqB,KAAX,CAAiB,CAAjB,EAAoBD,KAApB,CADc,EAEjB,GAAG,KAAKpB,KAAL,CAAWqB,KAAX,CAAiBD,KAAK,GAAG,CAAzB,CAFc,CAAZ,CAAP;AAID;;AAEDE,EAAAA,GAAG,CAACC,IAAD,EAAO;AACR,WAAO,KAAKvB,KAAL,CAAWwB,IAAX,CAAgBD,IAAhB,CAAP;AACD;;AApEc;;AAuEjB,eAAe9B,UAAf","sourcesContent":["class StoredList {\r\n  // name: the key used by StoredList to save the list in localStorage.\r\n  // preStringify: use this to transform an item of the list before being saved.\r\n  // postParse: use this to transform an item of the list after it got loaded.\r\n  constructor(name, { preStringify = v => v, postParse = v => v } = {}) {\r\n    this.options = { preStringify, postParse }\r\n    this.name = name\r\n    this.items = this.loadItems()\r\n  }\r\n\r\n  loadItems() {\r\n    let items = null\r\n    const value = localStorage.getItem(this.name)\r\n\r\n    if (value === null) {\r\n      return []\r\n    }\r\n\r\n    try {\r\n      items = JSON.parse(value)\r\n    } catch (err) {\r\n      console.error(\r\n        `StoredList (${this.name}) couldn’t parse the loaded items`,\r\n        err\r\n      )\r\n    }\r\n\r\n    if (!Array.isArray(items)) {\r\n      items = null\r\n      console.error(\r\n        `The data loaded by StoredList (${this.name}) is not an array`,\r\n        items\r\n      )\r\n    }\r\n\r\n    return items === null ? [] : items.map(this.options.postParse)\r\n  }\r\n\r\n  saveItems() {\r\n    localStorage.setItem(\r\n      this.name,\r\n      JSON.stringify(this.items.map(this.options.preStringify))\r\n    )\r\n  }\r\n\r\n  getItems() {\r\n    return this.items\r\n  }\r\n\r\n  update(items = []) {\r\n    this.items = items\r\n    this.saveItems()\r\n    return items\r\n  }\r\n\r\n  add(value) {\r\n    return this.update([...this.items, value])\r\n  }\r\n\r\n  remove(index) {\r\n    return this.update([\r\n      ...this.items.slice(0, index),\r\n      ...this.items.slice(index + 1),\r\n    ])\r\n  }\r\n\r\n  has(cond) {\r\n    return this.items.some(cond)\r\n  }\r\n}\r\n\r\nexport default StoredList\r\n"]},"metadata":{},"sourceType":"module"}