{"ast":null,"code":"'use strict';\n\nconst PeerId = require('peer-id');\n\nconst basePacket = {\n  success: true,\n  time: 0,\n  text: ''\n};\n\nconst {\n  withTimeoutOption\n} = require('../utils');\n\nmodule.exports = ({\n  libp2p\n}) => {\n  return withTimeoutOption(async function* ping(peerId, options) {\n    options = options || {};\n    options.count = options.count || 10;\n\n    if (!PeerId.isPeerId(peerId)) {\n      peerId = PeerId.createFromCID(peerId);\n    }\n\n    let peerInfo;\n\n    if (libp2p.peerStore.has(peerId)) {\n      peerInfo = libp2p.peerStore.get(peerId);\n    } else {\n      yield { ...basePacket,\n        text: `Looking up peer ${peerId}`\n      };\n      peerInfo = await libp2p.peerRouting.findPeer(peerId);\n    }\n\n    yield { ...basePacket,\n      text: `PING ${peerInfo.id.toB58String()}`\n    };\n    let packetCount = 0;\n    let totalTime = 0;\n\n    for (let i = 0; i < options.count; i++) {\n      try {\n        const time = await libp2p.ping(peerInfo);\n        totalTime += time;\n        packetCount++;\n        yield { ...basePacket,\n          time\n        };\n      } catch (err) {\n        yield { ...basePacket,\n          success: false,\n          text: err.toString()\n        };\n      }\n    }\n\n    if (packetCount) {\n      const average = totalTime / packetCount;\n      yield { ...basePacket,\n        text: `Average latency: ${average}ms`\n      };\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}