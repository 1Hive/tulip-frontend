{"ast":null,"code":"var _jsxFileName = \"/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/views/Collectibles/components/TransferNftModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Web3 from 'web3';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit';\nimport { useToast } from 'state/hooks';\nimport useI18n from 'hooks/useI18n';\nimport { usePancakeRabbits } from 'hooks/useContract';\nimport InfoRow from './InfoRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Value = styled(Text)`\n  font-weight: 600;\n`;\n_c = Value;\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`;\n_c2 = ModalContent;\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`;\n_c3 = Actions;\nconst Label = styled.label`\n  color: ${({\n  theme\n}) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`;\n_c4 = Label;\n\nconst TransferNftModal = ({\n  nft,\n  tokenIds,\n  onSuccess,\n  onDismiss\n}) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [value, setValue] = useState('');\n  const [error, setError] = useState(null);\n  const TranslateString = useI18n();\n  const {\n    account\n  } = useWallet();\n  const pancakeRabbitsContract = usePancakeRabbits();\n  const {\n    toastSuccess\n  } = useToast();\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(value);\n\n      if (!isValidAddress) {\n        setError(TranslateString(999, 'Please enter a valid wallet address'));\n      } else {\n        await pancakeRabbitsContract.methods.transferFrom(account, value, tokenIds[0]).send({\n          from: account\n        }).on('sending', () => {\n          setIsLoading(true);\n        }).on('receipt', () => {\n          onDismiss();\n          onSuccess();\n          toastSuccess('NFT successfully transferred!');\n        }).on('error', () => {\n          console.error(error);\n          setError('Unable to transfer NFT');\n          setIsLoading(false);\n        });\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err);\n    }\n  };\n\n  const handleChange = evt => {\n    const {\n      value: inputValue\n    } = evt.target;\n    setValue(inputValue);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: TranslateString(999, 'Transfer NFT'),\n    onDismiss: onDismiss,\n    children: [/*#__PURE__*/_jsxDEV(ModalContent, {\n      children: [error && /*#__PURE__*/_jsxDEV(Text, {\n        color: \"failure\",\n        mb: \"8px\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(InfoRow, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: [TranslateString(999, 'Transferring'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Value, {\n          children: `1x \"${nft.name}\" NFT`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Label, {\n        htmlFor: \"transferAddress\",\n        children: [TranslateString(999, 'Receiving address'), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"transferAddress\",\n        name: \"address\",\n        type: \"text\",\n        placeholder: TranslateString(999, 'Paste address'),\n        value: value,\n        onChange: handleChange,\n        isWarning: error,\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Actions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        fullWidth: true,\n        variant: \"secondary\",\n        onClick: onDismiss,\n        children: TranslateString(462, 'Cancel')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        fullWidth: true,\n        onClick: handleConfirm,\n        disabled: !account || isLoading || !value,\n        children: TranslateString(464, 'Confirm')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TransferNftModal, \"5sqsb6fJUwjFrrQcyjMqpUm30cY=\", false, function () {\n  return [useI18n, useWallet, usePancakeRabbits, useToast];\n});\n\n_c5 = TransferNftModal;\nexport default TransferNftModal;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Value\");\n$RefreshReg$(_c2, \"ModalContent\");\n$RefreshReg$(_c3, \"Actions\");\n$RefreshReg$(_c4, \"Label\");\n$RefreshReg$(_c5, \"TransferNftModal\");","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/views/Collectibles/components/TransferNftModal.tsx"],"names":["React","useState","styled","Web3","useWallet","Button","Input","Modal","Text","useToast","useI18n","usePancakeRabbits","InfoRow","Value","ModalContent","div","Actions","Label","label","theme","colors","text","TransferNftModal","nft","tokenIds","onSuccess","onDismiss","isLoading","setIsLoading","value","setValue","error","setError","TranslateString","account","pancakeRabbitsContract","toastSuccess","handleConfirm","isValidAddress","utils","isAddress","methods","transferFrom","send","from","on","console","err","handleChange","evt","inputValue","target","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,KAAxB,EAA+BC,IAA/B,QAA2C,yBAA3C;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,OAAOC,OAAP,MAAoB,eAApB;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,OAAOC,OAAP,MAAoB,WAApB;;AASA,MAAMC,KAAK,GAAGX,MAAM,CAACM,IAAD,CAAO;AAC3B;AACA,CAFA;KAAMK,K;AAIN,MAAMC,YAAY,GAAGZ,MAAM,CAACa,GAAI;AAChC;AACA,CAFA;MAAMD,Y;AAIN,MAAME,OAAO,GAAGd,MAAM,CAACa,GAAI;AAC3B;AACA;AACA;AACA,CAJA;MAAMC,O;AAMN,MAAMC,KAAK,GAAGf,MAAM,CAACgB,KAAM;AAC3B,WAAW,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,MAAN,CAAaC,IAAK;AAC5C;AACA;AACA;AACA,CALA;MAAMJ,K;;AAON,MAAMK,gBAAiD,GAAG,CAAC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,QAAP;AAAiBC,EAAAA,SAAjB;AAA4BC,EAAAA;AAA5B,CAAD,KAA6C;AAAA;;AACrG,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B3B,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAAC4B,KAAD,EAAQC,QAAR,IAAoB7B,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAAC8B,KAAD,EAAQC,QAAR,IAAoB/B,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAMgC,eAAe,GAAGvB,OAAO,EAA/B;AACA,QAAM;AAAEwB,IAAAA;AAAF,MAAc9B,SAAS,EAA7B;AACA,QAAM+B,sBAAsB,GAAGxB,iBAAiB,EAAhD;AACA,QAAM;AAAEyB,IAAAA;AAAF,MAAmB3B,QAAQ,EAAjC;;AAEA,QAAM4B,aAAa,GAAG,YAAY;AAChC,QAAI;AACF,YAAMC,cAAc,GAAGnC,IAAI,CAACoC,KAAL,CAAWC,SAAX,CAAqBX,KAArB,CAAvB;;AAEA,UAAI,CAACS,cAAL,EAAqB;AACnBN,QAAAA,QAAQ,CAACC,eAAe,CAAC,GAAD,EAAM,qCAAN,CAAhB,CAAR;AACD,OAFD,MAEO;AACL,cAAME,sBAAsB,CAACM,OAAvB,CACHC,YADG,CACUR,OADV,EACmBL,KADnB,EAC0BL,QAAQ,CAAC,CAAD,CADlC,EAEHmB,IAFG,CAEE;AAAEC,UAAAA,IAAI,EAAEV;AAAR,SAFF,EAGHW,EAHG,CAGA,SAHA,EAGW,MAAM;AACnBjB,UAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,SALG,EAMHiB,EANG,CAMA,SANA,EAMW,MAAM;AACnBnB,UAAAA,SAAS;AACTD,UAAAA,SAAS;AACTW,UAAAA,YAAY,CAAC,+BAAD,CAAZ;AACD,SAVG,EAWHS,EAXG,CAWA,OAXA,EAWS,MAAM;AACjBC,UAAAA,OAAO,CAACf,KAAR,CAAcA,KAAd;AACAC,UAAAA,QAAQ,CAAC,wBAAD,CAAR;AACAJ,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,SAfG,CAAN;AAgBD;AACF,KAvBD,CAuBE,OAAOmB,GAAP,EAAY;AACZD,MAAAA,OAAO,CAACf,KAAR,CAAc,yBAAd,EAAyCgB,GAAzC;AACD;AACF,GA3BD;;AA6BA,QAAMC,YAAY,GAAIC,GAAD,IAA8C;AACjE,UAAM;AAAEpB,MAAAA,KAAK,EAAEqB;AAAT,QAAwBD,GAAG,CAACE,MAAlC;AACArB,IAAAA,QAAQ,CAACoB,UAAD,CAAR;AACD,GAHD;;AAKA,sBACE,QAAC,KAAD;AAAO,IAAA,KAAK,EAAEjB,eAAe,CAAC,GAAD,EAAM,cAAN,CAA7B;AAAoD,IAAA,SAAS,EAAEP,SAA/D;AAAA,4BACE,QAAC,YAAD;AAAA,iBACGK,KAAK,iBACJ,QAAC,IAAD;AAAM,QAAA,KAAK,EAAC,SAAZ;AAAsB,QAAA,EAAE,EAAC,KAAzB;AAAA,kBACGA;AADH;AAAA;AAAA;AAAA;AAAA,cAFJ,eAME,QAAC,OAAD;AAAA,gCACE,QAAC,IAAD;AAAA,qBAAOE,eAAe,CAAC,GAAD,EAAM,cAAN,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,KAAD;AAAA,oBAAS,OAAMV,GAAG,CAAC6B,IAAK;AAAxB;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,eAUE,QAAC,KAAD;AAAO,QAAA,OAAO,EAAC,iBAAf;AAAA,mBAAkCnB,eAAe,CAAC,GAAD,EAAM,mBAAN,CAAjD;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF,eAWE,QAAC,KAAD;AACE,QAAA,EAAE,EAAC,iBADL;AAEE,QAAA,IAAI,EAAC,SAFP;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,WAAW,EAAEA,eAAe,CAAC,GAAD,EAAM,eAAN,CAJ9B;AAKE,QAAA,KAAK,EAAEJ,KALT;AAME,QAAA,QAAQ,EAAEmB,YANZ;AAOE,QAAA,SAAS,EAAEjB,KAPb;AAQE,QAAA,QAAQ,EAAEJ;AARZ;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAuBE,QAAC,OAAD;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,SAAS,MAAjB;AAAkB,QAAA,OAAO,EAAC,WAA1B;AAAsC,QAAA,OAAO,EAAED,SAA/C;AAAA,kBACGO,eAAe,CAAC,GAAD,EAAM,QAAN;AADlB;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,MAAD;AAAQ,QAAA,SAAS,MAAjB;AAAkB,QAAA,OAAO,EAAEI,aAA3B;AAA0C,QAAA,QAAQ,EAAE,CAACH,OAAD,IAAYP,SAAZ,IAAyB,CAACE,KAA9E;AAAA,kBACGI,eAAe,CAAC,GAAD,EAAM,SAAN;AADlB;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkCD,CA7ED;;GAAMX,gB;UAIoBZ,O,EACJN,S,EACWO,iB,EACNF,Q;;;MAPrBa,gB;AA+EN,eAAeA,gBAAf","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Input, Modal, Text } from '@pancakeswap-libs/uikit'\nimport { useToast } from 'state/hooks'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { usePancakeRabbits } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const pancakeRabbitsContract = usePancakeRabbits()\n  const { toastSuccess } = useToast()\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\n      } else {\n        await pancakeRabbitsContract.methods\n          .transferFrom(account, value, tokenIds[0])\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            onDismiss()\n            onSuccess()\n            toastSuccess('NFT successfully transferred!')\n          })\n          .on('error', () => {\n            console.error(error)\n            setError('Unable to transfer NFT')\n            setIsLoading(false)\n          })\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={TranslateString(999, 'Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n"]},"metadata":{},"sourceType":"module"}