{"ast":null,"code":"'use strict';\n\nvar slicedToArray = require('./slicedToArray-a8a77f0e.js');\n\nvar index$1 = require('./index-46d0e707.js');\n\nrequire('./environment.js');\n\nvar constants = require('./constants.js');\n\nvar index = require('./index-4def0554.js');\n\nvar ICON_SIZES = new Map([['large', 6 * constants.GU], ['medium', 3 * constants.GU], ['small', 2 * constants.GU], ['tiny', 1.75 * constants.GU]]); // Mapping of button size => icon size\n\nvar BUTTON_ICON_SIZES = new Map([['medium', 'medium'], ['small', 'medium'], ['mini', 'small']]);\n\nfunction useIconSize(size) {\n  var _useInside = index.o('Button:icon'),\n      _useInside2 = slicedToArray.slicedToArray(_useInside, 2),\n      insideButtonIcon = _useInside2[0],\n      buttonData = _useInside2[1]; // If no size is set on the icon, and it is inside\n  // a Button icon slot, adapt it to the size of the button.\n\n\n  var sizeName = !size && insideButtonIcon ? BUTTON_ICON_SIZES.get(buttonData.size) : size;\n  return ICON_SIZES.get(sizeName || 'medium');\n}\n\nvar IconPropTypes = {\n  size: index$1.propTypes.oneOf(['large', 'medium', 'small', 'tiny'])\n};\nexports.IconPropTypes = IconPropTypes;\nexports.useIconSize = useIconSize;","map":{"version":3,"sources":["../src/icons/icon-size.js","../src/icons/IconPropTypes.js"],"names":["ICON_SIZES","GU","BUTTON_ICON_SIZES","insideButtonIcon","buttonData","useInside","sizeName","size","PropTypes"],"mappings":";;;;;;;;;;;;AAGA,IAAMA,UAAU,GAAG,IAAA,GAAA,CAAQ,CACzB,CAAA,OAAA,EAAU,IAAIC,SAAAA,CADW,EACzB,CADyB,EAEzB,CAAA,QAAA,EAAW,IAAIA,SAAAA,CAFU,EAEzB,CAFyB,EAGzB,CAAA,OAAA,EAAU,IAAIA,SAAAA,CAHW,EAGzB,CAHyB,EAIzB,CAAA,MAAA,EAAS,OAAOA,SAAAA,CAJlB,EAIE,CAJyB,CAAR,CAAnB,C,CAAA;;AAQA,IAAMC,iBAAiB,GAAG,IAAA,GAAA,CAAQ,CAChC,CAAA,QAAA,EADgC,QAChC,CADgC,EAEhC,CAAA,OAAA,EAFgC,QAEhC,CAFgC,EAGhC,CAAA,MAAA,EAHF,OAGE,CAHgC,CAAR,CAA1B;;AAMA,SAAA,WAAA,CAAA,IAAA,EAA2B;AAAA,MAAA,UAAA,GACcG,KAAAA,CAAAA,CAAAA,CADd,aACcA,CADd;AAAA,MAAA,WAAA,GAAA,aAAA,CAAA,aAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAA,MAClBF,gBADkB,GAAA,WAAA,CAAA,CAAA,CAAA;AAAA,MACAC,UADA,GAAA,WAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAIzB;;;AACA,MAAME,QAAQ,GACZ,CAAA,IAAA,IAAA,gBAAA,GAA4BJ,iBAAiB,CAAjBA,GAAAA,CAAsBE,UAAU,CAA5D,IAA4BF,CAA5B,GADF,IAAA;AAGA,SAAOF,UAAU,CAAVA,GAAAA,CAAeM,QAAQ,IAA9B,QAAON,CAAP;AACD;;ACxBD,IAAA,aAAA,GAAe;AACbO,EAAAA,IAAI,EAAEC,OAAAA,CAAAA,SAAAA,CAAAA,KAAAA,CAAgB,CAAA,OAAA,EAAA,QAAA,EAAA,OAAA,EAAhBA,MAAgB,CAAhBA;AADO,CAAf","sourcesContent":["import { GU } from '../style'\nimport { useInside } from 'use-inside'\n\nconst ICON_SIZES = new Map([\n  ['large', 6 * GU],\n  ['medium', 3 * GU],\n  ['small', 2 * GU],\n  ['tiny', 1.75 * GU],\n])\n\n// Mapping of button size => icon size\nconst BUTTON_ICON_SIZES = new Map([\n  ['medium', 'medium'],\n  ['small', 'medium'],\n  ['mini', 'small'],\n])\n\nfunction useIconSize(size) {\n  const [insideButtonIcon, buttonData] = useInside('Button:icon')\n\n  // If no size is set on the icon, and it is inside\n  // a Button icon slot, adapt it to the size of the button.\n  const sizeName =\n    !size && insideButtonIcon ? BUTTON_ICON_SIZES.get(buttonData.size) : size\n\n  return ICON_SIZES.get(sizeName || 'medium')\n}\n\nexport default useIconSize\n","import PropTypes from 'prop-types'\n\nexport default {\n  size: PropTypes.oneOf(['large', 'medium', 'small', 'tiny']),\n}\n"]},"metadata":{},"sourceType":"script"}