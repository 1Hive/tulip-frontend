{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar debug = require('debug');\n\nvar _require = require('../utils/cid'),\n    cidToString = _require.cidToString;\n\nvar log = debug('ipfs:mfs-preload');\nlog.error = debug('ipfs:mfs-preload:error');\n\nmodule.exports = function (_ref) {\n  var preload = _ref.preload,\n      files = _ref.files,\n      options = _ref.options;\n  options = options || {};\n  options.interval = options.interval || 30 * 1000;\n\n  if (!options.enabled) {\n    log('MFS preload disabled');\n\n    var noop = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function noop() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    return {\n      start: noop,\n      stop: noop\n    };\n  }\n\n  var rootCid, timeoutId;\n\n  var preloadMfs = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var stats, nextRootCid;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return files.stat('/');\n\n            case 3:\n              stats = _context2.sent;\n              nextRootCid = cidToString(stats.cid, {\n                base: 'base32'\n              });\n\n              if (!(rootCid !== nextRootCid)) {\n                _context2.next = 10;\n                break;\n              }\n\n              log(\"preloading updated MFS root \".concat(rootCid, \" -> \").concat(stats.cid));\n              _context2.next = 9;\n              return preload(stats.cid);\n\n            case 9:\n              rootCid = nextRootCid;\n\n            case 10:\n              _context2.next = 15;\n              break;\n\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2[\"catch\"](0);\n              log.error('failed to preload MFS root', _context2.t0);\n\n            case 15:\n              _context2.prev = 15;\n              timeoutId = setTimeout(preloadMfs, options.interval);\n              return _context2.finish(15);\n\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 12, 15, 18]]);\n    }));\n\n    return function preloadMfs() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return {\n    start: function start() {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var stats;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return files.stat('/');\n\n              case 2:\n                stats = _context3.sent;\n                rootCid = cidToString(stats.cid, {\n                  base: 'base32'\n                });\n                log(\"monitoring MFS root \".concat(stats.cid));\n                timeoutId = setTimeout(preloadMfs, options.interval);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n    stop: function stop() {\n      clearTimeout(timeoutId);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}