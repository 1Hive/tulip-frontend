{"ast":null,"code":"'use strict';\n\nconst lp = require('it-length-prefixed');\n\nconst handshake = require('it-handshake');\n\nconst {\n  CircuitRelay: CircuitPB\n} = require('../protocol');\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:circuit:stream-handler');\nlog.error = debug('libp2p:circuit:stream-handler:error');\n\nclass StreamHandler {\n  /**\n   * Create a stream handler for connection\n   *\n   * @param {object} options\n   * @param {*} options.stream - A duplex iterable\n   * @param {Number} options.maxLength - max bytes length of message\n   */\n  constructor({\n    stream,\n    maxLength = 4096\n  }) {\n    this.stream = stream;\n    this.shake = handshake(this.stream);\n    this.decoder = lp.decode.fromReader(this.shake.reader, {\n      maxDataLength: maxLength\n    });\n  }\n  /**\n   * Read and decode message\n   * @async\n   * @returns {void}\n   */\n\n\n  async read() {\n    const msg = await this.decoder.next();\n\n    if (msg.value) {\n      const value = CircuitPB.decode(msg.value.slice());\n      log('read message type', value.type);\n      return value;\n    }\n\n    log('read received no value, closing stream'); // End the stream, we didn't get data\n\n    this.close();\n  }\n  /**\n   * Encode and write array of buffers\n   *\n   * @param {*} msg An unencoded CircuitRelay protobuf message\n   */\n\n\n  write(msg) {\n    log('write message type %s', msg.type);\n    this.shake.write(lp.encode.single(CircuitPB.encode(msg)));\n  }\n  /**\n   * Return the handshake rest stream and invalidate handler\n   *\n   * @return {*} A duplex iterable\n   */\n\n\n  rest() {\n    this.shake.rest();\n    return this.shake.stream;\n  }\n\n  end(msg) {\n    this.write(msg);\n    this.close();\n  }\n  /**\n   * Close the stream\n   *\n   * @returns {void}\n   */\n\n\n  close() {\n    log('closing the stream');\n    this.rest().sink([]);\n  }\n\n}\n\nmodule.exports = StreamHandler;","map":null,"metadata":{},"sourceType":"script"}