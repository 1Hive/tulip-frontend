{"ast":null,"code":"var _jsxFileName = \"/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/views/Home/components/FarmStakingCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport useI18n from 'hooks/useI18n';\nimport { useAllHarvest } from 'hooks/useHarvest';\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance';\nimport UnlockButton from 'components/UnlockButton';\nimport CakeHarvestBalance from './CakeHarvestBalance';\nimport CakeWalletBalance from './CakeWalletBalance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/cake-bg.svg');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`;\n_c = StyledFarmStakingCard;\nconst Block = styled.div`\n  margin-bottom: 16px;\n`;\n_c2 = Block;\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`;\n_c3 = CardImage;\nconst Label = styled.div`\n  color: ${({\n  theme\n}) => theme.colors.textSubtle};\n  font-size: 14px;\n`;\n_c4 = Label;\nconst Actions = styled.div`\n  margin-top: 24px;\n`;\n_c5 = Actions;\n\nconst FarmedStakingCard = () => {\n  _s();\n\n  const [pendingTx, setPendingTx] = useState(false);\n  const {\n    account\n  } = useWallet();\n  const TranslateString = useI18n();\n  const farmsWithBalance = useFarmsWithBalance();\n  const balancesWithValue = farmsWithBalance.filter(balanceType => balanceType.balance.toNumber() > 0);\n  const {\n    onReward\n  } = useAllHarvest(balancesWithValue.map(farmWithBalance => farmWithBalance.pid));\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true);\n\n    try {\n      await onReward();\n    } catch (error) {// TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false);\n    }\n  }, [onReward]);\n  return /*#__PURE__*/_jsxDEV(StyledFarmStakingCard, {\n    children: /*#__PURE__*/_jsxDEV(CardBody, {\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        size: \"xl\",\n        mb: \"24px\",\n        children: TranslateString(542, 'Farms & Staking')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardImage, {\n        src: \"/images/cake.svg\",\n        alt: \"cake logo\",\n        width: 64,\n        height: 64\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Block, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          children: [TranslateString(544, 'CAKE to Harvest'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CakeHarvestBalance, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Block, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          children: [TranslateString(546, 'CAKE in Wallet'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CakeWalletBalance, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Actions, {\n        children: account ? /*#__PURE__*/_jsxDEV(Button, {\n          id: \"harvest-all\",\n          disabled: balancesWithValue.length <= 0 || pendingTx,\n          onClick: harvestAllFarms,\n          fullWidth: true,\n          children: pendingTx ? TranslateString(548, 'Collecting CAKE') : TranslateString(532, `Harvest all (${balancesWithValue.length})`)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(UnlockButton, {\n          fullWidth: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FarmedStakingCard, \"m7ExhtsceMTPwq3XgYEgmpBCDEE=\", false, function () {\n  return [useWallet, useI18n, useFarmsWithBalance, useAllHarvest];\n});\n\n_c6 = FarmedStakingCard;\nexport default FarmedStakingCard;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"StyledFarmStakingCard\");\n$RefreshReg$(_c2, \"Block\");\n$RefreshReg$(_c3, \"CardImage\");\n$RefreshReg$(_c4, \"Label\");\n$RefreshReg$(_c5, \"Actions\");\n$RefreshReg$(_c6, \"FarmedStakingCard\");","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/views/Home/components/FarmStakingCard.tsx"],"names":["React","useState","useCallback","styled","Heading","Card","CardBody","Button","useWallet","useI18n","useAllHarvest","useFarmsWithBalance","UnlockButton","CakeHarvestBalance","CakeWalletBalance","StyledFarmStakingCard","Block","div","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","account","TranslateString","farmsWithBalance","balancesWithValue","filter","balanceType","balance","toNumber","onReward","map","farmWithBalance","pid","harvestAllFarms","error","length"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/cake-bg.svg');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/cake.svg\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{TranslateString(544, 'CAKE to Harvest')}:</Label>\n          <CakeHarvestBalance />\n        </Block>\n        <Block>\n          <Label>{TranslateString(546, 'CAKE in Wallet')}:</Label>\n          <CakeWalletBalance />\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting CAKE')\n                : TranslateString(532, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n"]},"metadata":{},"sourceType":"module"}