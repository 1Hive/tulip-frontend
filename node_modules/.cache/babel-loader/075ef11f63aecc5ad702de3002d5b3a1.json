{"ast":null,"code":"'use strict';\n\nconst {\n  EventEmitter\n} = require('events');\n\nconst errcode = require('err-code');\n\nconst libp2pRecord = require('libp2p-record');\n\nconst {\n  MemoryDatastore\n} = require('interface-datastore');\n\nconst PeerInfo = require('peer-info');\n\nconst RoutingTable = require('./routing');\n\nconst utils = require('./utils');\n\nconst c = require('./constants');\n\nconst Network = require('./network');\n\nconst contentFetching = require('./content-fetching');\n\nconst contentRouting = require('./content-routing');\n\nconst peerRouting = require('./peer-routing');\n\nconst Message = require('./message');\n\nconst Providers = require('./providers');\n\nconst RandomWalk = require('./random-walk');\n\nconst QueryManager = require('./query-manager');\n\nconst Record = libp2pRecord.Record;\n/**\n * A DHT implementation modeled after Kademlia with S/Kademlia modifications.\n * Original implementation in go: https://github.com/libp2p/go-libp2p-kad-dht.\n */\n\nclass KadDHT extends EventEmitter {\n  /**\n   * Random walk options\n   * @typedef {Object} randomWalkOptions\n   * @property {boolean} enabled discovery enabled (default: true)\n   * @property {number} queriesPerPeriod how many queries to run per period (default: 1)\n   * @property {number} interval how often to run the the random-walk process, in milliseconds (default: 300000)\n   * @property {number} timeout how long to wait for the the random-walk query to run, in milliseconds (default: 30000)\n   * @property {number} delay how long to wait before starting the first random walk, in milliseconds (default: 10000)\n   */\n\n  /**\n   * Create a new KadDHT.\n   * @param {Object} props\n   * @param {Dialer} props.dialer libp2p dialer instance\n   * @param {PeerInfo} props.peerInfo peer's peerInfo\n   * @param {PeerStore} props.peerStore libp2p peerStore\n   * @param {Object} props.registrar libp2p registrar instance\n   * @param {function} props.registrar.handle\n   * @param {function} props.registrar.register\n   * @param {function} props.registrar.unregister\n   * @param {number} props.kBucketSize k-bucket size (default 20)\n   * @param {number} props.concurrency alpha concurrency of queries (default 3)\n   * @param {Datastore} props.datastore datastore (default MemoryDatastore)\n   * @param {object} props.validators validators object with namespace as keys and function(key, record, callback)\n   * @param {object} props.selectors selectors object with namespace as keys and function(key, records)\n   * @param {randomWalkOptions} options.randomWalk randomWalk options\n   */\n  constructor({\n    dialer,\n    peerInfo,\n    peerStore,\n    registrar,\n    datastore = new MemoryDatastore(),\n    kBucketSize = c.K,\n    concurrency = c.ALPHA,\n    validators = {},\n    selectors = {},\n    randomWalk = {}\n  }) {\n    super();\n\n    if (!dialer) {\n      throw new Error('libp2p-kad-dht requires an instance of Dialer');\n    }\n    /**\n     * Local reference to the libp2p dialer instance\n     * @type {Dialer}\n     */\n\n\n    this.dialer = dialer;\n    /**\n     * Local peer info\n     * @type {PeerInfo}\n     */\n\n    this.peerInfo = peerInfo;\n    /**\n     * Local PeerStore\n     * @type {PeerStore}\n     */\n\n    this.peerStore = peerStore;\n    /**\n     * Local peer info\n     * @type {Registrar}\n     */\n\n    this.registrar = registrar;\n    /**\n     * k-bucket size\n     *\n     * @type {number}\n     */\n\n    this.kBucketSize = kBucketSize;\n    /**\n     * ALPHA concurrency at which each query path with run, defaults to 3\n     * @type {number}\n     */\n\n    this.concurrency = concurrency;\n    /**\n     * Number of disjoint query paths to use\n     * This is set to `kBucketSize`/2 per the S/Kademlia paper\n     * @type {number}\n     */\n\n    this.disjointPaths = Math.ceil(this.kBucketSize / 2);\n    /**\n     * The routing table.\n     *\n     * @type {RoutingTable}\n     */\n\n    this.routingTable = new RoutingTable(this.peerInfo.id, this.kBucketSize);\n    /**\n     * Reference to the datastore, uses an in-memory store if none given.\n     *\n     * @type {Datastore}\n     */\n\n    this.datastore = datastore;\n    /**\n     * Provider management\n     *\n     * @type {Providers}\n     */\n\n    this.providers = new Providers(this.datastore, this.peerInfo.id);\n    this.validators = {\n      pk: libp2pRecord.validator.validators.pk,\n      ...validators\n    };\n    this.selectors = {\n      pk: libp2pRecord.selection.selectors.pk,\n      ...selectors\n    };\n    this.network = new Network(this);\n    this._log = utils.logger(this.peerInfo.id);\n    /**\n     * Random walk management\n     *\n     * @type {RandomWalk}\n     */\n\n    this.randomWalk = new RandomWalk(this, randomWalk);\n    /**\n     * Keeps track of running queries\n     *\n     * @type {QueryManager}\n     */\n\n    this._queryManager = new QueryManager();\n    this._running = false; // DHT components\n\n    this.contentFetching = contentFetching(this);\n    this.contentRouting = contentRouting(this);\n    this.peerRouting = peerRouting(this);\n  }\n  /**\n   * Is this DHT running.\n   * @type {bool}\n   */\n\n\n  get isStarted() {\n    return this._running;\n  }\n  /**\n   * Start listening to incoming connections.\n   * @returns {Promise<void>}\n   */\n\n\n  async start() {\n    this._running = true;\n\n    this._queryManager.start();\n\n    await this.network.start(); // Start random walk, it will not run if it's disabled\n\n    this.randomWalk.start();\n  }\n  /**\n   * Stop accepting incoming connections and sending outgoing\n   * messages.\n   * @returns {Promise<void>}\n   */\n\n\n  stop() {\n    this._running = false;\n    this.randomWalk.stop();\n    this.providers.stop();\n\n    this._queryManager.stop();\n\n    return this.network.stop();\n  }\n  /**\n   * Store the given key/value  pair in the DHT.\n   * @param {Buffer} key\n   * @param {Buffer} value\n   * @param {Object} [options] - put options\n   * @param {number} [options.minPeers] - minimum number of peers required to successfully put (default: closestPeers.length)\n   * @returns {Promise<void>}\n   */\n\n\n  async put(key, value, options = {}) {\n    // eslint-disable-line require-await\n    return this.contentFetching.put(key, value, options);\n  }\n  /**\n   * Get the value to the given key.\n   * Times out after 1 minute by default.\n   * @param {Buffer} key\n   * @param {Object} [options] - get options\n   * @param {number} [options.timeout] - optional timeout (default: 60000)\n   * @returns {Promise<Buffer>}\n   */\n\n\n  async get(key, options = {}) {\n    // eslint-disable-line require-await\n    return this.contentFetching.get(key, options);\n  }\n  /**\n   * Get the `n` values to the given key without sorting.\n   * @param {Buffer} key\n   * @param {number} nvals\n   * @param {Object} [options] - get options\n   * @param {number} [options.timeout] - optional timeout (default: 60000)\n   * @returns {Promise<Array<{from: PeerId, val: Buffer}>>}\n   */\n\n\n  async getMany(key, nvals, options = {}) {\n    // eslint-disable-line require-await\n    return this.contentFetching.getMany(key, nvals, options);\n  } // ----------- Content Routing\n\n  /**\n   * Announce to the network that we can provide given key's value.\n   * @param {CID} key\n   * @returns {Promise<void>}\n   */\n\n\n  async provide(key) {\n    // eslint-disable-line require-await\n    return this.contentRouting.provide(key);\n  }\n  /**\n   * Search the dht for up to `K` providers of the given CID.\n   * @param {CID} key\n   * @param {Object} options - findProviders options\n   * @param {number} options.timeout - how long the query should maximally run, in milliseconds (default: 60000)\n   * @param {number} options.maxNumProviders - maximum number of providers to find\n   * @returns {AsyncIterable<PeerInfo>}\n   */\n\n\n  async *findProviders(key, options = {}) {\n    for await (const pInfo of this.contentRouting.findProviders(key, options)) {\n      yield pInfo;\n    }\n  } // ----------- Peer Routing -----------\n\n  /**\n   * Search for a peer with the given ID.\n   *\n   * @param {PeerId} id\n   * @param {Object} options - findPeer options\n   * @param {number} options.timeout - how long the query should maximally run, in milliseconds (default: 60000)\n   * @returns {Promise<PeerInfo>}\n   */\n\n\n  async findPeer(id, options = {}) {\n    // eslint-disable-line require-await\n    return this.peerRouting.findPeer(id, options);\n  }\n  /**\n   * Kademlia 'node lookup' operation.\n   * @param {Buffer} key\n   * @param {Object} [options]\n   * @param {boolean} [options.shallow] shallow query (default: false)\n   * @returns {AsyncIterable<PeerId>}\n   */\n\n\n  async *getClosestPeers(key, options = {\n    shallow: false\n  }) {\n    for await (const pId of this.peerRouting.getClosestPeers(key, options)) {\n      yield pId;\n    }\n  }\n  /**\n   * Get the public key for the given peer id.\n   * @param {PeerId} peer\n   * @returns {Promise<PubKey>}\n   */\n\n\n  async getPublicKey(peer) {\n    // eslint-disable-line require-await\n    return this.peerRouting.getPublicKey(peer);\n  } // ----------- Discovery -----------\n\n\n  _peerDiscovered(peerInfo) {\n    this.emit('peer', peerInfo);\n  } // ----------- Internals -----------\n\n  /**\n   * Returns the routing tables closest peers, for the key of\n   * the message.\n   *\n   * @param {Message} msg\n   * @returns {Promise<Array<PeerInfo>>}\n   * @private\n   */\n\n\n  async _nearestPeersToQuery(msg) {\n    const key = await utils.convertBuffer(msg.key);\n    const ids = this.routingTable.closestPeers(key, this.kBucketSize);\n    return ids.map(p => {\n      if (this.peerStore.has(p)) {\n        return this.peerStore.get(p);\n      }\n\n      return this.peerStore.put(new PeerInfo(p));\n    });\n  }\n  /**\n   * Get the nearest peers to the given query, but iff closer\n   * than self.\n   *\n   * @param {Message} msg\n   * @param {PeerInfo} peer\n   * @returns {Promise<Array<PeerInfo>>}\n   * @private\n   */\n\n\n  async _betterPeersToQuery(msg, peer) {\n    this._log('betterPeersToQuery');\n\n    const closer = await this._nearestPeersToQuery(msg);\n    return closer.filter(closer => {\n      if (this._isSelf(closer.id)) {\n        // Should bail, not sure\n        this._log.error('trying to return self as closer');\n\n        return false;\n      }\n\n      return !closer.id.isEqual(peer.id);\n    });\n  }\n  /**\n   * Try to fetch a given record by from the local datastore.\n   * Returns the record iff it is still valid, meaning\n   * - it was either authored by this node, or\n   * - it was received less than `MAX_RECORD_AGE` ago.\n   *\n   * @param {Buffer} key\n   * @returns {Promise<Record>}\n   * @private\n   */\n\n\n  async _checkLocalDatastore(key) {\n    this._log('checkLocalDatastore: %b', key);\n\n    const dsKey = utils.bufferToKey(key); // Fetch value from ds\n\n    let rawRecord;\n\n    try {\n      rawRecord = await this.datastore.get(dsKey);\n    } catch (err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        return undefined;\n      }\n\n      throw err;\n    } // Create record from the returned bytes\n\n\n    const record = Record.deserialize(rawRecord);\n\n    if (!record) {\n      throw errcode('Invalid record', 'ERR_INVALID_RECORD');\n    } // Check validity: compare time received with max record age\n\n\n    if (record.timeReceived == null || utils.now() - record.timeReceived > c.MAX_RECORD_AGE) {\n      // If record is bad delete it and return\n      await this.datastore.delete(dsKey);\n      return undefined;\n    } // Record is valid\n\n\n    return record;\n  }\n  /**\n   * Add the peer to the routing table and update it in the peerStore.\n   *\n   * @param {PeerInfo} peer\n   * @returns {Promise<void>}\n   * @private\n   */\n\n\n  async _add(peer) {\n    await this.routingTable.add(peer.id);\n  }\n  /**\n   * Verify a record without searching the DHT.\n   *\n   * @param {Record} record\n   * @returns {Promise<void>}\n   * @private\n   */\n\n\n  async _verifyRecordLocally(record) {\n    this._log('verifyRecordLocally');\n\n    await libp2pRecord.validator.verifyRecord(this.validators, record);\n  }\n  /**\n   * Is the given peer id our PeerId?\n   *\n   * @param {PeerId} other\n   * @returns {bool}\n   *\n   * @private\n   */\n\n\n  _isSelf(other) {\n    return other && this.peerInfo.id.id.equals(other.id);\n  }\n  /**\n   * Store the given key/value pair at the peer `target`.\n   *\n   * @param {Buffer} key\n   * @param {Buffer} rec - encoded record\n   * @param {PeerId} target\n   * @returns {Promise<void>}\n   *\n   * @private\n   */\n\n\n  async _putValueToPeer(key, rec, target) {\n    const msg = new Message(Message.TYPES.PUT_VALUE, key, 0);\n    msg.record = rec;\n    const resp = await this.network.sendRequest(target, msg);\n\n    if (!resp.record.value.equals(Record.deserialize(rec).value)) {\n      throw errcode(new Error('value not put correctly'), 'ERR_PUT_VALUE_INVALID');\n    }\n  }\n  /**\n   * Query a particular peer for the value for the given key.\n   * It will either return the value or a list of closer peers.\n   *\n   * Note: The peerStore is updated with new addresses found for the given peer.\n   *\n   * @param {PeerId} peer\n   * @param {Buffer} key\n   * @returns {Promise<{Record, Array<PeerInfo}>}\n   * @private\n   */\n\n\n  async _getValueOrPeers(peer, key) {\n    const msg = await this._getValueSingle(peer, key);\n    const peers = msg.closerPeers;\n    const record = msg.record;\n\n    if (record) {\n      // We have a record\n      try {\n        await this._verifyRecordOnline(record);\n      } catch (err) {\n        const errMsg = 'invalid record received, discarded';\n\n        this._log(errMsg);\n\n        throw errcode(new Error(errMsg), 'ERR_INVALID_RECORD');\n      }\n\n      return {\n        record,\n        peers\n      };\n    }\n\n    if (peers.length > 0) {\n      return {\n        peers\n      };\n    }\n\n    throw errcode(new Error('Not found'), 'ERR_NOT_FOUND');\n  }\n  /**\n   * Get a value via rpc call for the given parameters.\n   *\n   * @param {PeerId} peer\n   * @param {Buffer} key\n   * @returns {Promise<Message>}\n   * @private\n   */\n\n\n  async _getValueSingle(peer, key) {\n    // eslint-disable-line require-await\n    const msg = new Message(Message.TYPES.GET_VALUE, key, 0);\n    return this.network.sendRequest(peer, msg);\n  }\n  /**\n   * Verify a record, fetching missing public keys from the network.\n   * Calls back with an error if the record is invalid.\n   *\n   * @param {Record} record\n   * @returns {Promise<void>}\n   * @private\n   */\n\n\n  async _verifyRecordOnline(record) {\n    await libp2pRecord.validator.verifyRecord(this.validators, record);\n  }\n\n}\n\nmodule.exports = KadDHT;\nmodule.exports.multicodec = c.PROTOCOL_DHT;","map":null,"metadata":{},"sourceType":"script"}