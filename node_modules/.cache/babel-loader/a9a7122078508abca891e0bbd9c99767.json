{"ast":null,"code":"'use strict';\n\nconst {\n  Adapter,\n  utils\n} = require('interface-datastore');\n\nconst map = utils.map;\n/**\n * A datastore shim, that wraps around a given datastore, changing\n * the way keys look to the user, for example namespacing\n * keys, reversing them, etc.\n */\n\nclass KeyTransformDatastore extends Adapter {\n  constructor(child, transform) {\n    super();\n    this.child = child;\n    this.transform = transform;\n  }\n\n  open() {\n    return this.child.open();\n  }\n\n  put(key, val, options) {\n    return this.child.put(this.transform.convert(key), val, options);\n  }\n\n  get(key, options) {\n    return this.child.get(this.transform.convert(key), options);\n  }\n\n  has(key, options) {\n    return this.child.has(this.transform.convert(key), options);\n  }\n\n  delete(key, options) {\n    return this.child.delete(this.transform.convert(key), options);\n  }\n\n  batch() {\n    const b = this.child.batch();\n    return {\n      put: (key, value) => {\n        b.put(this.transform.convert(key), value);\n      },\n      delete: key => {\n        b.delete(this.transform.convert(key));\n      },\n      commit: options => {\n        return b.commit(options);\n      }\n    };\n  }\n\n  query(q, options) {\n    return map(this.child.query(q, options), e => {\n      e.key = this.transform.invert(e.key);\n      return e;\n    });\n  }\n\n  close() {\n    return this.child.close();\n  }\n\n}\n\nmodule.exports = KeyTransformDatastore;","map":null,"metadata":{},"sourceType":"script"}