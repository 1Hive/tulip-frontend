{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _asyncGeneratorDelegate = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('./utils'),\n    filter = _require.filter,\n    sortAll = _require.sortAll,\n    take = _require.take,\n    map = _require.map;\n\nvar drain = require('it-drain');\n\nvar InterfaceDatastoreAdapter = /*#__PURE__*/function () {\n  function InterfaceDatastoreAdapter() {\n    _classCallCheck(this, InterfaceDatastoreAdapter);\n  }\n\n  _createClass(InterfaceDatastoreAdapter, [{\n    key: \"open\",\n    value: function () {\n      var _open = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function open() {\n        return _open.apply(this, arguments);\n      }\n\n      return open;\n    }()\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function close() {\n        return _close.apply(this, arguments);\n      }\n\n      return close;\n    }()\n    /**\n     * Store the passed value under the passed key\n     *\n     * @param {Key} key\n     * @param {Buffer} val\n     * @param {Object} options\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"put\",\n    value: function () {\n      var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(key, val) {\n        var options,\n            _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function put(_x, _x2) {\n        return _put.apply(this, arguments);\n      }\n\n      return put;\n    }()\n    /**\n     * Store the given key/value pairs\n     *\n     * @param {AsyncIterator<{ key: Key, value: Buffer }>} source\n     * @param {Object} options\n     * @returns {AsyncIterator<{ key: Key, value: Buffer }>}\n     */\n\n  }, {\n    key: \"putMany\",\n    value: function putMany(source) {\n      var _this = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _value4, key, value;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context4.prev = 2;\n                _iterator = _asyncIterator(source);\n\n              case 4:\n                _context4.next = 6;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 6:\n                _step = _context4.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context4.next = 10;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 10:\n                _value = _context4.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context4.next = 20;\n                  break;\n                }\n\n                _value4 = _value, key = _value4.key, value = _value4.value;\n                _context4.next = 15;\n                return _awaitAsyncGenerator(_this.put(key, value, options));\n\n              case 15:\n                _context4.next = 17;\n                return {\n                  key: key,\n                  value: value\n                };\n\n              case 17:\n                _iteratorNormalCompletion = true;\n                _context4.next = 4;\n                break;\n\n              case 20:\n                _context4.next = 26;\n                break;\n\n              case 22:\n                _context4.prev = 22;\n                _context4.t0 = _context4[\"catch\"](2);\n                _didIteratorError = true;\n                _iteratorError = _context4.t0;\n\n              case 26:\n                _context4.prev = 26;\n                _context4.prev = 27;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context4.next = 31;\n                  break;\n                }\n\n                _context4.next = 31;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 31:\n                _context4.prev = 31;\n\n                if (!_didIteratorError) {\n                  _context4.next = 34;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 34:\n                return _context4.finish(31);\n\n              case 35:\n                return _context4.finish(26);\n\n              case 36:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[2, 22, 26, 36], [27,, 31, 35]]);\n      }))();\n    }\n    /**\n     * Retrieve the value for the passed key\n     *\n     * @param {Key} key\n     * @param {Object} options\n     * @returns {Promise<Buffer>}\n     */\n\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(key) {\n        var options,\n            _args5 = arguments;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                options = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function get(_x3) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n    /**\n     * Retrieve values for the passed keys\n     *\n     * @param {AsyncIterator<Key>} source\n     * @param {Object} options\n     * @returns {AsyncIterator<Buffer>}\n     */\n\n  }, {\n    key: \"getMany\",\n    value: function getMany(source) {\n      var _this2 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, key;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _iteratorNormalCompletion2 = true;\n                _didIteratorError2 = false;\n                _context6.prev = 2;\n                _iterator2 = _asyncIterator(source);\n\n              case 4:\n                _context6.next = 6;\n                return _awaitAsyncGenerator(_iterator2.next());\n\n              case 6:\n                _step2 = _context6.sent;\n                _iteratorNormalCompletion2 = _step2.done;\n                _context6.next = 10;\n                return _awaitAsyncGenerator(_step2.value);\n\n              case 10:\n                _value2 = _context6.sent;\n\n                if (_iteratorNormalCompletion2) {\n                  _context6.next = 18;\n                  break;\n                }\n\n                key = _value2;\n                _context6.next = 15;\n                return _this2.get(key, options);\n\n              case 15:\n                _iteratorNormalCompletion2 = true;\n                _context6.next = 4;\n                break;\n\n              case 18:\n                _context6.next = 24;\n                break;\n\n              case 20:\n                _context6.prev = 20;\n                _context6.t0 = _context6[\"catch\"](2);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context6.t0;\n\n              case 24:\n                _context6.prev = 24;\n                _context6.prev = 25;\n\n                if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n                  _context6.next = 29;\n                  break;\n                }\n\n                _context6.next = 29;\n                return _awaitAsyncGenerator(_iterator2.return());\n\n              case 29:\n                _context6.prev = 29;\n\n                if (!_didIteratorError2) {\n                  _context6.next = 32;\n                  break;\n                }\n\n                throw _iteratorError2;\n\n              case 32:\n                return _context6.finish(29);\n\n              case 33:\n                return _context6.finish(24);\n\n              case 34:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, null, [[2, 20, 24, 34], [25,, 29, 33]]);\n      }))();\n    }\n    /**\n     * Check for the existence of a value for the passed key\n     *\n     * @param {Key} key\n     * @returns {Promise<bool>}\n     */\n\n  }, {\n    key: \"has\",\n    value: function () {\n      var _has = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(key) {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function has(_x4) {\n        return _has.apply(this, arguments);\n      }\n\n      return has;\n    }()\n    /**\n     * Remove the record for the passed key\n     *\n     * @param {Key} key\n     * @param {Object} options\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(key) {\n        var options,\n            _args8 = arguments;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                options = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function _delete(_x5) {\n        return _delete2.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n    /**\n     * Remove values for the passed keys\n     *\n     * @param {AsyncIterator<Key>} source\n     * @param {Object} options\n     * @returns {AsyncIterator<Key>}\n     */\n\n  }, {\n    key: \"deleteMany\",\n    value: function deleteMany(source) {\n      var _this3 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _value3, key;\n\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _iteratorNormalCompletion3 = true;\n                _didIteratorError3 = false;\n                _context9.prev = 2;\n                _iterator3 = _asyncIterator(source);\n\n              case 4:\n                _context9.next = 6;\n                return _awaitAsyncGenerator(_iterator3.next());\n\n              case 6:\n                _step3 = _context9.sent;\n                _iteratorNormalCompletion3 = _step3.done;\n                _context9.next = 10;\n                return _awaitAsyncGenerator(_step3.value);\n\n              case 10:\n                _value3 = _context9.sent;\n\n                if (_iteratorNormalCompletion3) {\n                  _context9.next = 20;\n                  break;\n                }\n\n                key = _value3;\n                _context9.next = 15;\n                return _awaitAsyncGenerator(_this3.delete(key, options));\n\n              case 15:\n                _context9.next = 17;\n                return key;\n\n              case 17:\n                _iteratorNormalCompletion3 = true;\n                _context9.next = 4;\n                break;\n\n              case 20:\n                _context9.next = 26;\n                break;\n\n              case 22:\n                _context9.prev = 22;\n                _context9.t0 = _context9[\"catch\"](2);\n                _didIteratorError3 = true;\n                _iteratorError3 = _context9.t0;\n\n              case 26:\n                _context9.prev = 26;\n                _context9.prev = 27;\n\n                if (!(!_iteratorNormalCompletion3 && _iterator3.return != null)) {\n                  _context9.next = 31;\n                  break;\n                }\n\n                _context9.next = 31;\n                return _awaitAsyncGenerator(_iterator3.return());\n\n              case 31:\n                _context9.prev = 31;\n\n                if (!_didIteratorError3) {\n                  _context9.next = 34;\n                  break;\n                }\n\n                throw _iteratorError3;\n\n              case 34:\n                return _context9.finish(31);\n\n              case 35:\n                return _context9.finish(26);\n\n              case 36:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, null, [[2, 22, 26, 36], [27,, 31, 35]]);\n      }))();\n    }\n    /**\n     * Create a new batch object.\n     *\n     * @returns {Object}\n     */\n\n  }, {\n    key: \"batch\",\n    value: function batch() {\n      var _this5 = this;\n\n      var puts = [];\n      var dels = [];\n      return {\n        put: function put(key, value) {\n          puts.push({\n            key: key,\n            value: value\n          });\n        },\n        delete: function _delete(key) {\n          dels.push(key);\n        },\n        commit: function () {\n          var _commit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(options) {\n            return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n              while (1) {\n                switch (_context10.prev = _context10.next) {\n                  case 0:\n                    _context10.next = 2;\n                    return drain(_this5.putMany(puts, options));\n\n                  case 2:\n                    puts = [];\n                    _context10.next = 5;\n                    return drain(_this5.deleteMany(dels, options));\n\n                  case 5:\n                    dels = [];\n\n                  case 6:\n                  case \"end\":\n                    return _context10.stop();\n                }\n              }\n            }, _callee10);\n          }));\n\n          function commit(_x6) {\n            return _commit.apply(this, arguments);\n          }\n\n          return commit;\n        }()\n      };\n    }\n    /**\n     * Yield all datastore values\n     *\n     * @param {Object} q\n     * @param {Object} options\n     * @returns {AsyncIterable<{ key: Key, value: Buffer }>}\n     */\n\n  }, {\n    key: \"_all\",\n    value: function _all(q, options) {// eslint-disable-line require-await\n\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11);\n      }))();\n    }\n    /**\n     * Query the store.\n     *\n     * @param {Object} q\n     * @param {Object} options\n     * @returns {AsyncIterable<Buffer>}\n     */\n\n  }, {\n    key: \"query\",\n    value: function query(q, options) {\n      var _this4 = this;\n\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        var it, i;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                // eslint-disable-line require-await\n                it = _this4._all(q, options);\n\n                if (q.prefix != null) {\n                  it = filter(it, function (e) {\n                    return e.key.toString().startsWith(q.prefix);\n                  });\n                }\n\n                if (Array.isArray(q.filters)) {\n                  it = q.filters.reduce(function (it, f) {\n                    return filter(it, f);\n                  }, it);\n                }\n\n                if (Array.isArray(q.orders)) {\n                  it = q.orders.reduce(function (it, f) {\n                    return sortAll(it, f);\n                  }, it);\n                }\n\n                if (q.offset != null) {\n                  i = 0;\n                  it = filter(it, function () {\n                    return i++ >= q.offset;\n                  });\n                }\n\n                if (q.limit != null) {\n                  it = take(it, q.limit);\n                }\n\n                if (q.keysOnly === true) {\n                  it = map(it, function (e) {\n                    return {\n                      key: e.key\n                    };\n                  });\n                }\n\n                return _context12.delegateYield(_asyncGeneratorDelegate(_asyncIterator(it), _awaitAsyncGenerator), \"t0\", 8);\n\n              case 8:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12);\n      }))();\n    }\n  }]);\n\n  return InterfaceDatastoreAdapter;\n}();\n\nmodule.exports = InterfaceDatastoreAdapter;","map":null,"metadata":{},"sourceType":"script"}