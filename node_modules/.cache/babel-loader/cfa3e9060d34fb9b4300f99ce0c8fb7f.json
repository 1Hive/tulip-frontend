{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar log = require('debug')('ipfs');\n\nvar mergeOptions = require('merge-options');\n\nvar _require = require('ipfs-utils/src/env'),\n    isTest = _require.isTest;\n\nvar globSource = require('ipfs-utils/src/files/glob-source');\n\nvar urlSource = require('ipfs-utils/src/files/url-source');\n\nvar _require2 = require('buffer'),\n    Buffer = _require2.Buffer;\n\nvar PeerId = require('peer-id');\n\nvar PeerInfo = require('peer-info');\n\nvar crypto = require('libp2p-crypto');\n\nvar isIPFS = require('is-ipfs');\n\nvar multiaddr = require('multiaddr');\n\nvar multihash = require('multihashes');\n\nvar multibase = require('multibase');\n\nvar multicodec = require('multicodec');\n\nvar multihashing = require('multihashing-async');\n\nvar CID = require('cids');\n\nvar _require3 = require('./errors'),\n    NotInitializedError = _require3.NotInitializedError;\n\nvar Components = require('./components');\n\nvar ApiManager = require('./api-manager');\n\nvar getDefaultOptions = function getDefaultOptions() {\n  return {\n    init: true,\n    start: true,\n    EXPERIMENTAL: {},\n    preload: {\n      enabled: !isTest,\n      // preload by default, unless in test env\n      addresses: ['/dns4/node0.preload.ipfs.io/https', '/dns4/node1.preload.ipfs.io/https', '/dns4/node2.preload.ipfs.io/https', '/dns4/node3.preload.ipfs.io/https']\n    }\n  };\n};\n\nfunction create(_x) {\n  return _create.apply(this, arguments);\n}\n\nfunction _create() {\n  _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options) {\n    var print, apiManager, _apiManager$update, api;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = mergeOptions(getDefaultOptions(), options); // eslint-disable-next-line no-console\n\n            print = options.silent ? log : console.log;\n            apiManager = new ApiManager();\n            _apiManager$update = apiManager.update({\n              init: Components.init({\n                apiManager: apiManager,\n                print: print,\n                options: options\n              }),\n              dns: Components.dns(),\n              isOnline: Components.isOnline({})\n            }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n              return _regeneratorRuntime.wrap(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      throw new NotInitializedError();\n\n                    case 1:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _callee);\n            }))), api = _apiManager$update.api; // eslint-disable-line require-await\n\n            if (options.init) {\n              _context2.next = 6;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", api);\n\n          case 6:\n            _context2.next = 8;\n            return api.init();\n\n          case 8:\n            if (options.start) {\n              _context2.next = 10;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", api);\n\n          case 10:\n            return _context2.abrupt(\"return\", api.start());\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _create.apply(this, arguments);\n}\n\nmodule.exports = {\n  create: create,\n  crypto: crypto,\n  isIPFS: isIPFS,\n  Buffer: Buffer,\n  CID: CID,\n  multiaddr: multiaddr,\n  multibase: multibase,\n  multihash: multihash,\n  multihashing: multihashing,\n  multicodec: multicodec,\n  PeerId: PeerId,\n  PeerInfo: PeerInfo,\n  globSource: globSource,\n  urlSource: urlSource\n};","map":null,"metadata":{},"sourceType":"script"}