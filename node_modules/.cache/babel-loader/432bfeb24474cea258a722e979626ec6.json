{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst {\n  cidToString\n} = require('../utils/cid');\n\nconst log = debug('ipfs:mfs-preload');\nlog.error = debug('ipfs:mfs-preload:error');\n\nmodule.exports = ({\n  preload,\n  files,\n  options\n}) => {\n  options = options || {};\n  options.interval = options.interval || 30 * 1000;\n\n  if (!options.enabled) {\n    log('MFS preload disabled');\n\n    const noop = async () => {};\n\n    return {\n      start: noop,\n      stop: noop\n    };\n  }\n\n  let rootCid, timeoutId;\n\n  const preloadMfs = async () => {\n    try {\n      const stats = await files.stat('/');\n      const nextRootCid = cidToString(stats.cid, {\n        base: 'base32'\n      });\n\n      if (rootCid !== nextRootCid) {\n        log(`preloading updated MFS root ${rootCid} -> ${stats.cid}`);\n        await preload(stats.cid);\n        rootCid = nextRootCid;\n      }\n    } catch (err) {\n      log.error('failed to preload MFS root', err);\n    } finally {\n      timeoutId = setTimeout(preloadMfs, options.interval);\n    }\n  };\n\n  return {\n    async start() {\n      const stats = await files.stat('/');\n      rootCid = cidToString(stats.cid, {\n        base: 'base32'\n      });\n      log(`monitoring MFS root ${stats.cid}`);\n      timeoutId = setTimeout(preloadMfs, options.interval);\n    },\n\n    stop() {\n      clearTimeout(timeoutId);\n    }\n\n  };\n};","map":null,"metadata":{},"sourceType":"script"}