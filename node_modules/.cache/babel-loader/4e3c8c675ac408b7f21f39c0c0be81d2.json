{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar log = require('debug')('mss:handle');\n\nvar BufferList = require('bl/BufferList');\n\nvar multistream = require('./multistream');\n\nvar handshake = require('it-handshake');\n\nvar _require = require('./constants'),\n    PROTOCOL_ID = _require.PROTOCOL_ID;\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(stream, protocols) {\n    var _handshake, writer, reader, rest, shakeStream, protocol;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            protocols = Array.isArray(protocols) ? protocols : [protocols];\n            _handshake = handshake(stream), writer = _handshake.writer, reader = _handshake.reader, rest = _handshake.rest, shakeStream = _handshake.stream;\n\n          case 2:\n            if (!true) {\n              _context.next = 24;\n              break;\n            }\n\n            _context.next = 5;\n            return multistream.read(reader);\n\n          case 5:\n            protocol = _context.sent.toString();\n            log('read \"%s\"', protocol);\n\n            if (!(protocol === PROTOCOL_ID)) {\n              _context.next = 11;\n              break;\n            }\n\n            log('respond with \"%s\" for \"%s\"', PROTOCOL_ID, protocol);\n            multistream.write(writer, PROTOCOL_ID);\n            return _context.abrupt(\"continue\", 2);\n\n          case 11:\n            if (!protocols.includes(protocol)) {\n              _context.next = 16;\n              break;\n            }\n\n            multistream.write(writer, protocol);\n            log('respond with \"%s\" for \"%s\"', protocol, protocol);\n            rest();\n            return _context.abrupt(\"return\", {\n              stream: shakeStream,\n              protocol: protocol\n            });\n\n          case 16:\n            if (!(protocol === 'ls')) {\n              _context.next = 20;\n              break;\n            }\n\n            // <varint-msg-len><varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\\n\n            multistream.write(writer, new BufferList(protocols.map(function (p) {\n              return multistream.encode(p);\n            })));\n            log('respond with \"%s\" for %s', protocols, protocol);\n            return _context.abrupt(\"continue\", 2);\n\n          case 20:\n            multistream.write(writer, 'na');\n            log('respond with \"na\" for \"%s\"', protocol);\n            _context.next = 2;\n            break;\n\n          case 24:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}