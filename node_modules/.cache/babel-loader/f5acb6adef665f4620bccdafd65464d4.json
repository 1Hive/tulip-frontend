{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar EventEmitter = require('events');\n\nvar pipe = require('it-pipe');\n\nvar emitter = new EventEmitter();\n\nfunction handler(_ref) {\n  var connection = _ref.connection,\n      stream = _ref.stream;\n  var peerId = connection.remotePeer.toB58String();\n  pipe(stream, /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source) {\n      var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step, _value, _ret;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 2;\n\n              _loop = function _loop() {\n                var message = _value;\n                var msg = void 0;\n\n                try {\n                  msg = JSON.parse(message.toString());\n                } catch (err) {\n                  emitter.emit('warning', err.message);\n                  return \"continue\"; // early\n                }\n\n                if (peerId !== msg.from.toString()) {\n                  emitter.emit('warning', 'no peerid match ' + msg.from);\n                  return \"continue\"; // early\n                }\n\n                var topicIDs = msg.topicIDs;\n\n                if (!Array.isArray(topicIDs)) {\n                  emitter.emit('warning', 'no topic IDs');\n                  return \"continue\"; // early\n                }\n\n                msg.data = Buffer.from(msg.data, 'hex');\n                msg.seqno = Buffer.from(msg.seqno, 'hex');\n                topicIDs.forEach(function (topic) {\n                  emitter.emit(topic, msg);\n                });\n              };\n\n              _iterator = _asyncIterator(source);\n\n            case 5:\n              _context.next = 7;\n              return _iterator.next();\n\n            case 7:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 11;\n              return _step.value;\n\n            case 11:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 19;\n                break;\n              }\n\n              _ret = _loop();\n\n              if (!(_ret === \"continue\")) {\n                _context.next = 16;\n                break;\n              }\n\n              return _context.abrupt(\"continue\", 16);\n\n            case 16:\n              _iteratorNormalCompletion = true;\n              _context.next = 5;\n              break;\n\n            case 19:\n              _context.next = 25;\n              break;\n\n            case 21:\n              _context.prev = 21;\n              _context.t0 = _context[\"catch\"](2);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 25:\n              _context.prev = 25;\n              _context.prev = 26;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 30;\n                break;\n              }\n\n              _context.next = 30;\n              return _iterator.return();\n\n            case 30:\n              _context.prev = 30;\n\n              if (!_didIteratorError) {\n                _context.next = 33;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 33:\n              return _context.finish(30);\n\n            case 34:\n              return _context.finish(25);\n\n            case 35:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 21, 25, 35], [26,, 30, 34]]);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n}\n\nexports = module.exports = {\n  handler: handler,\n  emitter: emitter\n};","map":null,"metadata":{},"sourceType":"script"}