{"ast":null,"code":"import { _ as _slicedToArray } from './slicedToArray-ad07b557.js';\nimport './unsupportedIterableToArray-aef68344.js';\nimport React, { useMemo, useCallback, useRef, useState, useEffect } from 'react';\nimport './_commonjsHelpers-97e6d7b1.js';\nimport './index-097535f1.js';\nimport './defineProperty-a0480c32.js';\nimport { _ as _toConsumableArray } from './toConsumableArray-07f01111.js';\nimport _styled from 'styled-components';\nimport './getPrototypeOf-97db713a.js';\nimport './color.js';\nimport './components.js';\nimport './contains-component.js';\nimport { unselectable } from './css.js';\nimport './dayjs.min-e57fb69a.js';\nimport './date.js';\nimport './miscellaneous.js';\nimport './environment.js';\nimport './font.js';\nimport './math-e6d0e93a.js';\nimport './characters.js';\nimport './format.js';\nimport './keycodes.js';\nimport './url.js';\nimport './web3.js';\nimport './constants.js';\nimport './breakpoints.js';\nimport { springs } from './springs.js';\nimport './text-styles.js';\nimport { _ as _extends } from './extends-db4f0c26.js';\nimport { _ as _objectWithoutProperties } from './objectWithoutProperties-234758e1.js';\nimport './objectWithoutPropertiesLoose-9606ad13.js';\nimport 'react-dom';\nimport { S as Spring } from './web-a351a0a1.js';\nimport { P as PropTypes } from './proptypes-c8a77d05.js';\nvar LABELS_HEIGHT = 30;\nvar WIDTH_DEFAULT = 300;\n\nfunction useMeasuredWidth() {\n  var ref = useRef();\n\n  var _useState = useState(WIDTH_DEFAULT),\n      _useState2 = _slicedToArray(_useState, 2),\n      measuredWidth = _useState2[0],\n      setMeasuredWidth = _useState2[1];\n\n  var onResize = useCallback(function () {\n    if (ref.current) {\n      setMeasuredWidth(ref.current.clientWidth);\n    }\n  }, []);\n  var onRef = useCallback(function (element) {\n    ref.current = element;\n    onResize();\n  }, [onResize]);\n  useEffect(function () {\n    window.addEventListener('resize', onResize);\n    return function () {\n      return window.removeEventListener('resize', onResize);\n    };\n  }, [onResize]);\n  return [measuredWidth, onRef];\n}\n\nvar _StyledSvg = _styled(\"svg\").withConfig({\n  displayName: \"LineChart___StyledSvg\",\n  componentId: \"sc-1i2q3pf-0\"\n})([\"display:block\"]);\n\nvar _StyledText = _styled(\"text\").withConfig({\n  displayName: \"LineChart___StyledText\",\n  componentId: \"sc-1i2q3pf-1\"\n})([\"alignment-baseline:middle;font-size:12px;font-weight:300;\", \";\"], unselectable);\n\nfunction LineChart(_ref) {\n  var animDelay = _ref.animDelay,\n      borderColor = _ref.borderColor,\n      color = _ref.color,\n      dotRadius = _ref.dotRadius,\n      height = _ref.height,\n      label = _ref.label,\n      labelColor = _ref.labelColor,\n      linesProps = _ref.lines,\n      reset = _ref.reset,\n      springConfig = _ref.springConfig,\n      total = _ref.total,\n      widthProps = _ref.width,\n      props = _objectWithoutProperties(_ref, [\"animDelay\", \"borderColor\", \"color\", \"dotRadius\", \"height\", \"label\", \"labelColor\", \"lines\", \"reset\", \"springConfig\", \"total\", \"width\"]);\n\n  var _useMeasuredWidth = useMeasuredWidth(),\n      _useMeasuredWidth2 = _slicedToArray(_useMeasuredWidth, 2),\n      width = _useMeasuredWidth2[0],\n      onSvgRef = _useMeasuredWidth2[1];\n\n  var lines = useMemo(function () {\n    return linesProps.map(function (lineOrValues) {\n      return Array.isArray(lineOrValues) ? {\n        values: lineOrValues\n      } : lineOrValues;\n    });\n  }, [linesProps]); // the count of provided values\n\n  var valuesCount = useMemo(function () {\n    // All the values have the same length, so we can use the first one.\n    return lines[0] ? lines[0].values.length : 0;\n  }, [lines]); // the total amount of values\n\n  var totalCount = useMemo(function () {\n    // If no total is provided, the total is the number of provided values.\n    return total > 0 && total > valuesCount ? total : valuesCount;\n  }, [valuesCount, total]);\n  var getX = useCallback(function (index) {\n    return width / Math.max(1, totalCount - 1) * index;\n  }, [width, totalCount]);\n  var getY = useCallback(function (percentage, progress, height) {\n    var padding = dotRadius + 2;\n    return height - padding - (height - padding * 2) * percentage * progress;\n  }, [dotRadius]);\n  var getLabelPosition = useCallback(function (index, length) {\n    if (index === 0) return 'start';\n    if (index === length - 1) return 'end';\n    return 'middle';\n  }, []);\n  var labels = label && totalCount > 0 ? _toConsumableArray(Array(totalCount).keys()).map(label) : null;\n  var chartHeight = height - (labels ? LABELS_HEIGHT : 0);\n  var rectangle = /*#__PURE__*/React.createElement(\"rect\", {\n    width: width,\n    height: chartHeight,\n    rx: \"3\",\n    ry: \"3\",\n    fill: \"#ffffff\",\n    strokeWidth: \"1\",\n    stroke: borderColor\n  });\n  return /*#__PURE__*/React.createElement(Spring, {\n    from: {\n      progress: 0\n    },\n    to: {\n      progress: 1\n    },\n    config: springConfig,\n    delay: animDelay,\n    reset: reset\n  }, function (_ref2) {\n    var progress = _ref2.progress;\n    return /*#__PURE__*/React.createElement(_StyledSvg, _extends({\n      ref: onSvgRef,\n      viewBox: \"0 0 \".concat(width, \" \").concat(height),\n      width: widthProps || 'auto',\n      height: \"auto\"\n    }, props), /*#__PURE__*/React.createElement(\"mask\", {\n      id: \"chart-mask\"\n    }, rectangle), rectangle, /*#__PURE__*/React.createElement(\"g\", {\n      mask: \"url(#chart-mask)\"\n    }, totalCount > 0 && /*#__PURE__*/React.createElement(\"path\", {\n      d: \"\\n                  \".concat(_toConsumableArray(new Array(totalCount - 1)).reduce(function (path, _, index) {\n        return \"\".concat(path, \" M \").concat(getX(index), \",\").concat(chartHeight, \" l 0,-8\");\n      }, ''), \"\\n                \"),\n      stroke: borderColor,\n      strokeWidth: \"1\"\n    }), lines.map(function (line, lineIndex) {\n      return /*#__PURE__*/React.createElement(\"g\", {\n        key: \"line-plot-\".concat(line.id || lineIndex)\n      }, /*#__PURE__*/React.createElement(\"path\", {\n        d: \"\\n                    M\\n                    \".concat(getX(0), \",\\n                    \").concat(getY(line.values[0], progress, chartHeight), \"\\n\\n                    \").concat(line.values.slice(1).map(function (val, index) {\n          return \"L\\n                           \".concat(getX((index + 1) * progress), \",\\n                           \").concat(getY(val, progress, chartHeight), \"\\n                          \");\n        }).join(''), \"\\n                  \"),\n        fill: \"transparent\",\n        stroke: line.color || color(lineIndex, {\n          lines: lines\n        }),\n        strokeWidth: \"2\"\n      }), line.values.slice(1, -1).map(function (val, index) {\n        return /*#__PURE__*/React.createElement(\"circle\", {\n          key: index,\n          cx: getX(index + 1) * progress,\n          cy: getY(val, progress, chartHeight),\n          r: dotRadius,\n          fill: \"white\",\n          stroke: line.color || color(lineIndex, {\n            lines: lines\n          }),\n          strokeWidth: \"1\"\n        });\n      }));\n    }), /*#__PURE__*/React.createElement(\"line\", {\n      x1: getX(valuesCount - 1) * progress,\n      y1: \"0\",\n      x2: getX(valuesCount - 1) * progress,\n      y2: chartHeight,\n      stroke: \"#DAEAEF\",\n      strokeWidth: \"3\"\n    })), labels && /*#__PURE__*/React.createElement(\"g\", {\n      transform: \"translate(0,\".concat(chartHeight, \")\")\n    }, labels.map(function (label, index) {\n      return /*#__PURE__*/React.createElement(_StyledText, {\n        key: index,\n        x: getX(index),\n        y: LABELS_HEIGHT / 2,\n        textAnchor: getLabelPosition(index, labels.length),\n        fill: labelColor\n      }, label);\n    })));\n  });\n}\n\nLineChart.propTypes = {\n  springConfig: PropTypes._spring,\n  total: PropTypes.number,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  dotRadius: PropTypes.number,\n  animDelay: PropTypes.number,\n  borderColor: PropTypes.string,\n  labelColor: PropTypes.string,\n  reset: PropTypes.bool,\n  lines: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.shape({\n    id: PropTypes.number,\n    values: PropTypes.arrayOf(PropTypes.number).isRequired,\n    // numbers between 0 and 1\n    color: PropTypes.string // overrides the color() prop if set\n\n  }), // values can also be passed directly\n  PropTypes.arrayOf(PropTypes.number)])),\n  label: PropTypes.oneOfType([PropTypes.func, PropTypes._null]),\n  color: PropTypes.func\n};\nLineChart.defaultProps = {\n  springConfig: springs.lazy,\n  total: -1,\n  height: 200,\n  dotRadius: 7 / 2,\n  animDelay: 500,\n  reset: false,\n  borderColor: 'rgba(209, 209, 209, 0.5)',\n  labelColor: '#6d777b',\n  lines: [],\n  label: function label(index) {\n    return index + 1;\n  },\n  color: function color(index, _ref3) {\n    var lines = _ref3.lines;\n    return \"hsl(\".concat((index * (360 / lines.length) + 40) % 360, \", 60%, 70%)\");\n  }\n};\nexport default LineChart;","map":null,"metadata":{},"sourceType":"module"}