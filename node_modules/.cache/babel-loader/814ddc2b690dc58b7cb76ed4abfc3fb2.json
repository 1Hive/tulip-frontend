{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useCallback, useState, useEffect } from 'react';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { useLottery, useLotteryTicket } from 'hooks/useContract';\nimport { multiClaim, getMax, multiBuy } from '../utils/lotteryUtils';\nexport const useMultiClaimLottery = () => {\n  _s();\n\n  const {\n    account\n  } = useWallet();\n  const lotteryContract = useLottery();\n  const lotteryTicketContract = useLotteryTicket();\n  const handleClaim = useCallback(async () => {\n    try {\n      const txHash = await multiClaim(lotteryContract, lotteryTicketContract, account);\n      return txHash;\n    } catch (e) {\n      return false;\n    }\n  }, [account, lotteryContract, lotteryTicketContract]);\n  return {\n    onMultiClaim: handleClaim\n  };\n};\n\n_s(useMultiClaimLottery, \"hqRznHByE0FchZH12uv+QVscXaM=\", false, function () {\n  return [useWallet, useLottery, useLotteryTicket];\n});\n\nexport const useMultiBuyLottery = () => {\n  _s2();\n\n  const {\n    account\n  } = useWallet();\n  const lotteryContract = useLottery();\n  const handleBuy = useCallback(async (amount, numbers) => {\n    try {\n      const txHash = await multiBuy(lotteryContract, amount, numbers, account);\n      return txHash;\n    } catch (e) {\n      return false;\n    }\n  }, [account, lotteryContract]);\n  return {\n    onMultiBuy: handleBuy\n  };\n};\n\n_s2(useMultiBuyLottery, \"sXsLu9OY7vJFRv98JLOHXVaMjYg=\", false, function () {\n  return [useWallet, useLottery];\n});\n\nexport const useMaxNumber = () => {\n  _s3();\n\n  const [max, setMax] = useState(5);\n  const lotteryContract = useLottery();\n  const fetchMax = useCallback(async () => {\n    const maxNumber = await getMax(lotteryContract);\n    setMax(maxNumber);\n  }, [lotteryContract]);\n  useEffect(() => {\n    if (lotteryContract) {\n      fetchMax();\n    }\n  }, [lotteryContract, fetchMax]);\n  return max;\n};\n\n_s3(useMaxNumber, \"4RrRfQUixoegVTSB45jZQwHEma4=\", false, function () {\n  return [useLottery];\n});","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/hooks/useBuyLottery.ts"],"names":["useCallback","useState","useEffect","useWallet","useLottery","useLotteryTicket","multiClaim","getMax","multiBuy","useMultiClaimLottery","account","lotteryContract","lotteryTicketContract","handleClaim","txHash","e","onMultiClaim","useMultiBuyLottery","handleBuy","amount","numbers","onMultiBuy","useMaxNumber","max","setMax","fetchMax","maxNumber"],"mappings":";;;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,EAAgCC,SAAhC,QAAiD,OAAjD;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,mBAA7C;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,QAA7B,QAA6C,uBAA7C;AAEA,OAAO,MAAMC,oBAAoB,GAAG,MAAM;AAAA;;AACxC,QAAM;AAAEC,IAAAA;AAAF,MAAcP,SAAS,EAA7B;AACA,QAAMQ,eAAe,GAAGP,UAAU,EAAlC;AACA,QAAMQ,qBAAqB,GAAGP,gBAAgB,EAA9C;AAEA,QAAMQ,WAAW,GAAGb,WAAW,CAAC,YAAY;AAC1C,QAAI;AACF,YAAMc,MAAM,GAAG,MAAMR,UAAU,CAACK,eAAD,EAAkBC,qBAAlB,EAAyCF,OAAzC,CAA/B;AACA,aAAOI,MAAP;AACD,KAHD,CAGE,OAAOC,CAAP,EAAU;AACV,aAAO,KAAP;AACD;AACF,GAP8B,EAO5B,CAACL,OAAD,EAAUC,eAAV,EAA2BC,qBAA3B,CAP4B,CAA/B;AASA,SAAO;AAAEI,IAAAA,YAAY,EAAEH;AAAhB,GAAP;AACD,CAfM;;GAAMJ,oB;UACSN,S,EACIC,U,EACMC,gB;;;AAchC,OAAO,MAAMY,kBAAkB,GAAG,MAAM;AAAA;;AACtC,QAAM;AAAEP,IAAAA;AAAF,MAAcP,SAAS,EAA7B;AACA,QAAMQ,eAAe,GAAGP,UAAU,EAAlC;AAEA,QAAMc,SAAS,GAAGlB,WAAW,CAC3B,OAAOmB,MAAP,EAAuBC,OAAvB,KAA+C;AAC7C,QAAI;AACF,YAAMN,MAAM,GAAG,MAAMN,QAAQ,CAACG,eAAD,EAAkBQ,MAAlB,EAA0BC,OAA1B,EAAmCV,OAAnC,CAA7B;AACA,aAAOI,MAAP;AACD,KAHD,CAGE,OAAOC,CAAP,EAAU;AACV,aAAO,KAAP;AACD;AACF,GAR0B,EAS3B,CAACL,OAAD,EAAUC,eAAV,CAT2B,CAA7B;AAYA,SAAO;AAAEU,IAAAA,UAAU,EAAEH;AAAd,GAAP;AACD,CAjBM;;IAAMD,kB;UACSd,S,EACIC,U;;;AAiB1B,OAAO,MAAMkB,YAAY,GAAG,MAAM;AAAA;;AAChC,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBvB,QAAQ,CAAC,CAAD,CAA9B;AACA,QAAMU,eAAe,GAAGP,UAAU,EAAlC;AAEA,QAAMqB,QAAQ,GAAGzB,WAAW,CAAC,YAAY;AACvC,UAAM0B,SAAS,GAAG,MAAMnB,MAAM,CAACI,eAAD,CAA9B;AACAa,IAAAA,MAAM,CAACE,SAAD,CAAN;AACD,GAH2B,EAGzB,CAACf,eAAD,CAHyB,CAA5B;AAKAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,eAAJ,EAAqB;AACnBc,MAAAA,QAAQ;AACT;AACF,GAJQ,EAIN,CAACd,eAAD,EAAkBc,QAAlB,CAJM,CAAT;AAMA,SAAOF,GAAP;AACD,CAhBM;;IAAMD,Y;UAEalB,U","sourcesContent":["import { useCallback, useState, useEffect } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\nimport { multiClaim, getMax, multiBuy } from '../utils/lotteryUtils'\n\nexport const useMultiClaimLottery = () => {\n  const { account } = useWallet()\n  const lotteryContract = useLottery()\n  const lotteryTicketContract = useLotteryTicket()\n\n  const handleClaim = useCallback(async () => {\n    try {\n      const txHash = await multiClaim(lotteryContract, lotteryTicketContract, account)\n      return txHash\n    } catch (e) {\n      return false\n    }\n  }, [account, lotteryContract, lotteryTicketContract])\n\n  return { onMultiClaim: handleClaim }\n}\n\nexport const useMultiBuyLottery = () => {\n  const { account } = useWallet()\n  const lotteryContract = useLottery()\n\n  const handleBuy = useCallback(\n    async (amount: string, numbers: Array<any>) => {\n      try {\n        const txHash = await multiBuy(lotteryContract, amount, numbers, account)\n        return txHash\n      } catch (e) {\n        return false\n      }\n    },\n    [account, lotteryContract],\n  )\n\n  return { onMultiBuy: handleBuy }\n}\n\nexport const useMaxNumber = () => {\n  const [max, setMax] = useState(5)\n  const lotteryContract = useLottery()\n\n  const fetchMax = useCallback(async () => {\n    const maxNumber = await getMax(lotteryContract)\n    setMax(maxNumber)\n  }, [lotteryContract])\n\n  useEffect(() => {\n    if (lotteryContract) {\n      fetchMax()\n    }\n  }, [lotteryContract, fetchMax])\n\n  return max\n}\n"]},"metadata":{},"sourceType":"module"}