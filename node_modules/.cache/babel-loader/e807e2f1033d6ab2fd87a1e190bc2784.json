{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar isOptionObject = require('is-plain-obj');\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propertyIsEnumerable = Object.propertyIsEnumerable;\n\nvar defineProperty = function defineProperty(obj, name, value) {\n  return Object.defineProperty(obj, name, {\n    value: value,\n    writable: true,\n    enumerable: true,\n    configurable: true\n  });\n};\n\nvar globalThis = this;\nvar defaultMergeOpts = {\n  concatArrays: false,\n  ignoreUndefined: false\n};\n\nvar getEnumerableOwnPropertyKeys = function getEnumerableOwnPropertyKeys(value) {\n  var keys = [];\n\n  for (var key in value) {\n    if (hasOwnProperty.call(value, key)) {\n      keys.push(key);\n    }\n  }\n  /* istanbul ignore else  */\n\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(value);\n\n    var _iterator = _createForOfIteratorHelper(symbols),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var symbol = _step.value;\n\n        if (propertyIsEnumerable.call(value, symbol)) {\n          keys.push(symbol);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return keys;\n};\n\nfunction clone(value) {\n  if (Array.isArray(value)) {\n    return cloneArray(value);\n  }\n\n  if (isOptionObject(value)) {\n    return cloneOptionObject(value);\n  }\n\n  return value;\n}\n\nfunction cloneArray(array) {\n  var result = array.slice(0, 0);\n  getEnumerableOwnPropertyKeys(array).forEach(function (key) {\n    defineProperty(result, key, clone(array[key]));\n  });\n  return result;\n}\n\nfunction cloneOptionObject(obj) {\n  var result = Object.getPrototypeOf(obj) === null ? Object.create(null) : {};\n  getEnumerableOwnPropertyKeys(obj).forEach(function (key) {\n    defineProperty(result, key, clone(obj[key]));\n  });\n  return result;\n}\n/**\n * @param {*} merged already cloned\n * @param {*} source something to merge\n * @param {string[]} keys keys to merge\n * @param {Object} config Config Object\n * @returns {*} cloned Object\n */\n\n\nvar mergeKeys = function mergeKeys(merged, source, keys, config) {\n  keys.forEach(function (key) {\n    if (typeof source[key] === 'undefined' && config.ignoreUndefined) {\n      return;\n    } // Do not recurse into prototype chain of merged\n\n\n    if (key in merged && merged[key] !== Object.getPrototypeOf(merged)) {\n      defineProperty(merged, key, merge(merged[key], source[key], config));\n    } else {\n      defineProperty(merged, key, clone(source[key]));\n    }\n  });\n  return merged;\n};\n/**\n * @param {*} merged already cloned\n * @param {*} source something to merge\n * @param {Object} config Config Object\n * @returns {*} cloned Object\n *\n * see [Array.prototype.concat ( ...arguments )](http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.concat)\n */\n\n\nvar concatArrays = function concatArrays(merged, source, config) {\n  var result = merged.slice(0, 0);\n  var resultIndex = 0;\n  [merged, source].forEach(function (array) {\n    var indices = []; // `result.concat(array)` with cloning\n\n    for (var k = 0; k < array.length; k++) {\n      if (!hasOwnProperty.call(array, k)) {\n        continue;\n      }\n\n      indices.push(String(k));\n\n      if (array === merged) {\n        // Already cloned\n        defineProperty(result, resultIndex++, array[k]);\n      } else {\n        defineProperty(result, resultIndex++, clone(array[k]));\n      }\n    } // Merge non-index keys\n\n\n    result = mergeKeys(result, array, getEnumerableOwnPropertyKeys(array).filter(function (key) {\n      return !indices.includes(key);\n    }), config);\n  });\n  return result;\n};\n/**\n * @param {*} merged already cloned\n * @param {*} source something to merge\n * @param {Object} config Config Object\n * @returns {*} cloned Object\n */\n\n\nfunction merge(merged, source, config) {\n  if (config.concatArrays && Array.isArray(merged) && Array.isArray(source)) {\n    return concatArrays(merged, source, config);\n  }\n\n  if (!isOptionObject(source) || !isOptionObject(merged)) {\n    return clone(source);\n  }\n\n  return mergeKeys(merged, source, getEnumerableOwnPropertyKeys(source), config);\n}\n\nmodule.exports = function () {\n  var config = merge(clone(defaultMergeOpts), this !== globalThis && this || {}, defaultMergeOpts);\n  var merged = {\n    _: {}\n  };\n\n  for (var _len = arguments.length, options = new Array(_len), _key = 0; _key < _len; _key++) {\n    options[_key] = arguments[_key];\n  }\n\n  for (var _i = 0, _options = options; _i < _options.length; _i++) {\n    var option = _options[_i];\n\n    if (option === undefined) {\n      continue;\n    }\n\n    if (!isOptionObject(option)) {\n      throw new TypeError('`' + option + '` is not an Option Object');\n    }\n\n    merged = merge(merged, {\n      _: option\n    }, config);\n  }\n\n  return merged._;\n};","map":null,"metadata":{},"sourceType":"script"}