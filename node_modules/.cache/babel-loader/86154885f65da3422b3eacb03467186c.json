{"ast":null,"code":"var nextTick = require('./next-tick');\n\nfunction AbstractIterator(db) {\n  if (typeof db !== 'object' || db === null) {\n    throw new TypeError('First argument must be an abstract-leveldown compliant store');\n  }\n\n  this.db = db;\n  this._ended = false;\n  this._nexting = false;\n}\n\nAbstractIterator.prototype.next = function (callback) {\n  var self = this;\n\n  if (typeof callback !== 'function') {\n    throw new Error('next() requires a callback argument');\n  }\n\n  if (self._ended) {\n    nextTick(callback, new Error('cannot call next() after end()'));\n    return self;\n  }\n\n  if (self._nexting) {\n    nextTick(callback, new Error('cannot call next() before previous next() has completed'));\n    return self;\n  }\n\n  self._nexting = true;\n\n  self._next(function () {\n    self._nexting = false;\n    callback.apply(null, arguments);\n  });\n\n  return self;\n};\n\nAbstractIterator.prototype._next = function (callback) {\n  nextTick(callback);\n};\n\nAbstractIterator.prototype.seek = function (target) {\n  if (this._ended) {\n    throw new Error('cannot call seek() after end()');\n  }\n\n  if (this._nexting) {\n    throw new Error('cannot call seek() before next() has completed');\n  }\n\n  target = this.db._serializeKey(target);\n\n  this._seek(target);\n};\n\nAbstractIterator.prototype._seek = function (target) {};\n\nAbstractIterator.prototype.end = function (callback) {\n  if (typeof callback !== 'function') {\n    throw new Error('end() requires a callback argument');\n  }\n\n  if (this._ended) {\n    return nextTick(callback, new Error('end() already called on iterator'));\n  }\n\n  this._ended = true;\n\n  this._end(callback);\n};\n\nAbstractIterator.prototype._end = function (callback) {\n  nextTick(callback);\n}; // Expose browser-compatible nextTick for dependents\n\n\nAbstractIterator.prototype._nextTick = nextTick;\nmodule.exports = AbstractIterator;","map":null,"metadata":{},"sourceType":"script"}