{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IssuesModel = exports.Issues = void 0;\n\nconst core_1 = require(\"../core\");\n/**\n * @deprecated\n */\n\n\nclass Issues extends core_1.CrowdinApi {\n  /**\n   * @param projectId project identifier\n   * @param limit maximum number of items to retrieve (default 25)\n   * @param offset starting offset in the collection (default 0)\n   * @param type defines the issue type\n   * @param status defines the issue resolution status\n   */\n  listReportedIssues(projectId, limit, offset, type, status) {\n    let url = `${this.url}/projects/${projectId}/issues`;\n    url = this.addQueryParam(url, 'type', type);\n    url = this.addQueryParam(url, 'status', status);\n    return this.getList(url, limit, offset);\n  }\n  /**\n   * @param projectId project identifier\n   * @param issueId issue identifier\n   * @param request request body\n   */\n\n\n  editIssue(projectId, issueId, request) {\n    const url = `${this.url}/projects/${projectId}/issues/${issueId}`;\n    return this.patch(url, request, this.defaultConfig());\n  }\n\n}\n\nexports.Issues = Issues;\n/**\n * @deprecated\n */\n\nvar IssuesModel;\n\n(function (IssuesModel) {\n  let Type;\n\n  (function (Type) {\n    Type[\"ALL\"] = \"all\";\n    Type[\"GENERAL_QUESTION\"] = \"general_question\";\n    Type[\"TRANSLATION_MISTAKE\"] = \"translation_mistake\";\n    Type[\"CONTEXT_REQUEST\"] = \"context_request\";\n    Type[\"SOURCE_MISTAKE\"] = \"source_mistake\";\n  })(Type = IssuesModel.Type || (IssuesModel.Type = {}));\n\n  let Status;\n\n  (function (Status) {\n    Status[\"ALL\"] = \"all\";\n    Status[\"RESOLVED\"] = \"resolved\";\n    Status[\"UNRESOLVED\"] = \"unresolved\";\n  })(Status = IssuesModel.Status || (IssuesModel.Status = {}));\n})(IssuesModel = exports.IssuesModel || (exports.IssuesModel = {}));","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/node_modules/@crowdin/crowdin-api-client/out/issues/index.js"],"names":["Object","defineProperty","exports","value","IssuesModel","Issues","core_1","require","CrowdinApi","listReportedIssues","projectId","limit","offset","type","status","url","addQueryParam","getList","editIssue","issueId","request","patch","defaultConfig","Type","Status"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,WAAR,GAAsBF,OAAO,CAACG,MAAR,GAAiB,KAAK,CAA5C;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;AACA;AACA;AACA;;;AACA,MAAMF,MAAN,SAAqBC,MAAM,CAACE,UAA5B,CAAuC;AACnC;AACJ;AACA;AACA;AACA;AACA;AACA;AACIC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,KAAZ,EAAmBC,MAAnB,EAA2BC,IAA3B,EAAiCC,MAAjC,EAAyC;AACvD,QAAIC,GAAG,GAAI,GAAE,KAAKA,GAAI,aAAYL,SAAU,SAA5C;AACAK,IAAAA,GAAG,GAAG,KAAKC,aAAL,CAAmBD,GAAnB,EAAwB,MAAxB,EAAgCF,IAAhC,CAAN;AACAE,IAAAA,GAAG,GAAG,KAAKC,aAAL,CAAmBD,GAAnB,EAAwB,QAAxB,EAAkCD,MAAlC,CAAN;AACA,WAAO,KAAKG,OAAL,CAAaF,GAAb,EAAkBJ,KAAlB,EAAyBC,MAAzB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIM,EAAAA,SAAS,CAACR,SAAD,EAAYS,OAAZ,EAAqBC,OAArB,EAA8B;AACnC,UAAML,GAAG,GAAI,GAAE,KAAKA,GAAI,aAAYL,SAAU,WAAUS,OAAQ,EAAhE;AACA,WAAO,KAAKE,KAAL,CAAWN,GAAX,EAAgBK,OAAhB,EAAyB,KAAKE,aAAL,EAAzB,CAAP;AACH;;AAtBkC;;AAwBvCpB,OAAO,CAACG,MAAR,GAAiBA,MAAjB;AACA;AACA;AACA;;AACA,IAAID,WAAJ;;AACA,CAAC,UAAUA,WAAV,EAAuB;AACpB,MAAImB,IAAJ;;AACA,GAAC,UAAUA,IAAV,EAAgB;AACbA,IAAAA,IAAI,CAAC,KAAD,CAAJ,GAAc,KAAd;AACAA,IAAAA,IAAI,CAAC,kBAAD,CAAJ,GAA2B,kBAA3B;AACAA,IAAAA,IAAI,CAAC,qBAAD,CAAJ,GAA8B,qBAA9B;AACAA,IAAAA,IAAI,CAAC,iBAAD,CAAJ,GAA0B,iBAA1B;AACAA,IAAAA,IAAI,CAAC,gBAAD,CAAJ,GAAyB,gBAAzB;AACH,GAND,EAMGA,IAAI,GAAGnB,WAAW,CAACmB,IAAZ,KAAqBnB,WAAW,CAACmB,IAAZ,GAAmB,EAAxC,CANV;;AAOA,MAAIC,MAAJ;;AACA,GAAC,UAAUA,MAAV,EAAkB;AACfA,IAAAA,MAAM,CAAC,KAAD,CAAN,GAAgB,KAAhB;AACAA,IAAAA,MAAM,CAAC,UAAD,CAAN,GAAqB,UAArB;AACAA,IAAAA,MAAM,CAAC,YAAD,CAAN,GAAuB,YAAvB;AACH,GAJD,EAIGA,MAAM,GAAGpB,WAAW,CAACoB,MAAZ,KAAuBpB,WAAW,CAACoB,MAAZ,GAAqB,EAA5C,CAJZ;AAKH,CAfD,EAeGpB,WAAW,GAAGF,OAAO,CAACE,WAAR,KAAwBF,OAAO,CAACE,WAAR,GAAsB,EAA9C,CAfjB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IssuesModel = exports.Issues = void 0;\nconst core_1 = require(\"../core\");\n/**\n * @deprecated\n */\nclass Issues extends core_1.CrowdinApi {\n    /**\n     * @param projectId project identifier\n     * @param limit maximum number of items to retrieve (default 25)\n     * @param offset starting offset in the collection (default 0)\n     * @param type defines the issue type\n     * @param status defines the issue resolution status\n     */\n    listReportedIssues(projectId, limit, offset, type, status) {\n        let url = `${this.url}/projects/${projectId}/issues`;\n        url = this.addQueryParam(url, 'type', type);\n        url = this.addQueryParam(url, 'status', status);\n        return this.getList(url, limit, offset);\n    }\n    /**\n     * @param projectId project identifier\n     * @param issueId issue identifier\n     * @param request request body\n     */\n    editIssue(projectId, issueId, request) {\n        const url = `${this.url}/projects/${projectId}/issues/${issueId}`;\n        return this.patch(url, request, this.defaultConfig());\n    }\n}\nexports.Issues = Issues;\n/**\n * @deprecated\n */\nvar IssuesModel;\n(function (IssuesModel) {\n    let Type;\n    (function (Type) {\n        Type[\"ALL\"] = \"all\";\n        Type[\"GENERAL_QUESTION\"] = \"general_question\";\n        Type[\"TRANSLATION_MISTAKE\"] = \"translation_mistake\";\n        Type[\"CONTEXT_REQUEST\"] = \"context_request\";\n        Type[\"SOURCE_MISTAKE\"] = \"source_mistake\";\n    })(Type = IssuesModel.Type || (IssuesModel.Type = {}));\n    let Status;\n    (function (Status) {\n        Status[\"ALL\"] = \"all\";\n        Status[\"RESOLVED\"] = \"resolved\";\n        Status[\"UNRESOLVED\"] = \"unresolved\";\n    })(Status = IssuesModel.Status || (IssuesModel.Status = {}));\n})(IssuesModel = exports.IssuesModel || (exports.IssuesModel = {}));\n"]},"metadata":{},"sourceType":"script"}