{"ast":null,"code":"import _styled3 from \"styled-components\";\nimport _styled2 from \"styled-components\";\nimport _styled from \"styled-components\";\nvar _jsxFileName = \"/Users/fabianmolina/Documents/1hive/tulip-frontend/src/components/Farming/FarmTable/index.js\";\nimport React, { useState } from 'react';\nimport { DataView, textStyle, Button, GU } from '@1hive/1hive-ui';\nimport { getKnownTokenImg } from '../../../utils/known-tokens';\nimport PairName from '../PairName';\nimport RewardComponent from '../RewardComponent';\nimport Fuse from 'fuse.js';\nimport DepositModal from '../DepositModal';\nimport Loader from '../../Loader';\nimport Icon from \"../../../assets/tulip/icon.svg\";\nimport { useWallet } from '../../../providers/Wallet';\n\nvar _StyledDiv = _styled(\"div\").withConfig({\n  displayName: \"FarmTable___StyledDiv\",\n  componentId: \"sc-1bdoqmz-0\"\n})([\"\", \";font-family:'Overpass',sans-serif;font-weight:300;font-size:18px;\"], p => p._css);\n\nvar _StyledDataView = _styled(DataView).withConfig({\n  displayName: \"FarmTable___StyledDataView\",\n  componentId: \"sc-1bdoqmz-1\"\n})([\"border-top:none;\"]);\n\nvar _StyledButton = _styled(Button).withConfig({\n  displayName: \"FarmTable___StyledButton\",\n  componentId: \"sc-1bdoqmz-2\"\n})([\"background:linear-gradient(90deg,#aaf5d4,#7ce0d6);\"]);\n\nconst FarmTable = props => {\n  const [modalAction, setModalAction] = useState(false);\n  const [modalData, setModalData] = useState({});\n  const pairs = props.pairData.data || [];\n  const fuse = new Fuse(pairs, {\n    keys: ['name', 'symbol']\n  });\n  const {\n    account\n  } = useWallet();\n  const results = fuse.search(props.searchValue);\n\n  const handleModalActions = e => {\n    setModalAction(true);\n    const d = props.searchValue ? results : pairs;\n    const filtered = d.filter(data => {\n      return data.symbol === e.target.id;\n    });\n    setModalData({ ...filtered[0],\n      account,\n      balance: props.pairData.balance[filtered[0].poolToken]\n    });\n  };\n\n  const handleModalClose = () => {\n    setModalAction(false);\n  };\n\n  if (pairs.length === 0) {\n    return /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 12\n      }\n    });\n  } else {\n    return /*#__PURE__*/React.createElement(_StyledDiv, {\n      _css: textStyle('body2'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(_StyledDataView, {\n      fields: ['Asset', 'Base Yield', 'Reward Yield', 'Total Yield', 'Reward Asset', ' '],\n      emptyState: {\n        default: {\n          displayLoader: false,\n          title: 'Connect your account to see farm',\n          subtitle: null,\n          illustration: /*#__PURE__*/React.createElement(\"img\", {\n            src: Icon,\n            height: 6 * GU,\n            width: 5.5 * GU,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 29\n            }\n          }),\n          clearLabel: null\n        },\n        loading: {\n          displayLoader: true,\n          title: 'No data available.',\n          subtitle: null,\n          illustration: /*#__PURE__*/React.createElement(Loader, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 29\n            }\n          }),\n          clearLabel: null\n        }\n      },\n      entries: account ? props.searchValue ? results : pairs : [],\n      header: true,\n      renderEntry: ({\n        name,\n        symbol,\n        poolToken,\n        totalShares,\n        lastRewardTimestamp,\n        allocPoint,\n        accHsfPerShare\n      }) => {\n        const customLabel = name;\n        const baseYield = 23;\n        const rewardYield = parseInt(baseYield * 2);\n        const totalYield = parseInt(baseYield + rewardYield);\n        const token0Img = getKnownTokenImg(symbol);\n        const token1Img = getKnownTokenImg(null);\n        const imgObj = {\n          pair1: token0Img,\n          pair2: token1Img\n        };\n        return [/*#__PURE__*/React.createElement(PairName, {\n          image: imgObj,\n          name: customLabel,\n          subheadline: \"Honeyswap\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }\n        }), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }\n        }, baseYield, \"%\"), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }\n        }, rewardYield, \"%\"), /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }\n        }, totalYield, \"%\"), /*#__PURE__*/React.createElement(RewardComponent, {\n          image: getKnownTokenImg('AG'),\n          name: \"Agave\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }\n        }), /*#__PURE__*/React.createElement(React.Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(_StyledButton, {\n          id: symbol,\n          label: \"Stake\",\n          onClick: e => {\n            handleModalActions(e);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 17\n          }\n        }), /*#__PURE__*/React.createElement(DepositModal, {\n          modalAction: modalAction,\n          handleModalClose: handleModalClose,\n          tokenImg: imgObj,\n          data: modalData,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 17\n          }\n        }))];\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }));\n  }\n};\n\nexport default FarmTable;","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/components/Farming/FarmTable/index.js"],"names":["React","useState","DataView","textStyle","Button","GU","getKnownTokenImg","PairName","RewardComponent","Fuse","DepositModal","Loader","useWallet","FarmTable","props","modalAction","setModalAction","modalData","setModalData","pairs","pairData","data","fuse","keys","account","results","search","searchValue","handleModalActions","e","d","filtered","filter","symbol","target","id","balance","poolToken","handleModalClose","length","default","displayLoader","title","subtitle","illustration","Icon","clearLabel","loading","name","totalShares","lastRewardTimestamp","allocPoint","accHsfPerShare","customLabel","baseYield","rewardYield","parseInt","totalYield","token0Img","token1Img","imgObj","pair1","pair2"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { DataView, textStyle, Button, GU } from '@1hive/1hive-ui'\nimport { getKnownTokenImg } from '../../../utils/known-tokens'\nimport PairName from '../PairName'\nimport RewardComponent from '../RewardComponent'\nimport Fuse from 'fuse.js'\nimport DepositModal from '../DepositModal'\nimport Loader from '../../Loader'\nimport Icon from '../../../assets/tulip/icon.svg'\nimport { useWallet } from '../../../providers/Wallet'\n\nconst FarmTable = props => {\n  const [modalAction, setModalAction] = useState(false)\n  const [modalData, setModalData] = useState({})\n  const pairs = props.pairData.data || []\n  const fuse = new Fuse(pairs, {\n    keys: ['name', 'symbol'],\n  })\n  const { account } = useWallet()\n\n  const results = fuse.search(props.searchValue)\n  const handleModalActions = e => {\n    setModalAction(true)\n    const d = props.searchValue ? results : pairs\n    const filtered = d.filter(data => {\n      return data.symbol === e.target.id\n    })\n    setModalData({\n      ...filtered[0],\n      account,\n      balance: props.pairData.balance[filtered[0].poolToken],\n    })\n  }\n\n  const handleModalClose = () => {\n    setModalAction(false)\n  }\n  if (pairs.length === 0) {\n    return <Loader />\n  } else {\n    return (\n      <div\n        css={`\n          ${textStyle('body2')};\n          font-family: 'Overpass', sans-serif;\n          font-weight: 300;\n          font-size: 18px;\n        `}\n      >\n        <DataView\n          fields={[\n            'Asset',\n            'Base Yield',\n            'Reward Yield',\n            'Total Yield',\n            'Reward Asset',\n            ' ',\n          ]}\n          css={`\n            border-top: none;\n          `}\n          emptyState={{\n            default: {\n              displayLoader: false,\n              title: 'Connect your account to see farm',\n              subtitle: null,\n              illustration: <img src={Icon} height={6 * GU} width={5.5 * GU} />,\n              clearLabel: null,\n            },\n            loading: {\n              displayLoader: true,\n              title: 'No data available.',\n              subtitle: null,\n              illustration: <Loader />,\n              clearLabel: null,\n            },\n          }}\n          entries={account ? (props.searchValue ? results : pairs) : []}\n          header\n          renderEntry={({\n            name,\n            symbol,\n            poolToken,\n            totalShares,\n            lastRewardTimestamp,\n            allocPoint,\n            accHsfPerShare,\n          }) => {\n            const customLabel = name\n            const baseYield = 23\n            const rewardYield = parseInt(baseYield * 2)\n            const totalYield = parseInt(baseYield + rewardYield)\n            const token0Img = getKnownTokenImg(symbol)\n            const token1Img = getKnownTokenImg(null)\n            const imgObj = {\n              pair1: token0Img,\n              pair2: token1Img,\n            }\n\n            return [\n              <PairName\n                image={imgObj}\n                name={customLabel}\n                subheadline=\"Honeyswap\"\n              />,\n              <p>{baseYield}%</p>,\n              <p>{rewardYield}%</p>,\n              <p>{totalYield}%</p>,\n              <RewardComponent image={getKnownTokenImg('AG')} name=\"Agave\" />,\n              <React.Fragment>\n                <Button\n                  css={`\n                    background: linear-gradient(90deg, #aaf5d4, #7ce0d6);\n                  `}\n                  id={symbol}\n                  label=\"Stake\"\n                  onClick={e => {\n                    handleModalActions(e)\n                  }}\n                />\n                <DepositModal\n                  modalAction={modalAction}\n                  handleModalClose={handleModalClose}\n                  tokenImg={imgObj}\n                  data={modalData}\n                />\n              </React.Fragment>,\n            ]\n          }}\n        />\n      </div>\n    )\n  }\n}\nexport default FarmTable\n"]},"metadata":{},"sourceType":"module"}