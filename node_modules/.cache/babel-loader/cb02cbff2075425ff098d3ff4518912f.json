{"ast":null,"code":"var _slicedToArray = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _taggedTemplateLiteral = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _templateObject, _templateObject2, _templateObject3;\n\nvar ws = require('isomorphic-ws');\n\nvar _require = require('subscriptions-transport-ws'),\n    SubscriptionClient = _require.SubscriptionClient;\n\nvar _require2 = require('graphql-request'),\n    request = _require2.request,\n    gql = _require2.gql;\n\nvar _require3 = require('./../constants'),\n    graphAPIEndpoints = _require3.graphAPIEndpoints,\n    graphWSEndpoints = _require3.graphWSEndpoints;\n\nvar _require4 = require('./../utils'),\n    timestampToBlock = _require4.timestampToBlock;\n\nmodule.exports = {\n  latestBlock: function latestBlock() {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return request(graphAPIEndpoints.blocklytics, gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"{\\n                blocks(first: 1, orderBy: number, orderDirection: desc) {\\n                    \", \"\\n                }\\n            }\"])), _latestBlock.properties.toString()));\n\n            case 2:\n              result = _context.sent;\n              return _context.abrupt(\"return\", _latestBlock.callback(result.blocks));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  observeLatestBlock: function observeLatestBlock() {\n    var query = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n            subscription {\\n                blocks(first: 1, orderBy: number, orderDirection: desc) {\\n                    \", \"\\n                }\\n        }\"])), _latestBlock.properties.toString());\n    var client = new SubscriptionClient(graphWSEndpoints.blocklytics, {\n      reconnect: true\n    }, ws);\n    var observable = client.request({\n      query: query\n    });\n    return {\n      subscribe: function subscribe(_ref) {\n        var _next = _ref.next,\n            error = _ref.error,\n            complete = _ref.complete;\n        return observable.subscribe({\n          next: function next(results) {\n            _next(_latestBlock.callback(results.data.blocks));\n          },\n          error: error,\n          complete: complete\n        });\n      }\n    };\n  },\n  getBlock: function getBlock() {\n    var _arguments = arguments;\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _ref2, _ref2$block, block, _ref2$timestamp, timestamp, result;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _ref2 = _arguments.length > 0 && _arguments[0] !== undefined ? _arguments[0] : {}, _ref2$block = _ref2.block, block = _ref2$block === void 0 ? undefined : _ref2$block, _ref2$timestamp = _ref2.timestamp, timestamp = _ref2$timestamp === void 0 ? undefined : _ref2$timestamp;\n\n              if (!block) {\n                _context2.next = 5;\n                break;\n              }\n\n              _context2.t0 = block;\n              _context2.next = 13;\n              break;\n\n            case 5:\n              if (!timestamp) {\n                _context2.next = 11;\n                break;\n              }\n\n              _context2.next = 8;\n              return timestampToBlock(timestamp);\n\n            case 8:\n              _context2.t1 = _context2.sent;\n              _context2.next = 12;\n              break;\n\n            case 11:\n              _context2.t1 = undefined;\n\n            case 12:\n              _context2.t0 = _context2.t1;\n\n            case 13:\n              block = _context2.t0;\n              block = block ? \"block: { number: \".concat(block, \" }\") : \"\";\n              _context2.next = 17;\n              return request(graphAPIEndpoints.blocklytics, gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"{\\n                blocks(first: 1, orderBy: number, orderDirection: desc, \", \") {\\n                    \", \"\\n                }\\n            }\"])), block, _getBlock.properties.toString()));\n\n            case 17:\n              result = _context2.sent;\n              return _context2.abrupt(\"return\", _getBlock.callback(result.blocks[0]));\n\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  }\n};\nvar _latestBlock = {\n  properties: ['id', 'number', 'timestamp'],\n  callback: function callback(_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 1),\n        _ref4$ = _ref4[0],\n        id = _ref4$.id,\n        number = _ref4$.number,\n        timestamp = _ref4$.timestamp;\n\n    return {\n      id: id,\n      number: Number(number),\n      timestamp: Number(timestamp),\n      date: new Date(timestamp * 1000)\n    };\n  }\n};\nvar _getBlock = {\n  properties: ['id', 'number', 'timestamp', 'author', 'difficulty', 'gasUsed', 'gasLimit'],\n  callback: function callback(results) {\n    return {\n      id: results.id,\n      number: Number(results.number),\n      timestamp: Number(results.timestamp),\n      author: results.author,\n      difficulty: Number(results.difficulty),\n      gasUsed: Number(results.gasUsed),\n      gasLimit: Number(results.gasLimit)\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"script"}