{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar React = require('react');\n\nfunction useKeyDown(key, callback) {\n  var keys = React.useMemo(function () {\n    return Array.isArray(key) ? key : [key];\n  }, [key]);\n  var handleKeyDown = React.useCallback(function (event) {\n    if (keys.includes(event.keyCode)) {\n      callback(event.keyCode, event);\n    }\n  }, [callback, keys]);\n  React.useEffect(function () {\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    window.addEventListener('keydown', handleKeyDown);\n    return function () {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyDown]);\n}\n\nexports.useKeyDown = useKeyDown;","map":{"version":3,"sources":["../src/hooks/useKeyDown.js"],"names":["keys","useMemo","Array","handleKeyDown","useCallback","event","callback","useEffect","window"],"mappings":";;;;;;;;AAEO,SAAA,UAAA,CAAA,GAAA,EAAA,QAAA,EAAmC;AACxC,MAAMA,IAAI,GAAGC,KAAAA,CAAAA,OAAAA,CAAQ,YAAA;AAAA,WAAOC,KAAK,CAALA,OAAAA,CAAAA,GAAAA,IAAAA,GAAAA,GAA2B,CAAlC,GAAkC,CAAlC;AAAD,GAAPD,EAAkD,CAA/D,GAA+D,CAAlDA,CAAb;AAEA,MAAME,aAAa,GAAGC,KAAAA,CAAAA,WAAAA,CACpB,UAAA,KAAA,EAAS;AACP,QAAIJ,IAAI,CAAJA,QAAAA,CAAcK,KAAK,CAAvB,OAAIL,CAAJ,EAAkC;AAChCM,MAAAA,QAAQ,CAACD,KAAK,CAAN,OAAA,EAARC,KAAQ,CAARA;AACD;AAJ4B,GAAXF,EAMpB,CAAA,QAAA,EANF,IAME,CANoBA,CAAtB;AASAG,EAAAA,KAAAA,CAAAA,SAAAA,CAAU,YAAM;AACd,QAAI,OAAA,MAAA,KAAJ,WAAA,EAAmC;AACjC;AACD;;AACDC,IAAAA,MAAM,CAANA,gBAAAA,CAAAA,SAAAA,EAAAA,aAAAA;AACA,WAAO,YAAM;AACXA,MAAAA,MAAM,CAANA,mBAAAA,CAAAA,SAAAA,EAAAA,aAAAA;AADF,KAAA;AALO,GAATD,EAQG,CARHA,aAQG,CARHA;AASD","sourcesContent":["import { useCallback, useEffect, useMemo } from 'react'\n\nexport function useKeyDown(key, callback) {\n  const keys = useMemo(() => (Array.isArray(key) ? key : [key]), [key])\n\n  const handleKeyDown = useCallback(\n    event => {\n      if (keys.includes(event.keyCode)) {\n        callback(event.keyCode, event)\n      }\n    },\n    [callback, keys]\n  )\n\n  useEffect(() => {\n    if (typeof window === 'undefined') {\n      return\n    }\n    window.addEventListener('keydown', handleKeyDown)\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown)\n    }\n  }, [handleKeyDown])\n}\n"]},"metadata":{},"sourceType":"script"}