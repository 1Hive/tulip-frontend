{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar withIs = require('class-is');\n\nvar noop = function noop() {};\n\nvar Topology = /*#__PURE__*/function () {\n  /**\n   * @param {Object} props\n   * @param {number} props.min minimum needed connections (default: 0)\n   * @param {number} props.max maximum needed connections (default: Infinity)\n   * @param {Object} [props.handlers]\n   * @param {function} [props.handlers.onConnect] protocol \"onConnect\" handler\n   * @param {function} [props.handlers.onDisconnect] protocol \"onDisconnect\" handler\n   * @constructor\n   */\n  function Topology(_ref) {\n    var _ref$min = _ref.min,\n        min = _ref$min === void 0 ? 0 : _ref$min,\n        _ref$max = _ref.max,\n        max = _ref$max === void 0 ? Infinity : _ref$max,\n        _ref$handlers = _ref.handlers,\n        handlers = _ref$handlers === void 0 ? {} : _ref$handlers;\n\n    _classCallCheck(this, Topology);\n\n    this.min = min;\n    this.max = max; // Handlers\n\n    this._onConnect = handlers.onConnect || noop;\n    this._onDisconnect = handlers.onDisconnect || noop;\n    this.peers = new Map();\n  }\n\n  _createClass(Topology, [{\n    key: \"registrar\",\n    set: function set(registrar) {\n      this._registrar = registrar;\n    }\n    /**\n     * Notify about peer disconnected event.\n     * @param {PeerInfo} peerInfo\n     * @returns {void}\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect(peerInfo) {\n      this._onDisconnect(peerInfo);\n    }\n  }]);\n\n  return Topology;\n}();\n\nmodule.exports = withIs(Topology, {\n  className: 'Topology',\n  symbolName: '@libp2p/js-interfaces/topology'\n});","map":null,"metadata":{},"sourceType":"script"}