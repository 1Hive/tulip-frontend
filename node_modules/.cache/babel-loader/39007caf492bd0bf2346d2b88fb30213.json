{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = debug('libp2p-ping');\nlog.error = debug('libp2p-ping:error');\n\nconst errCode = require('err-code');\n\nconst crypto = require('libp2p-crypto');\n\nconst pipe = require('it-pipe');\n\nconst {\n  toBuffer\n} = require('it-buffer');\n\nconst {\n  collect,\n  take\n} = require('streaming-iterables');\n\nconst {\n  PROTOCOL,\n  PING_LENGTH\n} = require('./constants');\n/**\n * Ping a given peer and wait for its response, getting the operation latency.\n * @param {Libp2p} node\n * @param {PeerInfo} peer\n * @returns {Promise<Number>}\n */\n\n\nasync function ping(node, peer) {\n  log('dialing %s to %s', PROTOCOL, peer.id.toB58String());\n  const {\n    stream\n  } = await node.dialProtocol(peer, PROTOCOL);\n  const start = new Date();\n  const data = crypto.randomBytes(PING_LENGTH);\n  const [result] = await pipe([data], stream, stream => take(1, stream), toBuffer, collect);\n  const end = Date.now();\n\n  if (!data.equals(result)) {\n    throw errCode(new Error('Received wrong ping ack'), 'ERR_WRONG_PING_ACK');\n  }\n\n  return end - start;\n}\n/**\n * Subscribe ping protocol handler.\n * @param {Libp2p} node\n */\n\n\nfunction mount(node) {\n  node.handle(PROTOCOL, ({\n    stream\n  }) => pipe(stream, stream));\n}\n/**\n * Unsubscribe ping protocol handler.\n * @param {Libp2p} node\n */\n\n\nfunction unmount(node) {\n  node.unhandle(PROTOCOL);\n}\n\nexports = module.exports = ping;\nexports.mount = mount;\nexports.unmount = unmount;","map":null,"metadata":{},"sourceType":"script"}