{"ast":null,"code":"'use strict';\n\nconst log = require('debug')('mss:select');\n\nconst errCode = require('err-code');\n\nconst multistream = require('./multistream');\n\nconst handshake = require('it-handshake');\n\nmodule.exports = async (stream, protocols, protocolId) => {\n  protocols = Array.isArray(protocols) ? [...protocols] : [protocols];\n  const {\n    reader,\n    writer,\n    rest,\n    stream: shakeStream\n  } = handshake(stream);\n  const protocol = protocols.shift();\n\n  if (protocolId) {\n    log('select: write [\"%s\", \"%s\"]', protocolId, protocol);\n    multistream.writeAll(writer, [protocolId, protocol]);\n  } else {\n    log('select: write \"%s\"', protocol);\n    multistream.write(writer, protocol);\n  }\n\n  let response = (await multistream.read(reader)).toString();\n  log('select: read \"%s\"', response); // Read the protocol response if we got the protocolId in return\n\n  if (response === protocolId) {\n    response = (await multistream.read(reader)).toString();\n    log('select: read \"%s\"', response);\n  } // We're done\n\n\n  if (response === protocol) {\n    rest();\n    return {\n      stream: shakeStream,\n      protocol\n    };\n  } // We haven't gotten a valid ack, try the other protocols\n\n\n  for (const protocol of protocols) {\n    log('select: write \"%s\"', protocol);\n    multistream.write(writer, protocol);\n    const response = (await multistream.read(reader)).toString();\n    log('select: read \"%s\" for \"%s\"', response, protocol);\n\n    if (response === protocol) {\n      rest(); // End our writer so others can start writing to stream\n\n      return {\n        stream: shakeStream,\n        protocol\n      };\n    }\n  }\n\n  rest();\n  throw errCode(new Error('protocol selection failed'), 'ERR_UNSUPPORTED_PROTOCOL');\n};","map":null,"metadata":{},"sourceType":"script"}