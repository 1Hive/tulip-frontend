{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar abortable = require('abortable-iterator');\n\nvar log = require('debug')('libp2p:stream:converter'); // Convert a duplex iterable into a MultiaddrConnection\n// https://github.com/libp2p/interface-transport#multiaddrconnection\n\n\nmodule.exports = function (_ref) {\n  var stream = _ref.stream,\n      remoteAddr = _ref.remoteAddr,\n      localAddr = _ref.localAddr;\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _sink = stream.sink,\n      source = stream.source;\n  var maConn = {\n    sink: function sink(source) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (options.signal) {\n                  source = abortable(source, options.signal);\n                }\n\n                _context.prev = 1;\n                _context.next = 4;\n                return _sink(source);\n\n              case 4:\n                _context.next = 9;\n                break;\n\n              case 6:\n                _context.prev = 6;\n                _context.t0 = _context[\"catch\"](1);\n\n                // If aborted we can safely ignore\n                if (_context.t0.type !== 'aborted') {\n                  // If the source errored the socket will already have been destroyed by\n                  // toIterable.duplex(). If the socket errored it will already be\n                  // destroyed. There's nothing to do here except log the error & return.\n                  log(_context.t0);\n                }\n\n              case 9:\n                _close();\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 6]]);\n      }))();\n    },\n    source: options.signal ? abortable(source, options.signal) : source,\n    conn: stream,\n    localAddr: localAddr,\n    remoteAddr: remoteAddr,\n    timeline: {\n      open: Date.now()\n    },\n    close: function close() {\n      _sink([]);\n\n      _close();\n    }\n  };\n\n  function _close() {\n    if (!maConn.timeline.close) {\n      maConn.timeline.close = Date.now();\n    }\n  }\n\n  return maConn;\n};","map":null,"metadata":{},"sourceType":"script"}