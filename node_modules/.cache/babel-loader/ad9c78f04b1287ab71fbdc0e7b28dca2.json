{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('./utils'),\n    parseArgs = _require.parseArgs;\n\nvar _require2 = require('../../utils'),\n    withTimeoutOption = _require2.withTimeoutOption;\n\nmodule.exports = function (_ref) {\n  var ipld = _ref.ipld,\n      preload = _ref.preload;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cid, path, options) {\n      var _parseArgs, _parseArgs2, value, result, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, entry;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _parseArgs = parseArgs(cid, path, options);\n              _parseArgs2 = _slicedToArray(_parseArgs, 3);\n              cid = _parseArgs2[0];\n              path = _parseArgs2[1];\n              options = _parseArgs2[2];\n\n              if (options.preload !== false) {\n                preload(cid);\n              }\n\n              if (!(path == null || path === '/')) {\n                _context.next = 13;\n                break;\n              }\n\n              _context.next = 9;\n              return ipld.get(cid, options);\n\n            case 9:\n              value = _context.sent;\n              return _context.abrupt(\"return\", {\n                value: value,\n                remainderPath: ''\n              });\n\n            case 13:\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 15;\n              _iterator = _asyncIterator(ipld.resolve(cid, path));\n\n            case 17:\n              _context.next = 19;\n              return _iterator.next();\n\n            case 19:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 23;\n              return _step.value;\n\n            case 23:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 32;\n                break;\n              }\n\n              entry = _value;\n\n              if (!options.localResolve) {\n                _context.next = 28;\n                break;\n              }\n\n              return _context.abrupt(\"return\", entry);\n\n            case 28:\n              result = entry;\n\n            case 29:\n              _iteratorNormalCompletion = true;\n              _context.next = 17;\n              break;\n\n            case 32:\n              _context.next = 38;\n              break;\n\n            case 34:\n              _context.prev = 34;\n              _context.t0 = _context[\"catch\"](15);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 38:\n              _context.prev = 38;\n              _context.prev = 39;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 43;\n                break;\n              }\n\n              _context.next = 43;\n              return _iterator.return();\n\n            case 43:\n              _context.prev = 43;\n\n              if (!_didIteratorError) {\n                _context.next = 46;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 46:\n              return _context.finish(43);\n\n            case 47:\n              return _context.finish(38);\n\n            case 48:\n              return _context.abrupt(\"return\", result);\n\n            case 49:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[15, 34, 38, 48], [39,, 43, 47]]);\n    }));\n\n    function get(_x, _x2, _x3) {\n      return _get.apply(this, arguments);\n    }\n\n    return get;\n  }());\n};","map":null,"metadata":{},"sourceType":"script"}