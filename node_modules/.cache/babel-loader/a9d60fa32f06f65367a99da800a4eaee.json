{"ast":null,"code":"'use strict';\n\nconst DEFAULTS = require('./defaults');\n\nconst isFunction = require('./util').isFunction;\n\nconst isBoolean = require('./util').isBoolean;\n\nconst isObject = require('./util').isObject;\n\nconst isArray = require('./util').isArray;\n\nconst isRegex = require('./util').isRegex;\n\nconst assign = require('./util').assign;\n\nconst keys = require('./util').keys;\n\nfunction serialize(obj) {\n  if (obj === null || obj === undefined) return obj;\n  if (isRegex(obj)) return obj.toString();\n  return obj.toJSON ? obj.toJSON() : obj;\n}\n\nfunction stringifyDeterministic(obj, opts) {\n  opts = opts || assign({}, DEFAULTS);\n  if (isFunction(opts)) opts = {\n    compare: opts\n  };\n  const space = opts.space || DEFAULTS.space;\n  const cycles = isBoolean(opts.cycles) ? opts.cycles : DEFAULTS.cycles;\n  const replacer = opts.replacer || DEFAULTS.replacer;\n  const stringify = opts.stringify || DEFAULTS.stringify;\n\n  const compare = opts.compare && function (f) {\n    return function (node) {\n      return function (a, b) {\n        const aobj = {\n          key: a,\n          value: node[a]\n        };\n        const bobj = {\n          key: b,\n          value: node[b]\n        };\n        return f(aobj, bobj);\n      };\n    };\n  }(opts.compare); // Detect circular structure in obj and raise error efficiently.\n\n\n  if (!cycles) stringify(obj);\n  const seen = [];\n  return function _deterministic(parent, key, node, level) {\n    const indent = space ? '\\n' + new Array(level + 1).join(space) : '';\n    const colonSeparator = space ? ': ' : ':';\n    node = serialize(node);\n    node = replacer.call(parent, key, node);\n    if (node === undefined) return;\n    if (!isObject(node) || node === null) return stringify(node);\n\n    if (isArray(node)) {\n      const out = [];\n\n      for (let i = 0; i < node.length; i++) {\n        const item = _deterministic(node, i, node[i], level + 1) || stringify(null);\n        out.push(indent + space + item);\n      }\n\n      return '[' + out.join(',') + indent + ']';\n    } else {\n      if (cycles) {\n        if (seen.indexOf(node) !== -1) {\n          return stringify('[Circular]');\n        } else {\n          seen.push(node);\n        }\n      }\n\n      const nodeKeys = keys(node).sort(compare && compare(node));\n      const out = [];\n\n      for (let i = 0; i < nodeKeys.length; i++) {\n        const key = nodeKeys[i];\n\n        const value = _deterministic(node, key, node[key], level + 1);\n\n        if (!value) continue;\n        const keyValue = stringify(key) + colonSeparator + value;\n        out.push(indent + space + keyValue);\n      }\n\n      seen.splice(seen.indexOf(node), 1);\n      return '{' + out.join(',') + indent + '}';\n    }\n  }({\n    '': obj\n  }, '', obj, 0);\n}\n\nmodule.exports = stringifyDeterministic;","map":null,"metadata":{},"sourceType":"script"}