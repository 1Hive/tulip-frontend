{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst format = require('util').format;\n\nconst EventEmitter = require('events').EventEmitter;\n\nlet isElectronRenderer = process.type && process.type === 'renderer';\nlet isNodejs = !isElectronRenderer && process.version ? true : false;\nconst LogLevels = {\n  'DEBUG': 'DEBUG',\n  'INFO': 'INFO',\n  'WARN': 'WARN',\n  'ERROR': 'ERROR',\n  'NONE': 'NONE'\n}; // Global log level\n\nlet GlobalLogLevel = LogLevels.DEBUG; // Global log file name\n\nlet GlobalLogfile = null;\nlet GlobalEvents = new EventEmitter(); // ANSI colors\n\nlet Colors = {\n  'Black': 0,\n  'Red': 1,\n  'Green': 2,\n  'Yellow': 3,\n  'Blue': 4,\n  'Magenta': 5,\n  'Cyan': 6,\n  'Grey': 7,\n  'White': 9,\n  'Default': 9\n}; // CSS colors\n\nif (!isNodejs) {\n  Colors = {\n    'Black': 'Black',\n    'Red': 'IndianRed',\n    'Green': 'LimeGreen',\n    'Yellow': 'Orange',\n    'Blue': 'RoyalBlue',\n    'Magenta': 'Orchid',\n    'Cyan': 'SkyBlue',\n    'Grey': 'DimGrey',\n    'White': 'White',\n    'Default': 'Black'\n  };\n}\n\nconst loglevelColors = [Colors.Cyan, Colors.Green, Colors.Yellow, Colors.Red, Colors.Default];\nconst defaultOptions = {\n  useColors: true,\n  color: Colors.Default,\n  showTimestamp: true,\n  useLocalTime: false,\n  showLevel: true,\n  filename: GlobalLogfile,\n  appendFile: true\n};\n\nclass Logger {\n  constructor(category, options) {\n    this.category = category;\n    let opts = {};\n    Object.assign(opts, defaultOptions);\n    Object.assign(opts, options);\n    this.options = opts;\n    this.debug = this.debug.bind(this);\n    this.log = this.log.bind(this);\n    this.info = this.info.bind(this);\n    this.warn = this.warn.bind(this);\n    this.error = this.error.bind(this);\n  }\n\n  debug() {\n    if (this._shouldLog(LogLevels.DEBUG)) this._write(LogLevels.DEBUG, format.apply(null, arguments));\n  }\n\n  log() {\n    if (this._shouldLog(LogLevels.DEBUG)) this.debug.apply(this, arguments);\n  }\n\n  info() {\n    if (this._shouldLog(LogLevels.INFO)) this._write(LogLevels.INFO, format.apply(null, arguments));\n  }\n\n  warn() {\n    if (this._shouldLog(LogLevels.WARN)) this._write(LogLevels.WARN, format.apply(null, arguments));\n  }\n\n  error() {\n    if (this._shouldLog(LogLevels.ERROR)) this._write(LogLevels.ERROR, format.apply(null, arguments));\n  }\n\n  _write(level, text) {\n    if ((this.options.filename || GlobalLogfile) && !this.fileWriter && isNodejs) this.fileWriter = fs.openSync(this.options.filename || GlobalLogfile, this.options.appendFile ? 'a+' : 'w+');\n\n    let format = this._format(level, text);\n\n    let unformattedText = this._createLogMessage(level, text);\n\n    let formattedText = this._createLogMessage(level, text, format.timestamp, format.level, format.category, format.text);\n\n    if (this.fileWriter && isNodejs) fs.writeSync(this.fileWriter, unformattedText + '\\n', null, 'utf-8');\n\n    if (isNodejs || !this.options.useColors) {\n      console.log(formattedText);\n      GlobalEvents.emit('data', this.category, level, text);\n    } else {\n      // TODO: clean this up\n      if (level === LogLevels.ERROR) {\n        if (this.options.showTimestamp && this.options.showLevel) {\n          console.error(formattedText, format.timestamp, format.level, format.category, format.text);\n        } else if (this.options.showTimestamp && !this.options.showLevel) {\n          console.error(formattedText, format.timestamp, format.category, format.text);\n        } else if (!this.options.showTimestamp && this.options.showLevel) {\n          console.error(formattedText, format.level, format.category, format.text);\n        } else {\n          console.error(formattedText, format.category, format.text);\n        }\n      } else {\n        if (this.options.showTimestamp && this.options.showLevel) {\n          console.log(formattedText, format.timestamp, format.level, format.category, format.text);\n        } else if (this.options.showTimestamp && !this.options.showLevel) {\n          console.log(formattedText, format.timestamp, format.category, format.text);\n        } else if (!this.options.showTimestamp && this.options.showLevel) {\n          console.log(formattedText, format.level, format.category, format.text);\n        } else {\n          console.log(formattedText, format.category, format.text);\n        }\n      }\n    }\n  }\n\n  _format(level, text) {\n    let timestampFormat = '';\n    let levelFormat = '';\n    let categoryFormat = '';\n    let textFormat = ': ';\n\n    if (this.options.useColors) {\n      const levelColor = Object.keys(LogLevels).map(f => LogLevels[f]).indexOf(level);\n      const categoryColor = this.options.color;\n\n      if (isNodejs) {\n        if (this.options.showTimestamp) timestampFormat = '\\u001b[3' + Colors.Grey + 'm';\n        if (this.options.showLevel) levelFormat = '\\u001b[3' + loglevelColors[levelColor] + ';22m';\n        categoryFormat = '\\u001b[3' + categoryColor + ';1m';\n        textFormat = '\\u001b[0m: ';\n      } else {\n        if (this.options.showTimestamp) timestampFormat = 'color:' + Colors.Grey;\n        if (this.options.showLevel) levelFormat = 'color:' + loglevelColors[levelColor];\n        categoryFormat = 'color:' + categoryColor + '; font-weight: bold';\n      }\n    }\n\n    return {\n      timestamp: timestampFormat,\n      level: levelFormat,\n      category: categoryFormat,\n      text: textFormat\n    };\n  }\n\n  _createLogMessage(level, text, timestampFormat, levelFormat, categoryFormat, textFormat) {\n    timestampFormat = timestampFormat || '';\n    levelFormat = levelFormat || '';\n    categoryFormat = categoryFormat || '';\n    textFormat = textFormat || ': ';\n\n    if (!isNodejs && this.options.useColors) {\n      if (this.options.showTimestamp) timestampFormat = '%c';\n      if (this.options.showLevel) levelFormat = '%c';\n      categoryFormat = '%c';\n      textFormat = ': %c';\n    }\n\n    let result = '';\n    if (this.options.showTimestamp && !this.options.useLocalTime) result += '' + new Date().toISOString() + ' ';\n    if (this.options.showTimestamp && this.options.useLocalTime) result += '' + new Date().toLocaleString() + ' ';\n    result = timestampFormat + result;\n    if (this.options.showLevel) result += levelFormat + '[' + level + ']' + (level === LogLevels.INFO || level === LogLevels.WARN ? ' ' : '') + ' ';\n    result += categoryFormat + this.category;\n    result += textFormat + text;\n    return result;\n  }\n\n  _shouldLog(level) {\n    let envLogLevel = typeof process !== \"undefined\" && process.env !== undefined && process.env.LOG !== undefined ? process.env.LOG.toUpperCase() : null;\n    envLogLevel = typeof window !== \"undefined\" && window.LOG ? window.LOG.toUpperCase() : envLogLevel;\n    const logLevel = envLogLevel || GlobalLogLevel;\n    const levels = Object.keys(LogLevels).map(f => LogLevels[f]);\n    const index = levels.indexOf(level);\n    const levelIdx = levels.indexOf(logLevel);\n    return index >= levelIdx;\n  }\n\n}\n\n;\n/* Public API */\n\nmodule.exports = {\n  Colors: Colors,\n  LogLevels: LogLevels,\n  setLogLevel: level => {\n    GlobalLogLevel = level;\n  },\n  setLogfile: filename => {\n    GlobalLogfile = filename;\n  },\n  create: (category, options) => {\n    const logger = new Logger(category, options);\n    return logger;\n  },\n  forceBrowserMode: force => isNodejs = !force,\n  // for testing,\n  events: GlobalEvents\n};","map":null,"metadata":{},"sourceType":"script"}