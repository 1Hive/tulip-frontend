{"ast":null,"code":"'use strict';\n\nconst toUri = require('multiaddr-to-uri');\n\nconst debug = require('debug');\n\nconst CID = require('cids');\n\nconst shuffle = require('array-shuffle');\n\nconst AbortController = require('abort-controller');\n\nconst preload = require('./runtime/preload-nodejs');\n\nconst log = debug('ipfs:preload');\nlog.error = debug('ipfs:preload:error');\n\nmodule.exports = options => {\n  options = options || {};\n  options.enabled = Boolean(options.enabled);\n  options.addresses = options.addresses || [];\n\n  if (!options.enabled || !options.addresses.length) {\n    log('preload disabled');\n\n    const api = () => {};\n\n    api.start = () => {};\n\n    api.stop = () => {};\n\n    return api;\n  }\n\n  let stopped = true;\n  let requests = [];\n  const apiUris = options.addresses.map(toUri);\n\n  const api = async path => {\n    try {\n      if (stopped) throw new Error(`preload ${path} but preloader is not started`);\n\n      if (typeof path !== 'string') {\n        path = new CID(path).toString();\n      }\n\n      const fallbackApiUris = shuffle(apiUris);\n      let success = false;\n      const now = Date.now();\n\n      for (const uri of fallbackApiUris) {\n        if (stopped) throw new Error(`preload aborted for ${path}`);\n        let controller;\n\n        try {\n          controller = new AbortController();\n          requests = requests.concat(controller);\n          await preload(`${uri}/api/v0/refs?r=true&arg=${encodeURIComponent(path)}`, {\n            signal: controller.signal\n          });\n          success = true;\n        } catch (err) {\n          if (err.type !== 'aborted') log.error(err);\n        } finally {\n          requests = requests.filter(r => r !== controller);\n        }\n\n        if (success) break;\n      }\n\n      log(`${success ? '' : 'un'}successfully preloaded ${path} in ${Date.now() - now}ms`);\n    } catch (err) {\n      log.error(err);\n    }\n  };\n\n  api.start = () => {\n    stopped = false;\n  };\n\n  api.stop = () => {\n    stopped = true;\n    log(`aborting ${requests.length} pending preload request(s)`);\n    requests.forEach(r => r.abort());\n    requests = [];\n  };\n\n  return api;\n};","map":null,"metadata":{},"sourceType":"script"}