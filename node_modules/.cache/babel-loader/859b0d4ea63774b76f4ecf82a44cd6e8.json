{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar applyDefaultOptions = require('./utils/apply-default-options');\n\nvar toMfsPath = require('./utils/to-mfs-path');\n\nvar log = require('debug')('ipfs:mfs:touch');\n\nvar errCode = require('err-code');\n\nvar UnixFS = require('ipfs-unixfs');\n\nvar toTrail = require('./utils/to-trail');\n\nvar addLink = require('./utils/add-link');\n\nvar updateTree = require('./utils/update-tree');\n\nvar updateMfsRoot = require('./utils/update-mfs-root');\n\nvar _require = require('ipld-dag-pb'),\n    DAGNode = _require.DAGNode;\n\nvar mc = require('multicodec');\n\nvar mh = require('multihashes');\n\nvar _require2 = require('../../utils'),\n    withTimeoutOption = _require2.withTimeoutOption;\n\nvar defaultOptions = {\n  mtime: undefined,\n  flush: true,\n  shardSplitThreshold: 1000,\n  cidVersion: 0,\n  hashAlg: 'sha2-256'\n};\n\nmodule.exports = function (context) {\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _mfsTouch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path, options) {\n      var _yield$toMfsPath, cid, mfsDirectory, name, exists, node, updatedCid, cidVersion, metadata, _metadata, trail, parent, parentNode, result, newRootCid;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = options || {};\n              options = applyDefaultOptions(options, defaultOptions);\n              options.mtime = options.mtime || new Date();\n              log(\"Touching \".concat(path, \" mtime: \").concat(options.mtime));\n              _context.next = 6;\n              return toMfsPath(context, path);\n\n            case 6:\n              _yield$toMfsPath = _context.sent;\n              cid = _yield$toMfsPath.cid;\n              mfsDirectory = _yield$toMfsPath.mfsDirectory;\n              name = _yield$toMfsPath.name;\n              exists = _yield$toMfsPath.exists;\n              cidVersion = options.cidVersion;\n\n              if (exists) {\n                _context.next = 20;\n                break;\n              }\n\n              metadata = new UnixFS({\n                type: 'file',\n                mtime: options.mtime\n              });\n              node = new DAGNode(metadata.marshal());\n              _context.next = 17;\n              return context.ipld.put(node, mc.DAG_PB, {\n                cidVersion: options.cidVersion,\n                hashAlg: mh.names['sha2-256'],\n                onlyHash: !options.flush\n              });\n\n            case 17:\n              updatedCid = _context.sent;\n              _context.next = 32;\n              break;\n\n            case 20:\n              if (!(cid.codec !== 'dag-pb')) {\n                _context.next = 22;\n                break;\n              }\n\n              throw errCode(new Error(\"\".concat(path, \" was not a UnixFS node\")), 'ERR_NOT_UNIXFS');\n\n            case 22:\n              cidVersion = cid.version;\n              _context.next = 25;\n              return context.ipld.get(cid);\n\n            case 25:\n              node = _context.sent;\n              _metadata = UnixFS.unmarshal(node.Data);\n              _metadata.mtime = options.mtime;\n              node = new DAGNode(_metadata.marshal(), node.Links);\n              _context.next = 31;\n              return context.ipld.put(node, mc.DAG_PB, {\n                cidVersion: cid.version,\n                hashAlg: mh.names['sha2-256'],\n                onlyHash: !options.flush\n              });\n\n            case 31:\n              updatedCid = _context.sent;\n\n            case 32:\n              _context.next = 34;\n              return toTrail(context, mfsDirectory, options);\n\n            case 34:\n              trail = _context.sent;\n              parent = trail[trail.length - 1];\n              _context.next = 38;\n              return context.ipld.get(parent.cid);\n\n            case 38:\n              parentNode = _context.sent;\n              _context.next = 41;\n              return addLink(context, {\n                parent: parentNode,\n                name: name,\n                cid: updatedCid,\n                size: node.serialize().length,\n                flush: options.flush,\n                shardSplitThreshold: options.shardSplitThreshold,\n                hashAlg: 'sha2-256',\n                cidVersion: cidVersion\n              });\n\n            case 41:\n              result = _context.sent;\n              parent.cid = result.cid; // update the tree with the new child\n\n              _context.next = 45;\n              return updateTree(context, trail, options);\n\n            case 45:\n              newRootCid = _context.sent;\n              _context.next = 48;\n              return updateMfsRoot(context, newRootCid);\n\n            case 48:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function mfsTouch(_x, _x2) {\n      return _mfsTouch.apply(this, arguments);\n    }\n\n    return mfsTouch;\n  }());\n};","map":null,"metadata":{},"sourceType":"script"}