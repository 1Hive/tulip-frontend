{"ast":null,"code":"var _jsxFileName = \"/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/views/Pools/Syrup.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Route, useRouteMatch } from 'react-router-dom';\nimport BigNumber from 'bignumber.js';\nimport styled from 'styled-components';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { Heading } from '@pancakeswap-libs/uikit';\nimport { BLOCKS_PER_YEAR } from 'config';\nimport orderBy from 'lodash/orderBy';\nimport partition from 'lodash/partition';\nimport useI18n from 'hooks/useI18n';\nimport useBlock from 'hooks/useBlock';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport { useFarms, usePriceBnbBusd, usePools, usePriceEthBnb } from 'state/hooks';\nimport { QuoteToken, PoolCategory } from 'config/constants/types';\nimport FlexLayout from 'components/layout/Flex';\nimport Page from 'components/layout/Page';\nimport Coming from './components/Coming';\nimport PoolCard from './components/PoolCard';\nimport PoolTabButtons from './components/PoolTabButtons';\nimport Divider from './components/Divider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Farm = () => {\n  _s();\n\n  const {\n    path\n  } = useRouteMatch();\n  const TranslateString = useI18n();\n  const {\n    account\n  } = useWallet();\n  const farms = useFarms();\n  const pools = usePools(account);\n  const bnbPriceUSD = usePriceBnbBusd();\n  const ethPriceBnb = usePriceEthBnb();\n  const block = useBlock();\n  const [stackedOnly, setStackedOnly] = useState(false);\n\n  const priceToBnb = (tokenName, tokenPrice, quoteToken) => {\n    const tokenPriceBN = new BigNumber(tokenPrice);\n\n    if (tokenName === 'BNB') {\n      return new BigNumber(1);\n    }\n\n    if (tokenPrice && quoteToken === QuoteToken.BUSD) {\n      return tokenPriceBN.div(bnbPriceUSD);\n    }\n\n    return tokenPriceBN;\n  };\n\n  const poolsWithApy = pools.map(pool => {\n    const isBnbPool = pool.poolCategory === PoolCategory.BINANCE;\n    const rewardTokenFarm = farms.find(f => f.tokenSymbol === pool.tokenName);\n    const stakingTokenFarm = farms.find(s => s.tokenSymbol === pool.stakingTokenName); // tmp mulitplier to support ETH farms\n    // Will be removed after the price api\n\n    const tempMultiplier = (stakingTokenFarm === null || stakingTokenFarm === void 0 ? void 0 : stakingTokenFarm.quoteTokenSymbol) === 'ETH' ? ethPriceBnb : 1; // /!\\ Assume that the farm quote price is BNB\n\n    const stakingTokenPriceInBNB = isBnbPool ? new BigNumber(1) : new BigNumber(stakingTokenFarm === null || stakingTokenFarm === void 0 ? void 0 : stakingTokenFarm.tokenPriceVsQuote).times(tempMultiplier);\n    const rewardTokenPriceInBNB = priceToBnb(pool.tokenName, rewardTokenFarm === null || rewardTokenFarm === void 0 ? void 0 : rewardTokenFarm.tokenPriceVsQuote, rewardTokenFarm === null || rewardTokenFarm === void 0 ? void 0 : rewardTokenFarm.quoteTokenSymbol);\n    const totalRewardPricePerYear = rewardTokenPriceInBNB.times(pool.tokenPerBlock).times(BLOCKS_PER_YEAR);\n    const totalStakingTokenInPool = stakingTokenPriceInBNB.times(getBalanceNumber(pool.totalStaked));\n    const apy = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100);\n    return { ...pool,\n      isFinished: pool.sousId === 0 ? false : pool.isFinished || block > pool.endBlock,\n      apy\n    };\n  });\n  const [finishedPools, openPools] = partition(poolsWithApy, pool => pool.isFinished);\n  const stackedOnlyPools = openPools.filter(pool => pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0));\n  return /*#__PURE__*/_jsxDEV(Page, {\n    children: [/*#__PURE__*/_jsxDEV(Hero, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          as: \"h1\",\n          size: \"xxl\",\n          mb: \"16px\",\n          children: TranslateString(738, 'Syrup Pool')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: TranslateString(580, 'Stake CAKE to earn new tokens.')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: TranslateString(486, 'You can unstake at any time.')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: TranslateString(406, 'Rewards are calculated per block.')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/syrup.png\",\n        alt: \"SYRUP POOL icon\",\n        width: 410,\n        height: 191\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PoolTabButtons, {\n      stackedOnly: stackedOnly,\n      setStackedOnly: setStackedOnly\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FlexLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${path}`,\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [stackedOnly ? orderBy(stackedOnlyPools, ['sortOrder']).map(pool => /*#__PURE__*/_jsxDEV(PoolCard, {\n            pool: pool\n          }, pool.sousId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 72\n          }, this)) : orderBy(openPools, ['sortOrder']).map(pool => /*#__PURE__*/_jsxDEV(PoolCard, {\n            pool: pool\n          }, pool.sousId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 65\n          }, this)), /*#__PURE__*/_jsxDEV(Coming, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: `${path}/history`,\n        children: orderBy(finishedPools, ['sortOrder']).map(pool => /*#__PURE__*/_jsxDEV(PoolCard, {\n          pool: pool\n        }, pool.sousId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Farm, \"RQBIQAO2JxRDZ+O24a7JIub/vTc=\", false, function () {\n  return [useRouteMatch, useI18n, useWallet, useFarms, usePools, usePriceBnbBusd, usePriceEthBnb, useBlock];\n});\n\n_c = Farm;\nconst Hero = styled.div`\n  align-items: center;\n  color: ${({\n  theme\n}) => theme.colors.primary};\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: 1fr;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 250px;\n  padding: 48px 0;\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style-type: none;\n    font-size: 16px;\n    li {\n      margin-bottom: 4px;\n    }\n  }\n  img {\n    height: auto;\n    max-width: 100%;\n  }\n  @media (min-width: 576px) {\n    grid-template-columns: 1fr 1fr;\n    margin: 0;\n    max-width: none;\n  }\n`;\n_c2 = Hero;\nexport default Farm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Farm\");\n$RefreshReg$(_c2, \"Hero\");","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/views/Pools/Syrup.tsx"],"names":["React","useState","Route","useRouteMatch","BigNumber","styled","useWallet","Heading","BLOCKS_PER_YEAR","orderBy","partition","useI18n","useBlock","getBalanceNumber","useFarms","usePriceBnbBusd","usePools","usePriceEthBnb","QuoteToken","PoolCategory","FlexLayout","Page","Coming","PoolCard","PoolTabButtons","Divider","Farm","path","TranslateString","account","farms","pools","bnbPriceUSD","ethPriceBnb","block","stackedOnly","setStackedOnly","priceToBnb","tokenName","tokenPrice","quoteToken","tokenPriceBN","BUSD","div","poolsWithApy","map","pool","isBnbPool","poolCategory","BINANCE","rewardTokenFarm","find","f","tokenSymbol","stakingTokenFarm","s","stakingTokenName","tempMultiplier","quoteTokenSymbol","stakingTokenPriceInBNB","tokenPriceVsQuote","times","rewardTokenPriceInBNB","totalRewardPricePerYear","tokenPerBlock","totalStakingTokenInPool","totalStaked","apy","isFinished","sousId","endBlock","finishedPools","openPools","stackedOnlyPools","filter","userData","stakedBalance","isGreaterThan","Hero","theme","colors","primary"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR } from 'config'\nimport orderBy from 'lodash/orderBy'\nimport partition from 'lodash/partition'\nimport useI18n from 'hooks/useI18n'\nimport useBlock from 'hooks/useBlock'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useFarms, usePriceBnbBusd, usePools, usePriceEthBnb } from 'state/hooks'\nimport { QuoteToken, PoolCategory } from 'config/constants/types'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport Coming from './components/Coming'\nimport PoolCard from './components/PoolCard'\nimport PoolTabButtons from './components/PoolTabButtons'\nimport Divider from './components/Divider'\n\nconst Farm: React.FC = () => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const farms = useFarms()\n  const pools = usePools(account)\n  const bnbPriceUSD = usePriceBnbBusd()\n  const ethPriceBnb = usePriceEthBnb()\n  const block = useBlock()\n  const [stackedOnly, setStackedOnly] = useState(false)\n\n  const priceToBnb = (tokenName: string, tokenPrice: BigNumber, quoteToken: QuoteToken): BigNumber => {\n    const tokenPriceBN = new BigNumber(tokenPrice)\n    if (tokenName === 'BNB') {\n      return new BigNumber(1)\n    }\n    if (tokenPrice && quoteToken === QuoteToken.BUSD) {\n      return tokenPriceBN.div(bnbPriceUSD)\n    }\n    return tokenPriceBN\n  }\n\n  const poolsWithApy = pools.map((pool) => {\n    const isBnbPool = pool.poolCategory === PoolCategory.BINANCE\n    const rewardTokenFarm = farms.find((f) => f.tokenSymbol === pool.tokenName)\n    const stakingTokenFarm = farms.find((s) => s.tokenSymbol === pool.stakingTokenName)\n\n    // tmp mulitplier to support ETH farms\n    // Will be removed after the price api\n    const tempMultiplier = stakingTokenFarm?.quoteTokenSymbol === 'ETH' ? ethPriceBnb : 1\n\n    // /!\\ Assume that the farm quote price is BNB\n    const stakingTokenPriceInBNB = isBnbPool\n      ? new BigNumber(1)\n      : new BigNumber(stakingTokenFarm?.tokenPriceVsQuote).times(tempMultiplier)\n    const rewardTokenPriceInBNB = priceToBnb(\n      pool.tokenName,\n      rewardTokenFarm?.tokenPriceVsQuote,\n      rewardTokenFarm?.quoteTokenSymbol,\n    )\n\n    const totalRewardPricePerYear = rewardTokenPriceInBNB.times(pool.tokenPerBlock).times(BLOCKS_PER_YEAR)\n    const totalStakingTokenInPool = stakingTokenPriceInBNB.times(getBalanceNumber(pool.totalStaked))\n    const apy = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\n\n    return {\n      ...pool,\n      isFinished: pool.sousId === 0 ? false : pool.isFinished || block > pool.endBlock,\n      apy,\n    }\n  })\n\n  const [finishedPools, openPools] = partition(poolsWithApy, (pool) => pool.isFinished)\n  const stackedOnlyPools = openPools.filter(\n    (pool) => pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  return (\n    <Page>\n      <Hero>\n        <div>\n          <Heading as=\"h1\" size=\"xxl\" mb=\"16px\">\n            {TranslateString(738, 'Syrup Pool')}\n          </Heading>\n          <ul>\n            <li>{TranslateString(580, 'Stake CAKE to earn new tokens.')}</li>\n            <li>{TranslateString(486, 'You can unstake at any time.')}</li>\n            <li>{TranslateString(406, 'Rewards are calculated per block.')}</li>\n          </ul>\n        </div>\n        <img src=\"/images/syrup.png\" alt=\"SYRUP POOL icon\" width={410} height={191} />\n      </Hero>\n      <PoolTabButtons stackedOnly={stackedOnly} setStackedOnly={setStackedOnly} />\n      <Divider />\n      <FlexLayout>\n        <Route exact path={`${path}`}>\n          <>\n            {stackedOnly\n              ? orderBy(stackedOnlyPools, ['sortOrder']).map((pool) => <PoolCard key={pool.sousId} pool={pool} />)\n              : orderBy(openPools, ['sortOrder']).map((pool) => <PoolCard key={pool.sousId} pool={pool} />)}\n            <Coming />\n          </>\n        </Route>\n        <Route path={`${path}/history`}>\n          {orderBy(finishedPools, ['sortOrder']).map((pool) => (\n            <PoolCard key={pool.sousId} pool={pool} />\n          ))}\n        </Route>\n      </FlexLayout>\n    </Page>\n  )\n}\n\nconst Hero = styled.div`\n  align-items: center;\n  color: ${({ theme }) => theme.colors.primary};\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: 1fr;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 250px;\n  padding: 48px 0;\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style-type: none;\n    font-size: 16px;\n    li {\n      margin-bottom: 4px;\n    }\n  }\n  img {\n    height: auto;\n    max-width: 100%;\n  }\n  @media (min-width: 576px) {\n    grid-template-columns: 1fr 1fr;\n    margin: 0;\n    max-width: none;\n  }\n`\n\nexport default Farm\n"]},"metadata":{},"sourceType":"module"}