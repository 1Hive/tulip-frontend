{"ast":null,"code":"import _regeneratorRuntime from\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useMemo,useState}from'react';import{wallet}from'tulip-data';import{useWallet}from'use-wallet';var ASSET_DEFAULT={symbol:'',name:'',balance:'',price:'',value:'',image1:'',image2:''};export function useWalletData(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),walletInfo=_useState2[0],setWalletInfo=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),poolingInfo=_useState4[0],setPoolingInfo=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isFetchingWallet=_useState6[0],setIsFetchingWallet=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),isFetchingPool=_useState8[0],setIsFetchingPool=_useState8[1];var _useWallet=useWallet(),account=_useWallet.account,status=_useWallet.status;useEffect(function(){var cancelled=false;if(!account||status==='disconnected'){return setWalletInfo([]);}var fetchWalletData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var balances;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;setIsFetchingWallet(true);_context.next=4;return wallet.tokenBalances({user_address:account});case 4:balances=_context.sent;if(cancelled){_context.next=8;break;}setWalletInfo(balances);return _context.abrupt(\"return\",setIsFetchingWallet(false));case 8:_context.next=13;break;case 10:_context.prev=10;_context.t0=_context[\"catch\"](0);console.error(\"Could not fetch wallet data \",_context.t0);case 13:case\"end\":return _context.stop();}}},_callee,null,[[0,10]]);}));return function fetchWalletData(){return _ref.apply(this,arguments);};}();var fetchPoolingData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var poolingData;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;setIsFetchingPool(true);_context2.next=4;return wallet.poolBalances({user_address:account});case 4:poolingData=_context2.sent;if(cancelled){_context2.next=8;break;}setPoolingInfo(poolingData);return _context2.abrupt(\"return\",setIsFetchingPool(false));case 8:_context2.next=13;break;case 10:_context2.prev=10;_context2.t0=_context2[\"catch\"](0);console.error(\"Could not fetch wallet data \",_context2.t0);case 13:case\"end\":return _context2.stop();}}},_callee2,null,[[0,10]]);}));return function fetchPoolingData(){return _ref2.apply(this,arguments);};}();fetchWalletData();fetchPoolingData();return function(){cancelled=true;};},[account,status]);return[walletInfo,poolingInfo,isFetchingWallet||isFetchingPool];}export function useNetBalance(){var _useWalletData=useWalletData(),_useWalletData2=_slicedToArray(_useWalletData,3),walletInfo=_useWalletData2[0],poolingInfo=_useWalletData2[1],isFetching=_useWalletData2[2];return useMemo(function(){var netBalance=0;var walletBalance=0;var poolBalance=0;var assetsList=[];if(!walletInfo||walletInfo.length===0||!poolingInfo){return{walletBalance:walletBalance,poolBalance:poolBalance,netBalance:netBalance,assetsList:assetsList,isFetching:isFetching};}walletInfo.map(function(value){if(value&&parseFloat(value.valueUSD)){walletBalance=walletBalance+parseFloat(value.valueUSD);assetsList.push({symbol:value.symbol,name:value.name,balance:value.balance.toFixed(4),price:value.priceUSD.toFixed(2),value:value.valueUSD.toFixed(2),image1:value.logoURI,image2:''});}});poolingInfo.map(function(value){if(value&&parseFloat(value.valueUSD)){poolBalance=Number(poolBalance)+parseFloat(value.valueUSD);var asset=ASSET_DEFAULT;if(value.tokens&&value.tokens.length>1){value.tokens.map(function(token,i){console.log(token);asset.symbol=i===0?token.symbol+'-':asset.symbol+token.symbol;if(i===0){asset.image1=token.logoURI;}else{asset.image2=token.logoURI;}});}asset.balance=Number(value.balance).toFixed(4);asset.value=Number(value.valueUSD).toFixed(2);asset.price=Number(value.valueUSD/value.balance).toFixed(2);asset.name='HoneySwap';assetsList.push(asset);}});walletBalance=walletBalance.toFixed(2);poolBalance=poolBalance.toFixed(2);netBalance=parseFloat(Number(walletBalance)+Number(poolBalance)+netBalance).toFixed(2);return{walletBalance:walletBalance,poolBalance:poolBalance,netBalance:netBalance,assetsList:assetsList,isFetching:isFetching};},[walletInfo,poolingInfo,isFetching]);}","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/hooks/useWalletData.js"],"names":["useEffect","useMemo","useState","wallet","useWallet","ASSET_DEFAULT","symbol","name","balance","price","value","image1","image2","useWalletData","walletInfo","setWalletInfo","poolingInfo","setPoolingInfo","isFetchingWallet","setIsFetchingWallet","isFetchingPool","setIsFetchingPool","account","status","cancelled","fetchWalletData","tokenBalances","user_address","balances","console","error","fetchPoolingData","poolBalances","poolingData","useNetBalance","isFetching","netBalance","walletBalance","poolBalance","assetsList","length","map","parseFloat","valueUSD","push","toFixed","priceUSD","logoURI","Number","asset","tokens","token","i","log"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useState } from 'react'\r\nimport { wallet } from 'tulip-data'\r\nimport { useWallet } from 'use-wallet'\r\n\r\nconst ASSET_DEFAULT = {\r\n  symbol: '',\r\n  name: '',\r\n  balance: '',\r\n  price: '',\r\n  value: '',\r\n  image1: '',\r\n  image2: '',\r\n}\r\n\r\nexport function useWalletData() {\r\n  const [walletInfo, setWalletInfo] = useState([])\r\n  const [poolingInfo, setPoolingInfo] = useState([])\r\n  const [isFetchingWallet, setIsFetchingWallet] = useState(false)\r\n  const [isFetchingPool, setIsFetchingPool] = useState(false)\r\n  const { account, status } = useWallet()\r\n\r\n  useEffect(() => {\r\n    let cancelled = false\r\n    if (!account || status === 'disconnected') {\r\n      return setWalletInfo([])\r\n    }\r\n\r\n    const fetchWalletData = async () => {\r\n      try {\r\n        setIsFetchingWallet(true)\r\n        const balances = await wallet.tokenBalances({\r\n          user_address: account,\r\n        })\r\n\r\n        if (!cancelled) {\r\n          setWalletInfo(balances)\r\n          return setIsFetchingWallet(false)\r\n        }\r\n      } catch (err) {\r\n        console.error(`Could not fetch wallet data `, err)\r\n      }\r\n    }\r\n\r\n    const fetchPoolingData = async () => {\r\n      try {\r\n        setIsFetchingPool(true)\r\n\r\n        const poolingData = await wallet.poolBalances({\r\n          user_address: account,\r\n        })\r\n\r\n        if (!cancelled) {\r\n          setPoolingInfo(poolingData)\r\n          return setIsFetchingPool(false)\r\n        }\r\n      } catch (err) {\r\n        console.error(`Could not fetch wallet data `, err)\r\n      }\r\n    }\r\n\r\n    fetchWalletData()\r\n    fetchPoolingData()\r\n    return () => {\r\n      cancelled = true\r\n    }\r\n  }, [account, status])\r\n\r\n  return [walletInfo, poolingInfo, isFetchingWallet || isFetchingPool]\r\n}\r\n\r\nexport function useNetBalance() {\r\n  const [walletInfo, poolingInfo, isFetching] = useWalletData()\r\n\r\n  return useMemo(() => {\r\n    let netBalance = 0\r\n    let walletBalance = 0\r\n    let poolBalance = 0\r\n    const assetsList = []\r\n    if (!walletInfo || walletInfo.length === 0 || !poolingInfo) {\r\n      return { walletBalance, poolBalance, netBalance, assetsList, isFetching }\r\n    }\r\n\r\n    walletInfo.map(value => {\r\n      if (value && parseFloat(value.valueUSD)) {\r\n        walletBalance = walletBalance + parseFloat(value.valueUSD)\r\n        assetsList.push({\r\n          symbol: value.symbol,\r\n          name: value.name,\r\n          balance: value.balance.toFixed(4),\r\n          price: value.priceUSD.toFixed(2),\r\n          value: value.valueUSD.toFixed(2),\r\n          image1: value.logoURI,\r\n          image2: '',\r\n        })\r\n      }\r\n    })\r\n\r\n    poolingInfo.map(value => {\r\n      if (value && parseFloat(value.valueUSD)) {\r\n        poolBalance = Number(poolBalance) + parseFloat(value.valueUSD)\r\n        const asset = ASSET_DEFAULT\r\n        if (value.tokens && value.tokens.length > 1) {\r\n          value.tokens.map((token, i) => {\r\n            console.log(token)\r\n            asset.symbol =\r\n              i === 0 ? token.symbol + '-' : asset.symbol + token.symbol\r\n            if (i === 0) {\r\n              asset.image1 = token.logoURI\r\n            } else {\r\n              asset.image2 = token.logoURI\r\n            }\r\n          })\r\n        }\r\n        asset.balance = Number(value.balance).toFixed(4)\r\n        asset.value = Number(value.valueUSD).toFixed(2)\r\n        asset.price = Number(value.valueUSD / value.balance).toFixed(2)\r\n        asset.name = 'HoneySwap'\r\n        assetsList.push(asset)\r\n      }\r\n    })\r\n\r\n    walletBalance = walletBalance.toFixed(2)\r\n    poolBalance = poolBalance.toFixed(2)\r\n    netBalance = parseFloat(\r\n      Number(walletBalance) + Number(poolBalance) + netBalance\r\n    ).toFixed(2)\r\n\r\n    return { walletBalance, poolBalance, netBalance, assetsList, isFetching }\r\n  }, [walletInfo, poolingInfo, isFetching])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}