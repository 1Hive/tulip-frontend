{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from 'react';\nimport { useLotteryApprove } from './useApprove';\nexport const useApproval = onPresentApprove => {\n  _s();\n\n  const [requestedApproval, setRequestedApproval] = useState(false);\n  const {\n    onApprove\n  } = useLotteryApprove();\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true);\n      const txHash = await onApprove(); // user rejected tx or didn't go thru\n\n      if (!txHash) {\n        setRequestedApproval(false);\n      }\n\n      onPresentApprove();\n    } catch (e) {\n      console.error(e);\n    }\n  }, [onApprove, onPresentApprove]);\n  return {\n    handleApprove,\n    requestedApproval\n  };\n};\n\n_s(useApproval, \"hqJtHqwm6Jg+hijZ4vDrcS1Sgjo=\", false, function () {\n  return [useLotteryApprove];\n});\n\nexport default useApproval;","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/hooks/useApproval.ts"],"names":["useCallback","useState","useLotteryApprove","useApproval","onPresentApprove","requestedApproval","setRequestedApproval","onApprove","handleApprove","txHash","e","console","error"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,iBAAT,QAAkC,cAAlC;AAEA,OAAO,MAAMC,WAAW,GAAIC,gBAAD,IAAkC;AAAA;;AAC3D,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CL,QAAQ,CAAC,KAAD,CAA1D;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAgBL,iBAAiB,EAAvC;AAEA,QAAMM,aAAa,GAAGR,WAAW,CAAC,YAAY;AAC5C,QAAI;AACFM,MAAAA,oBAAoB,CAAC,IAAD,CAApB;AACA,YAAMG,MAAM,GAAG,MAAMF,SAAS,EAA9B,CAFE,CAGF;;AACA,UAAI,CAACE,MAAL,EAAa;AACXH,QAAAA,oBAAoB,CAAC,KAAD,CAApB;AACD;;AACDF,MAAAA,gBAAgB;AACjB,KARD,CAQE,OAAOM,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;AACF,GAZgC,EAY9B,CAACH,SAAD,EAAYH,gBAAZ,CAZ8B,CAAjC;AAcA,SAAO;AAAEI,IAAAA,aAAF;AAAiBH,IAAAA;AAAjB,GAAP;AACD,CAnBM;;GAAMF,W;UAEWD,iB;;;AAmBxB,eAAeC,WAAf","sourcesContent":["import { useCallback, useState } from 'react'\nimport { useLotteryApprove } from './useApprove'\n\nexport const useApproval = (onPresentApprove: () => void) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { onApprove } = useLotteryApprove()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const txHash = await onApprove()\n      // user rejected tx or didn't go thru\n      if (!txHash) {\n        setRequestedApproval(false)\n      }\n      onPresentApprove()\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, onPresentApprove])\n\n  return { handleApprove, requestedApproval }\n}\n\nexport default useApproval\n"]},"metadata":{},"sourceType":"module"}