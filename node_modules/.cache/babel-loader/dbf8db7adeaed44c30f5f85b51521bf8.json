{"ast":null,"code":"/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport farmsConfig from 'config/constants/farms';\nimport fetchFarms from './fetchFarms';\nimport { fetchFarmUserEarnings, fetchFarmUserAllowances, fetchFarmUserTokenBalances, fetchFarmUserStakedBalances } from './fetchFarmUser';\nconst initialState = {\n  data: [...farmsConfig]\n};\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData = action.payload;\n      state.data = state.data.map(farm => {\n        const liveFarmData = liveFarmsData.find(f => f.pid === farm.pid);\n        return { ...farm,\n          ...liveFarmData\n        };\n      });\n    },\n    setFarmUserData: (state, action) => {\n      const {\n        arrayOfUserDataObjects\n      } = action.payload;\n      arrayOfUserDataObjects.forEach(userDataEl => {\n        const {\n          index\n        } = userDataEl;\n        state.data[index] = { ...state.data[index],\n          userData: userDataEl\n        };\n      });\n    }\n  }\n}); // Actions\n\nexport const {\n  setFarmsPublicData,\n  setFarmUserData\n} = farmsSlice.actions; // Thunks\n\nexport const fetchFarmsPublicDataAsync = () => async dispatch => {\n  const farms = await fetchFarms();\n  dispatch(setFarmsPublicData(farms));\n};\nexport const fetchFarmUserDataAsync = account => async dispatch => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account);\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account);\n  const userStakedBalances = await fetchFarmUserStakedBalances(account);\n  const userFarmEarnings = await fetchFarmUserEarnings(account);\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index]\n    };\n  });\n  dispatch(setFarmUserData({\n    arrayOfUserDataObjects\n  }));\n};\nexport default farmsSlice.reducer;","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/state/farms/index.ts"],"names":["createSlice","farmsConfig","fetchFarms","fetchFarmUserEarnings","fetchFarmUserAllowances","fetchFarmUserTokenBalances","fetchFarmUserStakedBalances","initialState","data","farmsSlice","name","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","map","farm","liveFarmData","find","f","pid","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","account","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","tokenBalance","stakedBalance","earnings","reducer"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SACEC,qBADF,EAEEC,uBAFF,EAGEC,0BAHF,EAIEC,2BAJF,QAKO,iBALP;AAQA,MAAMC,YAAwB,GAAG;AAAEC,EAAAA,IAAI,EAAE,CAAC,GAAGP,WAAJ;AAAR,CAAjC;AAEA,OAAO,MAAMQ,UAAU,GAAGT,WAAW,CAAC;AACpCU,EAAAA,IAAI,EAAE,OAD8B;AAEpCH,EAAAA,YAFoC;AAGpCI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,kBAAkB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,YAAMC,aAAqB,GAAGD,MAAM,CAACE,OAArC;AACAH,MAAAA,KAAK,CAACL,IAAN,GAAaK,KAAK,CAACL,IAAN,CAAWS,GAAX,CAAgBC,IAAD,IAAU;AACpC,cAAMC,YAAY,GAAGJ,aAAa,CAACK,IAAd,CAAoBC,CAAD,IAAOA,CAAC,CAACC,GAAF,KAAUJ,IAAI,CAACI,GAAzC,CAArB;AACA,eAAO,EAAE,GAAGJ,IAAL;AAAW,aAAGC;AAAd,SAAP;AACD,OAHY,CAAb;AAID,KAPO;AAQRI,IAAAA,eAAe,EAAE,CAACV,KAAD,EAAQC,MAAR,KAAmB;AAClC,YAAM;AAAEU,QAAAA;AAAF,UAA6BV,MAAM,CAACE,OAA1C;AACAQ,MAAAA,sBAAsB,CAACC,OAAvB,CAAgCC,UAAD,IAAgB;AAC7C,cAAM;AAAEC,UAAAA;AAAF,YAAYD,UAAlB;AACAb,QAAAA,KAAK,CAACL,IAAN,CAAWmB,KAAX,IAAoB,EAAE,GAAGd,KAAK,CAACL,IAAN,CAAWmB,KAAX,CAAL;AAAwBC,UAAAA,QAAQ,EAAEF;AAAlC,SAApB;AACD,OAHD;AAID;AAdO;AAH0B,CAAD,CAA9B,C,CAqBP;;AACA,OAAO,MAAM;AAAEd,EAAAA,kBAAF;AAAsBW,EAAAA;AAAtB,IAA0Cd,UAAU,CAACoB,OAA3D,C,CAEP;;AACA,OAAO,MAAMC,yBAAyB,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACjE,QAAMC,KAAK,GAAG,MAAM9B,UAAU,EAA9B;AACA6B,EAAAA,QAAQ,CAACnB,kBAAkB,CAACoB,KAAD,CAAnB,CAAR;AACD,CAHM;AAIP,OAAO,MAAMC,sBAAsB,GAAIC,OAAD,IAAa,MAAOH,QAAP,IAAoB;AACrE,QAAMI,kBAAkB,GAAG,MAAM/B,uBAAuB,CAAC8B,OAAD,CAAxD;AACA,QAAME,qBAAqB,GAAG,MAAM/B,0BAA0B,CAAC6B,OAAD,CAA9D;AACA,QAAMG,kBAAkB,GAAG,MAAM/B,2BAA2B,CAAC4B,OAAD,CAA5D;AACA,QAAMI,gBAAgB,GAAG,MAAMnC,qBAAqB,CAAC+B,OAAD,CAApD;AAEA,QAAMV,sBAAsB,GAAGW,kBAAkB,CAAClB,GAAnB,CAAuB,CAACsB,aAAD,EAAgBZ,KAAhB,KAA0B;AAC9E,WAAO;AACLA,MAAAA,KADK;AAELa,MAAAA,SAAS,EAAEL,kBAAkB,CAACR,KAAD,CAFxB;AAGLc,MAAAA,YAAY,EAAEL,qBAAqB,CAACT,KAAD,CAH9B;AAILe,MAAAA,aAAa,EAAEL,kBAAkB,CAACV,KAAD,CAJ5B;AAKLgB,MAAAA,QAAQ,EAAEL,gBAAgB,CAACX,KAAD;AALrB,KAAP;AAOD,GAR8B,CAA/B;AAUAI,EAAAA,QAAQ,CAACR,eAAe,CAAC;AAAEC,IAAAA;AAAF,GAAD,CAAhB,CAAR;AACD,CAjBM;AAmBP,eAAef,UAAU,CAACmC,OAA1B","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n"]},"metadata":{},"sourceType":"module"}