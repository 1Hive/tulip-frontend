{"ast":null,"code":"'use strict';\n\nconst {\n  Key,\n  Errors,\n  Adapter,\n  utils: {\n    filter,\n    map,\n    take,\n    sortAll\n  }\n} = require('interface-datastore');\n/**\n * A datastore backed by leveldb.\n */\n\n\nclass LevelDatastore extends Adapter {\n  constructor(path, opts) {\n    super();\n    let database;\n\n    if (opts && opts.db) {\n      database = opts.db;\n      delete opts.db;\n    } else {\n      database = require('level');\n    }\n\n    this.db = this._initDb(database, path, opts);\n  }\n\n  _initDb(database, path, opts) {\n    return database(path, { ...opts,\n      valueEncoding: 'binary',\n      compression: false // same default as go\n\n    });\n  }\n\n  async open() {\n    try {\n      await this.db.open();\n    } catch (err) {\n      throw Errors.dbOpenFailedError(err);\n    }\n  }\n\n  async put(key, value) {\n    try {\n      await this.db.put(key.toString(), value);\n    } catch (err) {\n      throw Errors.dbWriteFailedError(err);\n    }\n  }\n\n  async get(key) {\n    let data;\n\n    try {\n      data = await this.db.get(key.toString());\n    } catch (err) {\n      if (err.notFound) throw Errors.notFoundError(err);\n      throw Errors.dbWriteFailedError(err);\n    }\n\n    return data;\n  }\n\n  async has(key) {\n    try {\n      await this.db.get(key.toString());\n    } catch (err) {\n      if (err.notFound) return false;\n      throw err;\n    }\n\n    return true;\n  }\n\n  async delete(key) {\n    try {\n      await this.db.del(key.toString());\n    } catch (err) {\n      throw Errors.dbDeleteFailedError(err);\n    }\n  }\n\n  close() {\n    return this.db.close();\n  }\n\n  batch() {\n    const ops = [];\n    return {\n      put: (key, value) => {\n        ops.push({\n          type: 'put',\n          key: key.toString(),\n          value: value\n        });\n      },\n      delete: key => {\n        ops.push({\n          type: 'del',\n          key: key.toString()\n        });\n      },\n      commit: () => {\n        return this.db.batch(ops);\n      }\n    };\n  }\n\n  query(q) {\n    let values = true;\n\n    if (q.keysOnly != null) {\n      values = !q.keysOnly;\n    }\n\n    const opts = {\n      keys: true,\n      values: values,\n      keyAsBuffer: true\n    }; // Let the db do the prefix matching\n\n    if (q.prefix != null) {\n      const prefix = q.prefix.toString(); // Match keys greater than or equal to `prefix` and\n\n      opts.gte = prefix; // less than `prefix` + \\xFF (hex escape sequence)\n\n      opts.lt = prefix + '\\xFF';\n    }\n\n    let it = levelIteratorToIterator(this.db.iterator(opts));\n    it = map(it, ({\n      key,\n      value\n    }) => {\n      const res = {\n        key: new Key(key, false)\n      };\n\n      if (values) {\n        res.value = Buffer.from(value);\n      }\n\n      return res;\n    });\n\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it);\n    }\n\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it);\n    }\n\n    if (q.offset != null) {\n      let i = 0;\n      it = filter(it, () => i++ >= q.offset);\n    }\n\n    if (q.limit != null) {\n      it = take(it, q.limit);\n    }\n\n    return it;\n  }\n\n}\n\nfunction levelIteratorToIterator(li) {\n  return {\n    next: () => new Promise((resolve, reject) => {\n      li.next((err, key, value) => {\n        if (err) return reject(err);\n\n        if (key == null) {\n          return li.end(err => {\n            if (err) return reject(err);\n            resolve({\n              done: true\n            });\n          });\n        }\n\n        resolve({\n          done: false,\n          value: {\n            key,\n            value\n          }\n        });\n      });\n    }),\n    return: () => new Promise((resolve, reject) => {\n      li.end(err => {\n        if (err) return reject(err);\n        resolve({\n          done: true\n        });\n      });\n    }),\n\n    [Symbol.asyncIterator]() {\n      return this;\n    }\n\n  };\n}\n\nmodule.exports = LevelDatastore;","map":null,"metadata":{},"sourceType":"script"}