{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar CID = require('cids');\n\nvar UnixFs = require('ipfs-unixfs');\n\nvar _require = require('ipld-dag-pb'),\n    DAGNode = _require.DAGNode;\n\nvar log = require('debug')('ipfs:mfs:utils:with-mfs-root');\n\nvar mc = require('multicodec');\n\nvar mh = require('multihashes');\n\nvar _require2 = require('../../../utils'),\n    MFS_ROOT_KEY = _require2.MFS_ROOT_KEY;\n\nvar loadMfsRoot = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var cid, buf, node;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return context.repo.datastore.open();\n\n          case 2:\n            _context.prev = 2;\n            _context.next = 5;\n            return context.repo.datastore.get(MFS_ROOT_KEY);\n\n          case 5:\n            buf = _context.sent;\n            cid = new CID(buf);\n            _context.next = 20;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](2);\n\n            if (!(_context.t0.code !== 'ERR_NOT_FOUND')) {\n              _context.next = 13;\n              break;\n            }\n\n            throw _context.t0;\n\n          case 13:\n            log('Creating new MFS root');\n            node = new DAGNode(new UnixFs({\n              type: 'directory'\n            }).marshal());\n            _context.next = 17;\n            return context.ipld.put(node, mc.DAG_PB, {\n              cidVersion: 0,\n              hashAlg: mh.names['sha2-256'] // why can't ipld look this up?\n\n            });\n\n          case 17:\n            cid = _context.sent;\n            _context.next = 20;\n            return context.repo.datastore.put(MFS_ROOT_KEY, cid.buffer);\n\n          case 20:\n            log(\"Loaded MFS root /ipfs/\".concat(cid));\n            return _context.abrupt(\"return\", cid);\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 9]]);\n  }));\n\n  return function loadMfsRoot(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = loadMfsRoot;","map":null,"metadata":{},"sourceType":"script"}