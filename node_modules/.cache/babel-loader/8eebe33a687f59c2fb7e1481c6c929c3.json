{"ast":null,"code":"'use strict';\n\nconst log = require('debug')('ipfs');\n\nconst mergeOptions = require('merge-options');\n\nconst {\n  isTest\n} = require('ipfs-utils/src/env');\n\nconst globSource = require('ipfs-utils/src/files/glob-source');\n\nconst urlSource = require('ipfs-utils/src/files/url-source');\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst PeerId = require('peer-id');\n\nconst PeerInfo = require('peer-info');\n\nconst crypto = require('libp2p-crypto');\n\nconst isIPFS = require('is-ipfs');\n\nconst multiaddr = require('multiaddr');\n\nconst multihash = require('multihashes');\n\nconst multibase = require('multibase');\n\nconst multicodec = require('multicodec');\n\nconst multihashing = require('multihashing-async');\n\nconst CID = require('cids');\n\nconst {\n  NotInitializedError\n} = require('./errors');\n\nconst Components = require('./components');\n\nconst ApiManager = require('./api-manager');\n\nconst getDefaultOptions = () => ({\n  init: true,\n  start: true,\n  EXPERIMENTAL: {},\n  preload: {\n    enabled: !isTest,\n    // preload by default, unless in test env\n    addresses: ['/dns4/node0.preload.ipfs.io/https', '/dns4/node1.preload.ipfs.io/https', '/dns4/node2.preload.ipfs.io/https', '/dns4/node3.preload.ipfs.io/https']\n  }\n});\n\nasync function create(options) {\n  options = mergeOptions(getDefaultOptions(), options); // eslint-disable-next-line no-console\n\n  const print = options.silent ? log : console.log;\n  const apiManager = new ApiManager();\n  const {\n    api\n  } = apiManager.update({\n    init: Components.init({\n      apiManager,\n      print,\n      options\n    }),\n    dns: Components.dns(),\n    isOnline: Components.isOnline({})\n  }, async () => {\n    throw new NotInitializedError();\n  }); // eslint-disable-line require-await\n\n  if (!options.init) {\n    return api;\n  }\n\n  await api.init();\n\n  if (!options.start) {\n    return api;\n  }\n\n  return api.start();\n}\n\nmodule.exports = {\n  create,\n  crypto,\n  isIPFS,\n  Buffer,\n  CID,\n  multiaddr,\n  multibase,\n  multihash,\n  multihashing,\n  multicodec,\n  PeerId,\n  PeerInfo,\n  globSource,\n  urlSource\n};","map":null,"metadata":{},"sourceType":"script"}