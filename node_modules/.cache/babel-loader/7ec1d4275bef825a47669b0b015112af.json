{"ast":null,"code":"'use strict';\n\nconst debounce = require('just-debounce-it');\n\nconst Message = require('../types/message');\n\nconst logger = require('../utils').logger;\n\nconst {\n  wantlistSendDebounceMs\n} = require('../constants');\n\nmodule.exports = class MsgQueue {\n  constructor(selfPeerId, otherPeerId, network) {\n    this.peerId = otherPeerId;\n    this.network = network;\n    this.refcnt = 1;\n    this._entries = [];\n    this._log = logger(selfPeerId, 'msgqueue', otherPeerId.toB58String().slice(0, 8));\n    this.sendEntries = debounce(this._sendEntries.bind(this), wantlistSendDebounceMs);\n  }\n\n  addMessage(msg) {\n    if (msg.empty) {\n      return;\n    }\n\n    this.send(msg);\n  }\n\n  addEntries(entries) {\n    this._entries = this._entries.concat(entries);\n    this.sendEntries();\n  }\n\n  _sendEntries() {\n    if (!this._entries.length) {\n      return;\n    }\n\n    const msg = new Message(false);\n\n    this._entries.forEach(entry => {\n      if (entry.cancel) {\n        msg.cancel(entry.cid);\n      } else {\n        msg.addEntry(entry.cid, entry.priority);\n      }\n    });\n\n    this._entries = [];\n    this.addMessage(msg);\n  }\n\n  async send(msg) {\n    try {\n      await this.network.connectTo(this.peerId);\n    } catch (err) {\n      this._log.error('cant connect to peer %s: %s', this.peerId.toB58String(), err.message);\n\n      return;\n    }\n\n    this._log('sending message to peer %s', this.peerId.toB58String()); // Note: Don't wait for sendMessage() to complete\n\n\n    this.network.sendMessage(this.peerId, msg).catch(err => {\n      this._log.error('send error: %s', err.message);\n    });\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}