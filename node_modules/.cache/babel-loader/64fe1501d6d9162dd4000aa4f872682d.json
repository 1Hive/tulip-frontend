{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar pkgversion = require('../../../package.json').version;\n\nvar multiaddr = require('multiaddr');\n\nvar _require = require('../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nmodule.exports = function (_ref) {\n  var peerInfo = _ref.peerInfo,\n      libp2p = _ref.libp2p;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _id = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var id, addresses;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // eslint-disable-line require-await\n              id = peerInfo.id.toB58String();\n              addresses = [];\n\n              if (libp2p) {\n                // only available while the node is running\n                addresses = libp2p.transportManager.getAddrs();\n              }\n\n              return _context.abrupt(\"return\", {\n                id: id,\n                publicKey: peerInfo.id.pubKey.bytes.toString('base64'),\n                addresses: addresses.map(function (ma) {\n                  var str = ma.toString(); // some relay-style transports add our peer id to the ma for us\n                  // so don't double-add\n\n                  if (str.endsWith(\"/p2p/\".concat(id))) {\n                    return str;\n                  }\n\n                  return \"\".concat(str, \"/p2p/\").concat(id);\n                }).sort().map(function (ma) {\n                  return multiaddr(ma);\n                }),\n                agentVersion: \"js-ipfs/\".concat(pkgversion),\n                protocolVersion: '9000'\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function id() {\n      return _id.apply(this, arguments);\n    }\n\n    return id;\n  }());\n};","map":null,"metadata":{},"sourceType":"script"}