{"ast":null,"code":"import _slicedToArray from\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{utils as EthersUtils,BigNumber}from'ethers';export function bigNum(value){return BigNumber.from(value);}export function max(a,b){return a.gt(b)?a:b;}export function min(a,b){return a.lt(b)?a:b;}export function formatTokenAmount(amount,isIncoming){var decimals=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var displaySign=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;return(displaySign?isIncoming?'+':'-':'')+formatUnits(amount,{digits:decimals});}/**\r\n * Format a decimal-based number back to a normal number\r\n *\r\n * @param {string} value the number\r\n * @param {number} digits number of decimal places\r\n * @returns {BN} value converted to it's normal representation\r\n */export function parseUnits(value,digits){return EthersUtils.parseUnits(value,digits);}/**\r\n * Format an amount of units to be displayed.\r\n *\r\n * @param {BigNumber} value Amount of units to format.\r\n * @param {Number} options.digits Amount of digits on the token.\r\n * @param {Boolean} options.commas Use comma-separated groups.\r\n * @param {Boolean} options.replaceZeroBy The string to be returned when value is zero.\r\n * @param {Boolean} options.precision The precision of the resulting number\r\n * @returns {String} value formatted\r\n */export function formatUnits(value){var _ref=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},_ref$digits=_ref.digits,digits=_ref$digits===void 0?18:_ref$digits,_ref$commas=_ref.commas,commas=_ref$commas===void 0?true:_ref$commas,_ref$replaceZeroBy=_ref.replaceZeroBy,replaceZeroBy=_ref$replaceZeroBy===void 0?'0':_ref$replaceZeroBy,_ref$precision=_ref.precision,precision=_ref$precision===void 0?2:_ref$precision;if(value.lt(0)||digits<0){return'';}var valueBeforeCommas=EthersUtils.formatUnits(value.toString(),digits);// Replace 0 by an empty value\nif(valueBeforeCommas==='0.0'){return replaceZeroBy;}// EthersUtils.formatUnits() adds a decimal even when 0, this removes it.\nvalueBeforeCommas=valueBeforeCommas.replace(/\\.0$/,'');var roundedValue=round(valueBeforeCommas,precision);return commas?EthersUtils.commify(roundedValue):roundedValue;}/**\r\n * Format an amount of units to be displayed.\r\n *\r\n * @param {String} value Value to round\r\n * @param {Number} precision Rounding precision\r\n * @returns {String} Value rounded to `precision` decimals\r\n */export function round(value){var precision=arguments.length>1&&arguments[1]!==undefined?arguments[1]:2;var _value$split=value.split('.'),_value$split2=_slicedToArray(_value$split,2),whole=_value$split2[0],decimal=_value$split2[1];if(!decimal||decimal.length<=precision)return value;// Round and keep the last `precision` digits\ndecimal=Math.round(parseInt((decimal||'0').slice(0,precision+2))/100);return\"\".concat(whole).concat(decimal?\".\".concat(decimal):'');}var wordNumbers=['one','two','three','four','five','six','seven','eight','nine'];export function numberToWord(number){return wordNumbers[number];}var ordinalNumbers=['first','second','third','fourth','fifth','sixth','seventh','eighth','ninth'];export function numberToOrdinal(number){return ordinalNumbers[number-1];}export function getPercentage(value,totalValue){if(!totalValue>0)return 0;return Math.round(value*100/totalValue,2);}export function getPercentageBN(value,totalValue){var valueAsNumber=Number(EthersUtils.formatUnits(value,18));var totalValueAsNumber=Number(EthersUtils.formatUnits(totalValue,18));var PERCENT_BN=100;if(totalValue.lte(0))return 0;return valueAsNumber*PERCENT_BN/totalValueAsNumber;}export function generateRandomNumber(){var code=BigNumber.from(EthersUtils.randomBytes(32));return code.toHexString().slice(2);}/**\r\n * Normalizes a number from another range into a value between 0 and 1.\r\n *\r\n * Identical to map(value, low, high, 0, 1)\r\n * Numbers outside the range are not clamped to 0 and 1, because out-of-range\r\n * values are often intentional and useful.\r\n *\r\n * From Processing.js\r\n *\r\n * @param {Number} aNumber The incoming value to be converted\r\n * @param {Number} low Lower bound of the value's current range\r\n * @param {Number} high Upper bound of the value's current range\r\n * @returns {Number} Normalized number\r\n */export function norm(aNumber,low,high){return(aNumber-low)/(high-low);}/**\r\n * Calculates a number between two numbers at a specific increment. The\r\n * progress parameter is the amount to interpolate between the two values where\r\n * 0.0 equal to the first point, 0.1 is very near the first point, 0.5 is\r\n * half-way in between, etc. The lerp function is convenient for creating\r\n * motion along a straight path and for drawing dotted lines.\r\n *\r\n * From Processing.js\r\n *\r\n * @param {Number} progress Between 0.0 and 1.0\r\n * @param {Number} value1 First value\r\n * @param {Number} value2 Second value\r\n * @returns {Number} Increment value\r\n */export function lerp(progress,value1,value2){return(value2-value1)*progress+value1;}","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/lib/math-utils.js"],"names":["utils","EthersUtils","BigNumber","bigNum","value","from","max","a","b","gt","min","lt","formatTokenAmount","amount","isIncoming","decimals","displaySign","formatUnits","digits","parseUnits","commas","replaceZeroBy","precision","valueBeforeCommas","toString","replace","roundedValue","round","commify","split","whole","decimal","length","Math","parseInt","slice","wordNumbers","numberToWord","number","ordinalNumbers","numberToOrdinal","getPercentage","totalValue","getPercentageBN","valueAsNumber","Number","totalValueAsNumber","PERCENT_BN","lte","generateRandomNumber","code","randomBytes","toHexString","norm","aNumber","low","high","lerp","progress","value1","value2"],"mappings":"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","sourcesContent":["import { utils as EthersUtils, BigNumber } from 'ethers'\r\n\r\nexport function bigNum(value) {\r\n  return BigNumber.from(value)\r\n}\r\n\r\nexport function max(a, b) {\r\n  return a.gt(b) ? a : b\r\n}\r\n\r\nexport function min(a, b) {\r\n  return a.lt(b) ? a : b\r\n}\r\n\r\nexport function formatTokenAmount(\r\n  amount,\r\n  isIncoming,\r\n  decimals = 0,\r\n  displaySign = false\r\n) {\r\n  return (\r\n    (displaySign ? (isIncoming ? '+' : '-') : '') +\r\n    formatUnits(amount, { digits: decimals })\r\n  )\r\n}\r\n\r\n/**\r\n * Format a decimal-based number back to a normal number\r\n *\r\n * @param {string} value the number\r\n * @param {number} digits number of decimal places\r\n * @returns {BN} value converted to it's normal representation\r\n */\r\nexport function parseUnits(value, digits) {\r\n  return EthersUtils.parseUnits(value, digits)\r\n}\r\n\r\n/**\r\n * Format an amount of units to be displayed.\r\n *\r\n * @param {BigNumber} value Amount of units to format.\r\n * @param {Number} options.digits Amount of digits on the token.\r\n * @param {Boolean} options.commas Use comma-separated groups.\r\n * @param {Boolean} options.replaceZeroBy The string to be returned when value is zero.\r\n * @param {Boolean} options.precision The precision of the resulting number\r\n * @returns {String} value formatted\r\n */\r\nexport function formatUnits(\r\n  value,\r\n  { digits = 18, commas = true, replaceZeroBy = '0', precision = 2 } = {}\r\n) {\r\n  if (value.lt(0) || digits < 0) {\r\n    return ''\r\n  }\r\n\r\n  let valueBeforeCommas = EthersUtils.formatUnits(value.toString(), digits)\r\n\r\n  // Replace 0 by an empty value\r\n  if (valueBeforeCommas === '0.0') {\r\n    return replaceZeroBy\r\n  }\r\n\r\n  // EthersUtils.formatUnits() adds a decimal even when 0, this removes it.\r\n  valueBeforeCommas = valueBeforeCommas.replace(/\\.0$/, '')\r\n\r\n  const roundedValue = round(valueBeforeCommas, precision)\r\n\r\n  return commas ? EthersUtils.commify(roundedValue) : roundedValue\r\n}\r\n\r\n/**\r\n * Format an amount of units to be displayed.\r\n *\r\n * @param {String} value Value to round\r\n * @param {Number} precision Rounding precision\r\n * @returns {String} Value rounded to `precision` decimals\r\n */\r\nexport function round(value, precision = 2) {\r\n  let [whole, decimal] = value.split('.')\r\n\r\n  if (!decimal || decimal.length <= precision) return value\r\n\r\n  // Round and keep the last `precision` digits\r\n  decimal = Math.round(parseInt((decimal || '0').slice(0, precision + 2)) / 100)\r\n\r\n  return `${whole}${decimal ? `.${decimal}` : ''}`\r\n}\r\n\r\nconst wordNumbers = [\r\n  'one',\r\n  'two',\r\n  'three',\r\n  'four',\r\n  'five',\r\n  'six',\r\n  'seven',\r\n  'eight',\r\n  'nine',\r\n]\r\n\r\nexport function numberToWord(number) {\r\n  return wordNumbers[number]\r\n}\r\n\r\nconst ordinalNumbers = [\r\n  'first',\r\n  'second',\r\n  'third',\r\n  'fourth',\r\n  'fifth',\r\n  'sixth',\r\n  'seventh',\r\n  'eighth',\r\n  'ninth',\r\n]\r\n\r\nexport function numberToOrdinal(number) {\r\n  return ordinalNumbers[number - 1]\r\n}\r\n\r\nexport function getPercentage(value, totalValue) {\r\n  if (!totalValue > 0) return 0\r\n\r\n  return Math.round((value * 100) / totalValue, 2)\r\n}\r\n\r\nexport function getPercentageBN(value, totalValue) {\r\n  const valueAsNumber = Number(EthersUtils.formatUnits(value, 18))\r\n  const totalValueAsNumber = Number(EthersUtils.formatUnits(totalValue, 18))\r\n\r\n  const PERCENT_BN = 100\r\n\r\n  if (totalValue.lte(0)) return 0\r\n\r\n  return (valueAsNumber * PERCENT_BN) / totalValueAsNumber\r\n}\r\n\r\nexport function generateRandomNumber() {\r\n  const code = BigNumber.from(EthersUtils.randomBytes(32))\r\n  return code.toHexString().slice(2)\r\n}\r\n\r\n/**\r\n * Normalizes a number from another range into a value between 0 and 1.\r\n *\r\n * Identical to map(value, low, high, 0, 1)\r\n * Numbers outside the range are not clamped to 0 and 1, because out-of-range\r\n * values are often intentional and useful.\r\n *\r\n * From Processing.js\r\n *\r\n * @param {Number} aNumber The incoming value to be converted\r\n * @param {Number} low Lower bound of the value's current range\r\n * @param {Number} high Upper bound of the value's current range\r\n * @returns {Number} Normalized number\r\n */\r\nexport function norm(aNumber, low, high) {\r\n  return (aNumber - low) / (high - low)\r\n}\r\n\r\n/**\r\n * Calculates a number between two numbers at a specific increment. The\r\n * progress parameter is the amount to interpolate between the two values where\r\n * 0.0 equal to the first point, 0.1 is very near the first point, 0.5 is\r\n * half-way in between, etc. The lerp function is convenient for creating\r\n * motion along a straight path and for drawing dotted lines.\r\n *\r\n * From Processing.js\r\n *\r\n * @param {Number} progress Between 0.0 and 1.0\r\n * @param {Number} value1 First value\r\n * @param {Number} value2 Second value\r\n * @returns {Number} Increment value\r\n */\r\nexport function lerp(progress, value1, value2) {\r\n  return (value2 - value1) * progress + value1\r\n}\r\n"]},"metadata":{},"sourceType":"module"}