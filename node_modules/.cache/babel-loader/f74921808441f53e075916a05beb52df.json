{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useReducer, useRef } from 'react';\nimport { noop } from 'lodash';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { useToast } from 'state/hooks';\nconst initialState = {\n  approvalState: 'idle',\n  approvalReceipt: null,\n  approvalError: null,\n  confirmState: 'idle',\n  confirmReceipt: null,\n  confirmError: null\n};\n\nconst reducer = (state, actions) => {\n  switch (actions.type) {\n    case 'requires_approval':\n      return { ...state,\n        approvalState: 'success'\n      };\n\n    case 'approve_sending':\n      return { ...state,\n        approvalState: 'loading'\n      };\n\n    case 'approve_receipt':\n      return { ...state,\n        approvalState: 'success',\n        approvalReceipt: actions.payload\n      };\n\n    case 'approve_error':\n      return { ...state,\n        approvalState: 'fail',\n        approvalError: actions.payload\n      };\n\n    case 'confirm_sending':\n      return { ...state,\n        confirmState: 'loading'\n      };\n\n    case 'confirm_receipt':\n      return { ...state,\n        confirmState: 'success',\n        confirmReceipt: actions.payload\n      };\n\n    case 'confirm_error':\n      return { ...state,\n        confirmState: 'fail',\n        confirmError: actions.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst useApproveConfirmTransaction = ({\n  onApprove,\n  onConfirm,\n  onRequiresApproval,\n  onSuccess = noop\n}) => {\n  _s();\n\n  const {\n    account\n  } = useWallet();\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const handlePreApprove = useRef(onRequiresApproval);\n  const {\n    toastError\n  } = useToast(); // Check if approval is necessary, re-check if account changes\n\n  useEffect(() => {\n    if (account && handlePreApprove.current) {\n      handlePreApprove.current().then(result => {\n        if (result) {\n          dispatch({\n            type: 'requires_approval'\n          });\n        }\n      });\n    }\n  }, [account, handlePreApprove, dispatch]);\n  return {\n    isApproving: state.approvalState === 'loading',\n    isApproved: state.approvalState === 'success',\n    isConfirming: state.confirmState === 'loading',\n    isConfirmed: state.confirmState === 'success',\n    approvalReceipt: state.approvalReceipt,\n    approvalError: state.approvalError,\n    confirmReceipt: state.confirmReceipt,\n    confirmError: state.confirmError,\n    handleApprove: () => {\n      onApprove().on('sending', () => {\n        dispatch({\n          type: 'approve_sending'\n        });\n      }).on('receipt', payload => {\n        dispatch({\n          type: 'approve_receipt',\n          payload\n        });\n      }).on('error', error => {\n        dispatch({\n          type: 'approve_error',\n          payload: error\n        });\n        console.error('An error occurred approving transaction:', error);\n        toastError('An error occurred approving transaction');\n      });\n    },\n    handleConfirm: () => {\n      onConfirm().on('sending', () => {\n        dispatch({\n          type: 'confirm_sending'\n        });\n      }).on('receipt', payload => {\n        dispatch({\n          type: 'confirm_receipt',\n          payload\n        });\n        onSuccess(state);\n      }).on('error', error => {\n        dispatch({\n          type: 'confirm_error',\n          payload: error\n        });\n        console.error('An error occurred confirming transaction:', error);\n        toastError('An error occurred confirming transaction');\n      });\n    }\n  };\n};\n\n_s(useApproveConfirmTransaction, \"Y9FiwL9Dsidai9B0J0GqdygbT1k=\", false, function () {\n  return [useWallet, useToast];\n});\n\nexport default useApproveConfirmTransaction;","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/hooks/useApproveConfirmTransaction.ts"],"names":["useEffect","useReducer","useRef","noop","useWallet","useToast","initialState","approvalState","approvalReceipt","approvalError","confirmState","confirmReceipt","confirmError","reducer","state","actions","type","payload","useApproveConfirmTransaction","onApprove","onConfirm","onRequiresApproval","onSuccess","account","dispatch","handlePreApprove","toastError","current","then","result","isApproving","isApproved","isConfirming","isConfirmed","handleApprove","on","error","console","handleConfirm"],"mappings":"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","sourcesContent":["import { useEffect, useReducer, useRef } from 'react'\nimport { noop } from 'lodash'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useToast } from 'state/hooks'\n\ntype Web3Payload = Record<string, unknown> | null\n\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\n\ntype Action =\n  | { type: 'requires_approval' }\n  | { type: 'approve_sending' }\n  | { type: 'approve_receipt'; payload: Web3Payload }\n  | { type: 'approve_error'; payload: Web3Payload }\n  | { type: 'confirm_sending' }\n  | { type: 'confirm_receipt'; payload: Web3Payload }\n  | { type: 'confirm_error'; payload: Web3Payload }\n\ninterface State {\n  approvalState: LoadingState\n  approvalReceipt: Web3Payload\n  approvalError: Web3Payload\n  confirmState: LoadingState\n  confirmReceipt: Web3Payload\n  confirmError: Web3Payload\n}\n\nconst initialState: State = {\n  approvalState: 'idle',\n  approvalReceipt: null,\n  approvalError: null,\n  confirmState: 'idle',\n  confirmReceipt: null,\n  confirmError: null,\n}\n\nconst reducer = (state: State, actions: Action): State => {\n  switch (actions.type) {\n    case 'requires_approval':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_sending':\n      return {\n        ...state,\n        approvalState: 'loading',\n      }\n    case 'approve_receipt':\n      return {\n        ...state,\n        approvalState: 'success',\n        approvalReceipt: actions.payload,\n      }\n    case 'approve_error':\n      return {\n        ...state,\n        approvalState: 'fail',\n        approvalError: actions.payload,\n      }\n    case 'confirm_sending':\n      return {\n        ...state,\n        confirmState: 'loading',\n      }\n    case 'confirm_receipt':\n      return {\n        ...state,\n        confirmState: 'success',\n        confirmReceipt: actions.payload,\n      }\n    case 'confirm_error':\n      return {\n        ...state,\n        confirmState: 'fail',\n        confirmError: actions.payload,\n      }\n    default:\n      return state\n  }\n}\n\ntype ContractHandler = () => any\n\ninterface ApproveConfirmTransaction {\n  onApprove: ContractHandler\n  onConfirm: ContractHandler\n  onRequiresApproval?: () => Promise<boolean>\n  onSuccess: (state: State) => void\n}\n\nconst useApproveConfirmTransaction = ({\n  onApprove,\n  onConfirm,\n  onRequiresApproval,\n  onSuccess = noop,\n}: ApproveConfirmTransaction) => {\n  const { account } = useWallet()\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const handlePreApprove = useRef(onRequiresApproval)\n  const { toastError } = useToast()\n\n  // Check if approval is necessary, re-check if account changes\n  useEffect(() => {\n    if (account && handlePreApprove.current) {\n      handlePreApprove.current().then((result) => {\n        if (result) {\n          dispatch({ type: 'requires_approval' })\n        }\n      })\n    }\n  }, [account, handlePreApprove, dispatch])\n\n  return {\n    isApproving: state.approvalState === 'loading',\n    isApproved: state.approvalState === 'success',\n    isConfirming: state.confirmState === 'loading',\n    isConfirmed: state.confirmState === 'success',\n    approvalReceipt: state.approvalReceipt,\n    approvalError: state.approvalError,\n    confirmReceipt: state.confirmReceipt,\n    confirmError: state.confirmError,\n    handleApprove: () => {\n      onApprove()\n        .on('sending', () => {\n          dispatch({ type: 'approve_sending' })\n        })\n        .on('receipt', (payload: Web3Payload) => {\n          dispatch({ type: 'approve_receipt', payload })\n        })\n        .on('error', (error: Web3Payload) => {\n          dispatch({ type: 'approve_error', payload: error })\n          console.error('An error occurred approving transaction:', error)\n          toastError('An error occurred approving transaction')\n        })\n    },\n    handleConfirm: () => {\n      onConfirm()\n        .on('sending', () => {\n          dispatch({ type: 'confirm_sending' })\n        })\n        .on('receipt', (payload: Web3Payload) => {\n          dispatch({ type: 'confirm_receipt', payload })\n          onSuccess(state)\n        })\n        .on('error', (error: Web3Payload) => {\n          dispatch({ type: 'confirm_error', payload: error })\n          console.error('An error occurred confirming transaction:', error)\n          toastError('An error occurred confirming transaction')\n        })\n    },\n  }\n}\n\nexport default useApproveConfirmTransaction\n"]},"metadata":{},"sourceType":"module"}