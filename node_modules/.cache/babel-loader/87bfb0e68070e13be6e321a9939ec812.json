{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar varint = require('varint');\n\nvar BufferList = require('bl/BufferList');\n\nvar POOL_SIZE = 10 * 1024;\n\nvar Encoder = /*#__PURE__*/function () {\n  function Encoder() {\n    _classCallCheck(this, Encoder);\n\n    this._pool = Buffer.allocUnsafe(POOL_SIZE);\n    this._poolOffset = 0;\n  }\n  /**\n   * Encodes the given message and returns it and its header\n   * @param {*} msg The message object to encode\n   * @returns {Buffer|Buffer[]}\n   */\n\n\n  _createClass(Encoder, [{\n    key: \"write\",\n    value: function write(msg) {\n      var pool = this._pool;\n      var offset = this._poolOffset;\n      varint.encode(msg.id << 3 | msg.type, pool, offset);\n      offset += varint.encode.bytes;\n      varint.encode(msg.data ? msg.data.length : 0, pool, offset);\n      offset += varint.encode.bytes;\n      var header = pool.slice(this._poolOffset, offset);\n\n      if (POOL_SIZE - offset < 100) {\n        this._pool = Buffer.allocUnsafe(POOL_SIZE);\n        this._poolOffset = 0;\n      } else {\n        this._poolOffset = offset;\n      }\n\n      if (!msg.data) return header;\n      return [header, msg.data];\n    }\n  }]);\n\n  return Encoder;\n}();\n\nvar encoder = new Encoder(); // Encode one or more messages and yield a BufferList of encoded messages\n\nmodule.exports = function (source) {\n  return function () {\n    var _encode = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, msg;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 2;\n              _iterator = _asyncIterator(source);\n\n            case 4:\n              _context.next = 6;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 6:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 10;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 10:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 23;\n                break;\n              }\n\n              msg = _value;\n\n              if (!Array.isArray(msg)) {\n                _context.next = 18;\n                break;\n              }\n\n              _context.next = 16;\n              return new BufferList(msg.map(function (m) {\n                return encoder.write(m);\n              }));\n\n            case 16:\n              _context.next = 20;\n              break;\n\n            case 18:\n              _context.next = 20;\n              return new BufferList(encoder.write(msg));\n\n            case 20:\n              _iteratorNormalCompletion = true;\n              _context.next = 4;\n              break;\n\n            case 23:\n              _context.next = 29;\n              break;\n\n            case 25:\n              _context.prev = 25;\n              _context.t0 = _context[\"catch\"](2);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 29:\n              _context.prev = 29;\n              _context.prev = 30;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 34;\n                break;\n              }\n\n              _context.next = 34;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 34:\n              _context.prev = 34;\n\n              if (!_didIteratorError) {\n                _context.next = 37;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 37:\n              return _context.finish(34);\n\n            case 38:\n              return _context.finish(29);\n\n            case 39:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 25, 29, 39], [30,, 34, 38]]);\n    }));\n\n    function encode() {\n      return _encode.apply(this, arguments);\n    }\n\n    return encode;\n  }()();\n};","map":null,"metadata":{},"sourceType":"script"}