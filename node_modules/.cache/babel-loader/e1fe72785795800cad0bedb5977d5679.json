{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IframeCache = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _client = require(\"./client.js\");\n\nvar HIDE_IFRAME_STYLE = 'position: fixed; width:0; height:0; border:0; border:none !important';\nvar CACHE_IFRAME_URL = 'https://cache.3box.io';\n/**\n *  IframeCache provides an interface for loading an iframe cache and for returning\n *  configured storage interfaces for ipfs and orbitdb. All data is shared over\n *  and rpc layer through postmessage, this acts like an rpc client.\n */\n\nvar IframeCache = /*#__PURE__*/function () {\n  /**\n    *  Creates IframeCache. Create and loads iframe. Should be instantiated\n    *  on page load.\n    *\n    * @param     {String}    iframeUrl   iframe url, defaults to cache.3box.io cache service\n    */\n  function IframeCache(iframeUrl) {\n    var _this = this;\n\n    (0, _classCallCheck2[\"default\"])(this, IframeCache);\n\n    if (typeof window === 'undefined' || typeof document === 'undefined') {\n      throw new Error('Shared iframe cache not supported in this enviroment');\n    }\n\n    this.iframe = document.createElement('iframe');\n    this.iframe.src = iframeUrl || CACHE_IFRAME_URL;\n    this.iframe.style = HIDE_IFRAME_STYLE;\n    this.iframe.frameBorder = 0;\n    this.iframeLoadedPromise = new Promise(function (resolve, reject) {\n      _this.iframe.onload = function () {\n        resolve();\n      };\n    });\n    document.body.appendChild(this.iframe);\n  }\n\n  (0, _createClass2[\"default\"])(IframeCache, [{\n    key: \"getOrbitStorageProxyFactory\",\n    value: function getOrbitStorageProxyFactory() {\n      var _this2 = this; // const postMessage = this.iframe.contentWindow.postMessage.bind(this.iframe.contentWindow)\n\n\n      return function (path) {\n        return (0, _client.createOrbitStorageProxy)(path, {\n          postMessage: _this2.postMessage\n        });\n      };\n    }\n  }, {\n    key: \"getIpfsStorageProxy\",\n    value: function getIpfsStorageProxy() {\n      var _this3 = this;\n\n      return (0, _client.createIpfsStorageProxy)({\n        postMessage: function postMessage(data, origin) {\n          return _this3.postMessage(data, '*');\n        }\n      });\n    }\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee() {\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.iframeLoadedPromise;\n\n              case 2:\n                this.postMessage = this.iframe.contentWindow.postMessage.bind(this.iframe.contentWindow);\n                return _context.abrupt(\"return\", (0, _client.cacheSupported)({\n                  postMessage: this.postMessage\n                }));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function connect() {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n  }]);\n  return IframeCache;\n}();\n\nexports.IframeCache = IframeCache;","map":null,"metadata":{},"sourceType":"script"}