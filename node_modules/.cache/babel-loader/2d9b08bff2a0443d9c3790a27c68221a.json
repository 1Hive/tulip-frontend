{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { useDispatch } from 'react-redux';\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions';\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers';\nimport { useMasterchef, useSousChef } from './useContract';\nexport const useHarvest = farmPid => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const masterChefContract = useMasterchef();\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account);\n    dispatch(fetchFarmUserDataAsync(account));\n    return txHash;\n  }, [account, dispatch, farmPid, masterChefContract]);\n  return {\n    onReward: handleHarvest\n  };\n};\n\n_s(useHarvest, \"UT4quCg5r96YBGnHn7yg5VONUdg=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef];\n});\n\nexport const useAllHarvest = farmPids => {\n  _s2();\n\n  const {\n    account\n  } = useWallet();\n  const masterChefContract = useMasterchef();\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)];\n    }, []);\n    return Promise.all(harvestPromises);\n  }, [account, farmPids, masterChefContract]);\n  return {\n    onReward: handleHarvest\n  };\n};\n\n_s2(useAllHarvest, \"MxLQ/Cd4zmOMdglbbhX6+hOW2K0=\", false, function () {\n  return [useWallet, useMasterchef];\n});\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  _s3();\n\n  const dispatch = useDispatch();\n  const {\n    account\n  } = useWallet();\n  const sousChefContract = useSousChef(sousId);\n  const masterChefContract = useMasterchef();\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account);\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account);\n    } else {\n      await soushHarvest(sousChefContract, account);\n    }\n\n    dispatch(updateUserPendingReward(sousId, account));\n    dispatch(updateUserBalance(sousId, account));\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId]);\n  return {\n    onReward: handleHarvest\n  };\n};\n\n_s3(useSousHarvest, \"AJ+2w0K9U8GdFK9HcNTRmaQ3p6g=\", false, function () {\n  return [useDispatch, useWallet, useSousChef, useMasterchef];\n});","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/hooks/useHarvest.ts"],"names":["useCallback","useWallet","useDispatch","fetchFarmUserDataAsync","updateUserBalance","updateUserPendingReward","soushHarvest","soushHarvestBnb","harvest","useMasterchef","useSousChef","useHarvest","farmPid","dispatch","account","masterChefContract","handleHarvest","txHash","onReward","useAllHarvest","farmPids","harvestPromises","reduce","accum","pid","Promise","all","useSousHarvest","sousId","isUsingBnb","sousChefContract"],"mappings":"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","sourcesContent":["import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    dispatch(fetchFarmUserDataAsync(account))\n    return txHash\n  }, [account, dispatch, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useAllHarvest = (farmPids: number[]) => {\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const harvestPromises = farmPids.reduce((accum, pid) => {\n      return [...accum, harvest(masterChefContract, pid, account)]\n    }, [])\n\n    return Promise.all(harvestPromises)\n  }, [account, farmPids, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n"]},"metadata":{},"sourceType":"module"}