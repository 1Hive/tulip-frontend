{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar distance = require('xor-distance');\n\nvar utils = require('../utils');\n\nvar pMap = require('p-map');\n/**\n * Maintains a list of peerIds sorted by distance from a DHT key.\n */\n\n\nvar PeerDistanceList = /*#__PURE__*/function () {\n  /**\n   * Creates a new PeerDistanceList.\n   *\n   * @param {Buffer} originDhtKey - the DHT key from which distance is calculated\n   * @param {number} capacity - the maximum size of the list\n   */\n  function PeerDistanceList(originDhtKey, capacity) {\n    _classCallCheck(this, PeerDistanceList);\n\n    this.originDhtKey = originDhtKey;\n    this.capacity = capacity;\n    this.peerDistances = [];\n  }\n  /**\n   * The length of the list\n   */\n\n\n  _createClass(PeerDistanceList, [{\n    key: \"length\",\n    get: function get() {\n      return this.peerDistances.length;\n    }\n    /**\n     * The peerIds in the list, in order of distance from the origin key\n     */\n\n  }, {\n    key: \"peers\",\n    get: function get() {\n      return this.peerDistances.map(function (pd) {\n        return pd.peerId;\n      });\n    }\n    /**\n     * Add a peerId to the list.\n     *\n     * @param {PeerId} peerId\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"add\",\n    value: function () {\n      var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peerId) {\n        var dhtKey, el;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.peerDistances.find(function (pd) {\n                  return pd.peerId.id.equals(peerId.id);\n                })) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                _context.next = 4;\n                return utils.convertPeerId(peerId);\n\n              case 4:\n                dhtKey = _context.sent;\n                el = {\n                  peerId: peerId,\n                  distance: distance(this.originDhtKey, dhtKey)\n                };\n                this.peerDistances.push(el);\n                this.peerDistances.sort(function (a, b) {\n                  return distance.compare(a.distance, b.distance);\n                });\n                this.peerDistances = this.peerDistances.slice(0, this.capacity);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function add(_x) {\n        return _add.apply(this, arguments);\n      }\n\n      return add;\n    }()\n    /**\n     * Indicates whether any of the peerIds passed as a parameter are closer\n     * to the origin key than the furthest peerId in the PeerDistanceList.\n     *\n     * @param {Array<PeerId>} peerIds\n     * @returns {Boolean}\n     */\n\n  }, {\n    key: \"anyCloser\",\n    value: function () {\n      var _anyCloser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(peerIds) {\n        var dhtKeys, furthestDistance, _iterator, _step, dhtKey, keyDistance;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (peerIds.length) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", false);\n\n              case 2:\n                if (this.length) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", true);\n\n              case 4:\n                _context2.next = 6;\n                return pMap(peerIds, function (peerId) {\n                  return utils.convertPeerId(peerId);\n                });\n\n              case 6:\n                dhtKeys = _context2.sent;\n                furthestDistance = this.peerDistances[this.peerDistances.length - 1].distance;\n                _iterator = _createForOfIteratorHelper(dhtKeys);\n                _context2.prev = 9;\n\n                _iterator.s();\n\n              case 11:\n                if ((_step = _iterator.n()).done) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                dhtKey = _step.value;\n                keyDistance = distance(this.originDhtKey, dhtKey);\n\n                if (!(distance.compare(keyDistance, furthestDistance) < 0)) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", true);\n\n              case 16:\n                _context2.next = 11;\n                break;\n\n              case 18:\n                _context2.next = 23;\n                break;\n\n              case 20:\n                _context2.prev = 20;\n                _context2.t0 = _context2[\"catch\"](9);\n\n                _iterator.e(_context2.t0);\n\n              case 23:\n                _context2.prev = 23;\n\n                _iterator.f();\n\n                return _context2.finish(23);\n\n              case 26:\n                return _context2.abrupt(\"return\", false);\n\n              case 27:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[9, 20, 23, 26]]);\n      }));\n\n      function anyCloser(_x2) {\n        return _anyCloser.apply(this, arguments);\n      }\n\n      return anyCloser;\n    }()\n  }]);\n\n  return PeerDistanceList;\n}();\n\nmodule.exports = PeerDistanceList;","map":null,"metadata":{},"sourceType":"script"}