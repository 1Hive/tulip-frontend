{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar crypto = require('./crypto');\n\nvar lp = require('it-length-prefixed');\n\nvar int32BEEncode = lp.int32BEEncode;\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:secio');\nlog.error = debug('libp2p:secio:error'); // step 1. Propose\n// -- propose cipher suite + send pubkeys + nonce\n\nmodule.exports = /*#__PURE__*/function () {\n  var _propose = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(state, wrapped) {\n    var prop, msg;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            log('1. propose - start');\n            prop = crypto.createProposal(state);\n            log('1. propose - writing proposal', prop);\n            _context.next = 5;\n            return wrapped.write(lp.encode.single(prop, {\n              lengthEncoder: int32BEEncode\n            }));\n\n          case 5:\n            log('1. propose - reading proposal');\n            _context.next = 8;\n            return wrapped.readLP();\n\n          case 8:\n            msg = _context.sent.slice();\n            log('1. propose - read proposal', msg);\n            _context.next = 12;\n            return crypto.identify(state, msg);\n\n          case 12:\n            _context.next = 14;\n            return crypto.selectProtocols(state);\n\n          case 14:\n            log('1. propose - finish');\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  function propose(_x, _x2) {\n    return _propose.apply(this, arguments);\n  }\n\n  return propose;\n}();","map":null,"metadata":{},"sourceType":"script"}