{"ast":null,"code":"const fetch = require('node-fetch');\n\nconst pageResults = require('graph-results-pager');\n\nconst {\n  request,\n  gql\n} = require('graphql-request');\n\nconst {\n  ERC20Abi,\n  coingeckoAPIEndpoints,\n  graphAPIEndpoints,\n  tokenLists,\n  rpcEndpoints\n} = require('./../constants');\n\nconst {\n  generateContractFunctionList,\n  convertToNumber\n} = require('./../utils');\n\nmodule.exports = {\n  //fetches prices of xdai token ids from coingecko\n  async coingeckoTokenPrices({\n    token_ids = undefined\n  } = {}) {\n    const params = new URLSearchParams({\n      vs_currencies: 'usd',\n      contract_addresses: token_ids\n    });\n    let data = await fetch(coingeckoAPIEndpoints.prices + params, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      return response.json();\n    });\n    return data;\n  },\n\n  //fetches the honeyswap token list\n  async tokens() {\n    let data = await fetch(tokenLists.honeyswap, {\n      methods: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      return response.json();\n    });\n    return data.tokens;\n  },\n\n  //gets a list of all non zero token balances in an wallet address\n  async tokenBalances({\n    user_address = undefined\n  } = {}) {\n    if (!user_address) {\n      throw new Error(\"tulip-data: User address undefined\");\n    }\n\n    const tokens = await module.exports.tokens();\n    const batch = generateContractFunctionList({\n      tokens,\n      user_address: user_address\n    }); // query block number\n    // const batch = generateContractFunctionList({ tokens, blockNumber: 11633038 });\n    //get data from honeyswap\n\n    const properties = ['id', 'symbol', 'derivedETH']; //TODO: only fetch needed data\n\n    /*\n    const result = await request(graphAPIEndpoints.honeyswap_v2,\n        gql`{\n                tokens(where: {id_in: [\"${tokens[0].address.toLowerCase()}\",\"${tokens[1].address.toLowerCase()}\" ]}) {\n                  id,\n                  symbol,\n                  derivedETH\n                }\n            }`\n    );\n     */\n    //proper encoding of _in query\n\n    const id_query = '\\[' + '\\\\\"' + tokens[0].address.toLowerCase() + '\\\\\"' + ',' + '\\\\\"' + tokens[1].address.toLowerCase() + '\\\\\"' + '\\]';\n    const tokenData = await pageResults({\n      api: graphAPIEndpoints.honeyswap_v2,\n      query: {\n        entity: 'tokens',\n        selection: {\n          where: {//id_in: [`\\\\\"${tokens[0].address.toLowerCase()}\\\\\"`, `\\\\\"${tokens[0].address.toLowerCase()}\\\\\"`]\n            //id_in: id_query\n            //id_in: `\\\\[\\\\\"${tokens[0].address.toLowerCase()}\\\\\", \\\\\"${tokens[1].address.toLowerCase()}\\\\\"\\\\]`\n          },\n          block: undefined //block ? { number: block } : timestamp ? { number: await timestampToBlock(timestamp) } : undefined,\n\n        },\n        properties: properties\n      }\n    }).then(results => {\n      return results;\n    }).catch(err => console.log(err));\n    const tokensById = {};\n    tokenData.forEach(entry => {\n      tokensById[entry.id.toLowerCase()] = {\n        id: entry.id.toLowerCase(),\n        ...entry\n      };\n    }); //console.log(tokensById);\n\n    const results = [];\n    const {\n      response\n    } = await batch.execute();\n    let tokenIds = [];\n    response.forEach(({\n      _hex\n    }, index) => {\n      //const { name, decimals, symbol } = tokens[index];\n      const {\n        address,\n        decimals\n      } = tokens[index];\n\n      if (_hex !== '0x00') {\n        const balance = `${convertToNumber(_hex, decimals)}`;\n        const token = tokensById[address.toLowerCase()];\n        results.push({\n          balance: balance,\n          priceUSD: token.derivedETH,\n          valueUSD: token.derivedETH * balance,\n          ...tokens[index]\n        });\n      }\n    }); //get prices for the tokens on coingecko and add the values to the result\n\n    /*\n    const prices = await module.exports.tokenPrices({token_ids: tokenIds});\n    results.forEach( token => {\n        const price = prices[token.address];\n        if(price) {\n            token.priceUSD = price.usd;\n            //token.currency = 'usd';\n            token.valueUSD = token.balance * price.usd;\n        }\n    });*/\n\n    return tokenBalances.callback(results);\n  },\n\n  //TODO: add more exchanges/only works with honeyswap subgraph and tokenlist for now\n  async poolBalances({\n    block = undefined,\n    timestamp = undefined,\n    user_address = undefined\n  } = {}) {\n    if (!user_address) {\n      throw new Error(\"tulip-data: User address undefined\");\n    }\n\n    const properties = ['id', 'liquidityPositions { liquidityTokenBalance, pair { token0 { id, derivedETH }, token1 { id, derivedETH }, reserve0, reserve1, reserveUSD, totalSupply} }'];\n    const poolData = await pageResults({\n      api: graphAPIEndpoints.honeyswap_v2,\n      query: {\n        entity: 'users',\n        selection: {\n          where: {\n            id: `\\\\\"${user_address.toLowerCase()}\\\\\"`\n          },\n          block: block ? {\n            number: block\n          } : timestamp ? {\n            number: await timestampToBlock(timestamp)\n          } : undefined\n        },\n        properties: properties\n      }\n    }).then(results => {\n      return results;\n    }).catch(err => console.log(err));\n    const tokens = await module.exports.tokens();\n    let tokensById = [];\n    tokens.forEach(token => {\n      tokensById[token.address.toLowerCase()] = token;\n    });\n    let results = [];\n\n    if (poolData && poolData[0] && poolData[0].liquidityPositions) {\n      const pairs = poolData[0].liquidityPositions.forEach(position => {\n        let token0 = tokensById[position.pair.token0.id];\n\n        if (!token0) {\n          throw new Error(\"honeycomb-data: Token0 address not found:\".position.pair.token0.id);\n        }\n\n        let token1 = tokensById[position.pair.token1.id];\n\n        if (!token1) {\n          throw new Error(\"honeycomb-data: Token1 address not found:\".position.pair.token1.id);\n        }\n        /*\n            get liquidity value of single token\n             getLiquidityValue()\n            from: https://github.com/Uniswap/uniswap-v2-sdk/blob/main/src/entities/pair.ts\n            JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n             let liquidityValueUSD = position.liquidityTokenBalance * position.pair.reserve0 / position.pair.totalSupply;\n            liquidityValueUSD = liquidityValueUSD * position.pair.token0.derivedETH * 2;\n        */\n\n\n        token0.balance = position.liquidityTokenBalance * position.pair.reserve0 / position.pair.totalSupply;\n        token1.balance = position.liquidityTokenBalance * position.pair.reserve1 / position.pair.totalSupply; //in this case eth == dai == usd\n\n        token0.priceUSD = position.pair.token0.derivedETH;\n        token1.priceUSD = position.pair.token1.derivedETH;\n        token0.valueUSD = token0.balance * position.pair.token0.derivedETH;\n        token1.valueUSD = token1.balance * position.pair.token1.derivedETH;\n        /* get usd value of owned pool tokens */\n\n        const liquidityValueUSD = position.pair.reserveUSD / position.pair.totalSupply * position.liquidityTokenBalance;\n        if (position.liquidityTokenBalance <= 0) return;\n        results.push({\n          tokens: [token0, token1],\n          balance: position.liquidityTokenBalance,\n          valueUSD: liquidityValueUSD\n        });\n      });\n      return poolBalances.callback(results);\n    }\n  }\n\n};\nconst tokenBalance = {\n  /*\n  properties: [\n      'balance',\n      'name',\n      'address',\n      'symbol',\n      'logoURI',\n      'priceUsd',\n      'valueUsd'\n  ],\n   */\n  callback(entry) {\n    return {\n      balance: Number(entry.balance),\n      name: entry.name,\n      address: entry.address,\n      symbol: entry.symbol,\n      logoURI: entry.logoURI,\n      priceUSD: Number(entry.priceUSD),\n      valueUSD: Number(entry.valueUSD)\n    };\n  }\n\n};\nconst tokenBalances = {\n  callback(results) {\n    return results.map(entry => tokenBalance.callback(entry));\n  }\n\n};\nconst poolBalances = {\n  callback(results) {\n    results.map(entry => {\n      let result = {\n        balance: Number(entry.balance),\n        valueUSD: Number(entry.valueUSD)\n      };\n      result.tokens = entry.tokens.map(token => tokenBalance.callback(token));\n    });\n    return results;\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}