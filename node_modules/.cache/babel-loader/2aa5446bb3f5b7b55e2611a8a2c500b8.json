{"ast":null,"code":"'use strict';\n\nconst dirBuilder = require('./dir');\n\nconst fileBuilder = require('./file');\n\nasync function* dagBuilder(source, block, options) {\n  for await (const entry of source) {\n    if (entry.path) {\n      if (entry.path.substring(0, 2) === './') {\n        options.wrapWithDirectory = true;\n      }\n\n      entry.path = entry.path.split('/').filter(path => path && path !== '.').join('/');\n    }\n\n    if (entry.content) {\n      let source = entry.content; // wrap in iterator if it is array-like or not an iterator\n\n      if (!source[Symbol.asyncIterator] && !source[Symbol.iterator] || source.length !== undefined) {\n        source = {\n          [Symbol.iterator]: function* () {\n            yield entry.content;\n          }\n        };\n      }\n\n      let chunker;\n\n      if (typeof options.chunker === 'function') {\n        chunker = options.chunker;\n      } else if (options.chunker === 'rabin') {\n        chunker = require('../chunker/rabin');\n      } else {\n        chunker = require('../chunker/fixed-size');\n      }\n\n      let chunkValidator;\n\n      if (typeof options.chunkValidator === 'function') {\n        chunkValidator = options.chunkValidator;\n      } else {\n        chunkValidator = require('./validate-chunks');\n      } // item is a file\n\n\n      yield () => fileBuilder(entry, chunker(chunkValidator(source, options), options), block, options);\n    } else {\n      // item is a directory\n      yield () => dirBuilder(entry, block, options);\n    }\n  }\n}\n\nmodule.exports = dagBuilder;","map":null,"metadata":{},"sourceType":"script"}