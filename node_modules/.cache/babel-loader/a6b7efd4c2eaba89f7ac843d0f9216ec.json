{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport Web3 from 'web3';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport getRpcUrl from 'utils/getRpcUrl';\nconst RPC_URL = getRpcUrl();\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, {\n  timeout: 10000\n});\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the ethereum provider change\n */\n\nconst useWeb3 = () => {\n  _s();\n\n  const {\n    ethereum\n  } = useWallet();\n  const refEth = useRef(ethereum);\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider));\n  useEffect(() => {\n    if (ethereum !== refEth.current) {\n      setweb3(new Web3(ethereum || httpProvider));\n      refEth.current = ethereum;\n    }\n  }, [ethereum]);\n  return web3;\n};\n\n_s(useWeb3, \"R2cRaQVwxeQI+pHjscPTq50xqIs=\", false, function () {\n  return [useWallet];\n});\n\nexport default useWeb3;","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/hooks/useWeb3.ts"],"names":["useEffect","useState","useRef","Web3","useWallet","getRpcUrl","RPC_URL","httpProvider","providers","HttpProvider","timeout","useWeb3","ethereum","refEth","web3","setweb3","current"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAGA,SAASC,SAAT,QAA0B,+BAA1B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AAEA,MAAMC,OAAO,GAAGD,SAAS,EAAzB;AACA,MAAME,YAAY,GAAG,IAAIJ,IAAI,CAACK,SAAL,CAAeC,YAAnB,CAAgCH,OAAhC,EAAyC;AAAEI,EAAAA,OAAO,EAAE;AAAX,CAAzC,CAArB;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM;AAAEC,IAAAA;AAAF,MAA2CR,SAAS,EAA1D;AACA,QAAMS,MAAM,GAAGX,MAAM,CAACU,QAAD,CAArB;AACA,QAAM,CAACE,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,IAAIE,IAAJ,CAASS,QAAQ,IAAIL,YAArB,CAAD,CAAhC;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,QAAQ,KAAKC,MAAM,CAACG,OAAxB,EAAiC;AAC/BD,MAAAA,OAAO,CAAC,IAAIZ,IAAJ,CAASS,QAAQ,IAAIL,YAArB,CAAD,CAAP;AACAM,MAAAA,MAAM,CAACG,OAAP,GAAiBJ,QAAjB;AACD;AACF,GALQ,EAKN,CAACA,QAAD,CALM,CAAT;AAOA,SAAOE,IAAP;AACD,CAbD;;GAAMH,O;UAC6CP,S;;;AAcnD,eAAeO,OAAf","sourcesContent":["import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { provider as ProviderType } from 'web3-core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the ethereum provider change\n */\nconst useWeb3 = () => {\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\n  const refEth = useRef(ethereum)\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider))\n\n  useEffect(() => {\n    if (ethereum !== refEth.current) {\n      setweb3(new Web3(ethereum || httpProvider))\n      refEth.current = ethereum\n    }\n  }, [ethereum])\n\n  return web3\n}\n\nexport default useWeb3\n"]},"metadata":{},"sourceType":"module"}