{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _require = require('interface-datastore'),\n    Adapter = _require.Adapter,\n    utils = _require.utils;\n\nvar map = utils.map;\n/**\n * A datastore shim, that wraps around a given datastore, changing\n * the way keys look to the user, for example namespacing\n * keys, reversing them, etc.\n */\n\nvar KeyTransformDatastore = /*#__PURE__*/function (_Adapter) {\n  _inherits(KeyTransformDatastore, _Adapter);\n\n  var _super = _createSuper(KeyTransformDatastore);\n\n  function KeyTransformDatastore(child, transform) {\n    var _this;\n\n    _classCallCheck(this, KeyTransformDatastore);\n\n    _this = _super.call(this);\n    _this.child = child;\n    _this.transform = transform;\n    return _this;\n  }\n\n  _createClass(KeyTransformDatastore, [{\n    key: \"open\",\n    value: function open() {\n      return this.child.open();\n    }\n  }, {\n    key: \"put\",\n    value: function put(key, val, options) {\n      return this.child.put(this.transform.convert(key), val, options);\n    }\n  }, {\n    key: \"get\",\n    value: function get(key, options) {\n      return this.child.get(this.transform.convert(key), options);\n    }\n  }, {\n    key: \"has\",\n    value: function has(key, options) {\n      return this.child.has(this.transform.convert(key), options);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key, options) {\n      return this.child.delete(this.transform.convert(key), options);\n    }\n  }, {\n    key: \"batch\",\n    value: function batch() {\n      var _this2 = this;\n\n      var b = this.child.batch();\n      return {\n        put: function put(key, value) {\n          b.put(_this2.transform.convert(key), value);\n        },\n        delete: function _delete(key) {\n          b.delete(_this2.transform.convert(key));\n        },\n        commit: function commit(options) {\n          return b.commit(options);\n        }\n      };\n    }\n  }, {\n    key: \"query\",\n    value: function query(q, options) {\n      var _this3 = this;\n\n      return map(this.child.query(q, options), function (e) {\n        e.key = _this3.transform.invert(e.key);\n        return e;\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.child.close();\n    }\n  }]);\n\n  return KeyTransformDatastore;\n}(Adapter);\n\nmodule.exports = KeyTransformDatastore;","map":null,"metadata":{},"sourceType":"script"}