{"ast":null,"code":"'use strict';\n/**\n * Convert a JavaScript date into an `RFC3339Nano` formatted\n * string.\n *\n * @param {Date} time\n * @returns {string}\n */\n\nmodule.exports.toRFC3339 = function (time) {\n  var year = time.getUTCFullYear();\n  var month = String(time.getUTCMonth() + 1).padStart(2, '0');\n  var day = String(time.getUTCDate()).padStart(2, '0');\n  var hour = String(time.getUTCHours()).padStart(2, '0');\n  var minute = String(time.getUTCMinutes()).padStart(2, '0');\n  var seconds = String(time.getUTCSeconds()).padStart(2, '0');\n  var milliseconds = time.getUTCMilliseconds();\n  var nanoseconds = milliseconds * 1000 * 1000;\n  return \"\".concat(year, \"-\").concat(month, \"-\").concat(day, \"T\").concat(hour, \":\").concat(minute, \":\").concat(seconds, \".\").concat(nanoseconds, \"Z\");\n};\n/**\n * Parses a date string formatted as `RFC3339Nano` into a\n * JavaScript Date object.\n *\n * @param {string} time\n * @returns {Date}\n */\n\n\nmodule.exports.parseRFC3339 = function (time) {\n  var rfc3339Matcher = new RegExp( // 2006-01-02T\n  '(\\\\d{4})-(\\\\d{2})-(\\\\d{2})T' + // 15:04:05\n  '(\\\\d{2}):(\\\\d{2}):(\\\\d{2})' + // .999999999Z\n  '\\\\.(\\\\d+)Z');\n  var m = String(time).trim().match(rfc3339Matcher);\n\n  if (!m) {\n    throw new Error('Invalid format');\n  }\n\n  var year = parseInt(m[1], 10);\n  var month = parseInt(m[2], 10) - 1;\n  var date = parseInt(m[3], 10);\n  var hour = parseInt(m[4], 10);\n  var minute = parseInt(m[5], 10);\n  var second = parseInt(m[6], 10);\n  var millisecond = parseInt(m[7].slice(0, -6), 10);\n  return new Date(Date.UTC(year, month, date, hour, minute, second, millisecond));\n};","map":null,"metadata":{},"sourceType":"script"}