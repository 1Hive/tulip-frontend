{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _wrapNativeSuper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nvar pFinally = require('p-finally');\n\nvar TimeoutError = /*#__PURE__*/function (_Error) {\n  _inherits(TimeoutError, _Error);\n\n  var _super = _createSuper(TimeoutError);\n\n  function TimeoutError(message) {\n    var _this;\n\n    _classCallCheck(this, TimeoutError);\n\n    _this = _super.call(this, message);\n    _this.name = 'TimeoutError';\n    return _this;\n  }\n\n  return TimeoutError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar pTimeout = function pTimeout(promise, milliseconds, fallback) {\n  return new Promise(function (resolve, reject) {\n    if (typeof milliseconds !== 'number' || milliseconds < 0) {\n      throw new TypeError('Expected `milliseconds` to be a positive number');\n    }\n\n    if (milliseconds === Infinity) {\n      resolve(promise);\n      return;\n    }\n\n    var timer = setTimeout(function () {\n      if (typeof fallback === 'function') {\n        try {\n          resolve(fallback());\n        } catch (error) {\n          reject(error);\n        }\n\n        return;\n      }\n\n      var message = typeof fallback === 'string' ? fallback : \"Promise timed out after \".concat(milliseconds, \" milliseconds\");\n      var timeoutError = fallback instanceof Error ? fallback : new TimeoutError(message);\n\n      if (typeof promise.cancel === 'function') {\n        promise.cancel();\n      }\n\n      reject(timeoutError);\n    }, milliseconds); // TODO: Use native `finally` keyword when targeting Node.js 10\n\n    pFinally( // eslint-disable-next-line promise/prefer-await-to-then\n    promise.then(resolve, reject), function () {\n      clearTimeout(timer);\n    });\n  });\n};\n\nmodule.exports = pTimeout; // TODO: Remove this for the next major release\n\nmodule.exports.default = pTimeout;\nmodule.exports.TimeoutError = TimeoutError;","map":null,"metadata":{},"sourceType":"script"}