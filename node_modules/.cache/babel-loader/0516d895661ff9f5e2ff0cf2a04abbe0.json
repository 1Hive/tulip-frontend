{"ast":null,"code":"const path = require('path');\n\nconst fs = require('../fs-shim');\n\nconst Cache = require('orbit-db-cache');\n\nconst Logger = require('logplease');\n\nconst logger = Logger.create('orbit-db');\nLogger.setLogLevel('ERROR');\n\nasync function migrate(OrbitDB, options, dbAddress) {\n  let oldCache = OrbitDB.caches[options.directory] ? OrbitDB.caches[options.directory].cache : null;\n  let oldStore;\n\n  if (!oldCache) {\n    const addr = (path.posix || path).join(OrbitDB.directory, dbAddress.root, dbAddress.path);\n    if (fs && fs.existsSync && !fs.existsSync(addr)) return;\n    oldStore = await OrbitDB.storage.createStore(addr);\n    oldCache = new Cache(oldStore);\n  }\n\n  const _localHeads = await oldCache.get('_localHeads');\n\n  if (!_localHeads) return;\n  const keyRoot = dbAddress.toString();\n  logger.debug('Attempting to migrate from old cache location');\n  const migrationKeys = ['_remoteHeads', '_localHeads', 'snapshot', 'queue'];\n\n  for (const i in migrationKeys) {\n    try {\n      const key = path.join(keyRoot, migrationKeys[i]);\n      const val = await oldCache.get(migrationKeys[i]);\n      if (val) await options.cache.set(key, val);\n    } catch (e) {\n      logger.debug(e.message);\n    }\n  }\n\n  await options.cache.set(path.join(keyRoot, '_manifest'), dbAddress.root);\n  if (oldStore) await oldStore.close();\n}\n\nmodule.exports = migrate;","map":null,"metadata":{},"sourceType":"script"}