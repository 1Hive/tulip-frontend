{"ast":null,"code":"var _jsxFileName = \"/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/views/Collectibles/components/ClaimNftModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { useBunnySpecialContract } from 'hooks/useContract';\nimport { useToast } from 'state/hooks';\nimport { Button, Modal, Text, Flex } from '@pancakeswap-libs/uikit';\nimport useI18n from 'hooks/useI18n';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`;\n_c = ModalContent;\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`;\n_c2 = Actions;\n\nconst ClaimNftModal = ({\n  nft,\n  onSuccess,\n  onDismiss\n}) => {\n  _s();\n\n  const [isConfirming, setIsConfirming] = useState(false);\n  const TranslateString = useI18n();\n  const {\n    account\n  } = useWallet();\n  const {\n    toastError,\n    toastSuccess\n  } = useToast();\n  const bunnySpecialContract = useBunnySpecialContract();\n\n  const handleConfirm = async () => {\n    bunnySpecialContract.methods.mintNFT(nft.bunnyId).send({\n      from: account\n    }).on('sending', () => {\n      setIsConfirming(true);\n    }).on('receipt', () => {\n      toastSuccess('Successfully claimed!');\n      onDismiss();\n      onSuccess();\n    }).on('error', error => {\n      console.error('Unable to claim NFT', error);\n      toastError('Error', 'Unable to claim NFT, please try again.');\n      setIsConfirming(false);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: TranslateString(999, 'Claim Collectible'),\n    onDismiss: onDismiss,\n    children: [/*#__PURE__*/_jsxDEV(ModalContent, {\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        mb: \"8px\",\n        justifyContent: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: [TranslateString(626, 'You will receive'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          bold: true,\n          children: `1x \"${nft.name}\" Collectible`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Actions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        fullWidth: true,\n        variant: \"secondary\",\n        onClick: onDismiss,\n        children: TranslateString(462, 'Cancel')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        fullWidth: true,\n        onClick: handleConfirm,\n        disabled: !account || isConfirming,\n        children: TranslateString(464, 'Confirm')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ClaimNftModal, \"EQByZfqUZvyzps6w9E/5ivAinLU=\", false, function () {\n  return [useI18n, useWallet, useToast, useBunnySpecialContract];\n});\n\n_c3 = ClaimNftModal;\nexport default ClaimNftModal;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ModalContent\");\n$RefreshReg$(_c2, \"Actions\");\n$RefreshReg$(_c3, \"ClaimNftModal\");","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/views/Collectibles/components/ClaimNftModal.tsx"],"names":["React","useState","styled","useWallet","useBunnySpecialContract","useToast","Button","Modal","Text","Flex","useI18n","ModalContent","div","Actions","ClaimNftModal","nft","onSuccess","onDismiss","isConfirming","setIsConfirming","TranslateString","account","toastError","toastSuccess","bunnySpecialContract","handleConfirm","methods","mintNFT","bunnyId","send","from","on","error","console","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,uBAAT,QAAwC,mBAAxC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,MAAT,EAAqCC,KAArC,EAA4CC,IAA5C,EAAkDC,IAAlD,QAA8D,yBAA9D;AAEA,OAAOC,OAAP,MAAoB,eAApB;;AAOA,MAAMC,YAAY,GAAGT,MAAM,CAACU,GAAI;AAChC;AACA,CAFA;KAAMD,Y;AAIN,MAAME,OAAO,GAAGX,MAAM,CAACU,GAAI;AAC3B;AACA;AACA;AACA,CAJA;MAAMC,O;;AAMN,MAAMC,aAA2C,GAAG,CAAC;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,SAAP;AAAkBC,EAAAA;AAAlB,CAAD,KAAmC;AAAA;;AACrF,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkClB,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAMmB,eAAe,GAAGV,OAAO,EAA/B;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAclB,SAAS,EAA7B;AACA,QAAM;AAAEmB,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA+BlB,QAAQ,EAA7C;AACA,QAAMmB,oBAAoB,GAAGpB,uBAAuB,EAApD;;AAEA,QAAMqB,aAAa,GAAG,YAAY;AAChCD,IAAAA,oBAAoB,CAACE,OAArB,CACGC,OADH,CACWZ,GAAG,CAACa,OADf,EAEGC,IAFH,CAEQ;AAAEC,MAAAA,IAAI,EAAET;AAAR,KAFR,EAGGU,EAHH,CAGM,SAHN,EAGiB,MAAM;AACnBZ,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD,KALH,EAMGY,EANH,CAMM,SANN,EAMiB,MAAM;AACnBR,MAAAA,YAAY,CAAC,uBAAD,CAAZ;AACAN,MAAAA,SAAS;AACTD,MAAAA,SAAS;AACV,KAVH,EAWGe,EAXH,CAWM,OAXN,EAWgBC,KAAD,IAAW;AACtBC,MAAAA,OAAO,CAACD,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACAV,MAAAA,UAAU,CAAC,OAAD,EAAU,wCAAV,CAAV;AACAH,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD,KAfH;AAgBD,GAjBD;;AAmBA,sBACE,QAAC,KAAD;AAAO,IAAA,KAAK,EAAEC,eAAe,CAAC,GAAD,EAAM,mBAAN,CAA7B;AAAyD,IAAA,SAAS,EAAEH,SAApE;AAAA,4BACE,QAAC,YAAD;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,UAAU,EAAC,QAAjB;AAA0B,QAAA,EAAE,EAAC,KAA7B;AAAmC,QAAA,cAAc,EAAC,eAAlD;AAAA,gCACE,QAAC,IAAD;AAAA,qBAAOG,eAAe,CAAC,GAAD,EAAM,kBAAN,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAA,oBAAa,OAAML,GAAG,CAACmB,IAAK;AAA5B;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAOE,QAAC,OAAD;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,SAAS,MAAjB;AAAkB,QAAA,OAAO,EAAC,WAA1B;AAAsC,QAAA,OAAO,EAAEjB,SAA/C;AAAA,kBACGG,eAAe,CAAC,GAAD,EAAM,QAAN;AADlB;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,MAAD;AAAQ,QAAA,SAAS,MAAjB;AAAkB,QAAA,OAAO,EAAEK,aAA3B;AAA0C,QAAA,QAAQ,EAAE,CAACJ,OAAD,IAAYH,YAAhE;AAAA,kBACGE,eAAe,CAAC,GAAD,EAAM,SAAN;AADlB;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CA5CD;;GAAMN,a;UAEoBJ,O,EACJP,S,EACiBE,Q,EACRD,uB;;;MALzBU,a;AA8CN,eAAeA,aAAf","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useBunnySpecialContract } from 'hooks/useContract'\nimport { useToast } from 'state/hooks'\nimport { Button, InjectedModalProps, Modal, Text, Flex } from '@pancakeswap-libs/uikit'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\n\ninterface ClaimNftModalProps extends InjectedModalProps {\n  nft: Nft\n  onSuccess: () => void\n}\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\n  const [isConfirming, setIsConfirming] = useState(false)\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const { toastError, toastSuccess } = useToast()\n  const bunnySpecialContract = useBunnySpecialContract()\n\n  const handleConfirm = async () => {\n    bunnySpecialContract.methods\n      .mintNFT(nft.bunnyId)\n      .send({ from: account })\n      .on('sending', () => {\n        setIsConfirming(true)\n      })\n      .on('receipt', () => {\n        toastSuccess('Successfully claimed!')\n        onDismiss()\n        onSuccess()\n      })\n      .on('error', (error) => {\n        console.error('Unable to claim NFT', error)\n        toastError('Error', 'Unable to claim NFT, please try again.')\n        setIsConfirming(false)\n      })\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Claim Collectible')} onDismiss={onDismiss}>\n      <ModalContent>\n        <Flex alignItems=\"center\" mb=\"8px\" justifyContent=\"space-between\">\n          <Text>{TranslateString(626, 'You will receive')}:</Text>\n          <Text bold>{`1x \"${nft.name}\" Collectible`}</Text>\n        </Flex>\n      </ModalContent>\n      <Actions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isConfirming}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n"]},"metadata":{},"sourceType":"module"}