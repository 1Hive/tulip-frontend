{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar BufferList = require('bl/BufferList');\n\nvar _require = require('libp2p-interfaces/src/crypto/errors'),\n    InvalidCryptoTransmissionError = _require.InvalidCryptoTransmissionError;\n\nexports.createBoxStream = function (cipher, mac) {\n  return /*#__PURE__*/function () {\n    var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source) {\n      var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk, data, digest;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 2;\n              _iterator = _asyncIterator(source);\n\n            case 4:\n              _context.next = 6;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 6:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 10;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 10:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 24;\n                break;\n              }\n\n              chunk = _value;\n              _context.next = 15;\n              return _awaitAsyncGenerator(cipher.encrypt(BufferList.isBufferList(chunk) ? chunk.slice() : chunk));\n\n            case 15:\n              data = _context.sent;\n              _context.next = 18;\n              return _awaitAsyncGenerator(mac.digest(data));\n\n            case 18:\n              digest = _context.sent;\n              _context.next = 21;\n              return new BufferList([data, digest]);\n\n            case 21:\n              _iteratorNormalCompletion = true;\n              _context.next = 4;\n              break;\n\n            case 24:\n              _context.next = 30;\n              break;\n\n            case 26:\n              _context.prev = 26;\n              _context.t0 = _context[\"catch\"](2);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 30:\n              _context.prev = 30;\n              _context.prev = 31;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 35;\n                break;\n              }\n\n              _context.next = 35;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 35:\n              _context.prev = 35;\n\n              if (!_didIteratorError) {\n                _context.next = 38;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 38:\n              return _context.finish(35);\n\n            case 39:\n              return _context.finish(30);\n\n            case 40:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 26, 30, 40], [31,, 35, 39]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nexports.createUnboxStream = function (decipher, mac) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(source) {\n      var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, chunk, l, macSize, mark, data, macd, expected, decrypted;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _iteratorNormalCompletion2 = true;\n              _didIteratorError2 = false;\n              _context2.prev = 2;\n              _iterator2 = _asyncIterator(source);\n\n            case 4:\n              _context2.next = 6;\n              return _awaitAsyncGenerator(_iterator2.next());\n\n            case 6:\n              _step2 = _context2.sent;\n              _iteratorNormalCompletion2 = _step2.done;\n              _context2.next = 10;\n              return _awaitAsyncGenerator(_step2.value);\n\n            case 10:\n              _value2 = _context2.sent;\n\n              if (_iteratorNormalCompletion2) {\n                _context2.next = 33;\n                break;\n              }\n\n              chunk = _value2;\n              l = chunk.length;\n              macSize = mac.length;\n\n              if (!(l < macSize)) {\n                _context2.next = 17;\n                break;\n              }\n\n              throw new InvalidCryptoTransmissionError(\"buffer (\".concat(l, \") shorter than MAC size (\").concat(macSize, \")\"));\n\n            case 17:\n              mark = l - macSize;\n              data = chunk.slice(0, mark);\n              macd = chunk.slice(mark);\n              _context2.next = 22;\n              return _awaitAsyncGenerator(mac.digest(data));\n\n            case 22:\n              expected = _context2.sent;\n\n              if (macd.equals(expected)) {\n                _context2.next = 25;\n                break;\n              }\n\n              throw new InvalidCryptoTransmissionError(\"MAC Invalid: \".concat(macd.toString('hex'), \" != \").concat(expected.toString('hex')));\n\n            case 25:\n              _context2.next = 27;\n              return _awaitAsyncGenerator(decipher.decrypt(data));\n\n            case 27:\n              decrypted = _context2.sent;\n              _context2.next = 30;\n              return decrypted;\n\n            case 30:\n              _iteratorNormalCompletion2 = true;\n              _context2.next = 4;\n              break;\n\n            case 33:\n              _context2.next = 39;\n              break;\n\n            case 35:\n              _context2.prev = 35;\n              _context2.t0 = _context2[\"catch\"](2);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context2.t0;\n\n            case 39:\n              _context2.prev = 39;\n              _context2.prev = 40;\n\n              if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n                _context2.next = 44;\n                break;\n              }\n\n              _context2.next = 44;\n              return _awaitAsyncGenerator(_iterator2.return());\n\n            case 44:\n              _context2.prev = 44;\n\n              if (!_didIteratorError2) {\n                _context2.next = 47;\n                break;\n              }\n\n              throw _iteratorError2;\n\n            case 47:\n              return _context2.finish(44);\n\n            case 48:\n              return _context2.finish(39);\n\n            case 49:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[2, 35, 39, 49], [40,, 44, 48]]);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};","map":null,"metadata":{},"sourceType":"script"}