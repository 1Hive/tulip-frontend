{"ast":null,"code":"var _jsxFileName = \"/Users/fabianmolina/Documents/1hive/tulip-frontend/src/components/LineChart/LineChart.js\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport data from './ExampleData.json';\nimport './LineChart.css';\n\nclass LineChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hoverLoc: null,\n      activePoint: null\n    };\n  }\n\n  loadExampleData() {\n    const sortedData = [];\n    let count = 0;\n\n    for (const date in data.bpi) {\n      sortedData.push({\n        d: moment(date).format('MMM DD'),\n        p: data.bpi[date].toLocaleString('us-EN', {\n          style: 'currency',\n          currency: 'USD'\n        }),\n        x: count,\n        y: data.bpi[date]\n      });\n      count++;\n    }\n  } // GET X & Y || MAX & MIN\n\n\n  getX() {\n    const {\n      data\n    } = this.props;\n    return {\n      min: data[0].x,\n      max: data[data.length - 1].x\n    };\n  }\n\n  getY() {\n    const {\n      data\n    } = this.props;\n    return {\n      min: data.reduce((min, p) => p.y < min ? p.y : min, data[0].y),\n      max: data.reduce((max, p) => p.y > max ? p.y : max, data[0].y)\n    };\n  } // GET SVG COORDINATES\n\n\n  getSvgX(x) {\n    const {\n      svgWidth,\n      yLabelSize\n    } = this.props;\n    return yLabelSize + x / this.getX().max * (svgWidth - yLabelSize);\n  }\n\n  getSvgY(y) {\n    const {\n      svgHeight,\n      xLabelSize\n    } = this.props;\n    const gY = this.getY();\n    return ((svgHeight - xLabelSize) * gY.max - (svgHeight - xLabelSize) * y) / (gY.max - gY.min);\n  } // BUILD SVG PATH\n\n\n  makePath() {\n    const {\n      data,\n      color\n    } = this.props;\n    let pathD = 'M ' + this.getSvgX(data[0].x) + ' ' + this.getSvgY(data[0].y) + ' ';\n    pathD += data.map((point, i) => {\n      return 'L ' + this.getSvgX(point.x) + ' ' + this.getSvgY(point.y) + ' ';\n    });\n    return /*#__PURE__*/React.createElement(\"path\", {\n      className: \"linechart_path\",\n      d: pathD,\n      style: {\n        stroke: color\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    });\n  } // BUILD SHADED AREA\n\n\n  makeArea() {\n    const {\n      data\n    } = this.props;\n    let pathD = 'M ' + this.getSvgX(data[0].x) + ' ' + this.getSvgY(data[0].y) + ' ';\n    pathD += data.map((point, i) => {\n      return 'L ' + this.getSvgX(point.x) + ' ' + this.getSvgY(point.y) + ' ';\n    });\n    const x = this.getX();\n    const y = this.getY();\n    pathD += 'L ' + this.getSvgX(x.max) + ' ' + this.getSvgY(y.min) + ' ' + 'L ' + this.getSvgX(x.min) + ' ' + this.getSvgY(y.min) + ' ';\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"defs\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"linearGradient\", {\n      id: \"MyGradient\",\n      gradientTransform: \"rotate(80)\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"stop\", {\n      offset: \"35%\",\n      stopColor: \"#7ce0d680\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"stop\", {\n      offset: \"95%\",\n      stopColor: \"#7ce0d600\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"path\", {\n      className: \"linechart_area\",\n      d: pathD,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }));\n  } // BUILD GRID AXIS\n\n\n  makeAxis() {\n    const {\n      yLabelSize\n    } = this.props;\n    const x = this.getX();\n    const y = this.getY();\n    return /*#__PURE__*/React.createElement(\"g\", {\n      className: \"linechart_axis\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"line\", {\n      x1: this.getSvgX(x.min) - yLabelSize,\n      y1: this.getSvgY(y.min),\n      x2: this.getSvgX(x.max),\n      y2: this.getSvgY(y.min),\n      strokeDasharray: \"5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"line\", {\n      x1: this.getSvgX(x.min) - yLabelSize,\n      y1: this.getSvgY(y.max),\n      x2: this.getSvgX(x.max),\n      y2: this.getSvgY(y.max),\n      strokeDasharray: \"5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  makeLabels() {\n    const {\n      svgHeight,\n      svgWidth,\n      xLabelSize,\n      yLabelSize\n    } = this.props;\n    const padding = 5;\n    return /*#__PURE__*/React.createElement(\"g\", {\n      className: \"linechart_label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"text\", {\n      transform: `translate(${yLabelSize / 2}, 20)`,\n      textAnchor: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }\n    }, this.getY().max.toLocaleString('us-EN', {\n      style: 'currency',\n      currency: 'USD'\n    })), /*#__PURE__*/React.createElement(\"text\", {\n      transform: `translate(${yLabelSize / 2}, ${svgHeight - xLabelSize - padding})`,\n      textAnchor: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }\n    }, this.getY().min.toLocaleString('us-EN', {\n      style: 'currency',\n      currency: 'USD'\n    })), /*#__PURE__*/React.createElement(\"text\", {\n      transform: `translate(${yLabelSize}, ${svgHeight})`,\n      textAnchor: \"start\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }\n    }, this.props.data[0].d), /*#__PURE__*/React.createElement(\"text\", {\n      transform: `translate(${svgWidth}, ${svgHeight})`,\n      textAnchor: \"end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }\n    }, this.props.data[this.props.data.length - 1].d));\n  } // FIND CLOSEST POINT TO MOUSE\n\n\n  getCoords(e) {\n    const {\n      svgWidth,\n      data,\n      yLabelSize\n    } = this.props;\n    const svgLocation = document.getElementsByClassName('linechart')[0].getBoundingClientRect();\n    const adjustment = (svgLocation.width - svgWidth) / 2; // takes padding into consideration\n\n    const relativeLoc = e.clientX - svgLocation.left - adjustment;\n    const svgData = [];\n    data.map((point, i) => {\n      svgData.push({\n        svgX: this.getSvgX(point.x),\n        svgY: this.getSvgY(point.y),\n        d: point.d,\n        p: point.p\n      });\n    });\n    let closestPoint = {};\n\n    for (let i = 0, c = 500; i < svgData.length; i++) {\n      if (Math.abs(svgData[i].svgX - this.state.hoverLoc) <= c) {\n        c = Math.abs(svgData[i].svgX - this.state.hoverLoc);\n        closestPoint = svgData[i];\n      }\n    }\n\n    if (relativeLoc - yLabelSize < 0) {\n      this.stopHover();\n    } else {\n      this.setState({\n        hoverLoc: relativeLoc,\n        activePoint: closestPoint\n      });\n      this.props.onChartHover(relativeLoc, closestPoint);\n    }\n  } // STOP HOVER\n\n\n  stopHover() {\n    this.setState({\n      hoverLoc: null,\n      activePoint: null\n    });\n    this.props.onChartHover(null, null);\n  } // MAKE ACTIVE POINT\n\n\n  makeActivePoint() {\n    const {\n      color,\n      pointRadius\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"circle\", {\n      className: \"linechart_point\",\n      style: {\n        stroke: color\n      },\n      r: pointRadius,\n      cx: this.state.activePoint.svgX,\n      cy: this.state.activePoint.svgY,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 7\n      }\n    });\n  } // MAKE HOVER LINE\n\n\n  createLine() {\n    const {\n      svgHeight,\n      xLabelSize\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"line\", {\n      className: \"hoverLine\",\n      x1: this.state.hoverLoc,\n      y1: -8,\n      x2: this.state.hoverLoc,\n      y2: svgHeight - xLabelSize,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 7\n      }\n    });\n  }\n\n  render() {\n    const {\n      svgHeight,\n      svgWidth\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      width: svgWidth,\n      height: svgHeight,\n      viewBox: `10 -10 ${svgWidth} ${svgHeight}`,\n      className: \"linechart\",\n      onMouseLeave: () => this.stopHover(),\n      onMouseMove: e => this.getCoords(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"g\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }\n    }, this.props.showAxis && this.makeAxis(), this.makePath(), this.makeArea(), this.props.showLabels && this.makeLabels(), this.props.showHoverLoc && this.state.hoverLoc ? this.createLine() : null, this.state.hoverLoc ? this.makeActivePoint() : null));\n  }\n\n} // DEFAULT PROPS\n\n\nLineChart.defaultProps = {\n  data: this.loadExampleData(),\n  color: '#7CE0D6',\n  pointRadius: 6,\n  svgHeight: 300,\n  svgWidth: 900,\n  xLabelSize: 20,\n  yLabelSize: 80,\n  showLabels: false,\n  showHoverLoc: false,\n  showAxis: false\n};\nexport default LineChart;","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/components/LineChart/LineChart.js"],"names":["React","Component","moment","data","LineChart","constructor","props","state","hoverLoc","activePoint","loadExampleData","sortedData","count","date","bpi","push","d","format","p","toLocaleString","style","currency","x","y","getX","min","max","length","getY","reduce","getSvgX","svgWidth","yLabelSize","getSvgY","svgHeight","xLabelSize","gY","makePath","color","pathD","map","point","i","stroke","makeArea","makeAxis","makeLabels","padding","getCoords","e","svgLocation","document","getElementsByClassName","getBoundingClientRect","adjustment","width","relativeLoc","clientX","left","svgData","svgX","svgY","closestPoint","c","Math","abs","stopHover","setState","onChartHover","makeActivePoint","pointRadius","createLine","render","showAxis","showLabels","showHoverLoc","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport moment from 'moment'\r\nimport data from './ExampleData.json'\r\nimport './LineChart.css'\r\n\r\nclass LineChart extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      hoverLoc: null,\r\n      activePoint: null,\r\n    }\r\n  }\r\n\r\n  loadExampleData() {\r\n    const sortedData = []\r\n    let count = 0\r\n    for (const date in data.bpi) {\r\n      sortedData.push({\r\n        d: moment(date).format('MMM DD'),\r\n        p: data.bpi[date].toLocaleString('us-EN', {\r\n          style: 'currency',\r\n          currency: 'USD',\r\n        }),\r\n        x: count,\r\n        y: data.bpi[date],\r\n      })\r\n      count++\r\n    }\r\n  }\r\n\r\n  // GET X & Y || MAX & MIN\r\n  getX() {\r\n    const { data } = this.props\r\n    return {\r\n      min: data[0].x,\r\n      max: data[data.length - 1].x,\r\n    }\r\n  }\r\n\r\n  getY() {\r\n    const { data } = this.props\r\n    return {\r\n      min: data.reduce((min, p) => (p.y < min ? p.y : min), data[0].y),\r\n      max: data.reduce((max, p) => (p.y > max ? p.y : max), data[0].y),\r\n    }\r\n  }\r\n\r\n  // GET SVG COORDINATES\r\n  getSvgX(x) {\r\n    const { svgWidth, yLabelSize } = this.props\r\n    return yLabelSize + (x / this.getX().max) * (svgWidth - yLabelSize)\r\n  }\r\n\r\n  getSvgY(y) {\r\n    const { svgHeight, xLabelSize } = this.props\r\n    const gY = this.getY()\r\n    return (\r\n      ((svgHeight - xLabelSize) * gY.max - (svgHeight - xLabelSize) * y) /\r\n      (gY.max - gY.min)\r\n    )\r\n  }\r\n\r\n  // BUILD SVG PATH\r\n  makePath() {\r\n    const { data, color } = this.props\r\n    let pathD =\r\n      'M ' + this.getSvgX(data[0].x) + ' ' + this.getSvgY(data[0].y) + ' '\r\n\r\n    pathD += data.map((point, i) => {\r\n      return 'L ' + this.getSvgX(point.x) + ' ' + this.getSvgY(point.y) + ' '\r\n    })\r\n\r\n    return (\r\n      <path className=\"linechart_path\" d={pathD} style={{ stroke: color }} />\r\n    )\r\n  }\r\n\r\n  // BUILD SHADED AREA\r\n  makeArea() {\r\n    const { data } = this.props\r\n    let pathD =\r\n      'M ' + this.getSvgX(data[0].x) + ' ' + this.getSvgY(data[0].y) + ' '\r\n\r\n    pathD += data.map((point, i) => {\r\n      return 'L ' + this.getSvgX(point.x) + ' ' + this.getSvgY(point.y) + ' '\r\n    })\r\n\r\n    const x = this.getX()\r\n    const y = this.getY()\r\n    pathD +=\r\n      'L ' +\r\n      this.getSvgX(x.max) +\r\n      ' ' +\r\n      this.getSvgY(y.min) +\r\n      ' ' +\r\n      'L ' +\r\n      this.getSvgX(x.min) +\r\n      ' ' +\r\n      this.getSvgY(y.min) +\r\n      ' '\r\n\r\n    return (\r\n      <svg>\r\n        <defs>\r\n          <linearGradient id=\"MyGradient\" gradientTransform=\"rotate(80)\">\r\n            <stop offset=\"35%\" stopColor=\"#7ce0d680\" />\r\n            <stop offset=\"95%\" stopColor=\"#7ce0d600\" />\r\n          </linearGradient>\r\n        </defs>\r\n        <path className=\"linechart_area\" d={pathD} />\r\n      </svg>\r\n    )\r\n  }\r\n\r\n  // BUILD GRID AXIS\r\n  makeAxis() {\r\n    const { yLabelSize } = this.props\r\n    const x = this.getX()\r\n    const y = this.getY()\r\n\r\n    return (\r\n      <g className=\"linechart_axis\">\r\n        <line\r\n          x1={this.getSvgX(x.min) - yLabelSize}\r\n          y1={this.getSvgY(y.min)}\r\n          x2={this.getSvgX(x.max)}\r\n          y2={this.getSvgY(y.min)}\r\n          strokeDasharray=\"5\"\r\n        />\r\n        <line\r\n          x1={this.getSvgX(x.min) - yLabelSize}\r\n          y1={this.getSvgY(y.max)}\r\n          x2={this.getSvgX(x.max)}\r\n          y2={this.getSvgY(y.max)}\r\n          strokeDasharray=\"5\"\r\n        />\r\n      </g>\r\n    )\r\n  }\r\n\r\n  makeLabels() {\r\n    const { svgHeight, svgWidth, xLabelSize, yLabelSize } = this.props\r\n    const padding = 5\r\n    return (\r\n      <g className=\"linechart_label\">\r\n        {/* Y AXIS LABELS */}\r\n        <text\r\n          transform={`translate(${yLabelSize / 2}, 20)`}\r\n          textAnchor=\"middle\"\r\n        >\r\n          {this.getY().max.toLocaleString('us-EN', {\r\n            style: 'currency',\r\n            currency: 'USD',\r\n          })}\r\n        </text>\r\n        <text\r\n          transform={`translate(${yLabelSize / 2}, ${svgHeight -\r\n            xLabelSize -\r\n            padding})`}\r\n          textAnchor=\"middle\"\r\n        >\r\n          {this.getY().min.toLocaleString('us-EN', {\r\n            style: 'currency',\r\n            currency: 'USD',\r\n          })}\r\n        </text>\r\n        {/* X AXIS LABELS */}\r\n        <text\r\n          transform={`translate(${yLabelSize}, ${svgHeight})`}\r\n          textAnchor=\"start\"\r\n        >\r\n          {this.props.data[0].d}\r\n        </text>\r\n        <text\r\n          transform={`translate(${svgWidth}, ${svgHeight})`}\r\n          textAnchor=\"end\"\r\n        >\r\n          {this.props.data[this.props.data.length - 1].d}\r\n        </text>\r\n      </g>\r\n    )\r\n  }\r\n\r\n  // FIND CLOSEST POINT TO MOUSE\r\n  getCoords(e) {\r\n    const { svgWidth, data, yLabelSize } = this.props\r\n    const svgLocation = document\r\n      .getElementsByClassName('linechart')[0]\r\n      .getBoundingClientRect()\r\n    const adjustment = (svgLocation.width - svgWidth) / 2 // takes padding into consideration\r\n    const relativeLoc = e.clientX - svgLocation.left - adjustment\r\n\r\n    const svgData = []\r\n    data.map((point, i) => {\r\n      svgData.push({\r\n        svgX: this.getSvgX(point.x),\r\n        svgY: this.getSvgY(point.y),\r\n        d: point.d,\r\n        p: point.p,\r\n      })\r\n    })\r\n\r\n    let closestPoint = {}\r\n    for (let i = 0, c = 500; i < svgData.length; i++) {\r\n      if (Math.abs(svgData[i].svgX - this.state.hoverLoc) <= c) {\r\n        c = Math.abs(svgData[i].svgX - this.state.hoverLoc)\r\n        closestPoint = svgData[i]\r\n      }\r\n    }\r\n\r\n    if (relativeLoc - yLabelSize < 0) {\r\n      this.stopHover()\r\n    } else {\r\n      this.setState({\r\n        hoverLoc: relativeLoc,\r\n        activePoint: closestPoint,\r\n      })\r\n      this.props.onChartHover(relativeLoc, closestPoint)\r\n    }\r\n  }\r\n\r\n  // STOP HOVER\r\n  stopHover() {\r\n    this.setState({ hoverLoc: null, activePoint: null })\r\n    this.props.onChartHover(null, null)\r\n  }\r\n\r\n  // MAKE ACTIVE POINT\r\n  makeActivePoint() {\r\n    const { color, pointRadius } = this.props\r\n    return (\r\n      <circle\r\n        className=\"linechart_point\"\r\n        style={{ stroke: color }}\r\n        r={pointRadius}\r\n        cx={this.state.activePoint.svgX}\r\n        cy={this.state.activePoint.svgY}\r\n      />\r\n    )\r\n  }\r\n\r\n  // MAKE HOVER LINE\r\n  createLine() {\r\n    const { svgHeight, xLabelSize } = this.props\r\n    return (\r\n      <line\r\n        className=\"hoverLine\"\r\n        x1={this.state.hoverLoc}\r\n        y1={-8}\r\n        x2={this.state.hoverLoc}\r\n        y2={svgHeight - xLabelSize}\r\n      />\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { svgHeight, svgWidth } = this.props\r\n    return (\r\n      <svg\r\n        width={svgWidth}\r\n        height={svgHeight}\r\n        viewBox={`10 -10 ${svgWidth} ${svgHeight}`}\r\n        className=\"linechart\"\r\n        onMouseLeave={() => this.stopHover()}\r\n        onMouseMove={e => this.getCoords(e)}\r\n      >\r\n        <g>\r\n          {this.props.showAxis && this.makeAxis()}\r\n          {this.makePath()}\r\n          {this.makeArea()}\r\n          {this.props.showLabels && this.makeLabels()}\r\n          {this.props.showHoverLoc && this.state.hoverLoc\r\n            ? this.createLine()\r\n            : null}\r\n          {this.state.hoverLoc ? this.makeActivePoint() : null}\r\n        </g>\r\n      </svg>\r\n    )\r\n  }\r\n}\r\n// DEFAULT PROPS\r\nLineChart.defaultProps = {\r\n  data: this.loadExampleData(),\r\n  color: '#7CE0D6',\r\n  pointRadius: 6,\r\n  svgHeight: 300,\r\n  svgWidth: 900,\r\n  xLabelSize: 20,\r\n  yLabelSize: 80,\r\n  showLabels: false,\r\n  showHoverLoc: false,\r\n  showAxis: false,\r\n}\r\n\r\nexport default LineChart\r\n"]},"metadata":{},"sourceType":"module"}