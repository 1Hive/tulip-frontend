{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst abortable = require('abortable-iterator');\n\nconst {\n  CLOSE_TIMEOUT\n} = require('./constants');\n\nconst toMultiaddr = require('libp2p-utils/src/ip-port-to-multiaddr');\n\nconst pTimeout = require('p-timeout');\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:websockets:socket');\nlog.error = debug('libp2p:websockets:socket:error'); // Convert a stream into a MultiaddrConnection\n// https://github.com/libp2p/interface-transport#multiaddrconnection\n\nmodule.exports = (stream, options = {}) => {\n  const maConn = {\n    async sink(source) {\n      if (options.signal) {\n        source = abortable(source, options.signal);\n      }\n\n      try {\n        await stream.sink(async function* () {\n          for await (const chunk of source) {\n            // Convert BufferList to Buffer\n            yield Buffer.isBuffer(chunk) ? chunk : chunk.slice();\n          }\n        }());\n      } catch (err) {\n        if (err.type !== 'aborted') {\n          log.error(err);\n        }\n      }\n    },\n\n    source: options.signal ? abortable(stream.source, options.signal) : stream.source,\n    conn: stream,\n    localAddr: options.localAddr || (stream.localAddress && stream.localPort ? toMultiaddr(stream.localAddress, stream.localPort) : undefined),\n    // If the remote address was passed, use it - it may have the peer ID encapsulated\n    remoteAddr: options.remoteAddr || toMultiaddr(stream.remoteAddress, stream.remotePort),\n    timeline: {\n      open: Date.now()\n    },\n\n    async close() {\n      const start = Date.now();\n\n      try {\n        await pTimeout(stream.close(), CLOSE_TIMEOUT);\n      } catch (err) {\n        const {\n          host,\n          port\n        } = maConn.remoteAddr.toOptions();\n        log('timeout closing stream to %s:%s after %dms, destroying it manually', host, port, Date.now() - start);\n        stream.destroy();\n      } finally {\n        maConn.timeline.close = Date.now();\n      }\n    }\n\n  };\n  stream.socket.once && stream.socket.once('close', () => {\n    // In instances where `close` was not explicitly called,\n    // such as an iterable stream ending, ensure we have set the close\n    // timeline\n    if (!maConn.timeline.close) {\n      maConn.timeline.close = Date.now();\n    }\n  });\n  return maConn;\n};","map":null,"metadata":{},"sourceType":"script"}