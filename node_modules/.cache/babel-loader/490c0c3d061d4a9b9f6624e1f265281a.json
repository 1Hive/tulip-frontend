{"ast":null,"code":"'use strict';\n\nconst SortedMap = require('../utils/sorted-map');\n/**\n * @typedef {Object} Task\n * @property {string} topic - a name for the Task (like an id but not necessarily unique)\n * @property {number} priority - tasks are ordered by priority per peer\n * @property {number} size - the size of the task, eg the number of bytes in a block\n */\n\n/**\n * @typedef {Object} TaskMerger\n * @property {function(task, tasksWithTopic)} hasNewInfo - given the existing\n *   tasks with the same topic, does the task add some new information?\n *   Used to decide whether to merge the task or ignore it.\n * @property {function(task, existingTask)} merge - merge the information from\n *   the given task into the existing task (with the same topic)\n */\n\n/**\n * The task merger that is used by default.\n * Assumes that new tasks do not add any information over existing tasks,\n * and doesn't try to merge.\n */\n\n\nconst DefaultTaskMerger = {\n  hasNewInfo() {\n    return false;\n  },\n\n  merge() {}\n\n};\n/**\n * Queue of requests to be processed by the engine.\n * The requests from each peer are added to the peer's queue, sorted by\n * priority.\n * Tasks are popped in priority order from the best peer - see popTasks()\n * for more details.\n */\n\nclass RequestQueue {\n  /**\n   * @param {TaskMerger} taskMerger\n   */\n  constructor(taskMerger) {\n    this._taskMerger = taskMerger || DefaultTaskMerger;\n    this._byPeer = new SortedMap([], PeerTasks.compare, true);\n  }\n  /**\n   * Push tasks onto the queue for the given peer\n   * @param {PeerId} peerId\n   * @param {Task} tasks\n   */\n\n\n  pushTasks(peerId, tasks) {\n    let peerTasks = this._byPeer.get(peerId.toB58String());\n\n    if (!peerTasks) {\n      peerTasks = new PeerTasks(peerId, this._taskMerger);\n    }\n\n    peerTasks.pushTasks(tasks);\n\n    this._byPeer.set(peerId.toB58String(), peerTasks);\n  }\n  /**\n   * Choose the peer with the least active work (or if all have the same active\n   * work, the most pending tasks) and pop off the highest priority tasks until\n   * the total size is at least targetMinBytes.\n   * This puts the popped tasks into the \"active\" state, meaning they are\n   * actively being processed (and cannot be modified).\n   * @param {number} targetMinBytes - the minimum total size of tasks to pop\n   * @returns {Object}\n   */\n\n\n  popTasks(targetMinBytes) {\n    if (this._byPeer.size === 0) {\n      return {\n        tasks: [],\n        pendingSize: 0\n      };\n    } // Get the queue of tasks for the best peer and pop off tasks up to\n    // targetMinBytes\n\n\n    const peerTasks = this._head();\n\n    const {\n      tasks,\n      pendingSize\n    } = peerTasks.popTasks(targetMinBytes);\n\n    if (tasks.length === 0) {\n      return {\n        tasks,\n        pendingSize\n      };\n    }\n\n    const peerId = peerTasks.peerId;\n\n    if (peerTasks.isIdle()) {\n      // If there are no more tasks for the peer, free up its memory\n      this._byPeer.delete(peerId.toB58String());\n    } else {\n      // If there are still tasks remaining, update the sort order of peerTasks\n      // (because it depends on the number of pending tasks)\n      this._byPeer.update(0);\n    }\n\n    return {\n      peerId,\n      tasks,\n      pendingSize\n    };\n  }\n\n  _head() {\n    for (const [, v] of this._byPeer) {\n      return v;\n    }\n\n    return undefined;\n  }\n  /**\n   * Remove the task with the given topic for the given peer.\n   * @param {string} topic\n   * @param {PeerId} peerId\n   */\n\n\n  remove(topic, peerId) {\n    const peerTasks = this._byPeer.get(peerId.toB58String());\n\n    peerTasks && peerTasks.remove(topic);\n  }\n  /**\n   * Called when the tasks for the given peer complete.\n   * @param {PeerId} peerId\n   * @param {Task[]} tasks\n   */\n\n\n  tasksDone(peerId, tasks) {\n    const peerTasks = this._byPeer.get(peerId.toB58String());\n\n    if (!peerTasks) {\n      return;\n    }\n\n    const i = this._byPeer.indexOf(peerId.toB58String());\n\n    for (const task of tasks) {\n      peerTasks.taskDone(task);\n    } // Marking the tasks as done takes them out of the \"active\" state, and the\n    // sort order depends on the size of the active tasks, so we need to update\n    // the order.\n\n\n    this._byPeer.update(i);\n  }\n\n}\n/**\n * Queue of tasks for a particular peer, sorted by priority.\n */\n\n\nclass PeerTasks {\n  /**\n   * @param {PeerId} peerId\n   * @param {TaskMerger} taskMerger\n   */\n  constructor(peerId, taskMerger) {\n    this.peerId = peerId;\n    this._taskMerger = taskMerger;\n    this._activeTotalSize = 0;\n    this._pending = new PendingTasks();\n    this._active = new Set();\n  }\n  /**\n   * Push tasks onto the queue.\n   * @param {Task[]} tasks\n   */\n\n\n  pushTasks(tasks) {\n    for (const t of tasks) {\n      this._pushTask(t);\n    }\n  }\n\n  _pushTask(task) {\n    // If the new task doesn't add any more information over what we\n    // already have in the active queue, then we can skip the new task\n    if (!this._taskHasMoreInfoThanActiveTasks(task)) {\n      return;\n    } // If there is already a non-active (pending) task with this topic\n\n\n    const existingTask = this._pending.get(task.topic);\n\n    if (existingTask) {\n      // If the new task has a higher priority than the old task,\n      if (task.priority > existingTask.priority) {\n        // Update the priority and the task's position in the queue\n        this._pending.updatePriority(task.topic, task.priority);\n      } // Merge the information from the new task into the existing task\n\n\n      this._taskMerger.merge(task, existingTask); // A task with the topic exists, so we don't need to add\n      // the new task to the queue\n\n\n      return;\n    } // Push the new task onto the queue\n\n\n    this._pending.add(task);\n  } // Indicates whether the new task adds any more information over tasks that are\n  // already in the active task queue\n\n\n  _taskHasMoreInfoThanActiveTasks(task) {\n    const tasksWithTopic = [];\n\n    for (const activeTask of this._active) {\n      if (activeTask.topic === task.topic) {\n        tasksWithTopic.push(activeTask);\n      }\n    } // No tasks with that topic, so the new task adds information\n\n\n    if (tasksWithTopic.length === 0) {\n      return true;\n    }\n\n    return this._taskMerger.hasNewInfo(task, tasksWithTopic);\n  }\n  /**\n   * Pop tasks off the queue such that the total size is at least targetMinBytes\n   * @param {number} targetMinBytes\n   * @returns {Object}\n   */\n\n\n  popTasks(targetMinBytes) {\n    let size = 0;\n    const tasks = []; // Keep popping tasks until we get up to targetMinBytes (or one item over\n    // targetMinBytes)\n\n    const pendingTasks = this._pending.tasks();\n\n    for (let i = 0; i < pendingTasks.length && size < targetMinBytes; i++) {\n      const task = pendingTasks[i];\n      tasks.push(task);\n      size += task.size; // Move tasks from pending to active\n\n      this._pending.delete(task.topic);\n\n      this._activeTotalSize += task.size;\n\n      this._active.add(task);\n    }\n\n    return {\n      tasks,\n      pendingSize: this._pending.totalSize\n    };\n  }\n  /**\n   * Called when a task completes.\n   * Note: must be the same reference as returned from popTasks.\n   * @param {Task} task\n   */\n\n\n  taskDone(task) {\n    if (this._active.has(task)) {\n      this._activeTotalSize -= task.size;\n\n      this._active.delete(task);\n    }\n  }\n  /**\n   * Remove pending tasks with the given topic\n   * @param {string} topic\n   */\n\n\n  remove(topic) {\n    this._pending.delete(topic);\n  }\n  /**\n   * No work to be done, this PeerTasks object can be freed.\n   * @returns {boolean}\n   */\n\n\n  isIdle() {\n    return this._pending.length === 0 && this._active.length === 0;\n  } // Compare PeerTasks\n\n\n  static compare(a, b) {\n    // Move peers with no pending tasks to the back of the queue\n    if (a[1]._pending.length === 0) {\n      return 1;\n    }\n\n    if (b[1]._pending.length === 0) {\n      return -1;\n    } // If the amount of active work is the same\n\n\n    if (a[1]._activeTotalSize === b[1]._activeTotalSize) {\n      // Choose the peer with the most pending work\n      return b[1]._pending.length - a[1]._pending.length;\n    } // Choose the peer with the least amount of active work (\"keep peers busy\")\n\n\n    return a[1]._activeTotalSize - b[1]._activeTotalSize;\n  }\n\n}\n/**\n * Queue of pending tasks for a particular peer, sorted by priority.\n */\n\n\nclass PendingTasks {\n  constructor() {\n    this._tasks = new SortedMap([], this._compare);\n  }\n\n  get length() {\n    return this._tasks.size;\n  } // Sum of the size of all pending tasks\n\n\n  get totalSize() {\n    return [...this._tasks.values()].reduce((a, t) => a + t.task.size, 0);\n  }\n\n  get(topic) {\n    return (this._tasks.get(topic) || {}).task;\n  }\n\n  add(task) {\n    this._tasks.set(task.topic, {\n      created: Date.now(),\n      task\n    });\n  }\n\n  delete(topic) {\n    this._tasks.delete(topic);\n  } // All pending tasks, in priority order\n\n\n  tasks() {\n    return [...this._tasks.values()].map(i => i.task);\n  } // Update the priority of the task with the given topic, and update the order\n\n\n  updatePriority(topic, priority) {\n    const obj = this._tasks.get(topic);\n\n    if (!obj) {\n      return;\n    }\n\n    const i = this._tasks.indexOf(topic);\n\n    obj.task.priority = priority;\n\n    this._tasks.update(i);\n  } // Sort by priority desc then FIFO\n\n\n  _compare(a, b) {\n    if (a[1].task.priority === b[1].task.priority) {\n      // FIFO\n      return a[1].created - b[1].created;\n    } // Priority high -> low\n\n\n    return b[1].task.priority - a[1].task.priority;\n  }\n\n}\n\nmodule.exports = RequestQueue;","map":null,"metadata":{},"sourceType":"script"}