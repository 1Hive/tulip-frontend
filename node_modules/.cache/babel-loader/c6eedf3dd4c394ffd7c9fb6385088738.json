{"ast":null,"code":"'use strict';\n\nvar _require = require('lodash'),\n    pullAt = _require.pullAt,\n    cloneDeep = _require.cloneDeep;\n\nvar debug = require('debug')('hyperdiff');\n\nvar isPresent = function isPresent(itemIndex) {\n  return itemIndex !== -1;\n};\n\nfunction GET_INITIAL_STATE() {\n  return {\n    common: [],\n    removed: []\n  };\n}\n\nfunction hasItemWithProps(collection, item, props) {\n  return props.every(function (prop) {\n    return item[prop] === collection[prop];\n  });\n}\n\nfunction indexOf(collection, item) {\n  return collection.indexOf(item);\n}\n\nfunction findIndexWithProps(collection, item, props) {\n  return collection.findIndex(function (origItem) {\n    return hasItemWithProps(origItem, item, props);\n  });\n}\n\nfunction determinateCollections(orig, dist) {\n  return {\n    first: orig,\n    second: cloneDeep(dist)\n  };\n}\n\nfunction determinateFindIndex(ids, props) {\n  return props ? findIndexWithProps : indexOf;\n}\n\nfunction hyperdiff(orig, dist, props) {\n  var ids = props ? [].concat(props) : [];\n\n  var _determinateCollectio = determinateCollections(orig, dist),\n      first = _determinateCollectio.first,\n      second = _determinateCollectio.second;\n\n  var findIndex = determinateFindIndex(ids, props);\n  debug('preconditions first=%j second=%j findIndex=%s', first, second, findIndex.name);\n  var results = first.reduce(function (acc, item, index) {\n    var itemIndex = findIndex(second, item, ids);\n    var destination = isPresent(itemIndex) ? 'common' : 'removed';\n    acc[destination].push(item);\n    pullAt(second, itemIndex);\n    debug('index=%s value=%s collection=%s', index, item, destination);\n    return acc;\n  }, GET_INITIAL_STATE());\n  results.added = second;\n  debug('added=%j removed=%j common%j', results.added, results.removed, results.common);\n  return results;\n}\n\nmodule.exports = hyperdiff;","map":null,"metadata":{},"sourceType":"script"}