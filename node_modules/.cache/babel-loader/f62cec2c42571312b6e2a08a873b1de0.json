{"ast":null,"code":"/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport getProfile from './getProfile';\nconst initialState = {\n  isInitialized: false,\n  isLoading: true,\n  hasRegistered: false,\n  data: null\n};\nexport const profileSlice = createSlice({\n  name: 'profile',\n  initialState,\n  reducers: {\n    profileFetchStart: state => {\n      state.isLoading = true;\n    },\n    profileFetchSucceeded: (state, action) => {\n      const {\n        profile,\n        hasRegistered\n      } = action.payload;\n      return {\n        isInitialized: true,\n        isLoading: false,\n        hasRegistered,\n        data: profile\n      };\n    },\n    profileFetchFailed: state => {\n      state.isLoading = false;\n      state.isInitialized = true;\n    },\n    addPoints: (state, action) => {\n      state.data.points += action.payload;\n    }\n  }\n}); // Actions\n\nexport const {\n  profileFetchStart,\n  profileFetchSucceeded,\n  profileFetchFailed,\n  addPoints\n} = profileSlice.actions; // Thunks\n\nexport const fetchProfile = address => async dispatch => {\n  try {\n    dispatch(profileFetchStart());\n    const response = await getProfile(address);\n    dispatch(profileFetchSucceeded(response));\n  } catch (error) {\n    dispatch(profileFetchFailed());\n  }\n};\nexport default profileSlice.reducer;","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/state/profile/index.tsx"],"names":["createSlice","getProfile","initialState","isInitialized","isLoading","hasRegistered","data","profileSlice","name","reducers","profileFetchStart","state","profileFetchSucceeded","action","profile","payload","profileFetchFailed","addPoints","points","actions","fetchProfile","address","dispatch","response","error","reducer"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA2C,kBAA3C;AAEA,OAAOC,UAAP,MAA+C,cAA/C;AAEA,MAAMC,YAA0B,GAAG;AACjCC,EAAAA,aAAa,EAAE,KADkB;AAEjCC,EAAAA,SAAS,EAAE,IAFsB;AAGjCC,EAAAA,aAAa,EAAE,KAHkB;AAIjCC,EAAAA,IAAI,EAAE;AAJ2B,CAAnC;AAOA,OAAO,MAAMC,YAAY,GAAGP,WAAW,CAAC;AACtCQ,EAAAA,IAAI,EAAE,SADgC;AAEtCN,EAAAA,YAFsC;AAGtCO,EAAAA,QAAQ,EAAE;AACRC,IAAAA,iBAAiB,EAAGC,KAAD,IAAW;AAC5BA,MAAAA,KAAK,CAACP,SAAN,GAAkB,IAAlB;AACD,KAHO;AAIRQ,IAAAA,qBAAqB,EAAE,CAACD,KAAD,EAAQE,MAAR,KAAsD;AAC3E,YAAM;AAAEC,QAAAA,OAAF;AAAWT,QAAAA;AAAX,UAA6BQ,MAAM,CAACE,OAA1C;AAEA,aAAO;AACLZ,QAAAA,aAAa,EAAE,IADV;AAELC,QAAAA,SAAS,EAAE,KAFN;AAGLC,QAAAA,aAHK;AAILC,QAAAA,IAAI,EAAEQ;AAJD,OAAP;AAMD,KAbO;AAcRE,IAAAA,kBAAkB,EAAGL,KAAD,IAAW;AAC7BA,MAAAA,KAAK,CAACP,SAAN,GAAkB,KAAlB;AACAO,MAAAA,KAAK,CAACR,aAAN,GAAsB,IAAtB;AACD,KAjBO;AAkBRc,IAAAA,SAAS,EAAE,CAACN,KAAD,EAAQE,MAAR,KAA0C;AACnDF,MAAAA,KAAK,CAACL,IAAN,CAAWY,MAAX,IAAqBL,MAAM,CAACE,OAA5B;AACD;AApBO;AAH4B,CAAD,CAAhC,C,CA2BP;;AACA,OAAO,MAAM;AAAEL,EAAAA,iBAAF;AAAqBE,EAAAA,qBAArB;AAA4CI,EAAAA,kBAA5C;AAAgEC,EAAAA;AAAhE,IAA8EV,YAAY,CAACY,OAAjG,C,CAEP;;AACA,OAAO,MAAMC,YAAY,GAAIC,OAAD,IAAqB,MAAOC,QAAP,IAAoB;AACnE,MAAI;AACFA,IAAAA,QAAQ,CAACZ,iBAAiB,EAAlB,CAAR;AACA,UAAMa,QAAQ,GAAG,MAAMtB,UAAU,CAACoB,OAAD,CAAjC;AACAC,IAAAA,QAAQ,CAACV,qBAAqB,CAACW,QAAD,CAAtB,CAAR;AACD,GAJD,CAIE,OAAOC,KAAP,EAAc;AACdF,IAAAA,QAAQ,CAACN,kBAAkB,EAAnB,CAAR;AACD;AACF,CARM;AAUP,eAAeT,YAAY,CAACkB,OAA5B","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { ProfileState } from 'state/types'\nimport getProfile, { GetProfileResponse } from './getProfile'\n\nconst initialState: ProfileState = {\n  isInitialized: false,\n  isLoading: true,\n  hasRegistered: false,\n  data: null,\n}\n\nexport const profileSlice = createSlice({\n  name: 'profile',\n  initialState,\n  reducers: {\n    profileFetchStart: (state) => {\n      state.isLoading = true\n    },\n    profileFetchSucceeded: (state, action: PayloadAction<GetProfileResponse>) => {\n      const { profile, hasRegistered } = action.payload\n\n      return {\n        isInitialized: true,\n        isLoading: false,\n        hasRegistered,\n        data: profile,\n      }\n    },\n    profileFetchFailed: (state) => {\n      state.isLoading = false\n      state.isInitialized = true\n    },\n    addPoints: (state, action: PayloadAction<number>) => {\n      state.data.points += action.payload\n    },\n  },\n})\n\n// Actions\nexport const { profileFetchStart, profileFetchSucceeded, profileFetchFailed, addPoints } = profileSlice.actions\n\n// Thunks\nexport const fetchProfile = (address: string) => async (dispatch) => {\n  try {\n    dispatch(profileFetchStart())\n    const response = await getProfile(address)\n    dispatch(profileFetchSucceeded(response))\n  } catch (error) {\n    dispatch(profileFetchFailed())\n  }\n}\n\nexport default profileSlice.reducer\n"]},"metadata":{},"sourceType":"module"}