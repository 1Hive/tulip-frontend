{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar ipns = require('ipns');\n\nvar crypto = require('libp2p-crypto');\n\nvar PeerId = require('peer-id');\n\nvar errcode = require('err-code');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar debug = require('debug');\n\nvar log = debug('ipfs:ipns:republisher');\nlog.error = debug('ipfs:ipns:republisher:error');\nvar minute = 60 * 1000;\nvar hour = 60 * minute;\nvar defaultBroadcastInterval = 4 * hour;\nvar defaultRecordLifetime = 24 * hour;\n\nvar IpnsRepublisher = /*#__PURE__*/function () {\n  function IpnsRepublisher(publisher, datastore, peerInfo, keychain, options) {\n    _classCallCheck(this, IpnsRepublisher);\n\n    this._publisher = publisher;\n    this._datastore = datastore;\n    this._peerInfo = peerInfo;\n    this._keychain = keychain;\n    this._options = options || {};\n    this._republishHandle = null;\n  }\n\n  _createClass(IpnsRepublisher, [{\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this = this;\n\n        var republishHandle, privKey, pass, firstRun;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this._republishHandle) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw errcode(new Error('republisher is already running'), 'ERR_REPUBLISH_ALREADY_RUNNING');\n\n              case 2:\n                // TODO: this handler should be isolated in another module\n                republishHandle = {\n                  _task: null,\n                  _inflightTask: null,\n                  _timeoutId: null,\n                  runPeriodically: function runPeriodically(period) {\n                    republishHandle._timeoutId = setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                      return _regeneratorRuntime.wrap(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              republishHandle._timeoutId = null;\n                              _context.prev = 1;\n                              republishHandle._inflightTask = republishHandle._task();\n                              _context.next = 5;\n                              return republishHandle._inflightTask;\n\n                            case 5:\n                              // Schedule next\n                              if (republishHandle._task) {\n                                republishHandle.runPeriodically(period);\n                              }\n\n                              _context.next = 11;\n                              break;\n\n                            case 8:\n                              _context.prev = 8;\n                              _context.t0 = _context[\"catch\"](1);\n                              log.error(_context.t0);\n\n                            case 11:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, _callee, null, [[1, 8]]);\n                    })), period());\n                  },\n                  cancel: function () {\n                    var _cancel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              // do not run again\n                              clearTimeout(republishHandle._timeoutId);\n                              republishHandle._task = null; // wait for the currently in flight task to complete\n\n                              _context2.next = 4;\n                              return republishHandle._inflightTask;\n\n                            case 4:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, _callee2);\n                    }));\n\n                    function cancel() {\n                      return _cancel.apply(this, arguments);\n                    }\n\n                    return cancel;\n                  }()\n                };\n                privKey = this._peerInfo.id.privKey;\n                pass = this._options.pass;\n                firstRun = true;\n\n                republishHandle._task = function () {\n                  return _this._republishEntries(privKey, pass);\n                };\n\n                republishHandle.runPeriodically(function () {\n                  if (firstRun) {\n                    firstRun = false;\n                    return _this._options.initialBroadcastInterval || minute;\n                  }\n\n                  return _this._options.broadcastInterval || defaultBroadcastInterval;\n                });\n                this._republishHandle = republishHandle;\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function start() {\n        return _start.apply(this, arguments);\n      }\n\n      return start;\n    }()\n  }, {\n    key: \"stop\",\n    value: function () {\n      var _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var republishHandle;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                republishHandle = this._republishHandle;\n\n                if (republishHandle) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                throw errcode(new Error('republisher is not running'), 'ERR_REPUBLISH_NOT_RUNNING');\n\n              case 3:\n                this._republishHandle = null;\n                _context4.next = 6;\n                return republishHandle.cancel();\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function stop() {\n        return _stop.apply(this, arguments);\n      }\n\n      return stop;\n    }()\n  }, {\n    key: \"_republishEntries\",\n    value: function () {\n      var _republishEntries2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(privateKey, pass) {\n        var errMsg, keys, _iterator, _step, key, pem, privKey;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return this._republishEntry(privateKey);\n\n              case 3:\n                _context5.next = 10;\n                break;\n\n              case 5:\n                _context5.prev = 5;\n                _context5.t0 = _context5[\"catch\"](0);\n                errMsg = 'cannot republish entry for the node\\'s private key';\n                log.error(errMsg);\n                return _context5.abrupt(\"return\");\n\n              case 10:\n                if (!pass) {\n                  _context5.next = 43;\n                  break;\n                }\n\n                _context5.prev = 11;\n                _context5.next = 14;\n                return this._keychain.listKeys();\n\n              case 14:\n                keys = _context5.sent;\n                _iterator = _createForOfIteratorHelper(keys);\n                _context5.prev = 16;\n\n                _iterator.s();\n\n              case 18:\n                if ((_step = _iterator.n()).done) {\n                  _context5.next = 30;\n                  break;\n                }\n\n                key = _step.value;\n                _context5.next = 22;\n                return this._keychain.exportKey(key.name, pass);\n\n              case 22:\n                pem = _context5.sent;\n                _context5.next = 25;\n                return crypto.keys.import(pem, pass);\n\n              case 25:\n                privKey = _context5.sent;\n                _context5.next = 28;\n                return this._republishEntry(privKey);\n\n              case 28:\n                _context5.next = 18;\n                break;\n\n              case 30:\n                _context5.next = 35;\n                break;\n\n              case 32:\n                _context5.prev = 32;\n                _context5.t1 = _context5[\"catch\"](16);\n\n                _iterator.e(_context5.t1);\n\n              case 35:\n                _context5.prev = 35;\n\n                _iterator.f();\n\n                return _context5.finish(35);\n\n              case 38:\n                _context5.next = 43;\n                break;\n\n              case 40:\n                _context5.prev = 40;\n                _context5.t2 = _context5[\"catch\"](11);\n                log.error(_context5.t2);\n\n              case 43:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 5], [11, 40], [16, 32, 35, 38]]);\n      }));\n\n      function _republishEntries(_x, _x2) {\n        return _republishEntries2.apply(this, arguments);\n      }\n\n      return _republishEntries;\n    }()\n  }, {\n    key: \"_republishEntry\",\n    value: function () {\n      var _republishEntry2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(privateKey) {\n        var peerId, value;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!(!privateKey || !privateKey.bytes)) {\n                  _context6.next = 2;\n                  break;\n                }\n\n                throw errcode(new Error('invalid private key'), 'ERR_INVALID_PRIVATE_KEY');\n\n              case 2:\n                _context6.prev = 2;\n                _context6.next = 5;\n                return PeerId.createFromPrivKey(privateKey.bytes);\n\n              case 5:\n                peerId = _context6.sent;\n                _context6.next = 8;\n                return this._getPreviousValue(peerId);\n\n              case 8:\n                value = _context6.sent;\n                _context6.next = 11;\n                return this._publisher.publishWithEOL(privateKey, value, defaultRecordLifetime);\n\n              case 11:\n                _context6.next = 18;\n                break;\n\n              case 13:\n                _context6.prev = 13;\n                _context6.t0 = _context6[\"catch\"](2);\n\n                if (!(_context6.t0.code === 'ERR_NO_ENTRY_FOUND')) {\n                  _context6.next = 17;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 17:\n                throw _context6.t0;\n\n              case 18:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[2, 13]]);\n      }));\n\n      function _republishEntry(_x3) {\n        return _republishEntry2.apply(this, arguments);\n      }\n\n      return _republishEntry;\n    }()\n  }, {\n    key: \"_getPreviousValue\",\n    value: function () {\n      var _getPreviousValue2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(peerId) {\n        var dsVal, record;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (PeerId.isPeerId(peerId)) {\n                  _context7.next = 2;\n                  break;\n                }\n\n                throw errcode(new Error('invalid peer ID'), 'ERR_INVALID_PEER_ID');\n\n              case 2:\n                _context7.prev = 2;\n                _context7.next = 5;\n                return this._datastore.get(ipns.getLocalKey(peerId.id));\n\n              case 5:\n                dsVal = _context7.sent;\n\n                if (Buffer.isBuffer(dsVal)) {\n                  _context7.next = 8;\n                  break;\n                }\n\n                throw errcode(new Error(\"found ipns record that we couldn't process\"), 'ERR_INVALID_IPNS_RECORD');\n\n              case 8:\n                _context7.prev = 8;\n                record = ipns.unmarshal(dsVal);\n                return _context7.abrupt(\"return\", record.value);\n\n              case 13:\n                _context7.prev = 13;\n                _context7.t0 = _context7[\"catch\"](8);\n                log.error(_context7.t0);\n                throw errcode(new Error('found ipns record that we couldn\\'t convert to a value'), 'ERR_INVALID_IPNS_RECORD');\n\n              case 17:\n                _context7.next = 24;\n                break;\n\n              case 19:\n                _context7.prev = 19;\n                _context7.t1 = _context7[\"catch\"](2);\n\n                if (!(_context7.t1 && _context7.t1.notFound)) {\n                  _context7.next = 23;\n                  break;\n                }\n\n                throw errcode(new Error(\"no previous entry for record with id: \".concat(peerId.id)), 'ERR_NO_ENTRY_FOUND');\n\n              case 23:\n                throw _context7.t1;\n\n              case 24:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[2, 19], [8, 13]]);\n      }));\n\n      function _getPreviousValue(_x4) {\n        return _getPreviousValue2.apply(this, arguments);\n      }\n\n      return _getPreviousValue;\n    }()\n  }]);\n\n  return IpnsRepublisher;\n}();\n\nexports = module.exports = IpnsRepublisher;","map":null,"metadata":{},"sourceType":"script"}