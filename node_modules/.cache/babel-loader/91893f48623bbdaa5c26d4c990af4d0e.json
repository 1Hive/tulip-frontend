{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _asyncGeneratorDelegate = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\");\n\nvar core = require('datastore-core');\n\nvar ShardingStore = core.ShardingDatastore;\n\nvar Block = require('ipld-block');\n\nvar _require = require('./blockstore-utils'),\n    cidToKey = _require.cidToKey,\n    keyToCid = _require.keyToCid;\n\nvar map = require('it-map');\n\nvar pipe = require('it-pipe');\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(filestore, options) {\n    var store;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return maybeWithSharding(filestore, options);\n\n          case 2:\n            store = _context.sent;\n            return _context.abrupt(\"return\", createBaseStore(store));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nfunction maybeWithSharding(filestore, options) {\n  if (options.sharding) {\n    var shard = new core.shard.NextToLast(2);\n    return ShardingStore.createOrOpen(filestore, shard);\n  }\n\n  return filestore;\n}\n\nfunction createBaseStore(store) {\n  return {\n    /**\n     * Query the store.\n     *\n     * @param {Object} query\n     * @param {Object} options\n     * @returns {AsyncIterator<Block>}\n     */\n    query: function query(_query, options) {\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.delegateYield(_asyncGeneratorDelegate(_asyncIterator(store.query(_query, options)), _awaitAsyncGenerator), \"t0\", 1);\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n\n    /**\n     * Get a single block by CID.\n     *\n     * @param {CID} cid\n     * @param {Object} options\n     * @returns {Promise<Block>}\n     */\n    get: function get(cid, options) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var key, blockData, otherCid, otherKey, _blockData;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                key = cidToKey(cid);\n                _context3.prev = 1;\n                _context3.next = 4;\n                return store.get(key, options);\n\n              case 4:\n                blockData = _context3.sent;\n                return _context3.abrupt(\"return\", new Block(blockData, cid));\n\n              case 8:\n                _context3.prev = 8;\n                _context3.t0 = _context3[\"catch\"](1);\n\n                if (!(_context3.t0.code === 'ERR_NOT_FOUND')) {\n                  _context3.next = 21;\n                  break;\n                }\n\n                otherCid = cidToOtherVersion(cid);\n\n                if (otherCid) {\n                  _context3.next = 14;\n                  break;\n                }\n\n                throw _context3.t0;\n\n              case 14:\n                otherKey = cidToKey(otherCid);\n                _context3.next = 17;\n                return store.get(otherKey, options);\n\n              case 17:\n                _blockData = _context3.sent;\n                _context3.next = 20;\n                return store.put(key, _blockData);\n\n              case 20:\n                return _context3.abrupt(\"return\", new Block(_blockData, cid));\n\n              case 21:\n                throw _context3.t0;\n\n              case 22:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[1, 8]]);\n      }))();\n    },\n\n    /**\n     * Like get, but for more.\n     *\n     * @param {AsyncIterator<CID>} cids\n     * @param {Object} options\n     * @returns {AsyncIterator<Block>}\n     */\n    getMany: function getMany(cids, options) {\n      var _this = this;\n\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, cid;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context4.prev = 2;\n                _iterator = _asyncIterator(cids);\n\n              case 4:\n                _context4.next = 6;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 6:\n                _step = _context4.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context4.next = 10;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 10:\n                _value = _context4.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context4.next = 18;\n                  break;\n                }\n\n                cid = _value;\n                _context4.next = 15;\n                return _this.get(cid, options);\n\n              case 15:\n                _iteratorNormalCompletion = true;\n                _context4.next = 4;\n                break;\n\n              case 18:\n                _context4.next = 24;\n                break;\n\n              case 20:\n                _context4.prev = 20;\n                _context4.t0 = _context4[\"catch\"](2);\n                _didIteratorError = true;\n                _iteratorError = _context4.t0;\n\n              case 24:\n                _context4.prev = 24;\n                _context4.prev = 25;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context4.next = 29;\n                  break;\n                }\n\n                _context4.next = 29;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 29:\n                _context4.prev = 29;\n\n                if (!_didIteratorError) {\n                  _context4.next = 32;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 32:\n                return _context4.finish(29);\n\n              case 33:\n                return _context4.finish(24);\n\n              case 34:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[2, 20, 24, 34], [25,, 29, 33]]);\n      }))();\n    },\n\n    /**\n     * Write a single block to the store.\n     *\n     * @param {Block} block\n     * @param {Object} options\n     * @returns {Promise<Block>}\n     */\n    put: function put(block, options) {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var exists;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (Block.isBlock(block)) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                throw new Error('invalid block');\n\n              case 2:\n                _context5.next = 4;\n                return _this2.has(block.cid);\n\n              case 4:\n                exists = _context5.sent;\n\n                if (!exists) {\n                  _context5.next = 7;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", _this2.get(block.cid, options));\n\n              case 7:\n                _context5.next = 9;\n                return store.put(cidToKey(block.cid), block.data, options);\n\n              case 9:\n                return _context5.abrupt(\"return\", block);\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }))();\n    },\n\n    /**\n     * Like put, but for more.\n     *\n     * @param {AsyncIterable<Block>|Iterable<Block>} blocks\n     * @param {Object} options\n     * @returns {AsyncIterable<Block>}\n     */\n    putMany: function putMany(blocks, options) {\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.delegateYield(_asyncGeneratorDelegate(_asyncIterator(pipe(blocks, function (source) {\n                  // turn them into a key/value pair\n                  return map(source, function (block) {\n                    return {\n                      key: cidToKey(block.cid),\n                      value: block.data\n                    };\n                  });\n                }, function (source) {\n                  // put them into the datastore\n                  return store.putMany(source, options);\n                }, function (source) {\n                  // map the returned key/value back into a block\n                  return map(source, function (_ref3) {\n                    var key = _ref3.key,\n                        value = _ref3.value;\n                    return new Block(value, keyToCid(key));\n                  });\n                })), _awaitAsyncGenerator), \"t0\", 1);\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }))();\n    },\n\n    /**\n     * Does the store contain block with this cid?\n     *\n     * @param {CID} cid\n     * @param {Object} options\n     * @returns {Promise<bool>}\n     */\n    has: function has(cid, options) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var exists, otherCid;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return store.has(cidToKey(cid), options);\n\n              case 2:\n                exists = _context7.sent;\n\n                if (!exists) {\n                  _context7.next = 5;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", exists);\n\n              case 5:\n                otherCid = cidToOtherVersion(cid);\n\n                if (otherCid) {\n                  _context7.next = 8;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", false);\n\n              case 8:\n                return _context7.abrupt(\"return\", store.has(cidToKey(otherCid), options));\n\n              case 9:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }))();\n    },\n\n    /**\n     * Delete a block from the store\n     *\n     * @param {CID} cid\n     * @param {Object} options\n     * @returns {Promise<void>}\n     */\n    delete: function _delete(cid, options) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                return _context8.abrupt(\"return\", store.delete(cidToKey(cid), options));\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }))();\n    },\n\n    /**\n     * Delete a block from the store\n     *\n     * @param {AsyncIterable<CID>} cids\n     * @param {Object} options\n     * @returns {Promise<void>}\n     */\n    deleteMany: function deleteMany(cids, options) {\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                return _context10.delegateYield(_asyncGeneratorDelegate(_asyncIterator(store.deleteMany(_wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n                  var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, cid;\n\n                  return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n                    while (1) {\n                      switch (_context9.prev = _context9.next) {\n                        case 0:\n                          _iteratorNormalCompletion2 = true;\n                          _didIteratorError2 = false;\n                          _context9.prev = 2;\n                          _iterator2 = _asyncIterator(cids);\n\n                        case 4:\n                          _context9.next = 6;\n                          return _awaitAsyncGenerator(_iterator2.next());\n\n                        case 6:\n                          _step2 = _context9.sent;\n                          _iteratorNormalCompletion2 = _step2.done;\n                          _context9.next = 10;\n                          return _awaitAsyncGenerator(_step2.value);\n\n                        case 10:\n                          _value2 = _context9.sent;\n\n                          if (_iteratorNormalCompletion2) {\n                            _context9.next = 18;\n                            break;\n                          }\n\n                          cid = _value2;\n                          _context9.next = 15;\n                          return cidToKey(cid);\n\n                        case 15:\n                          _iteratorNormalCompletion2 = true;\n                          _context9.next = 4;\n                          break;\n\n                        case 18:\n                          _context9.next = 24;\n                          break;\n\n                        case 20:\n                          _context9.prev = 20;\n                          _context9.t0 = _context9[\"catch\"](2);\n                          _didIteratorError2 = true;\n                          _iteratorError2 = _context9.t0;\n\n                        case 24:\n                          _context9.prev = 24;\n                          _context9.prev = 25;\n\n                          if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n                            _context9.next = 29;\n                            break;\n                          }\n\n                          _context9.next = 29;\n                          return _awaitAsyncGenerator(_iterator2.return());\n\n                        case 29:\n                          _context9.prev = 29;\n\n                          if (!_didIteratorError2) {\n                            _context9.next = 32;\n                            break;\n                          }\n\n                          throw _iteratorError2;\n\n                        case 32:\n                          return _context9.finish(29);\n\n                        case 33:\n                          return _context9.finish(24);\n\n                        case 34:\n                        case \"end\":\n                          return _context9.stop();\n                      }\n                    }\n                  }, _callee9, null, [[2, 20, 24, 34], [25,, 29, 33]]);\n                }))(), options)), _awaitAsyncGenerator), \"t0\", 1);\n\n              case 1:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10);\n      }))();\n    },\n\n    /**\n     * Close the store\n     *\n     * @returns {Promise<void>}\n     */\n    close: function close() {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                return _context11.abrupt(\"return\", store.close());\n\n              case 1:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11);\n      }))();\n    }\n  };\n}\n\nfunction cidToOtherVersion(cid) {\n  try {\n    return cid.version === 0 ? cid.toV1() : cid.toV0();\n  } catch (err) {\n    return null;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}