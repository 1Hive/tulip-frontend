{"ast":null,"code":"'use strict';\n/**\n * A list of unique peer infos.\n */\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar PeerList = /*#__PURE__*/function () {\n  function PeerList() {\n    _classCallCheck(this, PeerList);\n\n    this.list = [];\n  }\n  /**\n   * Add a new info. Returns `true` if it was a new one\n   *\n   * @param {PeerInfo} info\n   * @returns {bool}\n   */\n\n\n  _createClass(PeerList, [{\n    key: \"push\",\n    value: function push(info) {\n      if (!this.has(info)) {\n        this.list.push(info);\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Check if this PeerInfo is already in here.\n     *\n     * @param {PeerInfo} info\n     * @returns {bool}\n     */\n\n  }, {\n    key: \"has\",\n    value: function has(info) {\n      var match = this.list.find(function (i) {\n        return i.id.isEqual(info.id);\n      });\n      return Boolean(match);\n    }\n    /**\n     * Get the list as an array.\n     *\n     * @returns {Array<PeerInfo>}\n     */\n\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return this.list.slice();\n    }\n    /**\n     * Remove the last element\n     *\n     * @returns {PeerInfo}\n     */\n\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      return this.list.pop();\n    }\n    /**\n     * The length of the list\n     *\n     * @type {number}\n     */\n\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.list.length;\n    }\n  }]);\n\n  return PeerList;\n}();\n\nmodule.exports = PeerList;","map":null,"metadata":{},"sourceType":"script"}