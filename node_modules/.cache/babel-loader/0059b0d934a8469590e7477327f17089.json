{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar _require2 = require('event-iterator'),\n    EventIterator = _require2.EventIterator; // copied from github.com/feross/buffer\n// Some ArrayBuffers are not passing the instanceof check, so we need to do a bit more work :(\n\n\nfunction isArrayBuffer(obj) {\n  return obj instanceof ArrayBuffer || obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' && typeof obj.byteLength === 'number';\n}\n\nmodule.exports = function (socket) {\n  var removeListener = socket.removeEventListener || socket.removeListener;\n\n  var source = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var messages, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _value2, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            messages = new EventIterator(function (_ref2) {\n              var push = _ref2.push,\n                  stop = _ref2.stop,\n                  fail = _ref2.fail;\n              socket.addEventListener('message', push);\n              socket.addEventListener('error', fail);\n              socket.addEventListener('close', stop);\n              return function () {\n                removeListener.call(socket, 'message', push);\n                removeListener.call(socket, 'error', fail);\n                removeListener.call(socket, 'close', stop);\n              };\n            }, {\n              highWaterMark: Infinity\n            });\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 3;\n            _iterator = _asyncIterator(messages);\n\n          case 5:\n            _context.next = 7;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 7:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 11;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 11:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 19;\n              break;\n            }\n\n            _value2 = _value, data = _value2.data;\n            _context.next = 16;\n            return isArrayBuffer(data) ? Buffer.from(data) : data;\n\n          case 16:\n            _iteratorNormalCompletion = true;\n            _context.next = 5;\n            break;\n\n          case 19:\n            _context.next = 25;\n            break;\n\n          case 21:\n            _context.prev = 21;\n            _context.t0 = _context[\"catch\"](3);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 25:\n            _context.prev = 25;\n            _context.prev = 26;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 30;\n              break;\n            }\n\n            _context.next = 30;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 30:\n            _context.prev = 30;\n\n            if (!_didIteratorError) {\n              _context.next = 33;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 33:\n            return _context.finish(30);\n\n          case 34:\n            return _context.finish(25);\n\n          case 35:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 21, 25, 35], [26,, 30, 34]]);\n  }))();\n\n  var connected = socket.readyState === 1;\n  var connError;\n  socket.addEventListener('open', function () {\n    connected = true;\n    connError = null;\n  });\n  socket.addEventListener('close', function () {\n    connected = false;\n    connError = null;\n  });\n  socket.addEventListener('error', function (err) {\n    if (!connected) connError = err;\n  });\n\n  source.connected = function () {\n    return new Promise(function (resolve, reject) {\n      if (connected) return resolve();\n      if (connError) return reject(connError);\n\n      var cleanUp = function cleanUp(cont) {\n        removeListener.call(socket, 'open', onOpen);\n        removeListener.call(socket, 'error', onError);\n        cont();\n      };\n\n      var onOpen = function onOpen() {\n        return cleanUp(resolve);\n      };\n\n      var onError = function onError(err) {\n        return cleanUp(function () {\n          return reject(err);\n        });\n      };\n\n      socket.addEventListener('open', onOpen);\n      socket.addEventListener('error', onError);\n    });\n  };\n\n  return source;\n};","map":null,"metadata":{},"sourceType":"script"}