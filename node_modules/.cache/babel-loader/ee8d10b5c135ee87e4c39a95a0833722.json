{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar debounce = require('just-debounce-it');\n\nvar Message = require('../types/message');\n\nvar logger = require('../utils').logger;\n\nvar _require = require('../constants'),\n    wantlistSendDebounceMs = _require.wantlistSendDebounceMs;\n\nmodule.exports = /*#__PURE__*/function () {\n  function MsgQueue(selfPeerId, otherPeerId, network) {\n    _classCallCheck(this, MsgQueue);\n\n    this.peerId = otherPeerId;\n    this.network = network;\n    this.refcnt = 1;\n    this._entries = [];\n    this._log = logger(selfPeerId, 'msgqueue', otherPeerId.toB58String().slice(0, 8));\n    this.sendEntries = debounce(this._sendEntries.bind(this), wantlistSendDebounceMs);\n  }\n\n  _createClass(MsgQueue, [{\n    key: \"addMessage\",\n    value: function addMessage(msg) {\n      if (msg.empty) {\n        return;\n      }\n\n      this.send(msg);\n    }\n  }, {\n    key: \"addEntries\",\n    value: function addEntries(entries) {\n      this._entries = this._entries.concat(entries);\n      this.sendEntries();\n    }\n  }, {\n    key: \"_sendEntries\",\n    value: function _sendEntries() {\n      if (!this._entries.length) {\n        return;\n      }\n\n      var msg = new Message(false);\n\n      this._entries.forEach(function (entry) {\n        if (entry.cancel) {\n          msg.cancel(entry.cid);\n        } else {\n          msg.addEntry(entry.cid, entry.priority);\n        }\n      });\n\n      this._entries = [];\n      this.addMessage(msg);\n    }\n  }, {\n    key: \"send\",\n    value: function () {\n      var _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(msg) {\n        var _this = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return this.network.connectTo(this.peerId);\n\n              case 3:\n                _context.next = 9;\n                break;\n\n              case 5:\n                _context.prev = 5;\n                _context.t0 = _context[\"catch\"](0);\n\n                this._log.error('cant connect to peer %s: %s', this.peerId.toB58String(), _context.t0.message);\n\n                return _context.abrupt(\"return\");\n\n              case 9:\n                this._log('sending message to peer %s', this.peerId.toB58String()); // Note: Don't wait for sendMessage() to complete\n\n\n                this.network.sendMessage(this.peerId, msg).catch(function (err) {\n                  _this._log.error('send error: %s', err.message);\n                });\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 5]]);\n      }));\n\n      function send(_x) {\n        return _send.apply(this, arguments);\n      }\n\n      return send;\n    }()\n  }]);\n\n  return MsgQueue;\n}();","map":null,"metadata":{},"sourceType":"script"}