{"ast":null,"code":"/**\n * Isomorphic, functional type-checking for Javascript.\n * @module typical\n * @typicalname t\n * @example\n * const t = require('typical')\n * const allDefined = array.every(t.isDefined)\n */\n\n/**\n * Returns true if input is a number. It is a more reasonable alternative to `typeof n` which returns `number` for `NaN` and `Infinity`.\n *\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n * @example\n * > t.isNumber(0)\n * true\n * > t.isNumber(1)\n * true\n * > t.isNumber(1.1)\n * true\n * > t.isNumber(0xff)\n * true\n * > t.isNumber(0644)\n * true\n * > t.isNumber(6.2e5)\n * true\n * > t.isNumber(NaN)\n * false\n * > t.isNumber(Infinity)\n * false\n */\nexport function isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n/**\n * A plain object is a simple object literal, it is not an instance of a class. Returns true if the input `typeof` is `object` and directly decends from `Object`.\n *\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n * @example\n * > t.isPlainObject({ something: 'one' })\n * true\n * > t.isPlainObject(new Date())\n * false\n * > t.isPlainObject([ 0, 1 ])\n * false\n * > t.isPlainObject(/test/)\n * false\n * > t.isPlainObject(1)\n * false\n * > t.isPlainObject('one')\n * false\n * > t.isPlainObject(null)\n * false\n * > t.isPlainObject((function * () {})())\n * false\n * > t.isPlainObject(function * () {})\n * false\n */\n\nexport function isPlainObject(input) {\n  return input !== null && typeof input === 'object' && input.constructor === Object;\n}\n/**\n * An array-like value has all the properties of an array yet is not an array instance. An example is the `arguments` object. Returns `true`` if the input value is an object, not `null`` and has a `length` property set with a numeric value.\n *\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n * @example\n * function sum(x, y){\n *   console.log(t.isArrayLike(arguments))\n *   // prints `true`\n * }\n */\n\nexport function isArrayLike(input) {\n  return isObject(input) && typeof input.length === 'number';\n}\n/**\n * Returns true if the typeof input is `'object'` but not null.\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n */\n\nexport function isObject(input) {\n  return typeof input === 'object' && input !== null;\n}\n/**\n * Returns true if the input value is defined.\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n */\n\nexport function isDefined(input) {\n  return typeof input !== 'undefined';\n}\n/**\n * Returns true if the input value is undefined.\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n */\n\nexport function isUndefined(input) {\n  return !isDefined(input);\n}\n/**\n * Returns true if the input value is null.\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n */\n\nexport function isNull(input) {\n  return input === null;\n}\n/**\n * Returns true if the input value is not one of `undefined`, `null`, or `NaN`.\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n */\n\nexport function isDefinedValue(input) {\n  return isDefined(input) && !isNull(input) && !Number.isNaN(input);\n}\n/**\n * Returns true if the input value is an ES2015 `class`.\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n */\n\nexport function isClass(input) {\n  if (typeof input === 'function') {\n    return /^class /.test(Function.prototype.toString.call(input));\n  } else {\n    return false;\n  }\n}\n/**\n * Returns true if the input is a string, number, symbol, boolean, null or undefined value.\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n */\n\nexport function isPrimitive(input) {\n  if (input === null) return true;\n\n  switch (typeof input) {\n    case 'string':\n    case 'number':\n    case 'symbol':\n    case 'undefined':\n    case 'boolean':\n      return true;\n\n    default:\n      return false;\n  }\n}\n/**\n * Returns true if the input is a Promise.\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n */\n\nexport function isPromise(input) {\n  if (input) {\n    const isPromise = isDefined(Promise) && input instanceof Promise;\n    const isThenable = input.then && typeof input.then === 'function';\n    return !!(isPromise || isThenable);\n  } else {\n    return false;\n  }\n}\n/**\n * Returns true if the input is an iterable (`Map`, `Set`, `Array`, Generator etc.).\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n * @example\n * > t.isIterable('string')\n * true\n * > t.isIterable(new Map())\n * true\n * > t.isIterable([])\n * true\n * > t.isIterable((function * () {})())\n * true\n * > t.isIterable(Promise.resolve())\n * false\n * > t.isIterable(Promise)\n * false\n * > t.isIterable(true)\n * false\n * > t.isIterable({})\n * false\n * > t.isIterable(0)\n * false\n * > t.isIterable(1.1)\n * false\n * > t.isIterable(NaN)\n * false\n * > t.isIterable(Infinity)\n * false\n * > t.isIterable(function () {})\n * false\n * > t.isIterable(Date)\n * false\n * > t.isIterable()\n * false\n * > t.isIterable({ then: function () {} })\n * false\n */\n\nexport function isIterable(input) {\n  if (input === null || !isDefined(input)) {\n    return false;\n  } else {\n    return typeof input[Symbol.iterator] === 'function' || typeof input[Symbol.asyncIterator] === 'function';\n  }\n}\n/**\n * Returns true if the input value is a string. The equivalent of `typeof input === 'string'` for use in funcitonal contexts.\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n */\n\nexport function isString(input) {\n  return typeof input === 'string';\n}\n/**\n * Returns true if the input value is a function. The equivalent of `typeof input === 'function'` for use in funcitonal contexts.\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n */\n\nexport function isFunction(input) {\n  return typeof input === 'function';\n}\nexport default {\n  isNumber,\n  isPlainObject,\n  isArrayLike,\n  isObject,\n  isDefined,\n  isUndefined,\n  isNull,\n  isDefinedValue,\n  isClass,\n  isPrimitive,\n  isPromise,\n  isIterable,\n  isString,\n  isFunction\n};","map":null,"metadata":{},"sourceType":"module"}