{"ast":null,"code":"var _defineProperty = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar FIFO = require('fast-fifo');\n\nmodule.exports = function (options) {\n  var _pushable2, _pushable3;\n\n  options = options || {};\n  var onEnd;\n\n  if (typeof options === 'function') {\n    onEnd = options;\n    options = {};\n  } else {\n    onEnd = options.onEnd;\n  }\n\n  var buffer = new FIFO();\n\n  var pushable, _onNext, ended;\n\n  var waitNext = function waitNext() {\n    if (!buffer.isEmpty()) {\n      if (options.writev) {\n        var _next;\n\n        var values = [];\n\n        while (!buffer.isEmpty()) {\n          _next = buffer.shift();\n          if (_next.error) throw _next.error;\n          values.push(_next.value);\n        }\n\n        return {\n          done: _next.done,\n          value: values\n        };\n      }\n\n      var next = buffer.shift();\n      if (next.error) throw next.error;\n      return next;\n    }\n\n    if (ended) return {\n      done: true\n    };\n    return new Promise(function (resolve, reject) {\n      _onNext = function onNext(next) {\n        _onNext = null;\n\n        if (next.error) {\n          reject(next.error);\n        } else {\n          if (options.writev && !next.done) {\n            resolve({\n              done: next.done,\n              value: [next.value]\n            });\n          } else {\n            resolve(next);\n          }\n        }\n\n        return pushable;\n      };\n    });\n  };\n\n  var bufferNext = function bufferNext(next) {\n    if (_onNext) return _onNext(next);\n    buffer.push(next);\n    return pushable;\n  };\n\n  var bufferError = function bufferError(err) {\n    buffer = new FIFO();\n    if (_onNext) return _onNext({\n      error: err\n    });\n    buffer.push({\n      error: err\n    });\n    return pushable;\n  };\n\n  var push = function push(value) {\n    if (ended) return pushable;\n    return bufferNext({\n      done: false,\n      value: value\n    });\n  };\n\n  var end = function end(err) {\n    if (ended) return pushable;\n    ended = true;\n    return err ? bufferError(err) : bufferNext({\n      done: true\n    });\n  };\n\n  var _return = function _return() {\n    buffer = new FIFO();\n    end();\n    return {\n      done: true\n    };\n  };\n\n  var _throw = function _throw(err) {\n    end(err);\n    return {\n      done: true\n    };\n  };\n\n  pushable = (_pushable2 = {}, _defineProperty(_pushable2, Symbol.asyncIterator, function () {\n    return this;\n  }), _defineProperty(_pushable2, \"next\", waitNext), _defineProperty(_pushable2, \"return\", _return), _defineProperty(_pushable2, \"throw\", _throw), _defineProperty(_pushable2, \"push\", push), _defineProperty(_pushable2, \"end\", end), _pushable2);\n  if (!onEnd) return pushable;\n  var _pushable = pushable;\n  pushable = (_pushable3 = {}, _defineProperty(_pushable3, Symbol.asyncIterator, function () {\n    return this;\n  }), _defineProperty(_pushable3, \"next\", function next() {\n    return _pushable.next();\n  }), _defineProperty(_pushable3, \"throw\", function _throw(err) {\n    _pushable.throw(err);\n\n    if (onEnd) {\n      onEnd(err);\n      onEnd = null;\n    }\n\n    return {\n      done: true\n    };\n  }), _defineProperty(_pushable3, \"return\", function _return() {\n    _pushable.return();\n\n    if (onEnd) {\n      onEnd();\n      onEnd = null;\n    }\n\n    return {\n      done: true\n    };\n  }), _defineProperty(_pushable3, \"push\", push), _defineProperty(_pushable3, \"end\", function end(err) {\n    _pushable.end(err);\n\n    if (onEnd) {\n      onEnd(err);\n      onEnd = null;\n    }\n\n    return pushable;\n  }), _pushable3);\n  return pushable;\n};","map":null,"metadata":{},"sourceType":"script"}