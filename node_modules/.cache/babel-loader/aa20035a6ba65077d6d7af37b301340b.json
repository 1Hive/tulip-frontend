{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:webrtc-star');\nlog.error = debug('libp2p:webrtc-star:error');\n\nvar _require = require('events'),\n    EventEmitter = _require.EventEmitter;\n\nvar errcode = require('err-code');\n\nvar withIs = require('class-is');\n\nvar _require2 = require('abortable-iterator'),\n    AbortError = _require2.AbortError;\n\nvar SimplePeer = require('simple-peer');\n\nvar webrtcSupport = require('webrtcsupport');\n\nvar multiaddr = require('multiaddr');\n\nvar mafmt = require('mafmt');\n\nvar PeerId = require('peer-id');\n\nvar PeerInfo = require('peer-info');\n\nvar _require3 = require('./constants'),\n    CODE_CIRCUIT = _require3.CODE_CIRCUIT;\n\nvar _createListener = require('./listener');\n\nvar toConnection = require('./socket-to-conn');\n\nvar _require4 = require('./utils'),\n    cleanMultiaddr = _require4.cleanMultiaddr;\n\nfunction noop() {}\n/**\n * @class WebRTCStar\n */\n\n\nvar WebRTCStar = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   * @param {object} options\n   * @param {Upgrader} options.upgrader\n   */\n  function WebRTCStar() {\n    var _this = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, WebRTCStar);\n\n    if (!options.upgrader) {\n      throw new Error('An upgrader must be provided. See https://github.com/libp2p/interface-transport#upgrader.');\n    }\n\n    this._upgrader = options.upgrader;\n    this._signallingAddr = undefined;\n    this.sioOptions = {\n      transports: ['websocket'],\n      'force new connection': true\n    };\n\n    if (options.wrtc) {\n      this.wrtc = options.wrtc;\n    }\n\n    this.listenersRefs = {}; // Discovery\n\n    this.discovery = new EventEmitter();\n    this.discovery.tag = 'webRTCStar';\n    this.discovery._isStarted = false;\n\n    this.discovery.start = function () {\n      _this.discovery._isStarted = true;\n    };\n\n    this.discovery.stop = function () {\n      _this.discovery._isStarted = false;\n    };\n\n    this._peerDiscovered = this._peerDiscovered.bind(this);\n  }\n  /**\n   * @async\n   * @param {Multiaddr} ma\n   * @param {object} options\n   * @param {AbortSignal} options.signal Used to abort dial requests\n   * @returns {Connection} An upgraded Connection\n   */\n\n\n  _createClass(WebRTCStar, [{\n    key: \"dial\",\n    value: function () {\n      var _dial = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ma) {\n        var options,\n            rawConn,\n            maConn,\n            conn,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                _context.next = 3;\n                return this._connect(ma, options);\n\n              case 3:\n                rawConn = _context.sent;\n                maConn = toConnection(rawConn, {\n                  remoteAddr: ma,\n                  signal: options.signal\n                });\n                log('new outbound connection %s', maConn.remoteAddr);\n                _context.next = 8;\n                return this._upgrader.upgradeOutbound(maConn);\n\n              case 8:\n                conn = _context.sent;\n                log('outbound connection %s upgraded', maConn.remoteAddr);\n                return _context.abrupt(\"return\", conn);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function dial(_x) {\n        return _dial.apply(this, arguments);\n      }\n\n      return dial;\n    }()\n    /**\n     * @private\n     * @param {Multiaddr} ma\n     * @param {object} options\n     * @param {AbortSignal} options.signal Used to abort dial requests\n     * @returns {Promise<SimplePeer>} Resolves a SimplePeer Webrtc channel\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(ma) {\n      var _this2 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (options.signal && options.signal.aborted) {\n        throw new AbortError();\n      }\n\n      var spOptions = {\n        initiator: true,\n        trickle: false\n      }; // Use custom WebRTC implementation\n\n      if (this.wrtc) {\n        spOptions.wrtc = this.wrtc;\n      }\n\n      var cOpts = ma.toOptions();\n      var intentId = (~~(Math.random() * 1e9)).toString(36) + Date.now();\n      var sioClient = this.listenersRefs[Object.keys(this.listenersRefs)[0]].io;\n      return new Promise(function (resolve, reject) {\n        var start = Date.now();\n        var connected;\n        log('dialing %s:%s', cOpts.host, cOpts.port);\n        var channel = new SimplePeer(spOptions);\n\n        var onError = function onError(err) {\n          if (!connected) {\n            var msg = \"connection error \".concat(cOpts.host, \":\").concat(cOpts.port, \": \").concat(err.message);\n            err.message = msg;\n            log.error(msg);\n            done(err);\n          }\n        };\n\n        var onTimeout = function onTimeout() {\n          log('connnection timeout %s:%s', cOpts.host, cOpts.port);\n          var err = errcode(new Error(\"connection timeout after \".concat(Date.now() - start, \"ms\")), 'ERR_CONNECT_TIMEOUT'); // Note: this will result in onError() being called\n\n          channel.emit('error', err);\n        };\n\n        var onConnect = function onConnect() {\n          connected = true;\n          log('connection opened %s:%s', cOpts.host, cOpts.port);\n          done(null);\n        };\n\n        var onAbort = function onAbort() {\n          log.error('connection aborted %s:%s', cOpts.host, cOpts.port);\n          channel.destroy();\n          done(new AbortError());\n        };\n\n        var done = function done(err) {\n          channel.removeListener('timeout', onTimeout);\n          channel.removeListener('connect', onConnect);\n          options.signal && options.signal.removeEventListener('abort', onAbort);\n          err ? reject(err) : resolve(channel);\n        };\n\n        channel.on('error', onError);\n        channel.once('timeout', onTimeout);\n        channel.once('connect', onConnect);\n        channel.on('close', function () {\n          channel.removeListener('error', onError);\n        });\n        options.signal && options.signal.addEventListener('abort', onAbort);\n        channel.on('signal', function (signal) {\n          sioClient.emit('ss-handshake', {\n            intentId: intentId,\n            srcMultiaddr: _this2._signallingAddr.toString(),\n            dstMultiaddr: ma.toString(),\n            signal: signal\n          });\n        }); // NOTE: aegir segfaults if we do .once on the socket.io event emitter and we\n        // are clueless as to why.\n\n        sioClient.on('ws-handshake', function (offer) {\n          if (offer.intentId === intentId && offer.err) {\n            reject(errcode(offer.err instanceof Error ? offer.err : new Error(offer.err), 'ERR_SIGNALLING_FAILED'));\n          }\n\n          if (offer.intentId !== intentId || !offer.answer || channel.destroyed) {\n            return;\n          }\n\n          channel.signal(offer.signal);\n        });\n      });\n    }\n    /**\n     * Creates a WebrtcStar listener. The provided `handler` function will be called\n     * anytime a new incoming Connection has been successfully upgraded via\n     * `upgrader.upgradeInbound`.\n     * @param {object} [options] simple-peer options for listener\n     * @param {function (Connection)} handler\n     * @returns {Listener} A WebrtcStar listener\n     */\n\n  }, {\n    key: \"createListener\",\n    value: function createListener() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var handler = arguments.length > 1 ? arguments[1] : undefined;\n\n      if (!webrtcSupport.support && !this.wrtc) {\n        throw errcode(new Error('no WebRTC support'), 'ERR_NO_WEBRTC_SUPPORT');\n      }\n\n      if (typeof options === 'function') {\n        handler = options;\n        options = {};\n      }\n\n      handler = handler || noop;\n      return _createListener({\n        handler: handler,\n        upgrader: this._upgrader\n      }, this, options);\n    }\n    /**\n     * Takes a list of `Multiaddr`s and returns only valid TCP addresses\n     * @param {Multiaddr[]} multiaddrs\n     * @returns {Multiaddr[]} Valid TCP multiaddrs\n     */\n\n  }, {\n    key: \"filter\",\n    value: function filter(multiaddrs) {\n      multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs];\n      return multiaddrs.filter(function (ma) {\n        if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n          return false;\n        }\n\n        return mafmt.WebRTCStar.matches(ma);\n      });\n    }\n  }, {\n    key: \"_peerDiscovered\",\n    value: function _peerDiscovered(maStr) {\n      if (!this.discovery._isStarted) return;\n      log('Peer Discovered:', maStr);\n      maStr = cleanMultiaddr(maStr);\n      var ma = multiaddr(maStr);\n      var peerId = PeerId.createFromB58String(ma.getPeerId());\n      var peerInfo = new PeerInfo(peerId);\n      peerInfo.multiaddrs.add(ma);\n      this.discovery.emit('peer', peerInfo);\n    }\n  }]);\n\n  return WebRTCStar;\n}();\n\nmodule.exports = withIs(WebRTCStar, {\n  className: 'WebRTCStar',\n  symbolName: '@libp2p/js-libp2p-webrtc-star/webrtcstar'\n});","map":null,"metadata":{},"sourceType":"script"}