{"ast":null,"code":"import _styled4 from \"styled-components\";\nimport _styled3 from \"styled-components\";\nimport _styled2 from \"styled-components\";\nimport _styled from \"styled-components\";\nvar _jsxFileName = \"/Users/fabianmolina/Documents/1hive/tulip-frontend/src/components/GlobalPreferences/Network/Network.js\";\nimport React, { useCallback, useState } from 'react';\nimport styled from 'styled-components';\nimport { Box, Button, GU, TextInput, textStyle, useLayout, useTheme } from '@1hive/1hive-ui';\nimport { defaultEthNode, defaultIpfsGateway, defaultSubgraphHttpEndpoint } from '../../../endpoints';\nimport { clearLocalStorageNetworkSettings, setDefaultEthNode, setIpfsGateway, setSubgraphHttpEndpoint } from '../../../local-settings';\nimport { InvalidNetworkType, InvalidURI, NoConnection } from '../../../errors';\nimport { checkValidEthNode, getNetworkType, sanitizeNetworkType } from '../../../lib/web3-utils';\nimport { validHttpFormat } from '../../../lib/uri-utils';\nimport { useEnterKey } from '../../../hooks/useKeyboardArrows';\nimport { useSubgraph } from '../../../providers/Subgraph';\n\nvar _StyledDiv = styled(\"div\").withConfig({\n  displayName: \"Network___StyledDiv\",\n  componentId: \"m2vdws-0\"\n})([\"margin-bottom:\", \"px;\"], p => p._css);\n\nvar _StyledButton = styled(Button).withConfig({\n  displayName: \"Network___StyledButton\",\n  componentId: \"m2vdws-1\"\n})([\"margin-bottom:\", \"px;\"], p => p._css2);\n\nfunction Network() {\n  const {\n    ethNode,\n    handleClearNetworkSettings,\n    handleEthNodeChange,\n    handleIpfsGatewayChange,\n    handleNetworkChange,\n    handleSubgraphHttpEndpointChange,\n    ipfsGateway,\n    settingsErrors,\n    subgraphHttpEndpoint\n  } = useNetwork();\n  const {\n    layoutName\n  } = useLayout();\n  const compact = layoutName === 'small';\n  const {\n    ethError,\n    httpSubgraphError\n  } = settingsErrors || {};\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    heading: \"Node settings\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    label: \"Ethereum node\",\n    text: ethNode,\n    onTextChange: handleEthNodeChange,\n    error: ethError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Field, {\n    label: \"IPFS Gateway\",\n    text: ipfsGateway,\n    onTextChange: handleIpfsGatewayChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Field, {\n    label: \"Subgraph HTTP endpoint\",\n    text: subgraphHttpEndpoint,\n    onTextChange: handleSubgraphHttpEndpointChange,\n    error: httpSubgraphError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    mode: \"strong\",\n    onClick: handleNetworkChange,\n    wide: compact,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, \"Save changes\")), /*#__PURE__*/React.createElement(Box, {\n    heading: \"Troubleshooting\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(_StyledDiv, {\n    _css: 2 * GU,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, \"Press this button to reset the network settings to their defaults.\")), /*#__PURE__*/React.createElement(_StyledButton, {\n    onClick: handleClearNetworkSettings,\n    wide: compact,\n    _css2: 2 * GU,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, \"Reset network settings\")));\n}\n\nvar _StyledTextInput = styled(TextInput).withConfig({\n  displayName: \"Network___StyledTextInput\",\n  componentId: \"m2vdws-2\"\n})([\"\", \";color:\", \";\"], p => p._css3, p => p._css4);\n\nvar _StyledSpan = styled(\"span\").withConfig({\n  displayName: \"Network___StyledSpan\",\n  componentId: \"m2vdws-3\"\n})([\"\", \";color:\", \";\"], p => p._css5, p => p._css6);\n\nfunction Field({\n  label,\n  text,\n  onTextChange,\n  error\n}) {\n  const theme = useTheme();\n  return /*#__PURE__*/React.createElement(Label, {\n    theme: theme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, label, /*#__PURE__*/React.createElement(_StyledTextInput, {\n    value: text,\n    wide: true,\n    onChange: onTextChange,\n    _css3: textStyle('body2'),\n    _css4: theme.contentSecondary,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }), error && /*#__PURE__*/React.createElement(_StyledSpan, {\n    _css5: textStyle('body4'),\n    _css6: theme.negative,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, error));\n}\n\nconst useNetwork = () => {\n  const [settingsErrors, setSettingsErrors] = useState(null);\n  const [ethNode, setEthNodeValue] = useState(defaultEthNode);\n  const [ipfsGateway, setIpfsGatewayValue] = useState(defaultIpfsGateway);\n  const [subgraphHttpEndpoint, setSubgraphHttpEndpointValue] = useState(defaultSubgraphHttpEndpoint);\n  const {\n    resetSubgraphClient\n  } = useSubgraph();\n  const networkType = getNetworkType();\n  const subgraphChanged = subgraphHttpEndpoint !== defaultSubgraphHttpEndpoint;\n  const defaultsChanged = ipfsGateway !== defaultIpfsGateway || ethNode !== defaultEthNode || subgraphChanged;\n  const handleNetworkChange = useCallback(async () => {\n    if (!defaultsChanged) {\n      setSettingsErrors(null);\n      return;\n    }\n\n    const errors = await validateNetworkSettings(ethNode, subgraphHttpEndpoint, networkType);\n\n    if (errors) {\n      setSettingsErrors(errors);\n      return;\n    }\n\n    setDefaultEthNode(ethNode);\n    setSubgraphHttpEndpoint(subgraphHttpEndpoint);\n    setIpfsGateway(ipfsGateway);\n\n    if (subgraphChanged) {\n      resetSubgraphClient();\n    }\n\n    window.location.reload();\n  }, [defaultsChanged, ethNode, subgraphHttpEndpoint, networkType, ipfsGateway, subgraphChanged, resetSubgraphClient]);\n  const handleClearNetworkSettings = useCallback(() => {\n    clearLocalStorageNetworkSettings();\n    window.location.reload();\n  }, []);\n  useEnterKey(handleNetworkChange);\n  return {\n    ethNode,\n    ipfsGateway,\n    subgraphHttpEndpoint,\n    handleNetworkChange,\n    handleClearNetworkSettings,\n    settingsErrors,\n    handleEthNodeChange: ({\n      currentTarget: {\n        value\n      }\n    }) => setEthNodeValue(value),\n    handleIpfsGatewayChange: ({\n      currentTarget: {\n        value\n      }\n    }) => setIpfsGatewayValue(value),\n    handleSubgraphHttpEndpointChange: ({\n      currentTarget: {\n        value\n      }\n    }) => setSubgraphHttpEndpointValue(value)\n  };\n};\n\nasync function validateNetworkSettings(ethNode, subgraphHttpEndpoint, networkType) {\n  const settingsErrors = {};\n\n  try {\n    await checkValidEthNode(ethNode);\n  } catch (err) {\n    if (err instanceof InvalidNetworkType) {\n      settingsErrors.ethError = `Node must be connected to ${sanitizeNetworkType(networkType)}`;\n    }\n\n    if (err instanceof InvalidURI) {\n      settingsErrors.ethError = 'Must provide HTTP endpoint to node';\n    }\n\n    if (err instanceof NoConnection) {\n      settingsErrors.ethError = 'Could not connect to node';\n    }\n\n    if (!validHttpFormat(subgraphHttpEndpoint)) {\n      settingsErrors.httpSubgraphError = 'The URI must use the HTTP protocol';\n    }\n\n    if (Object.entries(settingsErrors).length === 0) {\n      return null;\n    }\n\n    return settingsErrors;\n  }\n}\n\nconst Label = styled.label.withConfig({\n  displayName: \"Network__Label\",\n  componentId: \"m2vdws-4\"\n})([\"color:\", \";display:block;margin-bottom:\", \"px;\"], ({\n  theme\n}) => theme.content, 2 * GU);\nexport default /*#__PURE__*/React.memo(Network);","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/components/GlobalPreferences/Network/Network.js"],"names":["React","useCallback","useState","styled","Box","Button","GU","TextInput","textStyle","useLayout","useTheme","defaultEthNode","defaultIpfsGateway","defaultSubgraphHttpEndpoint","clearLocalStorageNetworkSettings","setDefaultEthNode","setIpfsGateway","setSubgraphHttpEndpoint","InvalidNetworkType","InvalidURI","NoConnection","checkValidEthNode","getNetworkType","sanitizeNetworkType","validHttpFormat","useEnterKey","useSubgraph","Network","ethNode","handleClearNetworkSettings","handleEthNodeChange","handleIpfsGatewayChange","handleNetworkChange","handleSubgraphHttpEndpointChange","ipfsGateway","settingsErrors","subgraphHttpEndpoint","useNetwork","layoutName","compact","ethError","httpSubgraphError","Field","label","text","onTextChange","error","theme","contentSecondary","negative","setSettingsErrors","setEthNodeValue","setIpfsGatewayValue","setSubgraphHttpEndpointValue","resetSubgraphClient","networkType","subgraphChanged","defaultsChanged","errors","validateNetworkSettings","window","location","reload","currentTarget","value","err","Object","entries","length","Label","content","memo"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  Box,\n  Button,\n  GU,\n  TextInput,\n  textStyle,\n  useLayout,\n  useTheme,\n} from '@1hive/1hive-ui'\nimport {\n  defaultEthNode,\n  defaultIpfsGateway,\n  defaultSubgraphHttpEndpoint,\n} from '../../../endpoints'\nimport {\n  clearLocalStorageNetworkSettings,\n  setDefaultEthNode,\n  setIpfsGateway,\n  setSubgraphHttpEndpoint,\n} from '../../../local-settings'\nimport { InvalidNetworkType, InvalidURI, NoConnection } from '../../../errors'\nimport {\n  checkValidEthNode,\n  getNetworkType,\n  sanitizeNetworkType,\n} from '../../../lib/web3-utils'\nimport { validHttpFormat } from '../../../lib/uri-utils'\nimport { useEnterKey } from '../../../hooks/useKeyboardArrows'\nimport { useSubgraph } from '../../../providers/Subgraph'\n\nfunction Network() {\n  const {\n    ethNode,\n    handleClearNetworkSettings,\n    handleEthNodeChange,\n    handleIpfsGatewayChange,\n    handleNetworkChange,\n    handleSubgraphHttpEndpointChange,\n    ipfsGateway,\n    settingsErrors,\n    subgraphHttpEndpoint,\n  } = useNetwork()\n\n  const { layoutName } = useLayout()\n  const compact = layoutName === 'small'\n  const { ethError, httpSubgraphError } = settingsErrors || {}\n\n  return (\n    <React.Fragment>\n      <Box heading=\"Node settings\">\n        <Field\n          label=\"Ethereum node\"\n          text={ethNode}\n          onTextChange={handleEthNodeChange}\n          error={ethError}\n        />\n        <Field\n          label=\"IPFS Gateway\"\n          text={ipfsGateway}\n          onTextChange={handleIpfsGatewayChange}\n        />\n        <Field\n          label=\"Subgraph HTTP endpoint\"\n          text={subgraphHttpEndpoint}\n          onTextChange={handleSubgraphHttpEndpointChange}\n          error={httpSubgraphError}\n        />\n        <Button mode=\"strong\" onClick={handleNetworkChange} wide={compact}>\n          Save changes\n        </Button>\n      </Box>\n      <Box heading=\"Troubleshooting\">\n        <div\n          css={`\n            margin-bottom: ${2 * GU}px;\n          `}\n        >\n          <span>\n            Press this button to reset the network settings to their defaults.\n          </span>\n        </div>\n        <Button\n          css={`\n            margin-bottom: ${2 * GU}px;\n          `}\n          onClick={handleClearNetworkSettings}\n          wide={compact}\n        >\n          Reset network settings\n        </Button>\n      </Box>\n    </React.Fragment>\n  )\n}\n\nfunction Field({ label, text, onTextChange, error }) {\n  const theme = useTheme()\n  return (\n    <Label theme={theme}>\n      {label}\n      <TextInput\n        value={text}\n        wide\n        onChange={onTextChange}\n        css={`\n          ${textStyle('body2')};\n          color: ${theme.contentSecondary};\n        `}\n      />\n      {error && (\n        <span\n          css={`\n            ${textStyle('body4')};\n            color: ${theme.negative};\n          `}\n        >\n          {error}\n        </span>\n      )}\n    </Label>\n  )\n}\n\nconst useNetwork = () => {\n  const [settingsErrors, setSettingsErrors] = useState(null)\n  const [ethNode, setEthNodeValue] = useState(defaultEthNode)\n  const [ipfsGateway, setIpfsGatewayValue] = useState(defaultIpfsGateway)\n  const [subgraphHttpEndpoint, setSubgraphHttpEndpointValue] = useState(\n    defaultSubgraphHttpEndpoint\n  )\n\n  const { resetSubgraphClient } = useSubgraph()\n  const networkType = getNetworkType()\n\n  const subgraphChanged = subgraphHttpEndpoint !== defaultSubgraphHttpEndpoint\n\n  const defaultsChanged =\n    ipfsGateway !== defaultIpfsGateway ||\n    ethNode !== defaultEthNode ||\n    subgraphChanged\n\n  const handleNetworkChange = useCallback(async () => {\n    if (!defaultsChanged) {\n      setSettingsErrors(null)\n      return\n    }\n\n    const errors = await validateNetworkSettings(\n      ethNode,\n      subgraphHttpEndpoint,\n      networkType\n    )\n\n    if (errors) {\n      setSettingsErrors(errors)\n      return\n    }\n    setDefaultEthNode(ethNode)\n    setSubgraphHttpEndpoint(subgraphHttpEndpoint)\n    setIpfsGateway(ipfsGateway)\n\n    if (subgraphChanged) {\n      resetSubgraphClient()\n    }\n    window.location.reload()\n  }, [\n    defaultsChanged,\n    ethNode,\n    subgraphHttpEndpoint,\n    networkType,\n    ipfsGateway,\n    subgraphChanged,\n    resetSubgraphClient,\n  ])\n\n  const handleClearNetworkSettings = useCallback(() => {\n    clearLocalStorageNetworkSettings()\n    window.location.reload()\n  }, [])\n\n  useEnterKey(handleNetworkChange)\n\n  return {\n    ethNode,\n    ipfsGateway,\n    subgraphHttpEndpoint,\n    handleNetworkChange,\n    handleClearNetworkSettings,\n    settingsErrors,\n    handleEthNodeChange: ({ currentTarget: { value } }) =>\n      setEthNodeValue(value),\n    handleIpfsGatewayChange: ({ currentTarget: { value } }) =>\n      setIpfsGatewayValue(value),\n    handleSubgraphHttpEndpointChange: ({ currentTarget: { value } }) =>\n      setSubgraphHttpEndpointValue(value),\n  }\n}\n\nasync function validateNetworkSettings(\n  ethNode,\n  subgraphHttpEndpoint,\n  networkType\n) {\n  const settingsErrors = {}\n  try {\n    await checkValidEthNode(ethNode)\n  } catch (err) {\n    if (err instanceof InvalidNetworkType) {\n      settingsErrors.ethError = `Node must be connected to ${sanitizeNetworkType(\n        networkType\n      )}`\n    }\n    if (err instanceof InvalidURI) {\n      settingsErrors.ethError = 'Must provide HTTP endpoint to node'\n    }\n    if (err instanceof NoConnection) {\n      settingsErrors.ethError = 'Could not connect to node'\n    }\n\n    if (!validHttpFormat(subgraphHttpEndpoint)) {\n      settingsErrors.httpSubgraphError = 'The URI must use the HTTP protocol'\n    }\n\n    if (Object.entries(settingsErrors).length === 0) {\n      return null\n    }\n    return settingsErrors\n  }\n}\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.content};\n  display: block;\n  margin-bottom: ${2 * GU}px;\n`\n\nexport default React.memo(Network)\n"]},"metadata":{},"sourceType":"module"}