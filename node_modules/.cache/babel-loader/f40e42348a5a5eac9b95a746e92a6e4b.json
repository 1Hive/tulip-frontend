{"ast":null,"code":"import { getLastPackageVersion, getPackageVersion, setPackageVersion } from '../local-settings';\nimport { clearActivities } from './migrations';\nimport { isNewVersion, satisifesRange } from './helper';\nconst MIGRATIONS = [['1.0.0', () => clearActivities()]];\nexport function checkMigrations() {\n  const packageVersion = getPackageVersion();\n  const lastPackageVersion = getLastPackageVersion();\n\n  if (isNewVersion(lastPackageVersion, packageVersion)) {\n    // Save the current package version\n    setPackageVersion(packageVersion); // Run each migration which falls in the range (lastPackageVersion, packageVersion]\n\n    for (const [version, migration] of MIGRATIONS) {\n      if (satisifesRange(version, lastPackageVersion, packageVersion)) {\n        // Run migration\n        migration();\n      }\n    }\n  }\n}","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/migrations/index.js"],"names":["getLastPackageVersion","getPackageVersion","setPackageVersion","clearActivities","isNewVersion","satisifesRange","MIGRATIONS","checkMigrations","packageVersion","lastPackageVersion","version","migration"],"mappings":"AAAA,SACEA,qBADF,EAEEC,iBAFF,EAGEC,iBAHF,QAIO,mBAJP;AAKA,SAASC,eAAT,QAAgC,cAAhC;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,UAA7C;AAEA,MAAMC,UAAU,GAAG,CAAC,CAAC,OAAD,EAAU,MAAMH,eAAe,EAA/B,CAAD,CAAnB;AAEA,OAAO,SAASI,eAAT,GAA2B;AAChC,QAAMC,cAAc,GAAGP,iBAAiB,EAAxC;AACA,QAAMQ,kBAAkB,GAAGT,qBAAqB,EAAhD;;AAEA,MAAII,YAAY,CAACK,kBAAD,EAAqBD,cAArB,CAAhB,EAAsD;AACpD;AACAN,IAAAA,iBAAiB,CAACM,cAAD,CAAjB,CAFoD,CAIpD;;AACA,SAAK,MAAM,CAACE,OAAD,EAAUC,SAAV,CAAX,IAAmCL,UAAnC,EAA+C;AAC7C,UAAID,cAAc,CAACK,OAAD,EAAUD,kBAAV,EAA8BD,cAA9B,CAAlB,EAAiE;AAC/D;AACAG,QAAAA,SAAS;AACV;AACF;AACF;AACF","sourcesContent":["import {\n  getLastPackageVersion,\n  getPackageVersion,\n  setPackageVersion,\n} from '../local-settings'\nimport { clearActivities } from './migrations'\nimport { isNewVersion, satisifesRange } from './helper'\n\nconst MIGRATIONS = [['1.0.0', () => clearActivities()]]\n\nexport function checkMigrations() {\n  const packageVersion = getPackageVersion()\n  const lastPackageVersion = getLastPackageVersion()\n\n  if (isNewVersion(lastPackageVersion, packageVersion)) {\n    // Save the current package version\n    setPackageVersion(packageVersion)\n\n    // Run each migration which falls in the range (lastPackageVersion, packageVersion]\n    for (const [version, migration] of MIGRATIONS) {\n      if (satisifesRange(version, lastPackageVersion, packageVersion)) {\n        // Run migration\n        migration()\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}