{"ast":null,"code":"'use strict';\n\nvar _require = require('multibase'),\n    getCodec = _require.encoding;\n\nvar _require2 = require('web-encoding'),\n    TextEncoder = _require2.TextEncoder;\n\nvar utf8Encoder = new TextEncoder();\n/**\n * @typedef {import('multibase/src/types').BaseName} BaseName\n */\n\n/**\n * Interprets each character in a string as a byte and\n * returns a Uint8Array of those bytes.\n *\n * @param {string} string - The string to turn into an array\n */\n\nfunction asciiStringToUint8Array(string) {\n  var array = new Uint8Array(string.length);\n\n  for (var i = 0; i < string.length; i++) {\n    array[i] = string.charCodeAt(i);\n  }\n\n  return array;\n}\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {string} string\n * @param {BaseName | 'utf8' | 'utf-8' | 'ascii'} [encoding=utf8] - utf8, base16, base64, base64urlpad, etc\n * @returns {Uint8Array}\n */\n\n\nfunction fromString(string) {\n  var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';\n\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Encoder.encode(string);\n  }\n\n  if (encoding === 'ascii') {\n    return asciiStringToUint8Array(string);\n  }\n\n  return getCodec(encoding).decode(string);\n}\n\nmodule.exports = fromString;","map":null,"metadata":{},"sourceType":"script"}