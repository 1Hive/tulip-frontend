{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar crypto = require('libp2p-crypto');\n\nvar multihashing = require('multihashing-async');\n\nvar PeerId = require('peer-id');\n\nvar AbortController = require('abort-controller');\n\nvar errcode = require('err-code');\n\nvar times = require('p-times');\n\nvar c = require('./constants');\n\nvar _require = require('./utils'),\n    logger = _require.logger;\n\nvar RandomWalk = /*#__PURE__*/function () {\n  /**\n   * @constructor\n   * @param {DHT} dht\n   * @param {object} options\n   * @param {randomWalkOptions.enabled} options.enabled\n   * @param {randomWalkOptions.queriesPerPeriod} options.queriesPerPeriod\n   * @param {randomWalkOptions.interval} options.interval\n   * @param {randomWalkOptions.timeout} options.timeout\n   * @param {randomWalkOptions.delay} options.delay\n   * @param {DHT} options.dht\n   */\n  function RandomWalk(dht, options) {\n    _classCallCheck(this, RandomWalk);\n\n    if (!dht) {\n      throw new Error('Random Walk needs an instance of the Kademlia DHT');\n    }\n\n    this._kadDHT = dht;\n    this._options = _objectSpread(_objectSpread({}, c.defaultRandomWalk), options);\n    this.log = logger(dht.peerInfo.id, 'random-walk');\n    this._timeoutId = undefined;\n  }\n  /**\n   * Start the Random Walk process. This means running a number of queries\n   * every interval requesting random data. This is done to keep the dht\n   * healthy over time.\n   *\n   * @returns {void}\n   */\n\n\n  _createClass(RandomWalk, [{\n    key: \"start\",\n    value: function start() {\n      var _this = this;\n\n      // Don't run twice\n      if (this._timeoutId || !this._options.enabled) {\n        return;\n      } // Start doing random walks after `this._options.delay`\n\n\n      this._timeoutId = setTimeout(function () {\n        // Start runner immediately\n        _this._runPeriodically();\n      }, this._options.delay);\n    }\n    /**\n     * Stop the random-walk process. Any active\n     * queries will be aborted.\n     *\n     * @returns {void}\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this._timeoutId) {\n        clearTimeout(this._timeoutId);\n        this._timeoutId = undefined;\n      }\n\n      this._controller && this._controller.abort();\n    }\n    /**\n     * Run function `randomWalk._walk` on every `options.interval` ms\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_runPeriodically\",\n    value: function () {\n      var _runPeriodically2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this._timeoutId) {\n                  _context.next = 13;\n                  break;\n                }\n\n                _context.prev = 1;\n                _context.next = 4;\n                return this._walk(this._options.queriesPerPeriod, this._options.timeout);\n\n              case 4:\n                _context.next = 9;\n                break;\n\n              case 6:\n                _context.prev = 6;\n                _context.t0 = _context[\"catch\"](1);\n\n                this._kadDHT._log.error('random-walk:error', _context.t0);\n\n              case 9:\n                _context.next = 11;\n                return new Promise(function (resolve) {\n                  _this2._timeoutId = setTimeout(resolve, _this2._options.interval);\n                });\n\n              case 11:\n                _context.next = 0;\n                break;\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 6]]);\n      }));\n\n      function _runPeriodically() {\n        return _runPeriodically2.apply(this, arguments);\n      }\n\n      return _runPeriodically;\n    }()\n    /**\n     * Do the random walk work.\n     *\n     * @param {number} queries\n     * @param {number} walkTimeout\n     * @returns {Promise}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_walk\",\n    value: function () {\n      var _walk2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(queries, walkTimeout) {\n        var _this3 = this;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.log('start');\n                this._controller = new AbortController();\n                _context3.prev = 2;\n                _context3.next = 5;\n                return times(queries, /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(index) {\n                    var id;\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _this3.log('running query %d', index);\n\n                            _context2.prev = 1;\n                            _context2.next = 4;\n                            return _this3._randomPeerId();\n\n                          case 4:\n                            id = _context2.sent;\n\n                            if (_this3._controller) {\n                              _context2.next = 7;\n                              break;\n                            }\n\n                            return _context2.abrupt(\"return\");\n\n                          case 7:\n                            _context2.next = 9;\n                            return _this3._query(id, {\n                              timeout: walkTimeout,\n                              signal: _this3._controller.signal\n                            });\n\n                          case 9:\n                            _context2.next = 16;\n                            break;\n\n                          case 11:\n                            _context2.prev = 11;\n                            _context2.t0 = _context2[\"catch\"](1);\n\n                            if (!(_context2.t0 && _context2.t0.code !== 'ETIMEDOUT')) {\n                              _context2.next = 16;\n                              break;\n                            }\n\n                            _this3.log.error('query %d finished with error', index, _context2.t0);\n\n                            throw _context2.t0;\n\n                          case 16:\n                            _this3.log('finished query %d', index);\n\n                          case 17:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, null, [[1, 11]]);\n                  }));\n\n                  return function (_x3) {\n                    return _ref.apply(this, arguments);\n                  };\n                }());\n\n              case 5:\n                _context3.prev = 5;\n                this._controller = null;\n                this.log('finished queries');\n                return _context3.finish(5);\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2,, 5, 9]]);\n      }));\n\n      function _walk(_x, _x2) {\n        return _walk2.apply(this, arguments);\n      }\n\n      return _walk;\n    }()\n    /**\n     * The query run during a random walk request.\n     *\n     * TODO: While query currently supports an abort controller, it is not\n     * yet supported by `DHT.findPeer`. Once https://github.com/libp2p/js-libp2p-kad-dht/pull/82\n     * is complete, and AbortController support has been added to the\n     * DHT query functions, the abort here will just work, provided the\n     * functions support `options.signal`. Once done, this todo should be\n     * removed.\n     *\n     * @param {PeerId} id\n     * @param {object} options\n     * @param {number} options.timeout\n     * @param {AbortControllerSignal} options.signal\n     * @returns {Promise}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_query\",\n    value: function () {\n      var _query2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(id, options) {\n        var peer;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.log('query:%s', id.toB58String());\n                _context4.prev = 1;\n                _context4.next = 4;\n                return this._kadDHT.findPeer(id, options);\n\n              case 4:\n                peer = _context4.sent;\n                _context4.next = 12;\n                break;\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](1);\n\n                if (!(_context4.t0 && _context4.t0.code === 'ERR_NOT_FOUND')) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 11:\n                throw _context4.t0;\n\n              case 12:\n                this.log('query:found', peer); // wait what, there was something found? Lucky day!\n\n                throw errcode(\"random-walk: ACTUALLY FOUND PEER: \".concat(peer, \", \").concat(id.toB58String()), 'ERR_FOUND_RANDOM_PEER');\n\n              case 14:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 7]]);\n      }));\n\n      function _query(_x4, _x5) {\n        return _query2.apply(this, arguments);\n      }\n\n      return _query;\n    }()\n    /**\n     * Generate a random peer id for random-walk purposes.\n     *\n     * @returns {Promise<PeerId>}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_randomPeerId\",\n    value: function () {\n      var _randomPeerId2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var digest;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return multihashing(crypto.randomBytes(16), 'sha2-256');\n\n              case 2:\n                digest = _context5.sent;\n                return _context5.abrupt(\"return\", new PeerId(digest));\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function _randomPeerId() {\n        return _randomPeerId2.apply(this, arguments);\n      }\n\n      return _randomPeerId;\n    }()\n  }]);\n\n  return RandomWalk;\n}();\n\nmodule.exports = RandomWalk;","map":null,"metadata":{},"sourceType":"script"}