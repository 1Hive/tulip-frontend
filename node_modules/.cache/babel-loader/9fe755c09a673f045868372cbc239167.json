{"ast":null,"code":"'use strict';\n\nconst PeerDistanceList = require('../peer-list/peer-distance-list');\n\nconst EventEmitter = require('events');\n\nconst Path = require('./path');\n\nconst WorkerQueue = require('./workerQueue');\n\nconst utils = require('../utils');\n/**\n * Manages a single run of the query.\n */\n\n\nclass Run extends EventEmitter {\n  /**\n   * Creates a Run.\n   *\n   * @param {Query} query\n   */\n  constructor(query) {\n    super();\n    this.query = query;\n    this.running = false;\n    this.workers = []; // The peers that have been queried (including error responses)\n\n    this.peersSeen = new Set(); // The errors received when querying peers\n\n    this.errors = []; // The closest K peers that have been queried successfully\n    // (this member is initialized when the worker queues start)\n\n    this.peersQueried = null;\n  }\n  /**\n   * Stop all the workers\n   */\n\n\n  stop() {\n    if (!this.running) {\n      return;\n    }\n\n    this.running = false;\n\n    for (const worker of this.workers) {\n      worker.stop();\n    }\n  }\n  /**\n   * Execute the run with the given initial set of peers.\n   *\n   * @param {Array<PeerId>} peers\n   * @returns {Promise}\n   */\n\n\n  async execute(peers) {\n    const paths = []; // array of states per disjoint path\n    // Create disjoint paths\n\n    const numPaths = Math.min(this.query.dht.disjointPaths, peers.length);\n\n    for (let i = 0; i < numPaths; i++) {\n      paths.push(new Path(this, this.query.makePath(i, numPaths)));\n    } // Assign peers to paths round-robin style\n\n\n    peers.forEach((peer, i) => {\n      paths[i % numPaths].addInitialPeer(peer);\n    }); // Execute the query along each disjoint path\n\n    await this.executePaths(paths);\n    const res = {\n      // The closest K peers we were able to query successfully\n      finalSet: new Set(this.peersQueried.peers),\n      paths: []\n    }; // Collect the results from each completed path\n\n    for (const path of paths) {\n      if (path.res && (path.res.pathComplete || path.res.queryComplete)) {\n        path.res.success = true;\n        res.paths.push(path.res);\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Execute all paths through the DHT.\n   *\n   * @param {Array<Path>} paths\n   * @returns {Promise<void>}\n   */\n\n\n  async executePaths(paths) {\n    this.running = true;\n    this.emit('start');\n\n    try {\n      await Promise.all(paths.map(path => path.execute()));\n    } finally {\n      // Ensure all workers are stopped\n      this.stop(); // Completed the Run\n\n      this.emit('complete');\n    } // If all queries errored out, something is seriously wrong, so callback\n    // with an error\n\n\n    if (this.errors.length === this.peersSeen.size) {\n      throw this.errors[0];\n    }\n  }\n  /**\n   * Initialize the list of queried peers, then start a worker queue for the\n   * given path.\n   *\n   * @param {Path} path\n   * @returns {Promise<void>}\n   */\n\n\n  async workerQueue(path) {\n    await this.init();\n    await this.startWorker(path);\n  }\n  /**\n   * Create and start a worker queue for a particular path.\n   *\n   * @param {Path} path\n   * @returns {Promise<void>}\n   */\n\n\n  async startWorker(path) {\n    const worker = new WorkerQueue(this.query.dht, this, path, this.query._log);\n    this.workers.push(worker);\n    await worker.execute();\n  }\n  /**\n   * Initialize the list of closest peers we've queried - this is shared by all\n   * paths in the run.\n   *\n   * @returns {Promise<void>}\n   */\n\n\n  async init() {\n    if (this.peersQueried) {\n      return;\n    } // We only want to initialize the PeerDistanceList once for the run\n\n\n    if (this.peersQueriedPromise) {\n      await this.peersQueriedPromise;\n      return;\n    } // This promise is temporarily stored so that others may await its completion\n\n\n    this.peersQueriedPromise = (async () => {\n      const dhtKey = await utils.convertBuffer(this.query.key);\n      this.peersQueried = new PeerDistanceList(dhtKey, this.query.dht.kBucketSize);\n    })(); // After PeerDistanceList is initialized, clean up\n\n\n    await this.peersQueriedPromise;\n    delete this.peersQueriedPromise;\n  }\n  /**\n   * If we've queried K peers, and the remaining peers in the given `worker`'s queue\n   * are all further from the key than the peers we've already queried, then we should\n   * stop querying on that `worker`.\n   *\n   * @param {WorkerQueue} worker\n   * @returns {Promise<Boolean>}\n   */\n\n\n  async continueQuerying(worker) {\n    // If we haven't queried K peers yet, keep going\n    if (this.peersQueried.length < this.peersQueried.capacity) {\n      return true;\n    } // Get all the peers that are currently being queried.\n    // Note that this function gets called right after a peer has been popped\n    // off the head of the closest peers queue so it will include that peer.\n\n\n    const running = worker.queue.workersList().map(i => i.data); // Check if any of the peers that are currently being queried are closer\n    // to the key than the peers we've already queried\n\n    const someCloser = await this.peersQueried.anyCloser(running); // Some are closer, the worker should keep going\n\n    if (someCloser) {\n      return true;\n    } // None are closer, the worker can stop\n\n\n    return false;\n  }\n\n}\n\nmodule.exports = Run;","map":null,"metadata":{},"sourceType":"script"}