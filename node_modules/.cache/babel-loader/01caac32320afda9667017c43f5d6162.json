{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst errors = require('../errors');\n\nconst repoInit = require('./init');\n\nconst Datastore = require('datastore-fs');\n\nconst Key = require('interface-datastore').Key;\n\nconst versionKey = new Key('version');\nexports.getVersion = getVersion;\n/**\n * Function that has responsibility to retrieve version of repo from its root datastore's instance.\n * This function needs to be cross-repo-version functional to be able to fetch any version number,\n * even in case of change of repo's versioning.\n *\n * @param {string} path\n * @returns {Promise<int>}\n */\n\nasync function getVersion(path) {\n  if (!(await repoInit.isRepoInitialized(path))) {\n    throw new errors.NotInitializedRepoError(`Repo in path ${path} is not initialized!`);\n  }\n\n  const store = new Datastore(path, {\n    extension: '',\n    createIfMissing: false\n  });\n  await store.open();\n  const version = parseInt(await store.get(versionKey));\n  await store.close();\n  return version;\n}\n/**\n * Function for setting a version in cross-repo-version manner.\n *\n * @param {string} path\n * @param {int} version\n * @returns {Promise<void>}\n */\n\n\nasync function setVersion(path, version) {\n  const store = new Datastore(path, {\n    extension: '',\n    createIfMissing: false\n  });\n  await store.open();\n  await store.put(versionKey, Buffer.from(String(version)));\n  await store.close();\n}\n\nexports.setVersion = setVersion;","map":null,"metadata":{},"sourceType":"script"}