{"ast":null,"code":"'use strict';\n\nmodule.exports = class ApiManager {\n  constructor() {\n    this._api = {};\n\n    this._onUndef = () => undefined;\n\n    this.api = new Proxy(this._api, {\n      get: (_, prop) => {\n        if (prop === 'then') return undefined; // Not a promise!\n\n        return this._api[prop] === undefined ? this._onUndef(prop) : this._api[prop];\n      }\n    });\n  }\n\n  update(nextApi, onUndef) {\n    const prevApi = { ...this._api\n    };\n    const prevUndef = this._onUndef;\n    Object.keys(this._api).forEach(k => {\n      delete this._api[k];\n    });\n    Object.assign(this._api, nextApi);\n    if (onUndef) this._onUndef = onUndef;\n    return {\n      cancel: () => this.update(prevApi, prevUndef),\n      api: this.api\n    };\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}