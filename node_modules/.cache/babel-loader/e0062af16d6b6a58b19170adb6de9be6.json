{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar varint = require('varint');\n\nvar BufferList = require('bl/BufferList'); // Decode a chunk and yield an _array_ of decoded messages\n\n\nmodule.exports = function (source) {\n  return function () {\n    var _decode = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var decoder, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk, msgs;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              decoder = new Decoder();\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 3;\n              _iterator = _asyncIterator(source);\n\n            case 5:\n              _context.next = 7;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 7:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 11;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 11:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 21;\n                break;\n              }\n\n              chunk = _value;\n              msgs = decoder.write(chunk);\n\n              if (!msgs.length) {\n                _context.next = 18;\n                break;\n              }\n\n              _context.next = 18;\n              return msgs;\n\n            case 18:\n              _iteratorNormalCompletion = true;\n              _context.next = 5;\n              break;\n\n            case 21:\n              _context.next = 27;\n              break;\n\n            case 23:\n              _context.prev = 23;\n              _context.t0 = _context[\"catch\"](3);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 27:\n              _context.prev = 27;\n              _context.prev = 28;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 32;\n                break;\n              }\n\n              _context.next = 32;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 32:\n              _context.prev = 32;\n\n              if (!_didIteratorError) {\n                _context.next = 35;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 35:\n              return _context.finish(32);\n\n            case 36:\n              return _context.finish(27);\n\n            case 37:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 23, 27, 37], [28,, 32, 36]]);\n    }));\n\n    function decode() {\n      return _decode.apply(this, arguments);\n    }\n\n    return decode;\n  }()();\n};\n\nvar Decoder = /*#__PURE__*/function () {\n  function Decoder() {\n    var _this = this;\n\n    _classCallCheck(this, Decoder);\n\n    this._buffer = new BufferList(); // optimization to allow varint to take a BufferList (well a proxy to)\n\n    this._bufferProxy = new Proxy({}, {\n      get: function get(_, prop) {\n        return prop[0] === 'l' ? _this._buffer[prop] : _this._buffer.get(parseInt(prop));\n      }\n    });\n    this._headerInfo = null;\n  }\n  /**\n   * @param {Buffer|BufferList} chunk\n   * @returns {object[]} An array of message objects\n   */\n\n\n  _createClass(Decoder, [{\n    key: \"write\",\n    value: function write(chunk) {\n      if (!chunk || !chunk.length) return [];\n\n      this._buffer.append(chunk);\n\n      var msgs = [];\n\n      while (true) {\n        if (!this._headerInfo) {\n          try {\n            this._headerInfo = this._decodeHeader(this._bufferProxy);\n          } catch (_) {\n            break; // We haven't received enough data yet\n          }\n        }\n\n        var _this$_headerInfo = this._headerInfo,\n            id = _this$_headerInfo.id,\n            type = _this$_headerInfo.type,\n            length = _this$_headerInfo.length,\n            offset = _this$_headerInfo.offset;\n        var bufferedDataLength = this._buffer.length - offset;\n        if (bufferedDataLength < length) break; // not enough data yet\n\n        msgs.push({\n          id: id,\n          type: type,\n          data: this._buffer.shallowSlice(offset, offset + length)\n        });\n\n        this._buffer.consume(offset + length);\n\n        this._headerInfo = null;\n      }\n\n      return msgs;\n    }\n    /**\n     * Attempts to decode the message header from the buffer\n     * @private\n     * @param {Buffer} data\n     * @returns {*} message header (id, type, offset, length)\n     */\n\n  }, {\n    key: \"_decodeHeader\",\n    value: function _decodeHeader(data) {\n      var h = varint.decode(data);\n      var offset = varint.decode.bytes;\n      var length = varint.decode(data, offset);\n      offset += varint.decode.bytes;\n      return {\n        id: h >> 3,\n        type: h & 7,\n        offset: offset,\n        length: length\n      };\n    }\n  }]);\n\n  return Decoder;\n}();","map":null,"metadata":{},"sourceType":"script"}