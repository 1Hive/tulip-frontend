{"ast":null,"code":"'use strict';\n\nconst hashlru = require('hashlru');\n/**\n * Time Aware Least Recent Used Cache\n * @see https://arxiv.org/pdf/1801.00390\n * @todo move this to ipfs-utils or it's own package\n *\n * @class TLRU\n */\n\n\nclass TLRU {\n  /**\n   * Creates an instance of TLRU.\n   *\n   * @param {number} maxSize\n   * @memberof TLRU\n   */\n  constructor(maxSize) {\n    this.lru = hashlru(maxSize);\n  }\n  /**\n   * Get the value from the a key\n   *\n   * @param {string} key\n   * @returns {any}\n   * @memberof TLRU\n   */\n\n\n  get(key) {\n    const value = this.lru.get(key);\n\n    if (value) {\n      if (value.expire && value.expire < Date.now()) {\n        this.lru.remove(key);\n        return undefined;\n      }\n\n      return value.value;\n    }\n\n    return undefined;\n  }\n  /**\n   * Set a key value pair\n   *\n   * @param {string} key\n   * @param {any} value\n   * @param {number} ttl - in miliseconds\n   * @memberof TLRU\n   */\n\n\n  set(key, value, ttl) {\n    this.lru.set(key, {\n      value,\n      expire: Date.now() + ttl\n    });\n  }\n  /**\n   * Find if the cache has the key\n   *\n   * @param {string} key\n   * @returns {boolean}\n   * @memberof TLRU\n   */\n\n\n  has(key) {\n    const value = this.get(key);\n\n    if (value) {\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Remove key\n   *\n   * @param {string} key\n   * @memberof TLRU\n   */\n\n\n  remove(key) {\n    this.lru.remove(key);\n  }\n  /**\n   * Clears the cache\n   *\n   * @memberof TLRU\n   */\n\n\n  clear() {\n    this.lru.clear();\n  }\n\n}\n\nmodule.exports = TLRU;","map":null,"metadata":{},"sourceType":"script"}