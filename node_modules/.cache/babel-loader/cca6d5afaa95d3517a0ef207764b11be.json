{"ast":null,"code":"\"use strict\";\n\nimport _assertThisInitialized from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _regeneratorRuntime from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { defineReadOnly, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nvar allowedTransactionKeys = [\"chainId\", \"data\", \"from\", \"gasLimit\", \"gasPrice\", \"nonce\", \"to\", \"value\"];\nvar forwardErrors = [Logger.errors.INSUFFICIENT_FUNDS, Logger.errors.NONCE_EXPIRED, Logger.errors.REPLACEMENT_UNDERPRICED];\n;\n;\nexport var Signer = /*#__PURE__*/function () {\n  ///////////////////\n  // Sub-classes MUST call super\n  function Signer() {\n    _classCallCheck(this, Signer);\n\n    logger.checkAbstract(this instanceof Signer ? this.constructor : void 0, Signer);\n    defineReadOnly(this, \"_isSigner\", true);\n  } ///////////////////\n  // Sub-classes MAY override these\n\n\n  _createClass(Signer, [{\n    key: \"getBalance\",\n    value: function getBalance(blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this._checkProvider(\"getBalance\");\n\n                _context.next = 3;\n                return this.provider.getBalance(this.getAddress(), blockTag);\n\n              case 3:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"getTransactionCount\",\n    value: function getTransactionCount(blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this._checkProvider(\"getTransactionCount\");\n\n                _context2.next = 3;\n                return this.provider.getTransactionCount(this.getAddress(), blockTag);\n\n              case 3:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    } // Populates \"from\" if unspecified, and estimates the gas for the transation\n\n  }, {\n    key: \"estimateGas\",\n    value: function estimateGas(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var tx;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this._checkProvider(\"estimateGas\");\n\n                _context3.next = 3;\n                return resolveProperties(this.checkTransaction(transaction));\n\n              case 3:\n                tx = _context3.sent;\n                _context3.next = 6;\n                return this.provider.estimateGas(tx);\n\n              case 6:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    } // Populates \"from\" if unspecified, and calls with the transation\n\n  }, {\n    key: \"call\",\n    value: function call(transaction, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var tx;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this._checkProvider(\"call\");\n\n                _context4.next = 3;\n                return resolveProperties(this.checkTransaction(transaction));\n\n              case 3:\n                tx = _context4.sent;\n                _context4.next = 6;\n                return this.provider.call(tx, blockTag);\n\n              case 6:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    } // Populates all fields in a transaction, signs it and sends it to the network\n\n  }, {\n    key: \"sendTransaction\",\n    value: function sendTransaction(transaction) {\n      var _this = this;\n\n      this._checkProvider(\"sendTransaction\");\n\n      return this.populateTransaction(transaction).then(function (tx) {\n        return _this.signTransaction(tx).then(function (signedTx) {\n          return _this.provider.sendTransaction(signedTx);\n        });\n      });\n    }\n  }, {\n    key: \"getChainId\",\n    value: function getChainId() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var network;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this._checkProvider(\"getChainId\");\n\n                _context5.next = 3;\n                return this.provider.getNetwork();\n\n              case 3:\n                network = _context5.sent;\n                return _context5.abrupt(\"return\", network.chainId);\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"getGasPrice\",\n    value: function getGasPrice() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                this._checkProvider(\"getGasPrice\");\n\n                _context6.next = 3;\n                return this.provider.getGasPrice();\n\n              case 3:\n                return _context6.abrupt(\"return\", _context6.sent);\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n  }, {\n    key: \"resolveName\",\n    value: function resolveName(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                this._checkProvider(\"resolveName\");\n\n                _context7.next = 3;\n                return this.provider.resolveName(name);\n\n              case 3:\n                return _context7.abrupt(\"return\", _context7.sent);\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    } // Checks a transaction does not contain invalid keys and if\n    // no \"from\" is provided, populates it.\n    // - does NOT require a provider\n    // - adds \"from\" is not present\n    // - returns a COPY (safe to mutate the result)\n    // By default called from: (overriding these prevents it)\n    //   - call\n    //   - estimateGas\n    //   - populateTransaction (and therefor sendTransaction)\n\n  }, {\n    key: \"checkTransaction\",\n    value: function checkTransaction(transaction) {\n      for (var key in transaction) {\n        if (allowedTransactionKeys.indexOf(key) === -1) {\n          logger.throwArgumentError(\"invalid transaction key: \" + key, \"transaction\", transaction);\n        }\n      }\n\n      var tx = shallowCopy(transaction);\n\n      if (tx.from == null) {\n        tx.from = this.getAddress();\n      } else {\n        // Make sure any provided address matches this signer\n        tx.from = Promise.all([Promise.resolve(tx.from), this.getAddress()]).then(function (result) {\n          if (result[0].toLowerCase() !== result[1].toLowerCase()) {\n            logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n          }\n\n          return result[0];\n        });\n      }\n\n      return tx;\n    } // Populates ALL keys for a transaction and checks that \"from\" matches\n    // this Signer. Should be used by sendTransaction but NOT by signTransaction.\n    // By default called from: (overriding these prevents it)\n    //   - sendTransaction\n\n  }, {\n    key: \"populateTransaction\",\n    value: function populateTransaction(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var _this2 = this;\n\n        var tx;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return resolveProperties(this.checkTransaction(transaction));\n\n              case 2:\n                tx = _context9.sent;\n\n                if (tx.to != null) {\n                  tx.to = Promise.resolve(tx.to).then(function (to) {\n                    return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n                      var address;\n                      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n                        while (1) {\n                          switch (_context8.prev = _context8.next) {\n                            case 0:\n                              if (!(to == null)) {\n                                _context8.next = 2;\n                                break;\n                              }\n\n                              return _context8.abrupt(\"return\", null);\n\n                            case 2:\n                              _context8.next = 4;\n                              return this.resolveName(to);\n\n                            case 4:\n                              address = _context8.sent;\n\n                              if (address == null) {\n                                logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                              }\n\n                              return _context8.abrupt(\"return\", address);\n\n                            case 7:\n                            case \"end\":\n                              return _context8.stop();\n                          }\n                        }\n                      }, _callee8, this);\n                    }));\n                  });\n                }\n\n                if (tx.gasPrice == null) {\n                  tx.gasPrice = this.getGasPrice();\n                }\n\n                if (tx.nonce == null) {\n                  tx.nonce = this.getTransactionCount(\"pending\");\n                }\n\n                if (tx.gasLimit == null) {\n                  tx.gasLimit = this.estimateGas(tx).catch(function (error) {\n                    if (forwardErrors.indexOf(error.code) >= 0) {\n                      throw error;\n                    }\n\n                    return logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                      error: error,\n                      tx: tx\n                    });\n                  });\n                }\n\n                if (tx.chainId == null) {\n                  tx.chainId = this.getChainId();\n                } else {\n                  tx.chainId = Promise.all([Promise.resolve(tx.chainId), this.getChainId()]).then(function (results) {\n                    if (results[1] !== 0 && results[0] !== results[1]) {\n                      logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n                    }\n\n                    return results[0];\n                  });\n                }\n\n                _context9.next = 10;\n                return resolveProperties(tx);\n\n              case 10:\n                return _context9.abrupt(\"return\", _context9.sent);\n\n              case 11:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n    } ///////////////////\n    // Sub-classes SHOULD leave these alone\n\n  }, {\n    key: \"_checkProvider\",\n    value: function _checkProvider(operation) {\n      if (!this.provider) {\n        logger.throwError(\"missing provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: operation || \"_checkProvider\"\n        });\n      }\n    }\n  }], [{\n    key: \"isSigner\",\n    value: function isSigner(value) {\n      return !!(value && value._isSigner);\n    }\n  }]);\n\n  return Signer;\n}();\nexport var VoidSigner = /*#__PURE__*/function (_Signer) {\n  _inherits(VoidSigner, _Signer);\n\n  var _super = _createSuper(VoidSigner);\n\n  function VoidSigner(address, provider) {\n    var _this3;\n\n    _classCallCheck(this, VoidSigner);\n\n    logger.checkNew(this instanceof VoidSigner ? this.constructor : void 0, VoidSigner);\n    _this3 = _super.call(this);\n    defineReadOnly(_assertThisInitialized(_this3), \"address\", address);\n    defineReadOnly(_assertThisInitialized(_this3), \"provider\", provider || null);\n    return _this3;\n  }\n\n  _createClass(VoidSigner, [{\n    key: \"getAddress\",\n    value: function getAddress() {\n      return Promise.resolve(this.address);\n    }\n  }, {\n    key: \"_fail\",\n    value: function _fail(message, operation) {\n      return Promise.resolve().then(function () {\n        logger.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: operation\n        });\n      });\n    }\n  }, {\n    key: \"signMessage\",\n    value: function signMessage(message) {\n      return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\n    }\n  }, {\n    key: \"signTransaction\",\n    value: function signTransaction(transaction) {\n      return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\n    }\n  }, {\n    key: \"_signTypedData\",\n    value: function _signTypedData(domain, types, value) {\n      return this._fail(\"VoidSigner cannot sign typed data\", \"signTypedData\");\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(provider) {\n      return new VoidSigner(this.address, provider);\n    }\n  }]);\n\n  return VoidSigner;\n}(Signer);","map":null,"metadata":{},"sourceType":"module"}