{"ast":null,"code":"'use strict';\n\nclass LamportClock {\n  constructor(id, time) {\n    this.id = id;\n    this.time = time || 0;\n  }\n\n  tick() {\n    return new LamportClock(this.id, ++this.time);\n  }\n\n  merge(clock) {\n    this.time = Math.max(this.time, clock.time);\n    return new LamportClock(this.id, this.time);\n  }\n\n  clone() {\n    return new LamportClock(this.id, this.time);\n  }\n\n  static compare(a, b) {\n    // Calculate the \"distance\" based on the clock, ie. lower or greater\n    var dist = a.time - b.time; // If the sequence number is the same (concurrent events),\n    // and the IDs are different, take the one with a \"lower\" id\n\n    if (dist === 0 && a.id !== b.id) return a.id < b.id ? -1 : 1;\n    return dist;\n  }\n\n}\n\nmodule.exports = LamportClock;","map":null,"metadata":{},"sourceType":"script"}