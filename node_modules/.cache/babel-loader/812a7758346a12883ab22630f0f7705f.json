{"ast":null,"code":"'use strict';\n\nconst errcode = require('err-code');\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst webcrypto = require('../webcrypto');\n\nconst {\n  bufferToBase64url,\n  base64urlToBuffer\n} = require('../util');\n\nconst validateCurveType = require('./validate-curve-type');\n\nconst bits = {\n  'P-256': 256,\n  'P-384': 384,\n  'P-521': 521\n};\n\nexports.generateEphmeralKeyPair = async function (curve) {\n  validateCurveType(Object.keys(bits), curve);\n  const pair = await webcrypto.get().subtle.generateKey({\n    name: 'ECDH',\n    namedCurve: curve\n  }, true, ['deriveBits']); // forcePrivate is used for testing only\n\n  const genSharedKey = async (theirPub, forcePrivate) => {\n    let privateKey;\n\n    if (forcePrivate) {\n      privateKey = await webcrypto.get().subtle.importKey('jwk', unmarshalPrivateKey(curve, forcePrivate), {\n        name: 'ECDH',\n        namedCurve: curve\n      }, false, ['deriveBits']);\n    } else {\n      privateKey = pair.privateKey;\n    }\n\n    const keys = [await webcrypto.get().subtle.importKey('jwk', unmarshalPublicKey(curve, theirPub), {\n      name: 'ECDH',\n      namedCurve: curve\n    }, false, []), privateKey];\n    return Buffer.from(await webcrypto.get().subtle.deriveBits({\n      name: 'ECDH',\n      namedCurve: curve,\n      public: keys[0]\n    }, keys[1], bits[curve]));\n  };\n\n  const publicKey = await webcrypto.get().subtle.exportKey('jwk', pair.publicKey);\n  return {\n    key: marshalPublicKey(publicKey),\n    genSharedKey\n  };\n};\n\nconst curveLengths = {\n  'P-256': 32,\n  'P-384': 48,\n  'P-521': 66\n}; // Marshal converts a jwk encodec ECDH public key into the\n// form specified in section 4.3.6 of ANSI X9.62. (This is the format\n// go-ipfs uses)\n\nfunction marshalPublicKey(jwk) {\n  const byteLen = curveLengths[jwk.crv];\n  return Buffer.concat([Buffer.from([4]), // uncompressed point\n  base64urlToBuffer(jwk.x, byteLen), base64urlToBuffer(jwk.y, byteLen)], 1 + byteLen * 2);\n} // Unmarshal converts a point, serialized by Marshal, into an jwk encoded key\n\n\nfunction unmarshalPublicKey(curve, key) {\n  const byteLen = curveLengths[curve];\n\n  if (!key.slice(0, 1).equals(Buffer.from([4]))) {\n    throw errcode(new Error('Cannot unmarshal public key - invalid key format'), 'ERR_INVALID_KEY_FORMAT');\n  }\n\n  return {\n    kty: 'EC',\n    crv: curve,\n    x: bufferToBase64url(key.slice(1, byteLen + 1), byteLen),\n    y: bufferToBase64url(key.slice(1 + byteLen), byteLen),\n    ext: true\n  };\n}\n\nconst unmarshalPrivateKey = (curve, key) => ({ ...unmarshalPublicKey(curve, key.public),\n  d: bufferToBase64url(key.private)\n});","map":null,"metadata":{},"sourceType":"script"}