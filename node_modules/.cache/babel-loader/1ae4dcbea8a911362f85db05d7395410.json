{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _assertThisInitialized = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _wrapNativeSuper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nvar _slicedToArray = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _require = require('./error'),\n    TimeoutError = _require.TimeoutError,\n    AbortError = _require.AbortError;\n/**\n * @typedef {RequestInit & ExtraFetchOptions} FetchOptions\n * @typedef {Object} ExtraFetchOptions\n * @property {number} [timeout]\n * @property {URLSearchParams} [searchParams]\n * @property {function({total:number, loaded:number, lengthComputable:boolean}):void} [onUploadProgress]\n * @property {function({total:number, loaded:number, lengthComputable:boolean}):void} [onDownloadProgress]\n * @property {string} [overrideMimeType]\n * @returns {Promise<Response>}\n */\n\n/**\n * @param {string|URL} url\n * @param {FetchOptions} [options]\n * @returns {Promise<Response>}\n */\n\n\nvar fetch = function fetch(url) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var request = new XMLHttpRequest();\n  request.open(options.method || 'GET', url.toString(), true);\n  var timeout = options.timeout;\n\n  if (timeout > 0 && timeout < Infinity) {\n    request.timeout = options.timeout;\n  }\n\n  if (options.overrideMimeType != null) {\n    request.overrideMimeType(options.overrideMimeType);\n  }\n\n  if (options.headers) {\n    var _iterator = _createForOfIteratorHelper(options.headers.entries()),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n            name = _step$value[0],\n            value = _step$value[1];\n\n        request.setRequestHeader(name, value);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  if (options.signal) {\n    options.signal.onabort = function () {\n      return request.abort();\n    };\n  }\n\n  if (options.onDownloadProgress) {\n    request.onprogress = options.onDownloadProgress;\n  }\n\n  if (options.onUploadProgress) {\n    request.upload.onprogress = options.onUploadProgress;\n  }\n\n  return new Promise(function (resolve, reject) {\n    /**\n     * @param {Event} event\n     */\n    var handleEvent = function handleEvent(event) {\n      switch (event.type) {\n        case 'error':\n          {\n            resolve(Response.error());\n            break;\n          }\n\n        case 'load':\n          {\n            resolve(new ResponseWithURL(request.responseURL, request.response, {\n              status: request.status,\n              statusText: request.statusText,\n              headers: parseHeaders(request.getAllResponseHeaders())\n            }));\n            break;\n          }\n\n        case 'timeout':\n          {\n            reject(new TimeoutError());\n            break;\n          }\n\n        case 'abort':\n          {\n            reject(new AbortError());\n            break;\n          }\n\n        default:\n          {\n            break;\n          }\n      }\n    };\n\n    request.onerror = handleEvent;\n    request.onload = handleEvent;\n    request.ontimeout = handleEvent;\n    request.onabort = handleEvent;\n    request.send(options.body);\n  });\n};\n\nexports.fetch = fetch;\nexports.Request = Request;\nexports.Headers = Headers;\n/**\n * @param {string} input\n * @returns {Headers}\n */\n\nvar parseHeaders = function parseHeaders(input) {\n  var headers = new Headers();\n\n  var _iterator2 = _createForOfIteratorHelper(input.trim().split(/[\\r\\n]+/)),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var line = _step2.value;\n      var index = line.indexOf(': ');\n\n      if (index > 0) {\n        headers.set(line.slice(0, index), line.slice(index + 1));\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return headers;\n};\n\nvar ResponseWithURL = /*#__PURE__*/function (_Response) {\n  _inherits(ResponseWithURL, _Response);\n\n  var _super = _createSuper(ResponseWithURL);\n\n  /**\n   * @param {string} url\n   * @param {string|Blob|ArrayBufferView|ArrayBuffer|FormData|ReadableStream<Uint8Array>} body\n   * @param {ResponseInit} options\n   */\n  function ResponseWithURL(url, body, options) {\n    var _this;\n\n    _classCallCheck(this, ResponseWithURL);\n\n    _this = _super.call(this, body, options);\n    Object.defineProperty(_assertThisInitialized(_this), 'url', {\n      value: url\n    });\n    return _this;\n  }\n\n  return ResponseWithURL;\n}( /*#__PURE__*/_wrapNativeSuper(Response));","map":null,"metadata":{},"sourceType":"script"}