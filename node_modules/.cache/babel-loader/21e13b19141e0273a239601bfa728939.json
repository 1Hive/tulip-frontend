{"ast":null,"code":"var _jsxFileName = \"/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/views/Home/components/EarnAPYCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useRef } from 'react';\nimport styled from 'styled-components';\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap-libs/uikit';\nimport { NavLink } from 'react-router-dom';\nimport useI18n from 'hooks/useI18n';\nimport BigNumber from 'bignumber.js';\nimport { QuoteToken } from 'config/constants/types';\nimport { useFarms, usePriceBnbBusd } from 'state/hooks';\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({\n  theme\n}) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`;\n_c = StyledFarmStakingCard;\nconst CardMidContent = styled(Heading).attrs({\n  size: 'xl'\n})`\n  line-height: 44px;\n`;\n_c2 = CardMidContent;\n\nconst EarnAPYCard = () => {\n  _s();\n\n  const TranslateString = useI18n();\n  const farmsLP = useFarms();\n  const bnbPrice = usePriceBnbBusd();\n  const maxAPY = useRef(Number.MIN_VALUE);\n\n  const getHighestAPY = () => {\n    const activeFarms = farmsLP.filter(farm => farm.pid !== 0 && farm.multiplier !== '0X');\n    calculateAPY(activeFarms);\n    return (maxAPY.current * 100).toLocaleString('en-US').slice(0, -1);\n  };\n\n  const calculateAPY = useCallback(farmsToDisplay => {\n    var _farmsLP$find;\n\n    const cakePriceVsBNB = new BigNumber(((_farmsLP$find = farmsLP.find(farm => farm.pid === CAKE_POOL_PID)) === null || _farmsLP$find === void 0 ? void 0 : _farmsLP$find.tokenPriceVsQuote) || 0);\n    farmsToDisplay.map(farm => {\n      if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        return farm;\n      }\n\n      const cakeRewardPerBlock = CAKE_PER_BLOCK.times(farm.poolWeight);\n      const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR);\n      let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken);\n\n      if (farm.quoteTokenSymbol === QuoteToken.BUSD) {\n        apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice);\n      } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken);\n      } else if (farm.dual) {\n        const cakeApy = farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken);\n        const dualApy = farm.tokenPriceVsQuote && new BigNumber(farm.tokenPriceVsQuote).times(farm.dual.rewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken);\n        apy = cakeApy && dualApy && cakeApy.plus(dualApy);\n      }\n\n      if (maxAPY.current < apy.toNumber()) maxAPY.current = apy.toNumber();\n      return apy;\n    });\n  }, [bnbPrice, farmsLP]);\n  return /*#__PURE__*/_jsxDEV(StyledFarmStakingCard, {\n    children: /*#__PURE__*/_jsxDEV(CardBody, {\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        color: \"contrast\",\n        size: \"lg\",\n        children: \"Earn up to\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardMidContent, {\n        color: \"#7645d9\",\n        children: getHighestAPY() ? `${getHighestAPY()}% ${TranslateString(736, 'APR')}` : /*#__PURE__*/_jsxDEV(Skeleton, {\n          animation: \"pulse\",\n          variant: \"rect\",\n          height: \"44px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          color: \"contrast\",\n          size: \"lg\",\n          children: \"in Farms\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n          exact: true,\n          activeClassName: \"active\",\n          to: \"/farms\",\n          id: \"farm-apy-cta\",\n          children: /*#__PURE__*/_jsxDEV(ArrowForwardIcon, {\n            mt: 30,\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EarnAPYCard, \"MAMbddAcJJzFphK9xnNXyEb5F8A=\", false, function () {\n  return [useI18n, useFarms, usePriceBnbBusd];\n});\n\n_c3 = EarnAPYCard;\nexport default EarnAPYCard;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledFarmStakingCard\");\n$RefreshReg$(_c2, \"CardMidContent\");\n$RefreshReg$(_c3, \"EarnAPYCard\");","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/views/Home/components/EarnAPYCard.tsx"],"names":["React","useCallback","useRef","styled","Heading","Card","CardBody","Flex","ArrowForwardIcon","Skeleton","NavLink","useI18n","BigNumber","QuoteToken","useFarms","usePriceBnbBusd","BLOCKS_PER_YEAR","CAKE_PER_BLOCK","CAKE_POOL_PID","StyledFarmStakingCard","theme","mediaQueries","lg","CardMidContent","attrs","size","EarnAPYCard","TranslateString","farmsLP","bnbPrice","maxAPY","Number","MIN_VALUE","getHighestAPY","activeFarms","filter","farm","pid","multiplier","calculateAPY","current","toLocaleString","slice","farmsToDisplay","cakePriceVsBNB","find","tokenPriceVsQuote","map","tokenAmount","lpTotalInQuoteToken","cakeRewardPerBlock","times","poolWeight","cakeRewardPerYear","apy","div","quoteTokenSymbol","BUSD","CAKE","dual","cakeApy","dualApy","rewardPerBlock","plus","toNumber"],"mappings":"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","sourcesContent":["import React, { useCallback, useRef } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap-libs/uikit'\nimport { NavLink } from 'react-router-dom'\nimport useI18n from 'hooks/useI18n'\nimport BigNumber from 'bignumber.js'\nimport { QuoteToken } from 'config/constants/types'\nimport { useFarms, usePriceBnbBusd } from 'state/hooks'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAPYCard = () => {\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const bnbPrice = usePriceBnbBusd()\n\n  const maxAPY = useRef(Number.MIN_VALUE)\n\n  const getHighestAPY = () => {\n    const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n\n    calculateAPY(activeFarms)\n\n    return (maxAPY.current * 100).toLocaleString('en-US').slice(0, -1)\n  }\n\n  const calculateAPY = useCallback(\n    (farmsToDisplay) => {\n      const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n\n      farmsToDisplay.map((farm) => {\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n          return farm\n        }\n        const cakeRewardPerBlock = CAKE_PER_BLOCK.times(farm.poolWeight)\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BUSD) {\n          apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice)\n        } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n          apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken)\n        } else if (farm.dual) {\n          const cakeApy =\n            farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken)\n          const dualApy =\n            farm.tokenPriceVsQuote &&\n            new BigNumber(farm.tokenPriceVsQuote)\n              .times(farm.dual.rewardPerBlock)\n              .times(BLOCKS_PER_YEAR)\n              .div(farm.lpTotalInQuoteToken)\n\n          apy = cakeApy && dualApy && cakeApy.plus(dualApy)\n        }\n\n        if (maxAPY.current < apy.toNumber()) maxAPY.current = apy.toNumber()\n\n        return apy\n      })\n    },\n    [bnbPrice, farmsLP],\n  )\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading color=\"contrast\" size=\"lg\">\n          Earn up to\n        </Heading>\n        <CardMidContent color=\"#7645d9\">\n          {getHighestAPY() ? (\n            `${getHighestAPY()}% ${TranslateString(736, 'APR')}`\n          ) : (\n            <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n          )}\n        </CardMidContent>\n        <Flex justifyContent=\"space-between\">\n          <Heading color=\"contrast\" size=\"lg\">\n            in Farms\n          </Heading>\n          <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apy-cta\">\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </NavLink>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPYCard\n"]},"metadata":{},"sourceType":"module"}