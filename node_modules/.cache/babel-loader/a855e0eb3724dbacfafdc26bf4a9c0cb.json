{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _require = require('interface-datastore'),\n    Key = _require.Key,\n    Errors = _require.Errors,\n    Adapter = _require.Adapter,\n    _require$utils = _require.utils,\n    filter = _require$utils.filter,\n    map = _require$utils.map,\n    take = _require$utils.take,\n    sortAll = _require$utils.sortAll;\n/**\n * A datastore backed by leveldb.\n */\n\n\nvar LevelDatastore = /*#__PURE__*/function (_Adapter) {\n  _inherits(LevelDatastore, _Adapter);\n\n  var _super = _createSuper(LevelDatastore);\n\n  function LevelDatastore(path, opts) {\n    var _this;\n\n    _classCallCheck(this, LevelDatastore);\n\n    _this = _super.call(this);\n    var database;\n\n    if (opts && opts.db) {\n      database = opts.db;\n      delete opts.db;\n    } else {\n      database = require('level');\n    }\n\n    _this.db = _this._initDb(database, path, opts);\n    return _this;\n  }\n\n  _createClass(LevelDatastore, [{\n    key: \"_initDb\",\n    value: function _initDb(database, path, opts) {\n      return database(path, _objectSpread(_objectSpread({}, opts), {}, {\n        valueEncoding: 'binary',\n        compression: false // same default as go\n\n      }));\n    }\n  }, {\n    key: \"open\",\n    value: function () {\n      var _open = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return this.db.open();\n\n              case 3:\n                _context.next = 8;\n                break;\n\n              case 5:\n                _context.prev = 5;\n                _context.t0 = _context[\"catch\"](0);\n                throw Errors.dbOpenFailedError(_context.t0);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 5]]);\n      }));\n\n      function open() {\n        return _open.apply(this, arguments);\n      }\n\n      return open;\n    }()\n  }, {\n    key: \"put\",\n    value: function () {\n      var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(key, value) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return this.db.put(key.toString(), value);\n\n              case 3:\n                _context2.next = 8;\n                break;\n\n              case 5:\n                _context2.prev = 5;\n                _context2.t0 = _context2[\"catch\"](0);\n                throw Errors.dbWriteFailedError(_context2.t0);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 5]]);\n      }));\n\n      function put(_x, _x2) {\n        return _put.apply(this, arguments);\n      }\n\n      return put;\n    }()\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(key) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return this.db.get(key.toString());\n\n              case 3:\n                data = _context3.sent;\n                _context3.next = 11;\n                break;\n\n              case 6:\n                _context3.prev = 6;\n                _context3.t0 = _context3[\"catch\"](0);\n\n                if (!_context3.t0.notFound) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                throw Errors.notFoundError(_context3.t0);\n\n              case 10:\n                throw Errors.dbWriteFailedError(_context3.t0);\n\n              case 11:\n                return _context3.abrupt(\"return\", data);\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 6]]);\n      }));\n\n      function get(_x3) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  }, {\n    key: \"has\",\n    value: function () {\n      var _has = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(key) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return this.db.get(key.toString());\n\n              case 3:\n                _context4.next = 10;\n                break;\n\n              case 5:\n                _context4.prev = 5;\n                _context4.t0 = _context4[\"catch\"](0);\n\n                if (!_context4.t0.notFound) {\n                  _context4.next = 9;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", false);\n\n              case 9:\n                throw _context4.t0;\n\n              case 10:\n                return _context4.abrupt(\"return\", true);\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 5]]);\n      }));\n\n      function has(_x4) {\n        return _has.apply(this, arguments);\n      }\n\n      return has;\n    }()\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(key) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return this.db.del(key.toString());\n\n              case 3:\n                _context5.next = 8;\n                break;\n\n              case 5:\n                _context5.prev = 5;\n                _context5.t0 = _context5[\"catch\"](0);\n                throw Errors.dbDeleteFailedError(_context5.t0);\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 5]]);\n      }));\n\n      function _delete(_x5) {\n        return _delete2.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.db.close();\n    }\n  }, {\n    key: \"batch\",\n    value: function batch() {\n      var _this2 = this;\n\n      var ops = [];\n      return {\n        put: function put(key, value) {\n          ops.push({\n            type: 'put',\n            key: key.toString(),\n            value: value\n          });\n        },\n        delete: function _delete(key) {\n          ops.push({\n            type: 'del',\n            key: key.toString()\n          });\n        },\n        commit: function commit() {\n          return _this2.db.batch(ops);\n        }\n      };\n    }\n  }, {\n    key: \"query\",\n    value: function query(q) {\n      var values = true;\n\n      if (q.keysOnly != null) {\n        values = !q.keysOnly;\n      }\n\n      var opts = {\n        keys: true,\n        values: values,\n        keyAsBuffer: true\n      }; // Let the db do the prefix matching\n\n      if (q.prefix != null) {\n        var prefix = q.prefix.toString(); // Match keys greater than or equal to `prefix` and\n\n        opts.gte = prefix; // less than `prefix` + \\xFF (hex escape sequence)\n\n        opts.lt = prefix + '\\xFF';\n      }\n\n      var it = levelIteratorToIterator(this.db.iterator(opts));\n      it = map(it, function (_ref) {\n        var key = _ref.key,\n            value = _ref.value;\n        var res = {\n          key: new Key(key, false)\n        };\n\n        if (values) {\n          res.value = Buffer.from(value);\n        }\n\n        return res;\n      });\n\n      if (Array.isArray(q.filters)) {\n        it = q.filters.reduce(function (it, f) {\n          return filter(it, f);\n        }, it);\n      }\n\n      if (Array.isArray(q.orders)) {\n        it = q.orders.reduce(function (it, f) {\n          return sortAll(it, f);\n        }, it);\n      }\n\n      if (q.offset != null) {\n        var i = 0;\n        it = filter(it, function () {\n          return i++ >= q.offset;\n        });\n      }\n\n      if (q.limit != null) {\n        it = take(it, q.limit);\n      }\n\n      return it;\n    }\n  }]);\n\n  return LevelDatastore;\n}(Adapter);\n\nfunction levelIteratorToIterator(li) {\n  return _defineProperty({\n    next: function next() {\n      return new Promise(function (resolve, reject) {\n        li.next(function (err, key, value) {\n          if (err) return reject(err);\n\n          if (key == null) {\n            return li.end(function (err) {\n              if (err) return reject(err);\n              resolve({\n                done: true\n              });\n            });\n          }\n\n          resolve({\n            done: false,\n            value: {\n              key: key,\n              value: value\n            }\n          });\n        });\n      });\n    },\n    return: function _return() {\n      return new Promise(function (resolve, reject) {\n        li.end(function (err) {\n          if (err) return reject(err);\n          resolve({\n            done: true\n          });\n        });\n      });\n    }\n  }, Symbol.asyncIterator, function () {\n    return this;\n  });\n}\n\nmodule.exports = LevelDatastore;","map":null,"metadata":{},"sourceType":"script"}