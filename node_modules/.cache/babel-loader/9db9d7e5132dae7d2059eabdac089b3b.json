{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar errCode = require('err-code');\n\nvar updateTree = require('./utils/update-tree');\n\nvar updateMfsRoot = require('./utils/update-mfs-root');\n\nvar toSources = require('./utils/to-sources');\n\nvar removeLink = require('./utils/remove-link');\n\nvar toMfsPath = require('./utils/to-mfs-path');\n\nvar toTrail = require('./utils/to-trail');\n\nvar applyDefaultOptions = require('./utils/apply-default-options');\n\nvar _require = require('../../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nvar defaultOptions = {\n  recursive: false,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  flush: true\n};\n\nmodule.exports = function (context) {\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _mfsRm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var args,\n          _yield$toSources,\n          sources,\n          options,\n          _iterator,\n          _step,\n          source,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              args = Array.from(_args);\n              _context.next = 3;\n              return toSources(context, args, defaultOptions);\n\n            case 3:\n              _yield$toSources = _context.sent;\n              sources = _yield$toSources.sources;\n              options = applyDefaultOptions(args, defaultOptions);\n\n              if (sources.length) {\n                _context.next = 8;\n                break;\n              }\n\n              throw errCode(new Error('Please supply at least one path to remove'), 'ERR_INVALID_PARAMS');\n\n            case 8:\n              sources.forEach(function (source) {\n                if (source.path === '/') {\n                  throw errCode(new Error('Cannot delete root'), 'ERR_INVALID_PARAMS');\n                }\n              });\n              _iterator = _createForOfIteratorHelper(sources);\n              _context.prev = 10;\n\n              _iterator.s();\n\n            case 12:\n              if ((_step = _iterator.n()).done) {\n                _context.next = 18;\n                break;\n              }\n\n              source = _step.value;\n              _context.next = 16;\n              return removePath(context, source.path, options);\n\n            case 16:\n              _context.next = 12;\n              break;\n\n            case 18:\n              _context.next = 23;\n              break;\n\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](10);\n\n              _iterator.e(_context.t0);\n\n            case 23:\n              _context.prev = 23;\n\n              _iterator.f();\n\n              return _context.finish(23);\n\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[10, 20, 23, 26]]);\n    }));\n\n    function mfsRm() {\n      return _mfsRm.apply(this, arguments);\n    }\n\n    return mfsRm;\n  }());\n};\n\nvar removePath = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(context, path, options) {\n    var mfsPath, trail, child, parent, _yield$removeLink, cid, newRootCid;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return toMfsPath(context, path);\n\n          case 2:\n            mfsPath = _context2.sent;\n            _context2.next = 5;\n            return toTrail(context, mfsPath.mfsPath, options);\n\n          case 5:\n            trail = _context2.sent;\n            child = trail.pop();\n            parent = trail[trail.length - 1];\n\n            if (parent) {\n              _context2.next = 10;\n              break;\n            }\n\n            throw errCode(new Error(\"\".concat(path, \" does not exist\")), 'ERR_NOT_FOUND');\n\n          case 10:\n            if (!(child.type === 'directory' && !options.recursive)) {\n              _context2.next = 12;\n              break;\n            }\n\n            throw errCode(new Error(\"\".concat(path, \" is a directory, use -r to remove directories\")), 'ERR_WAS_DIR');\n\n          case 12:\n            _context2.next = 14;\n            return removeLink(context, {\n              parentCid: parent.cid,\n              name: child.name,\n              hashAlg: options.hashAlg,\n              cidVersion: options.cidVersion,\n              flush: options.flush\n            });\n\n          case 14:\n            _yield$removeLink = _context2.sent;\n            cid = _yield$removeLink.cid;\n            parent.cid = cid; // update the tree with the new child\n\n            _context2.next = 19;\n            return updateTree(context, trail, options);\n\n          case 19:\n            newRootCid = _context2.sent;\n            _context2.next = 22;\n            return updateMfsRoot(context, newRootCid);\n\n          case 22:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function removePath(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}