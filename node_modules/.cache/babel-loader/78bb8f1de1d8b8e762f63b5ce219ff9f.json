{"ast":null,"code":"var _jsxFileName = \"/Users/fabianmolina/Documents/1hive/tulip-frontend/src/components/LineChart/LineChart.js\";\nimport React, { Component } from 'react';\nimport './LineChart.css';\n\nclass LineChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hoverLoc: null,\n      activePoint: null\n    };\n  } // GET X & Y || MAX & MIN\n\n\n  getX() {\n    const {\n      data\n    } = this.props;\n    return {\n      min: data[0].x,\n      max: data[data.length - 1].x\n    };\n  }\n\n  getY() {\n    const {\n      data\n    } = this.props;\n    return {\n      min: data.reduce((min, p) => p.y < min ? p.y : min, data[0].y),\n      max: data.reduce((max, p) => p.y > max ? p.y : max, data[0].y)\n    };\n  } // GET SVG COORDINATES\n\n\n  getSvgX(x) {\n    const {\n      svgWidth,\n      yLabelSize\n    } = this.props;\n    return yLabelSize + x / this.getX().max * (svgWidth - yLabelSize);\n  }\n\n  getSvgY(y) {\n    const {\n      svgHeight,\n      xLabelSize\n    } = this.props;\n    const gY = this.getY();\n    return ((svgHeight - xLabelSize) * gY.max - (svgHeight - xLabelSize) * y) / (gY.max - gY.min);\n  } // BUILD SVG PATH\n\n\n  makePath() {\n    const {\n      data,\n      color\n    } = this.props;\n    console.log(\">>>\", data);\n\n    if (data === undefined) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 14\n        }\n      });\n    }\n\n    let pathD = 'M ' + this.getSvgX(data[0].x) + ' ' + this.getSvgY(data[0].y) + ' ';\n    pathD += data.map((point, i) => {\n      return 'L ' + this.getSvgX(point.x) + ' ' + this.getSvgY(point.y) + ' ';\n    });\n    return /*#__PURE__*/React.createElement(\"path\", {\n      className: \"linechart_path\",\n      d: pathD,\n      style: {\n        stroke: color\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    });\n  } // BUILD SHADED AREA\n\n\n  makeArea() {\n    const {\n      data\n    } = this.props;\n    let pathD = 'M ' + this.getSvgX(data[0].x) + ' ' + this.getSvgY(data[0].y) + ' ';\n    pathD += data.map((point, i) => {\n      return 'L ' + this.getSvgX(point.x) + ' ' + this.getSvgY(point.y) + ' ';\n    });\n    const x = this.getX();\n    const y = this.getY();\n    pathD += 'L ' + this.getSvgX(x.max) + ' ' + this.getSvgY(y.min) + ' ' + 'L ' + this.getSvgX(x.min) + ' ' + this.getSvgY(y.min) + ' ';\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"defs\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"linearGradient\", {\n      id: \"MyGradient\",\n      gradientTransform: \"rotate(80)\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"stop\", {\n      offset: \"35%\",\n      stopColor: \"#7ce0d680\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"stop\", {\n      offset: \"95%\",\n      stopColor: \"#7ce0d600\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"path\", {\n      className: \"linechart_area\",\n      d: pathD,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }));\n  } // BUILD GRID AXIS\n\n\n  makeAxis() {\n    const {\n      yLabelSize\n    } = this.props;\n    const x = this.getX();\n    const y = this.getY();\n    return /*#__PURE__*/React.createElement(\"g\", {\n      className: \"linechart_axis\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"line\", {\n      x1: this.getSvgX(x.min) - yLabelSize,\n      y1: this.getSvgY(y.min),\n      x2: this.getSvgX(x.max),\n      y2: this.getSvgY(y.min),\n      strokeDasharray: \"5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"line\", {\n      x1: this.getSvgX(x.min) - yLabelSize,\n      y1: this.getSvgY(y.max),\n      x2: this.getSvgX(x.max),\n      y2: this.getSvgY(y.max),\n      strokeDasharray: \"5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  makeLabels() {\n    const {\n      svgHeight,\n      svgWidth,\n      xLabelSize,\n      yLabelSize\n    } = this.props;\n    const padding = 5;\n    return /*#__PURE__*/React.createElement(\"g\", {\n      className: \"linechart_label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"text\", {\n      transform: `translate(${yLabelSize / 2}, 20)`,\n      textAnchor: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    }, this.getY().max.toLocaleString('us-EN', {\n      style: 'currency',\n      currency: 'USD'\n    })), /*#__PURE__*/React.createElement(\"text\", {\n      transform: `translate(${yLabelSize / 2}, ${svgHeight - xLabelSize - padding})`,\n      textAnchor: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }, this.getY().min.toLocaleString('us-EN', {\n      style: 'currency',\n      currency: 'USD'\n    })), /*#__PURE__*/React.createElement(\"text\", {\n      transform: `translate(${yLabelSize}, ${svgHeight})`,\n      textAnchor: \"start\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }, this.props.data[0].d), /*#__PURE__*/React.createElement(\"text\", {\n      transform: `translate(${svgWidth}, ${svgHeight})`,\n      textAnchor: \"end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }\n    }, this.props.data[this.props.data.length - 1].d));\n  } // FIND CLOSEST POINT TO MOUSE\n\n\n  getCoords(e) {\n    const {\n      svgWidth,\n      data,\n      yLabelSize\n    } = this.props;\n    const svgLocation = document.getElementsByClassName('linechart')[0].getBoundingClientRect();\n    const adjustment = (svgLocation.width - svgWidth) / 2; // takes padding into consideration\n\n    const relativeLoc = e.clientX - svgLocation.left - adjustment;\n    const svgData = [];\n    data.map((point, i) => {\n      svgData.push({\n        svgX: this.getSvgX(point.x),\n        svgY: this.getSvgY(point.y),\n        d: point.d,\n        p: point.p\n      });\n    });\n    let closestPoint = {};\n\n    for (let i = 0, c = 500; i < svgData.length; i++) {\n      if (Math.abs(svgData[i].svgX - this.state.hoverLoc) <= c) {\n        c = Math.abs(svgData[i].svgX - this.state.hoverLoc);\n        closestPoint = svgData[i];\n      }\n    }\n\n    if (relativeLoc - yLabelSize < 0) {\n      this.stopHover();\n    } else {\n      this.setState({\n        hoverLoc: relativeLoc,\n        activePoint: closestPoint\n      });\n      this.props.onChartHover(relativeLoc, closestPoint);\n    }\n  } // STOP HOVER\n\n\n  stopHover() {\n    this.setState({\n      hoverLoc: null,\n      activePoint: null\n    });\n    this.props.onChartHover(null, null);\n  } // MAKE ACTIVE POINT\n\n\n  makeActivePoint() {\n    const {\n      color,\n      pointRadius\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"circle\", {\n      className: \"linechart_point\",\n      style: {\n        stroke: color\n      },\n      r: pointRadius,\n      cx: this.state.activePoint.svgX,\n      cy: this.state.activePoint.svgY,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 7\n      }\n    });\n  } // MAKE HOVER LINE\n\n\n  createLine() {\n    const {\n      svgHeight,\n      xLabelSize\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"line\", {\n      className: \"hoverLine\",\n      x1: this.state.hoverLoc,\n      y1: -8,\n      x2: this.state.hoverLoc,\n      y2: svgHeight - xLabelSize,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 7\n      }\n    });\n  }\n\n  render() {\n    const {\n      svgHeight,\n      svgWidth\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      width: svgWidth,\n      height: svgHeight,\n      viewBox: `10 -10 ${svgWidth} ${svgHeight}`,\n      className: \"linechart\",\n      onMouseLeave: () => this.stopHover(),\n      onMouseMove: e => this.getCoords(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"g\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }\n    }, this.props.showAxis && this.makeAxis(), this.makePath(), this.makeArea(), this.props.showLabels && this.makeLabels(), this.props.showHoverLoc && this.state.hoverLoc ? this.createLine() : null, this.state.hoverLoc ? this.makeActivePoint() : null));\n  }\n\n} // DEFAULT PROPS\n\n\nLineChart.defaultProps = {\n  data: [],\n  color: '#7CE0D6',\n  pointRadius: 6,\n  svgHeight: 300,\n  svgWidth: 900,\n  xLabelSize: 20,\n  yLabelSize: 80,\n  showLabels: false,\n  showHoverLoc: false,\n  showAxis: false\n};\nexport default LineChart;","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/components/LineChart/LineChart.js"],"names":["React","Component","LineChart","constructor","props","state","hoverLoc","activePoint","getX","data","min","x","max","length","getY","reduce","p","y","getSvgX","svgWidth","yLabelSize","getSvgY","svgHeight","xLabelSize","gY","makePath","color","console","log","undefined","pathD","map","point","i","stroke","makeArea","makeAxis","makeLabels","padding","toLocaleString","style","currency","d","getCoords","e","svgLocation","document","getElementsByClassName","getBoundingClientRect","adjustment","width","relativeLoc","clientX","left","svgData","push","svgX","svgY","closestPoint","c","Math","abs","stopHover","setState","onChartHover","makeActivePoint","pointRadius","createLine","render","showAxis","showLabels","showHoverLoc","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport './LineChart.css'\r\n\r\nclass LineChart extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      hoverLoc: null,\r\n      activePoint: null,\r\n    }\r\n  }\r\n\r\n  // GET X & Y || MAX & MIN\r\n  getX() {\r\n    const { data } = this.props\r\n    return {\r\n      min: data[0].x,\r\n      max: data[data.length - 1].x,\r\n    }\r\n  }\r\n\r\n  getY() {\r\n    const { data } = this.props\r\n    return {\r\n      min: data.reduce((min, p) => (p.y < min ? p.y : min), data[0].y),\r\n      max: data.reduce((max, p) => (p.y > max ? p.y : max), data[0].y),\r\n    }\r\n  }\r\n\r\n  // GET SVG COORDINATES\r\n  getSvgX(x) {\r\n    const { svgWidth, yLabelSize } = this.props\r\n    return yLabelSize + (x / this.getX().max) * (svgWidth - yLabelSize)\r\n  }\r\n\r\n  getSvgY(y) {\r\n    const { svgHeight, xLabelSize } = this.props\r\n    const gY = this.getY()\r\n    return (\r\n      ((svgHeight - xLabelSize) * gY.max - (svgHeight - xLabelSize) * y) /\r\n      (gY.max - gY.min)\r\n    )\r\n  }\r\n\r\n  // BUILD SVG PATH\r\n  makePath() {\r\n    const { data, color } = this.props\r\n    console.log(\">>>\", data)\r\n    if (data === undefined) {\r\n      return <div />\r\n    }\r\n    let pathD =\r\n      'M ' + this.getSvgX(data[0].x) + ' ' + this.getSvgY(data[0].y) + ' '\r\n\r\n    pathD += data.map((point, i) => {\r\n      return 'L ' + this.getSvgX(point.x) + ' ' + this.getSvgY(point.y) + ' '\r\n    })\r\n\r\n    return (\r\n      <path className=\"linechart_path\" d={pathD} style={{ stroke: color }} />\r\n    )\r\n  }\r\n\r\n  // BUILD SHADED AREA\r\n  makeArea() {\r\n    const { data } = this.props\r\n    let pathD =\r\n      'M ' + this.getSvgX(data[0].x) + ' ' + this.getSvgY(data[0].y) + ' '\r\n\r\n    pathD += data.map((point, i) => {\r\n      return 'L ' + this.getSvgX(point.x) + ' ' + this.getSvgY(point.y) + ' '\r\n    })\r\n\r\n    const x = this.getX()\r\n    const y = this.getY()\r\n    pathD +=\r\n      'L ' +\r\n      this.getSvgX(x.max) +\r\n      ' ' +\r\n      this.getSvgY(y.min) +\r\n      ' ' +\r\n      'L ' +\r\n      this.getSvgX(x.min) +\r\n      ' ' +\r\n      this.getSvgY(y.min) +\r\n      ' '\r\n\r\n    return (\r\n      <svg>\r\n        <defs>\r\n          <linearGradient id=\"MyGradient\" gradientTransform=\"rotate(80)\">\r\n            <stop offset=\"35%\" stopColor=\"#7ce0d680\" />\r\n            <stop offset=\"95%\" stopColor=\"#7ce0d600\" />\r\n          </linearGradient>\r\n        </defs>\r\n        <path className=\"linechart_area\" d={pathD} />\r\n      </svg>\r\n    )\r\n  }\r\n\r\n  // BUILD GRID AXIS\r\n  makeAxis() {\r\n    const { yLabelSize } = this.props\r\n    const x = this.getX()\r\n    const y = this.getY()\r\n\r\n    return (\r\n      <g className=\"linechart_axis\">\r\n        <line\r\n          x1={this.getSvgX(x.min) - yLabelSize}\r\n          y1={this.getSvgY(y.min)}\r\n          x2={this.getSvgX(x.max)}\r\n          y2={this.getSvgY(y.min)}\r\n          strokeDasharray=\"5\"\r\n        />\r\n        <line\r\n          x1={this.getSvgX(x.min) - yLabelSize}\r\n          y1={this.getSvgY(y.max)}\r\n          x2={this.getSvgX(x.max)}\r\n          y2={this.getSvgY(y.max)}\r\n          strokeDasharray=\"5\"\r\n        />\r\n      </g>\r\n    )\r\n  }\r\n\r\n  makeLabels() {\r\n    const { svgHeight, svgWidth, xLabelSize, yLabelSize } = this.props\r\n    const padding = 5\r\n    return (\r\n      <g className=\"linechart_label\">\r\n        {/* Y AXIS LABELS */}\r\n        <text\r\n          transform={`translate(${yLabelSize / 2}, 20)`}\r\n          textAnchor=\"middle\"\r\n        >\r\n          {this.getY().max.toLocaleString('us-EN', {\r\n            style: 'currency',\r\n            currency: 'USD',\r\n          })}\r\n        </text>\r\n        <text\r\n          transform={`translate(${yLabelSize / 2}, ${svgHeight -\r\n            xLabelSize -\r\n            padding})`}\r\n          textAnchor=\"middle\"\r\n        >\r\n          {this.getY().min.toLocaleString('us-EN', {\r\n            style: 'currency',\r\n            currency: 'USD',\r\n          })}\r\n        </text>\r\n        {/* X AXIS LABELS */}\r\n        <text\r\n          transform={`translate(${yLabelSize}, ${svgHeight})`}\r\n          textAnchor=\"start\"\r\n        >\r\n          {this.props.data[0].d}\r\n        </text>\r\n        <text\r\n          transform={`translate(${svgWidth}, ${svgHeight})`}\r\n          textAnchor=\"end\"\r\n        >\r\n          {this.props.data[this.props.data.length - 1].d}\r\n        </text>\r\n      </g>\r\n    )\r\n  }\r\n\r\n  // FIND CLOSEST POINT TO MOUSE\r\n  getCoords(e) {\r\n    const { svgWidth, data, yLabelSize } = this.props\r\n    const svgLocation = document\r\n      .getElementsByClassName('linechart')[0]\r\n      .getBoundingClientRect()\r\n    const adjustment = (svgLocation.width - svgWidth) / 2 // takes padding into consideration\r\n    const relativeLoc = e.clientX - svgLocation.left - adjustment\r\n\r\n    const svgData = []\r\n    data.map((point, i) => {\r\n      svgData.push({\r\n        svgX: this.getSvgX(point.x),\r\n        svgY: this.getSvgY(point.y),\r\n        d: point.d,\r\n        p: point.p,\r\n      })\r\n    })\r\n\r\n    let closestPoint = {}\r\n    for (let i = 0, c = 500; i < svgData.length; i++) {\r\n      if (Math.abs(svgData[i].svgX - this.state.hoverLoc) <= c) {\r\n        c = Math.abs(svgData[i].svgX - this.state.hoverLoc)\r\n        closestPoint = svgData[i]\r\n      }\r\n    }\r\n\r\n    if (relativeLoc - yLabelSize < 0) {\r\n      this.stopHover()\r\n    } else {\r\n      this.setState({\r\n        hoverLoc: relativeLoc,\r\n        activePoint: closestPoint,\r\n      })\r\n      this.props.onChartHover(relativeLoc, closestPoint)\r\n    }\r\n  }\r\n\r\n  // STOP HOVER\r\n  stopHover() {\r\n    this.setState({ hoverLoc: null, activePoint: null })\r\n    this.props.onChartHover(null, null)\r\n  }\r\n\r\n  // MAKE ACTIVE POINT\r\n  makeActivePoint() {\r\n    const { color, pointRadius } = this.props\r\n    return (\r\n      <circle\r\n        className=\"linechart_point\"\r\n        style={{ stroke: color }}\r\n        r={pointRadius}\r\n        cx={this.state.activePoint.svgX}\r\n        cy={this.state.activePoint.svgY}\r\n      />\r\n    )\r\n  }\r\n\r\n  // MAKE HOVER LINE\r\n  createLine() {\r\n    const { svgHeight, xLabelSize } = this.props\r\n    return (\r\n      <line\r\n        className=\"hoverLine\"\r\n        x1={this.state.hoverLoc}\r\n        y1={-8}\r\n        x2={this.state.hoverLoc}\r\n        y2={svgHeight - xLabelSize}\r\n      />\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { svgHeight, svgWidth } = this.props\r\n    return (\r\n      <svg\r\n        width={svgWidth}\r\n        height={svgHeight}\r\n        viewBox={`10 -10 ${svgWidth} ${svgHeight}`}\r\n        className=\"linechart\"\r\n        onMouseLeave={() => this.stopHover()}\r\n        onMouseMove={e => this.getCoords(e)}\r\n      >\r\n        <g>\r\n          {this.props.showAxis && this.makeAxis()}\r\n          {this.makePath()}\r\n          {this.makeArea()}\r\n          {this.props.showLabels && this.makeLabels()}\r\n          {this.props.showHoverLoc && this.state.hoverLoc\r\n            ? this.createLine()\r\n            : null}\r\n          {this.state.hoverLoc ? this.makeActivePoint() : null}\r\n        </g>\r\n      </svg>\r\n    )\r\n  }\r\n}\r\n\r\n// DEFAULT PROPS\r\nLineChart.defaultProps = {\r\n  data: [],\r\n  color: '#7CE0D6',\r\n  pointRadius: 6,\r\n  svgHeight: 300,\r\n  svgWidth: 900,\r\n  xLabelSize: 20,\r\n  yLabelSize: 80,\r\n  showLabels: false,\r\n  showHoverLoc: false,\r\n  showAxis: false,\r\n}\r\n\r\nexport default LineChart\r\n"]},"metadata":{},"sourceType":"module"}