{"ast":null,"code":"import { useCallback, useRef } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom'; // Preferences base query string\n\nconst GLOBAL_PREFERENCES_QUERY_PARAM = '?preferences=';\nexport function getPreferencesSearch(screen) {\n  return `${GLOBAL_PREFERENCES_QUERY_PARAM}${screen}`;\n}\n\nfunction parsePreferences(search = '') {\n  const searchParams = new URLSearchParams(search);\n  return {\n    screen: searchParams.get('preferences')\n  };\n}\n/**\n * Hook to interact with the preferences\n * @returns {Array} [open preferences handler, close preferences handler, current preference screen]\n */\n\n\nexport default function usePreferences() {\n  // We need to keep track of the path where the preference was called in order to return to the same path when the preference modal is closed\n  const {\n    pathname: basePath,\n    search\n  } = useLocation();\n  const history = useHistory();\n  const {\n    screen\n  } = parsePreferences(search);\n  const preferenceScreen = useRef(screen);\n  const handleOpenPreferences = useCallback(screen => {\n    preferenceScreen.current = screen;\n    const fullPath = basePath + getPreferencesSearch(preferenceScreen.current);\n    history.push(fullPath);\n  }, [basePath, history]);\n  const handleClosePreferences = useCallback(() => {\n    preferenceScreen.current = '';\n    history.push(basePath);\n  }, [basePath, history]);\n  return [handleOpenPreferences, handleClosePreferences, preferenceScreen.current];\n}","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/hooks/usePreferences.js"],"names":["useCallback","useRef","useHistory","useLocation","GLOBAL_PREFERENCES_QUERY_PARAM","getPreferencesSearch","screen","parsePreferences","search","searchParams","URLSearchParams","get","usePreferences","pathname","basePath","history","preferenceScreen","handleOpenPreferences","current","fullPath","push","handleClosePreferences"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,QAAoC,OAApC;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,kBAAxC,C,CAEA;;AACA,MAAMC,8BAA8B,GAAG,eAAvC;AAEA,OAAO,SAASC,oBAAT,CAA8BC,MAA9B,EAAsC;AAC3C,SAAQ,GAAEF,8BAA+B,GAAEE,MAAO,EAAlD;AACD;;AAED,SAASC,gBAAT,CAA0BC,MAAM,GAAG,EAAnC,EAAuC;AACrC,QAAMC,YAAY,GAAG,IAAIC,eAAJ,CAAoBF,MAApB,CAArB;AAEA,SAAO;AACLF,IAAAA,MAAM,EAAEG,YAAY,CAACE,GAAb,CAAiB,aAAjB;AADH,GAAP;AAGD;AAED;AACA;AACA;AACA;;;AACA,eAAe,SAASC,cAAT,GAA0B;AACvC;AACA,QAAM;AAAEC,IAAAA,QAAQ,EAAEC,QAAZ;AAAsBN,IAAAA;AAAtB,MAAiCL,WAAW,EAAlD;AACA,QAAMY,OAAO,GAAGb,UAAU,EAA1B;AAEA,QAAM;AAAEI,IAAAA;AAAF,MAAaC,gBAAgB,CAACC,MAAD,CAAnC;AAEA,QAAMQ,gBAAgB,GAAGf,MAAM,CAACK,MAAD,CAA/B;AAEA,QAAMW,qBAAqB,GAAGjB,WAAW,CACvCM,MAAM,IAAI;AACRU,IAAAA,gBAAgB,CAACE,OAAjB,GAA2BZ,MAA3B;AACA,UAAMa,QAAQ,GAAGL,QAAQ,GAAGT,oBAAoB,CAACW,gBAAgB,CAACE,OAAlB,CAAhD;AACAH,IAAAA,OAAO,CAACK,IAAR,CAAaD,QAAb;AACD,GALsC,EAMvC,CAACL,QAAD,EAAWC,OAAX,CANuC,CAAzC;AASA,QAAMM,sBAAsB,GAAGrB,WAAW,CAAC,MAAM;AAC/CgB,IAAAA,gBAAgB,CAACE,OAAjB,GAA2B,EAA3B;AACAH,IAAAA,OAAO,CAACK,IAAR,CAAaN,QAAb;AACD,GAHyC,EAGvC,CAACA,QAAD,EAAWC,OAAX,CAHuC,CAA1C;AAKA,SAAO,CACLE,qBADK,EAELI,sBAFK,EAGLL,gBAAgB,CAACE,OAHZ,CAAP;AAKD","sourcesContent":["import { useCallback, useRef } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\n\n// Preferences base query string\nconst GLOBAL_PREFERENCES_QUERY_PARAM = '?preferences='\n\nexport function getPreferencesSearch(screen) {\n  return `${GLOBAL_PREFERENCES_QUERY_PARAM}${screen}`\n}\n\nfunction parsePreferences(search = '') {\n  const searchParams = new URLSearchParams(search)\n\n  return {\n    screen: searchParams.get('preferences'),\n  }\n}\n\n/**\n * Hook to interact with the preferences\n * @returns {Array} [open preferences handler, close preferences handler, current preference screen]\n */\nexport default function usePreferences() {\n  // We need to keep track of the path where the preference was called in order to return to the same path when the preference modal is closed\n  const { pathname: basePath, search } = useLocation()\n  const history = useHistory()\n\n  const { screen } = parsePreferences(search)\n\n  const preferenceScreen = useRef(screen)\n\n  const handleOpenPreferences = useCallback(\n    screen => {\n      preferenceScreen.current = screen\n      const fullPath = basePath + getPreferencesSearch(preferenceScreen.current)\n      history.push(fullPath)\n    },\n    [basePath, history]\n  )\n\n  const handleClosePreferences = useCallback(() => {\n    preferenceScreen.current = ''\n    history.push(basePath)\n  }, [basePath, history])\n\n  return [\n    handleOpenPreferences,\n    handleClosePreferences,\n    preferenceScreen.current,\n  ]\n}\n"]},"metadata":{},"sourceType":"module"}