{"ast":null,"code":"'use strict';\n\nconst KBucket = require('k-bucket');\n\nconst utils = require('./utils');\n/**\n * A wrapper around `k-bucket`, to provide easy store and\n * retrival for peers.\n */\n\n\nclass RoutingTable {\n  /**\n   * @param {PeerId} self\n   * @param {number} kBucketSize\n   */\n  constructor(self, kBucketSize) {\n    this.self = self;\n    this._onPing = this._onPing.bind(this);\n\n    this._onInit(kBucketSize);\n  } // -- Private Methods\n\n\n  async _onInit(kBucketSize) {\n    const selfKey = await utils.convertPeerId(this.self);\n    this.kb = new KBucket({\n      localNodeId: selfKey,\n      numberOfNodesPerKBucket: kBucketSize,\n      numberOfNodesToPing: 1\n    });\n    this.kb.on('ping', this._onPing);\n  }\n  /**\n   * Called on the `ping` event from `k-bucket`.\n   * Currently this just removes the oldest contact from\n   * the list, without acutally pinging the individual peers.\n   * This is the same as go does, but should probably\n   * be upgraded to actually ping the individual peers.\n   *\n   * @param {Array<Object>} oldContacts\n   * @param {Object} newContact\n   * @returns {undefined}\n   * @private\n   */\n\n\n  _onPing(oldContacts, newContact) {\n    // just use the first one (k-bucket sorts from oldest to newest)\n    const oldest = oldContacts[0]; // remove the oldest one\n\n    this.kb.remove(oldest.id); // add the new one\n\n    this.kb.add(newContact);\n  } // -- Public Interface\n\n  /**\n   * Amount of currently stored peers.\n   *\n   * @type {number}\n   */\n\n\n  get size() {\n    return this.kb.count();\n  }\n  /**\n   * Find a specific peer by id.\n   *\n   * @param {PeerId} peer\n   * @returns {Promise<PeerId>}\n   */\n\n\n  async find(peer) {\n    const key = await utils.convertPeerId(peer);\n    const closest = this.closestPeer(key);\n\n    if (closest && closest.isEqual(peer)) {\n      return closest;\n    }\n  }\n  /**\n   * Retrieve the closest peers to the given key.\n   *\n   * @param {Buffer} key\n   * @returns {PeerId|undefined}\n   */\n\n\n  closestPeer(key) {\n    const res = this.closestPeers(key, 1);\n\n    if (res.length > 0) {\n      return res[0];\n    }\n  }\n  /**\n   * Retrieve the `count`-closest peers to the given key.\n   *\n   * @param {Buffer} key\n   * @param {number} count\n   * @returns {Array<PeerId>}\n   */\n\n\n  closestPeers(key, count) {\n    return this.kb.closest(key, count).map(p => p.peer);\n  }\n  /**\n   * Add or update the routing table with the given peer.\n   *\n   * @param {PeerId} peer\n   * @returns {Promise<void>}\n   */\n\n\n  async add(peer) {\n    const id = await utils.convertPeerId(peer);\n    this.kb.add({\n      id: id,\n      peer: peer\n    });\n  }\n  /**\n   * Remove a given peer from the table.\n   *\n   * @param {PeerId} peer\n   * @returns {Promise<void>}\n   */\n\n\n  async remove(peer) {\n    const id = await utils.convertPeerId(peer);\n    this.kb.remove(id);\n  }\n\n}\n\nmodule.exports = RoutingTable;","map":null,"metadata":{},"sourceType":"script"}