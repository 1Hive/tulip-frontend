{"ast":null,"code":"'use strict';\n\nconst multicodec = require('multicodec');\n\nconst nameToCodec = name => multicodec[name.toUpperCase().replace(/-/g, '_')];\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n\nmodule.exports = ({\n  ipld,\n  pin,\n  gcLock,\n  preload\n}) => {\n  return withTimeoutOption(async function put(dagNode, options) {\n    options = options || {};\n\n    if (options.cid && (options.format || options.hashAlg)) {\n      throw new Error('Can\\'t put dag node. Please provide either `cid` OR `format` and `hashAlg` options.');\n    } else if (options.format && !options.hashAlg || !options.format && options.hashAlg) {\n      throw new Error('Can\\'t put dag node. Please provide `format` AND `hashAlg` options.');\n    }\n\n    const optionDefaults = {\n      format: multicodec.DAG_CBOR,\n      hashAlg: multicodec.SHA2_256\n    }; // The IPLD expects the format and hashAlg as constants\n\n    if (options.format && typeof options.format === 'string') {\n      options.format = nameToCodec(options.format);\n    }\n\n    if (options.hashAlg && typeof options.hashAlg === 'string') {\n      options.hashAlg = nameToCodec(options.hashAlg);\n    }\n\n    options = options.cid ? options : Object.assign({}, optionDefaults, options); // js-ipld defaults to verion 1 CIDs. Hence set version 0 explicitly for\n    // dag-pb nodes\n\n    if (options.version === undefined) {\n      if (options.format === multicodec.DAG_PB && options.hashAlg === multicodec.SHA2_256) {\n        options.version = 0;\n      } else {\n        options.version = 1;\n      }\n    }\n\n    let release;\n\n    if (options.pin) {\n      release = await gcLock.readLock();\n    }\n\n    try {\n      const cid = await ipld.put(dagNode, options.format, {\n        hashAlg: options.hashAlg,\n        cidVersion: options.version,\n        signal: options.signal\n      });\n\n      if (options.pin) {\n        await pin.add(cid, {\n          lock: false\n        });\n      }\n\n      if (options.preload !== false) {\n        preload(cid);\n      }\n\n      return cid;\n    } finally {\n      if (release) {\n        release();\n      }\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}