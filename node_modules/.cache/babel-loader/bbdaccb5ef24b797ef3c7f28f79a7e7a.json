{"ast":null,"code":"'use strict';\n\nvar get = require('dlv');\n\nvar mergeOptions = require('merge-options');\n\nvar errCode = require('err-code');\n\nvar PubsubRouters = require('../runtime/libp2p-pubsub-routers-nodejs');\n\nmodule.exports = function (_ref) {\n  var options = _ref.options,\n      peerInfo = _ref.peerInfo,\n      repo = _ref.repo,\n      config = _ref.config;\n  options = options || {};\n  config = config || {};\n  var datastore = repo.datastore;\n  var libp2pOptions = getLibp2pOptions({\n    options: options,\n    config: config,\n    datastore: datastore,\n    peerInfo: peerInfo\n  });\n\n  if (typeof options.libp2p === 'function') {\n    return options.libp2p({\n      libp2pOptions: libp2pOptions,\n      options: options,\n      config: config,\n      datastore: datastore,\n      peerInfo: peerInfo\n    });\n  } // Required inline to reduce startup time\n\n\n  var Libp2p = require('libp2p');\n\n  return new Libp2p(mergeOptions(libp2pOptions, get(options, 'libp2p', {})));\n};\n\nfunction getLibp2pOptions(_ref2) {\n  var options = _ref2.options,\n      config = _ref2.config,\n      datastore = _ref2.datastore,\n      peerInfo = _ref2.peerInfo;\n\n  var getPubsubRouter = function getPubsubRouter() {\n    var router = get(config, 'Pubsub.Router') || 'gossipsub';\n\n    if (!PubsubRouters[router]) {\n      throw errCode(new Error(\"Router unavailable. Configure libp2p.modules.pubsub to use the \".concat(router, \" router.\")), 'ERR_NOT_SUPPORTED');\n    }\n\n    return PubsubRouters[router];\n  };\n\n  var libp2pDefaults = {\n    datastore: datastore,\n    peerInfo: peerInfo,\n    modules: {}\n  };\n  var bootstrapList = get(options, 'config.Bootstrap', get(config, 'Bootstrap', []));\n  var libp2pOptions = {\n    modules: {\n      pubsub: getPubsubRouter()\n    },\n    config: {\n      peerDiscovery: {\n        mdns: {\n          enabled: get(options, 'config.Discovery.MDNS.Enabled', get(config, 'Discovery.MDNS.Enabled', true))\n        },\n        webRTCStar: {\n          enabled: get(options, 'config.Discovery.webRTCStar.Enabled', get(config, 'Discovery.webRTCStar.Enabled', true))\n        },\n        bootstrap: {\n          list: bootstrapList\n        }\n      },\n      relay: {\n        enabled: get(options, 'relay.enabled', get(config, 'relay.enabled', true)),\n        hop: {\n          enabled: get(options, 'relay.hop.enabled', get(config, 'relay.hop.enabled', false)),\n          active: get(options, 'relay.hop.active', get(config, 'relay.hop.active', false))\n        }\n      },\n      dht: {\n        kBucketSize: get(options, 'dht.kBucketSize', 20)\n      },\n      pubsub: {\n        enabled: get(options, 'config.Pubsub.Enabled', get(config, 'Pubsub.Enabled', true))\n      }\n    },\n    connectionManager: get(options, 'connectionManager', {\n      maxConnections: get(options, 'config.Swarm.ConnMgr.HighWater', get(config, 'Swarm.ConnMgr.HighWater')),\n      minConnections: get(options, 'config.Swarm.ConnMgr.LowWater', get(config, 'Swarm.ConnMgr.LowWater'))\n    })\n  }; // Required inline to reduce startup time\n  // Note: libp2p-nodejs gets replaced by libp2p-browser when webpacked/browserified\n\n  var getEnvLibp2pOptions = require('../runtime/libp2p-nodejs'); // Merge defaults with Node.js/browser/other environments options and configuration\n\n\n  var libp2pConfig = mergeOptions(libp2pDefaults, getEnvLibp2pOptions(), libp2pOptions);\n\n  if (bootstrapList.length > 0) {\n    libp2pConfig.modules.peerDiscovery.push(require('libp2p-bootstrap'));\n  }\n\n  return libp2pConfig;\n}","map":null,"metadata":{},"sourceType":"script"}