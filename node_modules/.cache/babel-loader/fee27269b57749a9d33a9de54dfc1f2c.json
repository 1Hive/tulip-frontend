{"ast":null,"code":"'use strict';\n\nconst exporter = require('ipfs-unixfs-exporter');\n\nconst errCode = require('err-code');\n\nconst {\n  normalizeCidPath,\n  mapFile,\n  withTimeoutOption\n} = require('../utils');\n\nmodule.exports = function ({\n  ipld,\n  preload\n}) {\n  return withTimeoutOption(async function* ls(ipfsPath, options) {\n    options = options || {};\n    const path = normalizeCidPath(ipfsPath);\n    const recursive = options.recursive;\n    const pathComponents = path.split('/');\n\n    if (options.preload !== false) {\n      preload(pathComponents[0]);\n    }\n\n    const file = await exporter(ipfsPath, ipld, options);\n\n    if (!file.unixfs) {\n      throw errCode(new Error('dag node was not a UnixFS node'), 'ERR_NOT_UNIXFS');\n    }\n\n    if (file.unixfs.type === 'file') {\n      return mapFile(file, options);\n    }\n\n    if (file.unixfs.type.includes('dir')) {\n      if (recursive) {\n        for await (const child of exporter.recursive(file.cid, ipld, options)) {\n          if (file.cid.toBaseEncodedString() === child.cid.toBaseEncodedString()) {\n            continue;\n          }\n\n          yield mapFile(child, options);\n        }\n\n        return;\n      }\n\n      for await (let child of file.content()) {\n        child = mapFile(child, options);\n        child.depth--;\n        yield child;\n      }\n\n      return;\n    }\n\n    throw errCode(new Error(`Unknown UnixFS type ${file.unixfs.type}`), 'ERR_UNKNOWN_UNIXFS_TYPE');\n  });\n};","map":null,"metadata":{},"sourceType":"script"}