{"ast":null,"code":"/**\n * Timestamp for 64-bit time_t, nanosecond precision and strftime\n *\n * @author Yusuke Kawasaki\n * @license MIT\n * @see https://github.com/kawanet/timestamp-nano\n */\nvar Timestamp = function () {\n  if (\"undefined\" !== typeof module) module.exports = Timestamp;\n  var SEC_DAY = 24 * 3600; // seconds per day\n\n  var YEAR_SLOT = 3200; // years per slot\n\n  var DAY_SLOT = (365 * 400 + 97) * YEAR_SLOT / 400; // days per slot\n\n  var SEC_SLOT = SEC_DAY * DAY_SLOT; // seconds per slot\n\n  var MSEC_SLOT = SEC_SLOT * 1000; // mseconds per slot\n  // 15.9.1.1 Time Values and Time Range\n  // The actual range of times supported by ECMAScript Date objects is\n  // exactly â€“100,000,000 days to 100,000,000 days measured relative to\n  // midnight at the beginning of 01 January, 1970 UTC.\n\n  var MAX_MSEC = 1000 * 10000 * 10000 * SEC_DAY;\n  var BIT24 = 0x1000000;\n  var BIT32 = 0x10000 * 0x10000;\n  var DEC6 = 1000 * 1000;\n  var DEC9 = 1000 * 1000 * 1000;\n  var ZERO9 = \"000000000\";\n  var trunc = Math.trunc || Math_trunc;\n  var P = Timestamp.prototype; // static methods\n\n  Timestamp.fromDate = fromDate;\n  Timestamp.fromInt64BE = buildFromInt64(0, 1, 2, 3, 0, 4);\n  Timestamp.fromInt64LE = buildFromInt64(3, 2, 1, 0, 4, 0);\n  Timestamp.fromString = fromString;\n  Timestamp.fromTimeT = fromTimeT; // private properties\n\n  P.year = 0; // Offset number for year precision\n\n  P.time = 0; // Milliseconds from epoch\n\n  P.nano = 0; // Offset number for nanosecond precision\n  // instance methods\n\n  P.addNano = addNano;\n  P.getNano = getNano;\n  P.getTimeT = getTimeT;\n  P.getYear = getYear;\n  P.toDate = toDate;\n  P.toJSON = toJSON;\n  P.toString = toString;\n  P.writeInt64BE = buildWriteInt64(0, 1, 2, 3, 0, 4);\n  P.writeInt64LE = buildWriteInt64(3, 2, 1, 0, 4, 0);\n  var FMT_JSON = \"%Y-%m-%dT%H:%M:%S.%NZ\";\n  var FMT_MONTH = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  var FMT_DAY = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n  var FMT_STRING = {\n    \"%\": \"%\",\n    F: \"%Y-%m-%d\",\n    n: \"\\n\",\n    R: \"%H:%M\",\n    T: \"%H:%M:%S\",\n    t: \"\\t\",\n    X: \"%T\",\n    Z: \"GMT\",\n    z: \"+0000\"\n  };\n  return Timestamp;\n\n  function Timestamp(time, nano, year) {\n    var ts = this;\n    if (!(ts instanceof Timestamp)) return new Timestamp(time, nano, year);\n    ts.time = +time || 0;\n    ts.nano = +nano || 0;\n    ts.year = +year || 0;\n    normalize(ts);\n  }\n\n  function getYear() {\n    var year = this.toDate().getUTCFullYear();\n    return year + this.year;\n  }\n\n  function normalize(ts) {\n    var year = ts.year;\n    var time = ts.time;\n    var nano = ts.nano;\n    var changed;\n    var slot; // normalize nano\n\n    if (nano < 0 || DEC6 <= nano) {\n      var n = Math.floor(nano / DEC6);\n      nano -= n * DEC6;\n      time += n;\n      changed = 1;\n    }\n\n    var y = year % YEAR_SLOT;\n\n    if (time < -MAX_MSEC || MAX_MSEC < time || y) {\n      // shrink time into the minimal slot\n      slot = trunc(time / MSEC_SLOT);\n\n      if (slot) {\n        year += slot * YEAR_SLOT;\n        time -= slot * MSEC_SLOT;\n      } // add year offset smaller than a slot\n\n\n      var dt = newDate(time);\n      dt.setUTCFullYear(y + dt.getUTCFullYear());\n      year -= y;\n      time = +dt; // use full range of 100 million days.\n\n      slot = trunc(year / YEAR_SLOT);\n      var total = time + slot * MSEC_SLOT;\n\n      if (slot && -MAX_MSEC <= total && total <= MAX_MSEC) {\n        year -= slot * YEAR_SLOT;\n        time = total;\n      }\n\n      changed = 1;\n    }\n\n    if (changed) {\n      ts.year = year;\n      ts.time = time;\n      ts.nano = nano;\n    }\n\n    return ts;\n  }\n\n  function toDate() {\n    var ts = normalize(this);\n    return newDate(ts.time);\n  }\n\n  function newDate(time) {\n    var dt = new Date(0);\n    dt.setTime(time);\n    return dt;\n  }\n\n  function addNano(nano) {\n    this.nano += +nano || 0;\n    return this;\n  }\n\n  function getNano() {\n    var ts = normalize(this);\n    return (ts.time % 1000 * DEC6 + +ts.nano + DEC9) % DEC9;\n  }\n\n  function fromString(string) {\n    var time;\n    var ts = new Timestamp();\n    string += \"\";\n    var array = string.replace(/^\\s*[+\\-]?\\d+/, function (match) {\n      var year = +match; // Use only years around 1970 to avoid Date's terrible behavior:\n      // 15.9.4.3 Date.UTC\n      // If y is not NaN and 0 <= y <= 99, then let yr be 1900+y\n\n      var y = 1970 + (year - 1970) % 400;\n      ts.year = year - y;\n      return y;\n    }).replace(/(?:Z|([+\\-]\\d{2}):?(\\d{2}))$/, function (match, hour, min) {\n      // time zone\n      if (hour < 0) min *= -1;\n      time = (+hour * 60 + +min) * 60000;\n      return \"\";\n    }).replace(/\\.\\d+$/, function (match) {\n      // nanoseconds\n      ts.nano = +(match + ZERO9).substr(1, 9);\n      return \"\";\n    }).split(/\\D+/);\n\n    if (array.length > 1) {\n      array[1]--; // month starts from 0\n    } else {\n      array[1] = 0;\n    }\n\n    ts.time = time = Date.UTC.apply(Date, array) - (time || 0);\n\n    if (isNaN(time)) {\n      throw new TypeError(\"Invalid Date\");\n    }\n\n    return normalize(ts);\n  }\n\n  function fromDate(date) {\n    return new Timestamp(+date);\n  }\n\n  function fromTimeT(time) {\n    return fromTime(time, 0);\n  }\n\n  function fromTime(low, high) {\n    high |= 0;\n    high *= BIT32;\n    low = +low || 0; // slot count\n\n    var slot = trunc(high / SEC_SLOT) + trunc(low / SEC_SLOT); // seconds within slot\n\n    var second = high % SEC_SLOT + low % SEC_SLOT; // slot offset\n\n    var offset = trunc(second / SEC_SLOT);\n\n    if (offset) {\n      slot += offset;\n      second -= offset * SEC_SLOT;\n    }\n\n    return new Timestamp(second * 1000, 0, slot * YEAR_SLOT);\n  }\n\n  function getTimeT() {\n    var ts = normalize(this);\n    var time = Math.floor(ts.time / 1000);\n    var year = ts.year;\n    if (year) time += year * DAY_SLOT * SEC_DAY / YEAR_SLOT; // this may loose some bits over than 53 bit precision\n\n    return time;\n  }\n\n  function toJSON() {\n    return this.toString().replace(/0{1,6}Z$/, \"Z\");\n  }\n\n  function toString(format) {\n    var ts = this;\n    var dt = ts.toDate();\n    var map = {\n      H: H,\n      L: L,\n      M: M,\n      N: N,\n      S: S,\n      Y: Y,\n      a: a,\n      b: b,\n      d: d,\n      e: e,\n      m: m\n    };\n    return strftime(format || FMT_JSON);\n\n    function strftime(format) {\n      return format.replace(/%./g, function (match) {\n        var m = match[1];\n        var c = FMT_STRING[m];\n        var f = map[m];\n        return c ? strftime(c) : f ? f() : match;\n      });\n    }\n\n    function Y() {\n      var year = ts.getYear();\n\n      if (year > 999999) {\n        return \"+\" + year;\n      } else if (year > 9999) {\n        return \"+\" + pad(year, 6);\n      } else if (year >= 0) {\n        return pad(year, 4);\n      } else if (year >= -999999) {\n        return \"-\" + pad(-year, 6);\n      } else {\n        return year;\n      }\n    }\n\n    function m() {\n      return pad2(dt.getUTCMonth() + 1);\n    }\n\n    function d() {\n      return pad2(dt.getUTCDate());\n    }\n\n    function e() {\n      return padS(dt.getUTCDate());\n    }\n\n    function H() {\n      return pad2(dt.getUTCHours());\n    }\n\n    function M() {\n      return pad2(dt.getUTCMinutes());\n    }\n\n    function S() {\n      return pad2(dt.getUTCSeconds());\n    }\n\n    function L() {\n      return pad(dt.getUTCMilliseconds(), 3);\n    }\n\n    function N() {\n      return pad(ts.getNano(), 9);\n    }\n\n    function a() {\n      return FMT_DAY[dt.getUTCDay()];\n    }\n\n    function b() {\n      return FMT_MONTH[dt.getUTCMonth()];\n    }\n  }\n\n  function buildWriteInt64(pos0, pos1, pos2, pos3, posH, posL) {\n    return writeInt64;\n\n    function writeInt64(buffer, offset) {\n      var ts = normalize(this);\n      if (!buffer) buffer = new Array(8);\n      checkRange(buffer, offset |= 0);\n      var second = Math.floor(ts.time / 1000);\n      var day = ts.year * (DAY_SLOT * SEC_DAY / YEAR_SLOT);\n      var high = trunc(day / BIT32) + trunc(second / BIT32);\n      var low = day % BIT32 + second % BIT32; // slot offset\n\n      var slot = Math.floor(low / BIT32);\n\n      if (slot) {\n        high += slot;\n        low -= slot * BIT32;\n      }\n\n      writeUint32(buffer, offset + posH, high);\n      writeUint32(buffer, offset + posL, low);\n      return buffer;\n    }\n\n    function writeUint32(buffer, offset, value) {\n      buffer[offset + pos0] = value >> 24 & 255;\n      buffer[offset + pos1] = value >> 16 & 255;\n      buffer[offset + pos2] = value >> 8 & 255;\n      buffer[offset + pos3] = value & 255;\n    }\n  }\n\n  function buildFromInt64(pos0, pos1, pos2, pos3, posH, posL) {\n    return fromInt64;\n\n    function fromInt64(buffer, offset) {\n      checkRange(buffer, offset |= 0);\n      var high = readUint32(buffer, offset + posH);\n      var low = readUint32(buffer, offset + posL);\n      return fromTime(low, high);\n    }\n\n    function readUint32(buffer, offset) {\n      return buffer[offset + pos0] * BIT24 + (buffer[offset + pos1] << 16 | buffer[offset + pos2] << 8 | buffer[offset + pos3]);\n    }\n  }\n\n  function checkRange(buffer, offset) {\n    var last = buffer && buffer.length;\n    if (last == null) throw new TypeError(\"Invalid Buffer\");\n    if (last < offset + 8) throw new RangeError(\"Out of range\");\n  }\n\n  function Math_trunc(x) {\n    var n = x - x % 1;\n    return n === 0 && (x < 0 || x === 0 && 1 / x !== 1 / 0) ? -0 : n;\n  }\n\n  function padS(v) {\n    return (v > 9 ? \"\" : \" \") + (v | 0);\n  }\n\n  function pad2(v) {\n    return (v > 9 ? \"\" : \"0\") + (v | 0);\n  }\n\n  function pad(v, len) {\n    return (ZERO9 + (v | 0)).substr(-len);\n  }\n}();","map":null,"metadata":{},"sourceType":"script"}