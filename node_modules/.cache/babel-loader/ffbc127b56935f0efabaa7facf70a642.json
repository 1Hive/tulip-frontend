{"ast":null,"code":"var _jsxFileName = \"/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/views/Ifos/components/IfoCard/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport BigNumber from 'bignumber.js';\nimport { Card, CardBody, CardRibbon } from '@pancakeswap-libs/uikit';\nimport { BSC_BLOCK_TIME } from 'config';\nimport makeBatchRequest from 'utils/makeBatchRequest';\nimport useI18n from 'hooks/useI18n';\nimport useBlock from 'hooks/useBlock';\nimport { useIfoContract } from 'hooks/useContract';\nimport UnlockButton from 'components/UnlockButton';\nimport IfoCardHeader from './IfoCardHeader';\nimport IfoCardProgress from './IfoCardProgress';\nimport IfoCardDescription from './IfoCardDescription';\nimport IfoCardDetails from './IfoCardDetails';\nimport IfoCardTime from './IfoCardTime';\nimport IfoCardContribute from './IfoCardContribute';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledIfoCard = styled(Card)`\n  background-image: ${({\n  ifoId\n}) => `url('/images/ifos/${ifoId}-bg.svg')`};\n  background-repeat: no-repeat;\n  background-size: contain;\n  padding-top: 112px;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 437px;\n  width: 100%;\n`;\n_c = StyledIfoCard;\n\nconst getStatus = (currentBlock, startBlock, endBlock) => {\n  if (currentBlock < startBlock) {\n    return 'coming_soon';\n  }\n\n  if (currentBlock >= startBlock && currentBlock <= endBlock) {\n    return 'live';\n  }\n\n  if (currentBlock > endBlock) {\n    return 'finished';\n  }\n\n  return null;\n};\n\nconst getRibbonComponent = (status, TranslateString) => {\n  if (status === 'coming_soon') {\n    return /*#__PURE__*/_jsxDEV(CardRibbon, {\n      variantColor: \"textDisabled\",\n      text: TranslateString(999, 'Coming Soon')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (status === 'live') {\n    return /*#__PURE__*/_jsxDEV(CardRibbon, {\n      variantColor: \"primary\",\n      text: TranslateString(999, 'LIVE NOW!')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this);\n  }\n\n  return null;\n};\n\nconst IfoCard = ({\n  ifo\n}) => {\n  _s();\n\n  const {\n    id,\n    address,\n    name,\n    subTitle,\n    description,\n    launchDate,\n    launchTime,\n    saleAmount,\n    raiseAmount,\n    cakeToBurn,\n    projectSiteUrl,\n    currency,\n    currencyAddress,\n    tokenDecimals,\n    releaseBlockNumber\n  } = ifo;\n  const [state, setState] = useState({\n    isLoading: true,\n    status: null,\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 0,\n    secondsUntilEnd: 0,\n    raisingAmount: new BigNumber(0),\n    totalAmount: new BigNumber(0),\n    startBlockNum: 0,\n    endBlockNum: 0\n  });\n  const {\n    account\n  } = useWallet();\n  const contract = useIfoContract(address);\n  const currentBlock = useBlock();\n  const TranslateString = useI18n();\n  const Ribbon = getRibbonComponent(state.status, TranslateString);\n  useEffect(() => {\n    const fetchProgress = async () => {\n      const [startBlock, endBlock, raisingAmount, totalAmount] = await makeBatchRequest([contract.methods.startBlock().call, contract.methods.endBlock().call, contract.methods.raisingAmount().call, contract.methods.totalAmount().call]);\n      const startBlockNum = parseInt(startBlock, 10);\n      const endBlockNum = parseInt(endBlock, 10);\n      const status = getStatus(currentBlock, startBlockNum, endBlockNum);\n      const totalBlocks = endBlockNum - startBlockNum;\n      const blocksRemaining = endBlockNum - currentBlock; // Calculate the total progress until finished or until start\n\n      const progress = currentBlock > startBlockNum ? (currentBlock - startBlockNum) / totalBlocks * 100 : (currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber) * 100;\n      setState({\n        isLoading: false,\n        secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n        secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n        raisingAmount: new BigNumber(raisingAmount),\n        totalAmount: new BigNumber(totalAmount),\n        status,\n        progress,\n        blocksRemaining,\n        startBlockNum,\n        endBlockNum\n      });\n    };\n\n    fetchProgress();\n  }, [currentBlock, contract, releaseBlockNumber, setState]);\n  const isActive = state.status === 'live';\n  const isFinished = state.status === 'finished';\n  return /*#__PURE__*/_jsxDEV(StyledIfoCard, {\n    ifoId: id,\n    ribbon: Ribbon,\n    isActive: isActive,\n    children: /*#__PURE__*/_jsxDEV(CardBody, {\n      children: [/*#__PURE__*/_jsxDEV(IfoCardHeader, {\n        ifoId: id,\n        name: name,\n        subTitle: subTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IfoCardProgress, {\n        progress: state.progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IfoCardTime, {\n        isLoading: state.isLoading,\n        status: state.status,\n        secondsUntilStart: state.secondsUntilStart,\n        secondsUntilEnd: state.secondsUntilEnd,\n        block: isActive || isFinished ? state.endBlockNum : state.startBlockNum\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), !account && /*#__PURE__*/_jsxDEV(UnlockButton, {\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 22\n      }, this), (isActive || isFinished) && /*#__PURE__*/_jsxDEV(IfoCardContribute, {\n        address: address,\n        currency: currency,\n        currencyAddress: currencyAddress,\n        contract: contract,\n        status: state.status,\n        raisingAmount: state.raisingAmount,\n        tokenDecimals: tokenDecimals\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(IfoCardDescription, {\n        description: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IfoCardDetails, {\n        launchDate: launchDate,\n        launchTime: launchTime,\n        saleAmount: saleAmount,\n        raiseAmount: raiseAmount,\n        cakeToBurn: cakeToBurn,\n        projectSiteUrl: projectSiteUrl,\n        raisingAmount: state.raisingAmount,\n        totalAmount: state.totalAmount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n\n_s(IfoCard, \"MsT9T25w5Rs0d4fh+KuXmv+F7vE=\", false, function () {\n  return [useWallet, useIfoContract, useBlock, useI18n];\n});\n\n_c2 = IfoCard;\nexport default IfoCard;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledIfoCard\");\n$RefreshReg$(_c2, \"IfoCard\");","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/views/Ifos/components/IfoCard/index.tsx"],"names":["React","useEffect","useState","styled","useWallet","BigNumber","Card","CardBody","CardRibbon","BSC_BLOCK_TIME","makeBatchRequest","useI18n","useBlock","useIfoContract","UnlockButton","IfoCardHeader","IfoCardProgress","IfoCardDescription","IfoCardDetails","IfoCardTime","IfoCardContribute","StyledIfoCard","ifoId","getStatus","currentBlock","startBlock","endBlock","getRibbonComponent","status","TranslateString","IfoCard","ifo","id","address","name","subTitle","description","launchDate","launchTime","saleAmount","raiseAmount","cakeToBurn","projectSiteUrl","currency","currencyAddress","tokenDecimals","releaseBlockNumber","state","setState","isLoading","blocksRemaining","secondsUntilStart","progress","secondsUntilEnd","raisingAmount","totalAmount","startBlockNum","endBlockNum","account","contract","Ribbon","fetchProgress","methods","call","parseInt","totalBlocks","isActive","isFinished"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,UAAzB,QAA2C,yBAA3C;AACA,SAASC,cAAT,QAA+B,QAA/B;AAEA,OAAOC,gBAAP,MAA6B,wBAA7B;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;;AAMA,MAAMC,aAAa,GAAGlB,MAAM,CAACG,IAAD,CAA0B;AACtD,sBAAsB,CAAC;AAAEgB,EAAAA;AAAF,CAAD,KAAgB,qBAAoBA,KAAM,WAAW;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;KAAMD,a;;AAWN,MAAME,SAAS,GAAG,CAACC,YAAD,EAAuBC,UAAvB,EAA2CC,QAA3C,KAAkF;AAClG,MAAIF,YAAY,GAAGC,UAAnB,EAA+B;AAC7B,WAAO,aAAP;AACD;;AAED,MAAID,YAAY,IAAIC,UAAhB,IAA8BD,YAAY,IAAIE,QAAlD,EAA4D;AAC1D,WAAO,MAAP;AACD;;AAED,MAAIF,YAAY,GAAGE,QAAnB,EAA6B;AAC3B,WAAO,UAAP;AACD;;AAED,SAAO,IAAP;AACD,CAdD;;AAgBA,MAAMC,kBAAkB,GAAG,CAACC,MAAD,EAAoBC,eAApB,KAA0F;AACnH,MAAID,MAAM,KAAK,aAAf,EAA8B;AAC5B,wBAAO,QAAC,UAAD;AAAY,MAAA,YAAY,EAAC,cAAzB;AAAwC,MAAA,IAAI,EAAEC,eAAe,CAAC,GAAD,EAAM,aAAN;AAA7D;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,MAAID,MAAM,KAAK,MAAf,EAAuB;AACrB,wBAAO,QAAC,UAAD;AAAY,MAAA,YAAY,EAAC,SAAzB;AAAmC,MAAA,IAAI,EAAEC,eAAe,CAAC,GAAD,EAAM,WAAN;AAAxD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,SAAO,IAAP;AACD,CAVD;;AAYA,MAAMC,OAA+B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAa;AAAA;;AACnD,QAAM;AACJC,IAAAA,EADI;AAEJC,IAAAA,OAFI;AAGJC,IAAAA,IAHI;AAIJC,IAAAA,QAJI;AAKJC,IAAAA,WALI;AAMJC,IAAAA,UANI;AAOJC,IAAAA,UAPI;AAQJC,IAAAA,UARI;AASJC,IAAAA,WATI;AAUJC,IAAAA,UAVI;AAWJC,IAAAA,cAXI;AAYJC,IAAAA,QAZI;AAaJC,IAAAA,eAbI;AAcJC,IAAAA,aAdI;AAeJC,IAAAA;AAfI,MAgBFf,GAhBJ;AAiBA,QAAM,CAACgB,KAAD,EAAQC,QAAR,IAAoB9C,QAAQ,CAAC;AACjC+C,IAAAA,SAAS,EAAE,IADsB;AAEjCrB,IAAAA,MAAM,EAAE,IAFyB;AAGjCsB,IAAAA,eAAe,EAAE,CAHgB;AAIjCC,IAAAA,iBAAiB,EAAE,CAJc;AAKjCC,IAAAA,QAAQ,EAAE,CALuB;AAMjCC,IAAAA,eAAe,EAAE,CANgB;AAOjCC,IAAAA,aAAa,EAAE,IAAIjD,SAAJ,CAAc,CAAd,CAPkB;AAQjCkD,IAAAA,WAAW,EAAE,IAAIlD,SAAJ,CAAc,CAAd,CARoB;AASjCmD,IAAAA,aAAa,EAAE,CATkB;AAUjCC,IAAAA,WAAW,EAAE;AAVoB,GAAD,CAAlC;AAYA,QAAM;AAAEC,IAAAA;AAAF,MAActD,SAAS,EAA7B;AACA,QAAMuD,QAAQ,GAAG9C,cAAc,CAACoB,OAAD,CAA/B;AAEA,QAAMT,YAAY,GAAGZ,QAAQ,EAA7B;AACA,QAAMiB,eAAe,GAAGlB,OAAO,EAA/B;AAEA,QAAMiD,MAAM,GAAGjC,kBAAkB,CAACoB,KAAK,CAACnB,MAAP,EAAeC,eAAf,CAAjC;AAEA5B,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM4D,aAAa,GAAG,YAAY;AAChC,YAAM,CAACpC,UAAD,EAAaC,QAAb,EAAuB4B,aAAvB,EAAsCC,WAAtC,IAAqD,MAAM7C,gBAAgB,CAAC,CAChFiD,QAAQ,CAACG,OAAT,CAAiBrC,UAAjB,GAA8BsC,IADkD,EAEhFJ,QAAQ,CAACG,OAAT,CAAiBpC,QAAjB,GAA4BqC,IAFoD,EAGhFJ,QAAQ,CAACG,OAAT,CAAiBR,aAAjB,GAAiCS,IAH+C,EAIhFJ,QAAQ,CAACG,OAAT,CAAiBP,WAAjB,GAA+BQ,IAJiD,CAAD,CAAjF;AAOA,YAAMP,aAAa,GAAGQ,QAAQ,CAACvC,UAAD,EAAuB,EAAvB,CAA9B;AACA,YAAMgC,WAAW,GAAGO,QAAQ,CAACtC,QAAD,EAAqB,EAArB,CAA5B;AAEA,YAAME,MAAM,GAAGL,SAAS,CAACC,YAAD,EAAegC,aAAf,EAA8BC,WAA9B,CAAxB;AACA,YAAMQ,WAAW,GAAGR,WAAW,GAAGD,aAAlC;AACA,YAAMN,eAAe,GAAGO,WAAW,GAAGjC,YAAtC,CAbgC,CAehC;;AACA,YAAM4B,QAAQ,GACZ5B,YAAY,GAAGgC,aAAf,GACK,CAAChC,YAAY,GAAGgC,aAAhB,IAAiCS,WAAlC,GAAiD,GADrD,GAEK,CAACzC,YAAY,GAAGsB,kBAAhB,KAAuCU,aAAa,GAAGV,kBAAvD,CAAD,GAA+E,GAHrF;AAKAE,MAAAA,QAAQ,CAAC;AACPC,QAAAA,SAAS,EAAE,KADJ;AAEPI,QAAAA,eAAe,EAAEH,eAAe,GAAGzC,cAF5B;AAGP0C,QAAAA,iBAAiB,EAAE,CAACK,aAAa,GAAGhC,YAAjB,IAAiCf,cAH7C;AAIP6C,QAAAA,aAAa,EAAE,IAAIjD,SAAJ,CAAciD,aAAd,CAJR;AAKPC,QAAAA,WAAW,EAAE,IAAIlD,SAAJ,CAAckD,WAAd,CALN;AAMP3B,QAAAA,MANO;AAOPwB,QAAAA,QAPO;AAQPF,QAAAA,eARO;AASPM,QAAAA,aATO;AAUPC,QAAAA;AAVO,OAAD,CAAR;AAYD,KAjCD;;AAmCAI,IAAAA,aAAa;AACd,GArCQ,EAqCN,CAACrC,YAAD,EAAemC,QAAf,EAAyBb,kBAAzB,EAA6CE,QAA7C,CArCM,CAAT;AAuCA,QAAMkB,QAAQ,GAAGnB,KAAK,CAACnB,MAAN,KAAiB,MAAlC;AACA,QAAMuC,UAAU,GAAGpB,KAAK,CAACnB,MAAN,KAAiB,UAApC;AAEA,sBACE,QAAC,aAAD;AAAe,IAAA,KAAK,EAAEI,EAAtB;AAA0B,IAAA,MAAM,EAAE4B,MAAlC;AAA0C,IAAA,QAAQ,EAAEM,QAApD;AAAA,2BACE,QAAC,QAAD;AAAA,8BACE,QAAC,aAAD;AAAe,QAAA,KAAK,EAAElC,EAAtB;AAA0B,QAAA,IAAI,EAAEE,IAAhC;AAAsC,QAAA,QAAQ,EAAEC;AAAhD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,eAAD;AAAiB,QAAA,QAAQ,EAAEY,KAAK,CAACK;AAAjC;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,WAAD;AACE,QAAA,SAAS,EAAEL,KAAK,CAACE,SADnB;AAEE,QAAA,MAAM,EAAEF,KAAK,CAACnB,MAFhB;AAGE,QAAA,iBAAiB,EAAEmB,KAAK,CAACI,iBAH3B;AAIE,QAAA,eAAe,EAAEJ,KAAK,CAACM,eAJzB;AAKE,QAAA,KAAK,EAAEa,QAAQ,IAAIC,UAAZ,GAAyBpB,KAAK,CAACU,WAA/B,GAA6CV,KAAK,CAACS;AAL5D;AAAA;AAAA;AAAA;AAAA,cAHF,EAUG,CAACE,OAAD,iBAAY,QAAC,YAAD;AAAc,QAAA,SAAS;AAAvB;AAAA;AAAA;AAAA;AAAA,cAVf,EAWG,CAACQ,QAAQ,IAAIC,UAAb,kBACC,QAAC,iBAAD;AACE,QAAA,OAAO,EAAElC,OADX;AAEE,QAAA,QAAQ,EAAEU,QAFZ;AAGE,QAAA,eAAe,EAAEC,eAHnB;AAIE,QAAA,QAAQ,EAAEe,QAJZ;AAKE,QAAA,MAAM,EAAEZ,KAAK,CAACnB,MALhB;AAME,QAAA,aAAa,EAAEmB,KAAK,CAACO,aANvB;AAOE,QAAA,aAAa,EAAET;AAPjB;AAAA;AAAA;AAAA;AAAA,cAZJ,eAsBE,QAAC,kBAAD;AAAoB,QAAA,WAAW,EAAET;AAAjC;AAAA;AAAA;AAAA;AAAA,cAtBF,eAuBE,QAAC,cAAD;AACE,QAAA,UAAU,EAAEC,UADd;AAEE,QAAA,UAAU,EAAEC,UAFd;AAGE,QAAA,UAAU,EAAEC,UAHd;AAIE,QAAA,WAAW,EAAEC,WAJf;AAKE,QAAA,UAAU,EAAEC,UALd;AAME,QAAA,cAAc,EAAEC,cANlB;AAOE,QAAA,aAAa,EAAEK,KAAK,CAACO,aAPvB;AAQE,QAAA,WAAW,EAAEP,KAAK,CAACQ;AARrB;AAAA;AAAA;AAAA;AAAA,cAvBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAsCD,CAtHD;;GAAMzB,O;UA8BgB1B,S,EACHS,c,EAEID,Q,EACGD,O;;;MAlCpBmB,O;AAwHN,eAAeA,OAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport { Card, CardBody, CardRibbon } from '@pancakeswap-libs/uikit'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { Ifo, IfoStatus } from 'config/constants/types'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport useI18n from 'hooks/useI18n'\nimport useBlock from 'hooks/useBlock'\nimport { useIfoContract } from 'hooks/useContract'\nimport UnlockButton from 'components/UnlockButton'\nimport IfoCardHeader from './IfoCardHeader'\nimport IfoCardProgress from './IfoCardProgress'\nimport IfoCardDescription from './IfoCardDescription'\nimport IfoCardDetails from './IfoCardDetails'\nimport IfoCardTime from './IfoCardTime'\nimport IfoCardContribute from './IfoCardContribute'\n\nexport interface IfoCardProps {\n  ifo: Ifo\n}\n\nconst StyledIfoCard = styled(Card)<{ ifoId: string }>`\n  background-image: ${({ ifoId }) => `url('/images/ifos/${ifoId}-bg.svg')`};\n  background-repeat: no-repeat;\n  background-size: contain;\n  padding-top: 112px;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 437px;\n  width: 100%;\n`\n\nconst getStatus = (currentBlock: number, startBlock: number, endBlock: number): IfoStatus | null => {\n  if (currentBlock < startBlock) {\n    return 'coming_soon'\n  }\n\n  if (currentBlock >= startBlock && currentBlock <= endBlock) {\n    return 'live'\n  }\n\n  if (currentBlock > endBlock) {\n    return 'finished'\n  }\n\n  return null\n}\n\nconst getRibbonComponent = (status: IfoStatus, TranslateString: (translationId: number, fallback: string) => any) => {\n  if (status === 'coming_soon') {\n    return <CardRibbon variantColor=\"textDisabled\" text={TranslateString(999, 'Coming Soon')} />\n  }\n\n  if (status === 'live') {\n    return <CardRibbon variantColor=\"primary\" text={TranslateString(999, 'LIVE NOW!')} />\n  }\n\n  return null\n}\n\nconst IfoCard: React.FC<IfoCardProps> = ({ ifo }) => {\n  const {\n    id,\n    address,\n    name,\n    subTitle,\n    description,\n    launchDate,\n    launchTime,\n    saleAmount,\n    raiseAmount,\n    cakeToBurn,\n    projectSiteUrl,\n    currency,\n    currencyAddress,\n    tokenDecimals,\n    releaseBlockNumber,\n  } = ifo\n  const [state, setState] = useState({\n    isLoading: true,\n    status: null,\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 0,\n    secondsUntilEnd: 0,\n    raisingAmount: new BigNumber(0),\n    totalAmount: new BigNumber(0),\n    startBlockNum: 0,\n    endBlockNum: 0,\n  })\n  const { account } = useWallet()\n  const contract = useIfoContract(address)\n\n  const currentBlock = useBlock()\n  const TranslateString = useI18n()\n\n  const Ribbon = getRibbonComponent(state.status, TranslateString)\n\n  useEffect(() => {\n    const fetchProgress = async () => {\n      const [startBlock, endBlock, raisingAmount, totalAmount] = await makeBatchRequest([\n        contract.methods.startBlock().call,\n        contract.methods.endBlock().call,\n        contract.methods.raisingAmount().call,\n        contract.methods.totalAmount().call,\n      ])\n\n      const startBlockNum = parseInt(startBlock as string, 10)\n      const endBlockNum = parseInt(endBlock as string, 10)\n\n      const status = getStatus(currentBlock, startBlockNum, endBlockNum)\n      const totalBlocks = endBlockNum - startBlockNum\n      const blocksRemaining = endBlockNum - currentBlock\n\n      // Calculate the total progress until finished or until start\n      const progress =\n        currentBlock > startBlockNum\n          ? ((currentBlock - startBlockNum) / totalBlocks) * 100\n          : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\n\n      setState({\n        isLoading: false,\n        secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n        secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n        raisingAmount: new BigNumber(raisingAmount as string),\n        totalAmount: new BigNumber(totalAmount as string),\n        status,\n        progress,\n        blocksRemaining,\n        startBlockNum,\n        endBlockNum,\n      })\n    }\n\n    fetchProgress()\n  }, [currentBlock, contract, releaseBlockNumber, setState])\n\n  const isActive = state.status === 'live'\n  const isFinished = state.status === 'finished'\n\n  return (\n    <StyledIfoCard ifoId={id} ribbon={Ribbon} isActive={isActive}>\n      <CardBody>\n        <IfoCardHeader ifoId={id} name={name} subTitle={subTitle} />\n        <IfoCardProgress progress={state.progress} />\n        <IfoCardTime\n          isLoading={state.isLoading}\n          status={state.status}\n          secondsUntilStart={state.secondsUntilStart}\n          secondsUntilEnd={state.secondsUntilEnd}\n          block={isActive || isFinished ? state.endBlockNum : state.startBlockNum}\n        />\n        {!account && <UnlockButton fullWidth />}\n        {(isActive || isFinished) && (\n          <IfoCardContribute\n            address={address}\n            currency={currency}\n            currencyAddress={currencyAddress}\n            contract={contract}\n            status={state.status}\n            raisingAmount={state.raisingAmount}\n            tokenDecimals={tokenDecimals}\n          />\n        )}\n        <IfoCardDescription description={description} />\n        <IfoCardDetails\n          launchDate={launchDate}\n          launchTime={launchTime}\n          saleAmount={saleAmount}\n          raiseAmount={raiseAmount}\n          cakeToBurn={cakeToBurn}\n          projectSiteUrl={projectSiteUrl}\n          raisingAmount={state.raisingAmount}\n          totalAmount={state.totalAmount}\n        />\n      </CardBody>\n    </StyledIfoCard>\n  )\n}\n\nexport default IfoCard\n"]},"metadata":{},"sourceType":"module"}