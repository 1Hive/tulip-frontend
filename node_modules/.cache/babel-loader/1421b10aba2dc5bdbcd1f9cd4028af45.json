{"ast":null,"code":"import { _ as _slicedToArray } from './slicedToArray-ad07b557.js';\nimport './unsupportedIterableToArray-aef68344.js';\nimport React, { useState, useCallback, useEffect, useMemo } from 'react';\nimport './_commonjsHelpers-97e6d7b1.js';\nimport { P as PropTypes } from './index-097535f1.js';\nimport { _ as _defineProperty } from './defineProperty-a0480c32.js';\nimport { _ as _toConsumableArray } from './toConsumableArray-07f01111.js';\nimport _styled from 'styled-components';\nimport './getPrototypeOf-97db713a.js';\nimport './color.js';\nimport './components.js';\nimport './contains-component.js';\nimport './css.js';\nimport './dayjs.min-e57fb69a.js';\nimport './date.js';\nimport { noop } from './miscellaneous.js';\nimport { warnOnce } from './environment.js';\nimport './font.js';\nimport './math-e6d0e93a.js';\nimport './characters.js';\nimport './format.js';\nimport './keycodes.js';\nimport './url.js';\nimport './web3.js';\nimport { GU } from './constants.js';\nimport './breakpoints.js';\nimport './springs.js';\nimport { textStyle } from './text-styles.js';\nimport './theme-dark.js';\nimport './theme-light.js';\nimport { useTheme } from './Theme.js';\nimport './extends-db4f0c26.js';\nimport './objectWithoutProperties-234758e1.js';\nimport './index-422d37c0.js';\nimport './isObject-c2f08dfa.js';\nimport './Viewport-2b81deab.js';\nimport { useLayout } from './Layout.js';\nimport Box from './Box.js';\nimport './FocusVisible.js';\nimport './ButtonBase.js';\nimport './PaginationItem.js';\nimport './IconPropTypes-9078a621.js';\nimport './IconAddUser.js';\nimport './IconAlert.js';\nimport './IconAlignCenter.js';\nimport './IconAlignJustify.js';\nimport './IconAlignLeft.js';\nimport './IconAlignRight.js';\nimport './IconAragon.js';\nimport './IconArrowDown.js';\nimport './IconArrowLeft.js';\nimport './IconArrowRight.js';\nimport './IconArrowUp.js';\nimport './IconAtSign.js';\nimport './IconBlock.js';\nimport './IconBookmark.js';\nimport './IconCalendar.js';\nimport './IconCanvas.js';\nimport './IconCaution.js';\nimport './IconCenter.js';\nimport './IconChart.js';\nimport './IconChat.js';\nimport './IconCheck.js';\nimport './IconChip.js';\nimport './IconCircleCheck.js';\nimport './IconCircleMinus.js';\nimport './IconCirclePlus.js';\nimport './IconClock.js';\nimport './IconCloudDownload.js';\nimport './IconCloudUpload.js';\nimport './IconCoin.js';\nimport './IconConfiguration.js';\nimport './IconConnect.js';\nimport './IconConnection.js';\nimport './IconConsole.js';\nimport './IconCopy.js';\nimport './IconCross.js';\nimport './IconDashedSquare.js';\nimport './IconDown.js';\nimport './IconDownload.js';\nimport './IconEdit.js';\nimport './IconEllipsis.js';\nimport './IconEnter.js';\nimport './IconEthereum.js';\nimport './IconExternal.js';\nimport './IconFile.js';\nimport './IconFilter.js';\nimport './IconFlag.js';\nimport './IconFolder.js';\nimport './IconGraph2.js';\nimport './IconGraph.js';\nimport './IconGrid.js';\nimport './IconGroup.js';\nimport './IconHash.js';\nimport './IconHeart.js';\nimport './IconHide.js';\nimport './IconHome.js';\nimport './IconImage.js';\nimport './IconInfo.js';\nimport './IconLabel.js';\nimport './IconLayers.js';\nimport './IconLeft.js';\nimport './IconLink.js';\nimport './IconLocation.js';\nimport './IconLock.js';\nimport './IconMail.js';\nimport './IconMaximize.js';\nimport './IconMenu.js';\nimport './IconMinimize.js';\nimport './IconMinus.js';\nimport './IconMove.js';\nimport './IconNoPicture.js';\nimport './IconPicture.js';\nimport './IconPlus.js';\nimport './IconPower.js';\nimport './IconPrint.js';\nimport './IconProhibited.js';\nimport './IconQuestion.js';\nimport './IconRefresh.js';\nimport './IconRemoveUser.js';\nimport './IconRight.js';\nimport './IconRotateLeft.js';\nimport './IconRotateRight.js';\nimport './IconSearch.js';\nimport './IconSettings.js';\nimport './IconShare.js';\nimport './IconSquareMinus.js';\nimport './IconSquarePlus.js';\nimport './IconSquare.js';\nimport './IconStarFilled.js';\nimport './IconStar.js';\nimport './IconSwap.js';\nimport './IconTarget.js';\nimport './IconToken.js';\nimport './IconTrash.js';\nimport './IconUnlock.js';\nimport './IconUp.js';\nimport './IconUpload.js';\nimport './IconUser.js';\nimport './IconView.js';\nimport './IconVote.js';\nimport './IconWallet.js';\nimport './IconWarning.js';\nimport './IconWorld.js';\nimport './IconWrite.js';\nimport './IconZoomIn.js';\nimport './IconZoomOut.js';\nimport './PaginationSeparator.js';\nimport Pagination from './Pagination.js';\nimport './objectWithoutPropertiesLoose-9606ad13.js';\nimport 'react-dom';\nimport './web-a351a0a1.js';\nimport './Checkbox.js';\nimport './Button.js';\nimport './ButtonIcon.js';\nimport './ToggleButton.js';\nimport './OpenedSurfaceBorder.js';\nimport { TableView } from './TableView.js';\nimport { ListView } from './ListView.js';\nimport './getDisplayName-d5fc7707.js';\nimport './index-a2f7b3fc.js';\nimport './LoadingRing.js';\nimport './Link.js';\nimport EmptyState from './EmptyState.js';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction prepareEntries(entries, from, to, selectedIndexes) {\n  return entries.slice(from, to).map(function (entry, index) {\n    var entryIndex = from + index;\n    var selected = selectedIndexes.includes(entryIndex);\n    return {\n      value: entry || null,\n      index: entryIndex,\n      selected: selected\n    };\n  });\n}\n\nfunction prepareFields(fields) {\n  return fields.map(function (fieldFromProps, index, fields) {\n    // Convert non-object fields (e.g. a simple string) into objects\n    var field = fieldFromProps && fieldFromProps.label ? fieldFromProps : {\n      label: fieldFromProps\n    }; // Auto align the last column to the end (right)\n\n    if (!field.align) {\n      field.align = index === fields.length - 1 && fields.length > 1 ? 'end' : 'start';\n    }\n\n    return field;\n  });\n}\n\nfunction entryExpansion(content) {\n  // Rows\n  if (Array.isArray(content) && content.length > 0) {\n    return {\n      content: content,\n      freeLayout: false\n    };\n  } // Free layout\n\n\n  if (content && !Array.isArray(content)) {\n    return {\n      content: [content],\n      freeLayout: true\n    };\n  } // No expansion\n\n\n  return {\n    content: [],\n    freeLayout: false\n  };\n}\n\nfunction renderEntries(entries, _ref) {\n  var fields = _ref.fields,\n      renderEntry = _ref.renderEntry,\n      renderEntryActions = _ref.renderEntryActions,\n      renderEntryExpansion = _ref.renderEntryExpansion,\n      mode = _ref.mode;\n  return entries.map(function (entry) {\n    var value = entry.value,\n        index = entry.index,\n        selected = entry.selected;\n    var entryNodes = renderEntry(value, index, {\n      selected: selected,\n      mode: mode\n    });\n\n    if (!Array.isArray(entryNodes)) {\n      entryNodes = [];\n    } // Create undefined cells too\n\n\n    while (entryNodes.length < fields.length) {\n      entryNodes.push(null);\n    }\n\n    var expansion = entryExpansion(renderEntryExpansion ? renderEntryExpansion(value, index, {\n      selected: selected,\n      mode: mode\n    }) : null);\n    var actions = renderEntryActions ? renderEntryActions(value, index, {\n      selected: selected,\n      mode: mode\n    }) : null;\n    return {\n      actions: actions,\n      entryNodes: entryNodes,\n      expansion: expansion,\n      index: index,\n      selected: selected\n    };\n  });\n}\n\nfunction useSelection(entries, selection, onSelectEntries) {\n  // Only used if `selection` is not passed via props. The selection supports\n  // both a managed and a controlled mode, to provide a better developer\n  // experience out of the box.\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectionManaged = _useState2[0],\n      setSelectionManaged = _useState2[1];\n\n  var currentSelection = selection === undefined ? selectionManaged : selection;\n  var updateSelection = useCallback(function (newSelection) {\n    // Managed state\n    if (selection === undefined) {\n      setSelectionManaged(newSelection);\n    } // Useful to notify, even in managed mode\n\n\n    onSelectEntries(_toConsumableArray(newSelection).sort().map(function (index) {\n      return entries[index];\n    }), newSelection);\n  }, [selection, onSelectEntries, entries]);\n  var allSelected = useMemo(function () {\n    // none selected\n    if (currentSelection.length === 0) {\n      return -1;\n    } // all selected\n\n\n    if (currentSelection.length === entries.length) {\n      return 1;\n    } // some selected\n\n\n    return 0;\n  }, [entries, currentSelection]);\n  var toggleEntrySelect = useCallback(function (entryIndex) {\n    updateSelection(currentSelection.includes(entryIndex) ? currentSelection.filter(function (index) {\n      return index !== entryIndex;\n    }) : [].concat(_toConsumableArray(currentSelection), [entryIndex]));\n  }, [updateSelection, currentSelection]);\n  var selectAll = useCallback(function () {\n    updateSelection(currentSelection.length === 0 ? entries.map(function (_, index) {\n      return index;\n    }) : []);\n  }, [entries, currentSelection, updateSelection]);\n  return {\n    allSelected: allSelected,\n    selectAll: selectAll,\n    toggleEntrySelect: toggleEntrySelect,\n    selectedIndexes: currentSelection\n  };\n}\n\nfunction deprecatedEmptyStatePropsCompat(_ref2) {\n  var emptyState = _ref2.emptyState,\n      statusEmpty = _ref2.statusEmpty,\n      statusLoading = _ref2.statusLoading,\n      statusEmptyFilters = _ref2.statusEmptyFilters,\n      statusEmptySearch = _ref2.statusEmptySearch;\n\n  for (var _i = 0, _arr = [['statusEmpty', statusEmpty, 'default', 'title'], ['statusEmptyFilters', statusEmptyFilters, 'empty-filters', 'subtitle'], ['statusEmptySearch', statusEmptySearch, 'empty-search', 'subtitle'], ['statusLoading', statusLoading, 'loading', 'title']]; _i < _arr.length; _i++) {\n    var _arr$_i = _slicedToArray(_arr[_i], 4),\n        propName = _arr$_i[0],\n        propValue = _arr$_i[1],\n        emptyStateName = _arr$_i[2],\n        partName = _arr$_i[3];\n\n    if (!propValue) {\n      continue;\n    }\n\n    warnOnce(\"DataView:\".concat(propName), \"DataView: the \".concat(propName, \" prop is now deprecated, please use emptyState instead.\")); // Only set the default state title if not set already\n\n    if (!emptyState[emptyStateName] || !emptyState[emptyStateName][partName]) {\n      emptyState[emptyStateName] = _objectSpread({}, emptyState[emptyStateName], _defineProperty({}, partName, propValue));\n    }\n  }\n\n  return emptyState;\n}\n\nvar _StyledDiv = _styled(\"div\").withConfig({\n  displayName: \"DataView___StyledDiv\",\n  componentId: \"sc-1g26f0o-0\"\n})([\"padding:\", \"px \", \"px;\"], function (p) {\n  return p._css;\n}, function (p) {\n  return p._css2;\n});\n\nvar _StyledH = _styled(\"h1\").withConfig({\n  displayName: \"DataView___StyledH\",\n  componentId: \"sc-1g26f0o-1\"\n})([\"margin-bottom:\", \"px;\", \";\"], function (p) {\n  return p._css3;\n}, function (p) {\n  return p._css4;\n});\n\nvar _StyledDiv2 = _styled(\"div\").withConfig({\n  displayName: \"DataView___StyledDiv2\",\n  componentId: \"sc-1g26f0o-2\"\n})([\"border-top:1px solid \", \";\"], function (p) {\n  return p._css5;\n});\n\nvar DataView = React.memo(function DataView(_ref3) {\n  var emptyState = _ref3.emptyState,\n      entries = _ref3.entries,\n      entriesPerPage = _ref3.entriesPerPage,\n      fields = _ref3.fields,\n      heading = _ref3.heading,\n      mode = _ref3.mode,\n      onPageChange = _ref3.onPageChange,\n      onSelectEntries = _ref3.onSelectEntries,\n      onStatusEmptyClear = _ref3.onStatusEmptyClear,\n      page = _ref3.page,\n      renderEntry = _ref3.renderEntry,\n      renderEntryActions = _ref3.renderEntryActions,\n      renderEntryExpansion = _ref3.renderEntryExpansion,\n      renderSelectionCount = _ref3.renderSelectionCount,\n      selection = _ref3.selection,\n      status = _ref3.status,\n      tableRowHeight = _ref3.tableRowHeight,\n      renderEntryChild = _ref3.renderEntryChild,\n      statusEmpty = _ref3.statusEmpty,\n      statusEmptyFilters = _ref3.statusEmptyFilters,\n      statusEmptySearch = _ref3.statusEmptySearch,\n      statusLoading = _ref3.statusLoading;\n\n  if (renderEntryChild && !renderEntryExpansion) {\n    warnOnce('DataView:renderEntryChild', 'DataView: the renderEntryChild prop has been renamed ' + 'renderEntryExpansion and will be removed in a future version. ' + 'Please use the new name.');\n    renderEntryExpansion = renderEntryChild;\n  }\n\n  if (renderEntryExpansion && onSelectEntries) {\n    warnOnce('DataView: renderEntryExpansion + onSelectEntries', 'A DataView cannot be made selectable with some of its entries ' + 'expandable. Please use only one of renderEntryExpansion or ' + 'onSelectEntries at a time. Ignoring renderEntryExpansion.');\n    renderEntryExpansion = undefined;\n  }\n\n  emptyState = deprecatedEmptyStatePropsCompat({\n    emptyState: emptyState,\n    statusEmpty: statusEmpty,\n    statusEmptyFilters: statusEmptyFilters,\n    statusEmptySearch: statusEmptySearch,\n    statusLoading: statusLoading\n  }); // Only used if `page` is not passed. The pagination supports both a\n  // managed and a controlled mode, to provide a better developer experience\n  // out of the box.\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      pageManaged = _useState4[0],\n      setPageManaged = _useState4[1];\n\n  var handlePageChange = useCallback(function (newPage) {\n    // Managed state\n    if (page === undefined) {\n      setPageManaged(newPage);\n    } // Useful to notify, even in managed mode\n\n\n    onPageChange(newPage);\n  }, [onPageChange, page]); // Reset managed pagination if the entries or the pagination changes.\n\n  useEffect(function () {\n    setPageManaged(0);\n  }, [entries]);\n  var selectedPage = page === undefined ? pageManaged : page;\n  var theme = useTheme();\n\n  var _useLayout = useLayout(),\n      layoutName = _useLayout.layoutName;\n\n  var listMode = mode === 'list' || mode !== 'table' && layoutName === 'small';\n\n  var _useSelection = useSelection(entries, selection, onSelectEntries),\n      allSelected = _useSelection.allSelected,\n      selectAll = _useSelection.selectAll,\n      toggleEntrySelect = _useSelection.toggleEntrySelect,\n      selectedIndexes = _useSelection.selectedIndexes;\n\n  var hasAnyActions = Boolean(renderEntryActions);\n  var hasAnyExpansion = Boolean(renderEntryExpansion);\n  var canSelect = Boolean(onSelectEntries); // If entriesPerPage is -1 (or 0): no pagination\n\n  if (entriesPerPage < 1) {\n    entriesPerPage = entries.length;\n  }\n\n  var pages = Math.ceil(entries.length / entriesPerPage);\n  var displayFrom = entriesPerPage * selectedPage;\n  var displayTo = displayFrom + entriesPerPage;\n  var displayedEntries = prepareEntries(entries, displayFrom, displayTo, selectedIndexes);\n  var preparedFields = prepareFields(fields);\n  var renderedEntries = renderEntries(displayedEntries, {\n    fields: fields,\n    renderEntry: renderEntry,\n    renderEntryActions: renderEntryActions,\n    renderEntryExpansion: renderEntryExpansion,\n    mode: listMode ? 'list' : 'table'\n  });\n  var alignChildOnField = fields.findIndex(function (field) {\n    return field && field.childStart;\n  });\n  var emptyEntries = renderedEntries.length === 0;\n  return /*#__PURE__*/React.createElement(Box, {\n    padding: 0\n  }, heading && /*#__PURE__*/React.createElement(_StyledDiv, {\n    _css: 2 * GU,\n    _css2: layoutName === 'small' ? 2 * GU : 3 * GU\n  }, typeof heading === 'string' ? /*#__PURE__*/React.createElement(_StyledH, {\n    _css3: 2 * GU,\n    _css4: textStyle('body2')\n  }, heading) : heading), !emptyEntries && (listMode ? /*#__PURE__*/React.createElement(ListView, {\n    allSelected: allSelected,\n    entries: renderedEntries,\n    fields: preparedFields,\n    hasAnyExpansion: hasAnyExpansion,\n    onSelect: toggleEntrySelect,\n    onSelectAll: selectAll,\n    renderSelectionCount: renderSelectionCount,\n    rowHeight: tableRowHeight,\n    selectable: canSelect\n  }) : /*#__PURE__*/React.createElement(TableView, {\n    alignChildOnField: Math.min(Math.max(-1, alignChildOnField), fields.length - 1),\n    allSelected: allSelected,\n    entries: renderedEntries,\n    fields: preparedFields,\n    hasAnyActions: hasAnyActions,\n    hasAnyExpansion: hasAnyExpansion,\n    onSelect: toggleEntrySelect,\n    onSelectAll: selectAll,\n    renderSelectionCount: renderSelectionCount,\n    rowHeight: tableRowHeight,\n    selectable: canSelect,\n    selectedCount: selectedIndexes.length\n  })), emptyEntries && /*#__PURE__*/React.createElement(EmptyState, {\n    status: status,\n    configurator: emptyState,\n    onStatusEmptyClear: onStatusEmptyClear\n  }), pages > 1 && /*#__PURE__*/React.createElement(_StyledDiv2, {\n    _css5: theme.border\n  }, /*#__PURE__*/React.createElement(Pagination, {\n    pages: pages,\n    selected: selectedPage,\n    onChange: handlePageChange,\n    touchMode: layoutName === 'small'\n  })));\n});\nDataView.propTypes = {\n  page: PropTypes.number,\n  entries: PropTypes.array.isRequired,\n  entriesPerPage: PropTypes.number,\n  fields: PropTypes.array.isRequired,\n  heading: PropTypes.node,\n  mode: PropTypes.oneOf(['adaptive', 'table', 'list']),\n  onPageChange: PropTypes.func,\n  onSelectEntries: PropTypes.func,\n  renderEntry: PropTypes.func.isRequired,\n  renderEntryActions: PropTypes.func,\n  renderEntryExpansion: PropTypes.func,\n  renderSelectionCount: PropTypes.func,\n  selection: PropTypes.array,\n  tableRowHeight: PropTypes.number,\n  status: PropTypes.oneOf(['default', 'empty-filters', 'empty-search', 'loading']),\n  onStatusEmptyClear: PropTypes.func,\n  emptyState: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  // deprecated\n  renderEntryChild: PropTypes.func,\n  statusEmpty: PropTypes.node,\n  statusLoading: PropTypes.node,\n  statusEmptyFilters: PropTypes.node,\n  statusEmptySearch: PropTypes.node\n};\nDataView.defaultProps = {\n  emptyState: {},\n  entriesPerPage: 10,\n  mode: 'adaptive',\n  onPageChange: noop,\n  renderSelectionCount: function renderSelectionCount(count) {\n    return \"\".concat(count, \" items selected\");\n  },\n  status: 'default',\n  tableRowHeight: 8 * GU\n};\nexport default DataView;","map":null,"metadata":{},"sourceType":"module"}