{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar isDefined = require('./is-defined');\n\nvar Identity = /*#__PURE__*/function () {\n  function Identity(id, publicKey, idSignature, pubKeyIdSignature, type, provider) {\n    _classCallCheck(this, Identity);\n\n    if (!isDefined(id)) {\n      throw new Error('Identity id is required');\n    }\n\n    if (!isDefined(publicKey)) {\n      throw new Error('Invalid public key');\n    }\n\n    if (!isDefined(idSignature)) {\n      throw new Error('Signature of the id (idSignature) is required');\n    }\n\n    if (!isDefined(pubKeyIdSignature)) {\n      throw new Error('Signature of (publicKey + idSignature) is required');\n    }\n\n    if (!isDefined(type)) {\n      throw new Error('Identity type is required');\n    }\n\n    if (!isDefined(provider)) {\n      throw new Error('Identity provider is required');\n    }\n\n    this._id = id;\n    this._publicKey = publicKey;\n    this._signatures = Object.assign({}, {\n      id: idSignature\n    }, {\n      publicKey: pubKeyIdSignature\n    });\n    this._type = type;\n    this._provider = provider;\n  }\n  /**\n  * This is only used as a fallback to the clock id when necessary\n  * @return {string} public key hex encoded\n  */\n\n\n  _createClass(Identity, [{\n    key: \"id\",\n    get: function get() {\n      return this._id;\n    }\n  }, {\n    key: \"publicKey\",\n    get: function get() {\n      return this._publicKey;\n    }\n  }, {\n    key: \"signatures\",\n    get: function get() {\n      return this._signatures;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    }\n  }, {\n    key: \"provider\",\n    get: function get() {\n      return this._provider;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        id: this.id,\n        publicKey: this.publicKey,\n        signatures: this.signatures,\n        type: this.type\n      };\n    }\n  }], [{\n    key: \"isIdentity\",\n    value: function isIdentity(identity) {\n      return identity.id !== undefined && identity.publicKey !== undefined && identity.signatures !== undefined && identity.signatures.id !== undefined && identity.signatures.publicKey !== undefined && identity.type !== undefined;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(identity) {\n      return {\n        id: identity.id,\n        publicKey: identity.publicKey,\n        signatures: identity.signatures,\n        type: identity.type\n      };\n    }\n  }]);\n\n  return Identity;\n}();\n\nmodule.exports = Identity;","map":null,"metadata":{},"sourceType":"script"}