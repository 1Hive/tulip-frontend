{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar applyDefaultOptions = require('./utils/apply-default-options');\n\nvar toSources = require('./utils/to-sources');\n\nvar cp = require('./cp');\n\nvar rm = require('./rm');\n\nvar _require = require('../../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nvar defaultOptions = {\n  parents: false,\n  recursive: false,\n  flush: true,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  shardSplitThreshold: 1000\n};\n\nmodule.exports = function (context) {\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _mfsMv = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _len,\n          args,\n          _key,\n          _yield$toSources,\n          sources,\n          options,\n          cpArgs,\n          rmArgs,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = _args[_key];\n              }\n\n              if (Array.isArray(args[0])) {\n                args = args[0].concat(args.slice(1));\n              }\n\n              _context.next = 4;\n              return toSources(context, args);\n\n            case 4:\n              _yield$toSources = _context.sent;\n              sources = _yield$toSources.sources;\n              options = applyDefaultOptions(args, defaultOptions);\n              cpArgs = sources.map(function (source) {\n                return source.path;\n              }).concat(options); // remove the last source as it'll be the destination\n\n              rmArgs = sources.slice(0, -1).map(function (source) {\n                return source.path;\n              }).concat(Object.assign(options, {\n                recursive: true\n              }));\n              _context.next = 11;\n              return cp(context).apply(null, cpArgs);\n\n            case 11:\n              _context.next = 13;\n              return rm(context).apply(null, rmArgs);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function mfsMv() {\n      return _mfsMv.apply(this, arguments);\n    }\n\n    return mfsMv;\n  }());\n};","map":null,"metadata":{},"sourceType":"script"}