{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar parallelBatch = require('it-parallel-batch');\n\nvar mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nvar defaultOptions = {\n  chunker: 'fixed',\n  strategy: 'balanced',\n  // 'flat', 'trickle'\n  rawLeaves: false,\n  onlyHash: false,\n  reduceSingleLeafToSelf: true,\n  codec: 'dag-pb',\n  hashAlg: 'sha2-256',\n  leafType: 'file',\n  // 'raw'\n  cidVersion: 0,\n  progress: function progress() {\n    return function () {};\n  },\n  shardSplitThreshold: 1000,\n  fileImportConcurrency: 50,\n  blockWriteConcurrency: 10,\n  minChunkSize: 262144,\n  maxChunkSize: 262144,\n  avgChunkSize: 262144,\n  window: 16,\n  polynomial: 17437180132763653,\n  // https://github.com/ipfs/go-ipfs-chunker/blob/d0125832512163708c0804a3cda060e21acddae4/rabin.go#L11\n  maxChildrenPerNode: 174,\n  layerRepeat: 4,\n  wrapWithDirectory: false,\n  pin: false,\n  recursive: false,\n  hidden: false,\n  preload: false,\n  chunkValidator: null,\n  importBuffer: null\n};\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source, block) {\n    var options,\n        opts,\n        dagBuilder,\n        treeBuilder,\n        _iteratorNormalCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        _value,\n        entry,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            opts = mergeOptions(defaultOptions, options);\n\n            if (options.cidVersion > 0 && options.rawLeaves === undefined) {\n              // if the cid version is 1 or above, use raw leaves as this is\n              // what go does.\n              opts.rawLeaves = true;\n            }\n\n            if (options.hashAlg !== undefined && options.rawLeaves === undefined) {\n              // if a non-default hash alg has been specified, use raw leaves as this is\n              // what go does.\n              opts.rawLeaves = true;\n            } // go-ifps trickle dag defaults to unixfs raw leaves, balanced dag defaults to file leaves\n\n\n            if (options.strategy === 'trickle') {\n              opts.leafType = 'raw';\n              opts.reduceSingleLeafToSelf = false;\n            }\n\n            if (options.format) {\n              opts.codec = options.format;\n            }\n\n            if (typeof options.dagBuilder === 'function') {\n              dagBuilder = options.dagBuilder;\n            } else {\n              dagBuilder = require('./dag-builder');\n            }\n\n            if (typeof options.treeBuilder === 'function') {\n              treeBuilder = options.treeBuilder;\n            } else {\n              treeBuilder = require('./tree-builder');\n            }\n\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 10;\n            _iterator = _asyncIterator(treeBuilder(parallelBatch(dagBuilder(source, block, opts), opts.fileImportConcurrency), block, opts));\n\n          case 12:\n            _context.next = 14;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 14:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 18;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 18:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 26;\n              break;\n            }\n\n            entry = _value;\n            _context.next = 23;\n            return {\n              cid: entry.cid,\n              path: entry.path,\n              unixfs: entry.unixfs,\n              size: entry.size\n            };\n\n          case 23:\n            _iteratorNormalCompletion = true;\n            _context.next = 12;\n            break;\n\n          case 26:\n            _context.next = 32;\n            break;\n\n          case 28:\n            _context.prev = 28;\n            _context.t0 = _context[\"catch\"](10);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 32:\n            _context.prev = 32;\n            _context.prev = 33;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 37;\n              break;\n            }\n\n            _context.next = 37;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 37:\n            _context.prev = 37;\n\n            if (!_didIteratorError) {\n              _context.next = 40;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 40:\n            return _context.finish(37);\n\n          case 41:\n            return _context.finish(32);\n\n          case 42:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[10, 28, 32, 42], [33,, 37, 41]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}