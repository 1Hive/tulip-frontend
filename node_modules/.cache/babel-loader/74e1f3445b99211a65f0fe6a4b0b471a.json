{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar AbortController = require('abort-controller');\n\nvar anySignal = require('any-signal');\n\nvar debug = require('debug');\n\nvar errCode = require('err-code');\n\nvar log = debug('libp2p:dialer:request');\nlog.error = debug('libp2p:dialer:request:error');\n\nvar FIFO = require('p-fifo');\n\nvar pAny = require('p-any');\n\nvar DialRequest = /*#__PURE__*/function () {\n  /**\n   * Manages running the `dialAction` on multiple provided `addrs` in parallel\n   * up to a maximum determined by the number of tokens returned\n   * from `dialer.getTokens`. Once a DialRequest is created, it can be\n   * started using `DialRequest.run(options)`. Once a single dial has succeeded,\n   * all other dials in the request will be cancelled.\n   * @param {object} options\n   * @param {Multiaddr[]} options.addrs\n   * @param {function(Multiaddr):Promise<Connection>} options.dialAction\n   * @param {Dialer} options.dialer\n   */\n  function DialRequest(_ref) {\n    var addrs = _ref.addrs,\n        dialAction = _ref.dialAction,\n        dialer = _ref.dialer;\n\n    _classCallCheck(this, DialRequest);\n\n    this.addrs = addrs;\n    this.dialer = dialer;\n    this.dialAction = dialAction;\n  }\n  /**\n   * @async\n   * @param {object} options\n   * @param {AbortSignal} options.signal An AbortController signal\n   * @returns {Connection}\n   */\n\n\n  _createClass(DialRequest, [{\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options) {\n        var _this = this;\n\n        var tokens, tokenHolder, dialAbortControllers, completedDials;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                tokens = this.dialer.getTokens(this.addrs.length); // If no tokens are available, throw\n\n                if (!(tokens.length < 1)) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                throw errCode(new Error('No dial tokens available'), 'ERR_NO_DIAL_TOKENS');\n\n              case 3:\n                tokenHolder = new FIFO();\n                tokens.forEach(function (token) {\n                  return tokenHolder.push(token);\n                });\n                dialAbortControllers = this.addrs.map(function () {\n                  return new AbortController();\n                });\n                completedDials = 0;\n                _context2.prev = 7;\n                _context2.next = 10;\n                return pAny(this.addrs.map( /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(addr, i) {\n                    var token, conn, signal;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return tokenHolder.shift();\n\n                          case 2:\n                            token = _context.sent;\n                            _context.prev = 3;\n                            signal = dialAbortControllers[i].signal;\n                            _context.next = 7;\n                            return _this.dialAction(addr, _objectSpread(_objectSpread({}, options), {}, {\n                              signal: anySignal([signal, options.signal])\n                            }));\n\n                          case 7:\n                            conn = _context.sent;\n                            // Remove the successful AbortController so it is not aborted\n                            dialAbortControllers.splice(i, 1);\n\n                          case 9:\n                            _context.prev = 9;\n                            completedDials++; // If we have more or equal dials remaining than tokens, recycle the token, otherwise release it\n\n                            if (_this.addrs.length - completedDials >= tokens.length) {\n                              tokenHolder.push(token);\n                            } else {\n                              _this.dialer.releaseToken(tokens.splice(tokens.indexOf(token), 1)[0]);\n                            }\n\n                            return _context.finish(9);\n\n                          case 13:\n                            return _context.abrupt(\"return\", conn);\n\n                          case 14:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, null, [[3,, 9, 13]]);\n                  }));\n\n                  return function (_x2, _x3) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }()));\n\n              case 10:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 11:\n                _context2.prev = 11;\n                dialAbortControllers.map(function (c) {\n                  return c.abort();\n                }); // success/failure happened, abort everything else\n\n                tokens.forEach(function (token) {\n                  return _this.dialer.releaseToken(token);\n                }); // release tokens back to the dialer\n\n                return _context2.finish(11);\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[7,, 11, 15]]);\n      }));\n\n      function run(_x) {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n  }]);\n\n  return DialRequest;\n}();\n\nmodule.exports.DialRequest = DialRequest;","map":null,"metadata":{},"sourceType":"script"}