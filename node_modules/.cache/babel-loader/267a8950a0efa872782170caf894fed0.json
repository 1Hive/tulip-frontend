{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar AggregateError = require('aggregate-error');\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(iterable, mapper) {\n    var _ref2,\n        _ref2$concurrency,\n        concurrency,\n        _ref2$stopOnError,\n        stopOnError,\n        _args2 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _ref2 = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {}, _ref2$concurrency = _ref2.concurrency, concurrency = _ref2$concurrency === void 0 ? Infinity : _ref2$concurrency, _ref2$stopOnError = _ref2.stopOnError, stopOnError = _ref2$stopOnError === void 0 ? true : _ref2$stopOnError;\n            return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n              if (typeof mapper !== 'function') {\n                throw new TypeError('Mapper function is required');\n              }\n\n              if (!((Number.isSafeInteger(concurrency) || concurrency === Infinity) && concurrency >= 1)) {\n                throw new TypeError(\"Expected `concurrency` to be an integer from 1 and up or `Infinity`, got `\".concat(concurrency, \"` (\").concat(typeof concurrency, \")\"));\n              }\n\n              var result = [];\n              var errors = [];\n              var iterator = iterable[Symbol.iterator]();\n              var isRejected = false;\n              var isIterableDone = false;\n              var resolvingCount = 0;\n              var currentIndex = 0;\n\n              var next = function next() {\n                if (isRejected) {\n                  return;\n                }\n\n                var nextItem = iterator.next();\n                var index = currentIndex;\n                currentIndex++;\n\n                if (nextItem.done) {\n                  isIterableDone = true;\n\n                  if (resolvingCount === 0) {\n                    if (!stopOnError && errors.length !== 0) {\n                      reject(new AggregateError(errors));\n                    } else {\n                      resolve(result);\n                    }\n                  }\n\n                  return;\n                }\n\n                resolvingCount++;\n\n                _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  var element;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.prev = 0;\n                          _context.next = 3;\n                          return nextItem.value;\n\n                        case 3:\n                          element = _context.sent;\n                          _context.next = 6;\n                          return mapper(element, index);\n\n                        case 6:\n                          result[index] = _context.sent;\n                          resolvingCount--;\n                          next();\n                          _context.next = 14;\n                          break;\n\n                        case 11:\n                          _context.prev = 11;\n                          _context.t0 = _context[\"catch\"](0);\n\n                          if (stopOnError) {\n                            isRejected = true;\n                            reject(_context.t0);\n                          } else {\n                            errors.push(_context.t0);\n                            resolvingCount--;\n                            next();\n                          }\n\n                        case 14:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, null, [[0, 11]]);\n                }))();\n              };\n\n              for (var i = 0; i < concurrency; i++) {\n                next();\n\n                if (isIterableDone) {\n                  break;\n                }\n              }\n            }));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}