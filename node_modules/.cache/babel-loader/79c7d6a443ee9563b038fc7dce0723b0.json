{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Store = require('orbit-db-store');\n\nvar DocumentIndex = require('./DocumentIndex');\n\nvar pMap = require('p-map');\n\nvar Readable = require('readable-stream');\n\nvar replaceAll = function replaceAll(str, search, replacement) {\n  return str.toString().split(search).join(replacement);\n};\n\nvar DocumentStore = /*#__PURE__*/function (_Store) {\n  _inherits(DocumentStore, _Store);\n\n  var _super = _createSuper(DocumentStore);\n\n  function DocumentStore(ipfs, id, dbname, options) {\n    var _this;\n\n    _classCallCheck(this, DocumentStore);\n\n    if (!options) options = {};\n    if (!options.indexBy) Object.assign(options, {\n      indexBy: '_id'\n    });\n    if (!options.Index) Object.assign(options, {\n      Index: DocumentIndex\n    });\n    _this = _super.call(this, ipfs, id, dbname, options);\n    _this._type = 'docstore';\n    return _this;\n  }\n\n  _createClass(DocumentStore, [{\n    key: \"get\",\n    value: function get(key) {\n      var _this2 = this;\n\n      var caseSensitive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      key = key.toString();\n      var terms = key.split(' ');\n      key = terms.length > 1 ? replaceAll(key, '.', ' ').toLowerCase() : key.toLowerCase();\n\n      var search = function search(e) {\n        if (terms.length > 1) {\n          return replaceAll(e, '.', ' ').toLowerCase().indexOf(key) !== -1;\n        }\n\n        return e.toLowerCase().indexOf(key) !== -1;\n      };\n\n      var mapper = function mapper(e) {\n        return _this2._index.get(e);\n      };\n\n      var filter = function filter(e) {\n        return caseSensitive ? e.indexOf(key) !== -1 : search(e);\n      };\n\n      return Object.keys(this._index._index).filter(filter).map(mapper);\n    }\n  }, {\n    key: \"query\",\n    value: function query(mapper) {\n      var _this3 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // Whether we return the full operation data or just the db value\n      var fullOp = options.fullOp || false;\n      return Object.keys(this._index._index).map(function (e) {\n        return _this3._index.get(e, fullOp);\n      }).filter(mapper);\n    }\n  }, {\n    key: \"batchPut\",\n    value: function batchPut(docs, onProgressCallback) {\n      var _this4 = this;\n\n      var mapper = function mapper(doc, idx) {\n        return _this4._addOperationBatch({\n          op: 'PUT',\n          key: doc[_this4.options.indexBy],\n          value: doc\n        }, true, idx === docs.length - 1, onProgressCallback);\n      };\n\n      return pMap(docs, mapper, {\n        concurrency: 1\n      }).then(function () {\n        return _this4.saveSnapshot();\n      });\n    }\n  }, {\n    key: \"put\",\n    value: function put(doc) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!doc[this.options.indexBy]) {\n        throw new Error(\"The provided document doesn't contain field '\".concat(this.options.indexBy, \"'\"));\n      }\n\n      return this._addOperation({\n        op: 'PUT',\n        key: doc[this.options.indexBy],\n        value: doc\n      }, options);\n    }\n  }, {\n    key: \"putAll\",\n    value: function putAll(docs) {\n      var _this5 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!Array.isArray(docs)) {\n        docs = [docs];\n      }\n\n      if (!docs.every(function (d) {\n        return d[_this5.options.indexBy];\n      })) {\n        throw new Error(\"The provided document doesn't contain field '\".concat(this.options.indexBy, \"'\"));\n      }\n\n      return this._addOperation({\n        op: 'PUTALL',\n        docs: docs.map(function (value) {\n          return {\n            key: value[_this5.options.indexBy],\n            value: value\n          };\n        })\n      }, options);\n    }\n  }, {\n    key: \"del\",\n    value: function del(key) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!this._index.get(key)) {\n        throw new Error(\"No entry with key '\".concat(key, \"' in the database\"));\n      }\n\n      return this._addOperation({\n        op: 'DEL',\n        key: key,\n        value: null\n      }, options);\n    }\n  }]);\n\n  return DocumentStore;\n}(Store);\n\nmodule.exports = DocumentStore;","map":null,"metadata":{},"sourceType":"script"}