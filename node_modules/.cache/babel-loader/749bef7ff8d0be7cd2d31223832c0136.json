{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar Block = require('ipld-block');\n\nvar CONSTANTS = require('./constants');\n\nvar logger = require('./utils').logger;\n\nvar cidToMultihashString = function cidToMultihashString(cid) {\n  return cid.multihash.toString('base64');\n};\n\nvar unwantEvent = function unwantEvent(cid) {\n  return \"unwant:\".concat(cidToMultihashString(cid));\n};\n\nvar blockEvent = function blockEvent(cid) {\n  return \"block:\".concat(cidToMultihashString(cid));\n};\n/**\n * Internal module used to track events about incoming blocks,\n * wants and unwants.\n *\n * @param {PeerId} peerId\n * @private\n */\n\n\nvar Notifications = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Notifications, _EventEmitter);\n\n  var _super = _createSuper(Notifications);\n\n  function Notifications(peerId) {\n    var _this;\n\n    _classCallCheck(this, Notifications);\n\n    _this = _super.call(this);\n\n    _this.setMaxListeners(CONSTANTS.maxListeners);\n\n    _this._log = logger(peerId, 'notif');\n    return _this;\n  }\n  /**\n   * Signal the system that we received `block`.\n   *\n   * @param {Block} block\n   * @return {void}\n   */\n\n\n  _createClass(Notifications, [{\n    key: \"hasBlock\",\n    value: function hasBlock(block) {\n      var event = blockEvent(block.cid);\n\n      this._log(event);\n\n      this.emit(event, block);\n    }\n    /**\n     * Signal the system that we are waiting to receive the\n     * block associated with the given `cid`.\n     * Returns a Promise that resolves to the block when it is received,\n     * or undefined when the block is unwanted.\n     *\n     * @param {CID} cid\n     * @param {Object} options\n     * @param {AbortSignal} options.abortSignal\n     * @returns {Promise<Block>}\n     */\n\n  }, {\n    key: \"wantBlock\",\n    value: function wantBlock(cid) {\n      var _this2 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!cid) {\n        throw new Error('Not a valid cid');\n      }\n\n      var blockEvt = blockEvent(cid);\n      var unwantEvt = unwantEvent(cid);\n\n      this._log(\"wantBlock:\".concat(cid));\n\n      return new Promise(function (resolve, reject) {\n        var onUnwant = function onUnwant() {\n          _this2.removeListener(blockEvt, onBlock);\n\n          reject(new Error(\"Block for \".concat(cid, \" unwanted\")));\n        };\n\n        var onBlock = function onBlock(block) {\n          _this2.removeListener(unwantEvt, onUnwant);\n\n          if (!cid.multihash.equals(block.cid.multihash)) {\n            // wrong block\n            return reject(new Error(\"Incorrect block received for \".concat(cid)));\n          } else if (cid.version !== block.cid.version || cid.codec !== block.cid.codec) {\n            // right block but wrong version or codec\n            block = new Block(block.data, cid);\n          }\n\n          resolve(block);\n        };\n\n        _this2.once(unwantEvt, onUnwant);\n\n        _this2.once(blockEvt, onBlock);\n\n        if (options && options.signal) {\n          options.signal.addEventListener('abort', function () {\n            _this2.removeListener(blockEvt, onBlock);\n\n            _this2.removeListener(unwantEvt, onUnwant);\n\n            reject(new Error(\"Want for \".concat(cid, \" aborted\")));\n          });\n        }\n      });\n    }\n    /**\n     * Signal that the block is not wanted anymore.\n     *\n     * @param {CID} cid - the CID of the block that is not wanted anymore.\n     * @returns {void}\n     */\n\n  }, {\n    key: \"unwantBlock\",\n    value: function unwantBlock(cid) {\n      var event = unwantEvent(cid);\n\n      this._log(event);\n\n      this.emit(event);\n    }\n  }]);\n\n  return Notifications;\n}(EventEmitter);\n\nmodule.exports = Notifications;","map":null,"metadata":{},"sourceType":"script"}