{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar dagPB = require('ipld-dag-pb');\n\nvar DAGLink = dagPB.DAGLink;\n\nvar CID = require('cids');\n\nvar _require = require('../../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nfunction findLinks(node) {\n  var links = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  for (var key in node) {\n    var val = node[key];\n\n    if (key === '/' && Object.keys(node).length === 1) {\n      try {\n        links.push(new DAGLink('', 0, new CID(val)));\n        continue;\n      } catch (_) {// not a CID\n      }\n    }\n\n    if (CID.isCID(val)) {\n      links.push(new DAGLink('', 0, val));\n      continue;\n    }\n\n    if (Array.isArray(val)) {\n      findLinks(val, links);\n    }\n\n    if (val && typeof val === 'object') {\n      findLinks(val, links);\n    }\n  }\n\n  return links;\n}\n\nmodule.exports = function (_ref) {\n  var dag = _ref.dag;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _links = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(multihash, options) {\n      var cid, result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = options || {};\n              cid = new CID(multihash);\n              _context.next = 4;\n              return dag.get(cid, options);\n\n            case 4:\n              result = _context.sent;\n\n              if (!(cid.codec === 'raw')) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt(\"return\", []);\n\n            case 7:\n              if (!(cid.codec === 'dag-pb')) {\n                _context.next = 9;\n                break;\n              }\n\n              return _context.abrupt(\"return\", result.value.Links);\n\n            case 9:\n              if (!(cid.codec === 'dag-cbor')) {\n                _context.next = 11;\n                break;\n              }\n\n              return _context.abrupt(\"return\", findLinks(result));\n\n            case 11:\n              throw new Error(\"Cannot resolve links from codec \".concat(cid.codec));\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function links(_x, _x2) {\n      return _links.apply(this, arguments);\n    }\n\n    return links;\n  }());\n};","map":null,"metadata":{},"sourceType":"script"}