{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar AccessController = require('./access-controller-interface');\n\nvar AccessControllerManifest = require('./access-controller-manifest');\n\nvar LegacyIPFSAccessController = require('./legacy-ipfs-access-controller');\n\nvar IPFSAccessController = require('./ipfs-access-controller');\n\nvar OrbitDBAccessController = require('./orbitdb-access-controller');\n\nvar supportedTypes = {\n  'legacy-ipfs': LegacyIPFSAccessController,\n  ipfs: IPFSAccessController,\n  orbitdb: OrbitDBAccessController\n};\n\nvar getHandlerFor = function getHandlerFor(type) {\n  if (!AccessControllers.isSupported(type)) {\n    throw new Error(\"AccessController type '\".concat(type, \"' is not supported\"));\n  }\n\n  return supportedTypes[type];\n};\n\nvar AccessControllers = /*#__PURE__*/function () {\n  function AccessControllers() {\n    _classCallCheck(this, AccessControllers);\n  }\n\n  _createClass(AccessControllers, null, [{\n    key: \"AccessController\",\n    get: function get() {\n      return AccessController;\n    }\n  }, {\n    key: \"isSupported\",\n    value: function isSupported(type) {\n      return Object.keys(supportedTypes).includes(type);\n    }\n  }, {\n    key: \"addAccessController\",\n    value: function addAccessController(options) {\n      if (!options.AccessController) {\n        throw new Error('AccessController class needs to be given as an option');\n      }\n\n      if (!options.AccessController.type || typeof options.AccessController.type !== 'string') {\n        throw new Error('Given AccessController class needs to implement: static get type() { /* return a string */}.');\n      }\n\n      supportedTypes[options.AccessController.type] = options.AccessController;\n    }\n  }, {\n    key: \"addAccessControllers\",\n    value: function addAccessControllers(options) {\n      var accessControllers = options.AccessControllers;\n\n      if (!accessControllers) {\n        throw new Error('AccessController classes need to be given as an option');\n      }\n\n      accessControllers.forEach(function (accessController) {\n        AccessControllers.addAccessController({\n          AccessController: accessController\n        });\n      });\n    }\n  }, {\n    key: \"removeAccessController\",\n    value: function removeAccessController(type) {\n      delete supportedTypes[type];\n    }\n  }, {\n    key: \"resolve\",\n    value: function () {\n      var _resolve = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(orbitdb, manifestAddress) {\n        var options,\n            _yield$AccessControll,\n            type,\n            params,\n            AccessController,\n            accessController,\n            _args = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n                _context.next = 3;\n                return AccessControllerManifest.resolve(orbitdb._ipfs, manifestAddress, options);\n\n              case 3:\n                _yield$AccessControll = _context.sent;\n                type = _yield$AccessControll.type;\n                params = _yield$AccessControll.params;\n                AccessController = getHandlerFor(type);\n                _context.next = 9;\n                return AccessController.create(orbitdb, Object.assign({}, options, params));\n\n              case 9:\n                accessController = _context.sent;\n                _context.next = 12;\n                return accessController.load(params.address);\n\n              case 12:\n                return _context.abrupt(\"return\", accessController);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function resolve(_x, _x2) {\n        return _resolve.apply(this, arguments);\n      }\n\n      return resolve;\n    }()\n  }, {\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(orbitdb, type) {\n        var options,\n            AccessController,\n            ac,\n            params,\n            hash,\n            _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n                AccessController = getHandlerFor(type);\n                _context2.next = 4;\n                return AccessController.create(orbitdb, options);\n\n              case 4:\n                ac = _context2.sent;\n                _context2.next = 7;\n                return ac.save();\n\n              case 7:\n                params = _context2.sent;\n                _context2.next = 10;\n                return AccessControllerManifest.create(orbitdb._ipfs, type, params);\n\n              case 10:\n                hash = _context2.sent;\n                return _context2.abrupt(\"return\", hash);\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function create(_x3, _x4) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }]);\n\n  return AccessControllers;\n}();\n\nmodule.exports = AccessControllers;","map":null,"metadata":{},"sourceType":"script"}