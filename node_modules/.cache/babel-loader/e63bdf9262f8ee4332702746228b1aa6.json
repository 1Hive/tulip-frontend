{"ast":null,"code":"var _jsxFileName = \"/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/views/Farms/components/FarmCard/HarvestAction.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit';\nimport useI18n from 'hooks/useI18n';\nimport { useHarvest } from 'hooks/useHarvest';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HarvestAction = ({\n  earnings,\n  pid\n}) => {\n  _s();\n\n  const TranslateString = useI18n();\n  const [pendingTx, setPendingTx] = useState(false);\n  const {\n    onReward\n  } = useHarvest(pid);\n  const rawEarningsBalance = getBalanceNumber(earnings);\n  const displayBalance = rawEarningsBalance.toLocaleString();\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    mb: \"8px\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      color: rawEarningsBalance === 0 ? 'textDisabled' : 'text',\n      children: displayBalance\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      disabled: rawEarningsBalance === 0 || pendingTx,\n      onClick: async () => {\n        setPendingTx(true);\n        await onReward();\n        setPendingTx(false);\n      },\n      children: TranslateString(562, 'Harvest')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HarvestAction, \"ibotzNKcnfoUeaBpHj0Z0IwVnzk=\", false, function () {\n  return [useI18n, useHarvest];\n});\n\n_c = HarvestAction;\nexport default HarvestAction;\n\nvar _c;\n\n$RefreshReg$(_c, \"HarvestAction\");","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/views/Farms/components/FarmCard/HarvestAction.tsx"],"names":["React","useState","Button","Flex","Heading","useI18n","useHarvest","getBalanceNumber","HarvestAction","earnings","pid","TranslateString","pendingTx","setPendingTx","onReward","rawEarningsBalance","displayBalance","toLocaleString"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,OAAvB,QAAsC,yBAAtC;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,gBAAT,QAAiC,qBAAjC;;;AAOA,MAAMC,aAA6C,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAuB;AAAA;;AAC3E,QAAMC,eAAe,GAAGN,OAAO,EAA/B;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAeR,UAAU,CAACI,GAAD,CAA/B;AAEA,QAAMK,kBAAkB,GAAGR,gBAAgB,CAACE,QAAD,CAA3C;AACA,QAAMO,cAAc,GAAGD,kBAAkB,CAACE,cAAnB,EAAvB;AAEA,sBACE,QAAC,IAAD;AAAM,IAAA,EAAE,EAAC,KAAT;AAAe,IAAA,cAAc,EAAC,eAA9B;AAA8C,IAAA,UAAU,EAAC,QAAzD;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,KAAK,EAAEF,kBAAkB,KAAK,CAAvB,GAA2B,cAA3B,GAA4C,MAA5D;AAAA,gBAAqEC;AAArE;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AACE,MAAA,QAAQ,EAAED,kBAAkB,KAAK,CAAvB,IAA4BH,SADxC;AAEE,MAAA,OAAO,EAAE,YAAY;AACnBC,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,cAAMC,QAAQ,EAAd;AACAD,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OANH;AAAA,gBAQGF,eAAe,CAAC,GAAD,EAAM,SAAN;AARlB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAvBD;;GAAMH,a;UACoBH,O,EAEHC,U;;;KAHjBE,a;AAyBN,eAAeA,aAAf","sourcesContent":["import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <Button\n        disabled={rawEarningsBalance === 0 || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          await onReward()\n          setPendingTx(false)\n        }}\n      >\n        {TranslateString(562, 'Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n"]},"metadata":{},"sourceType":"module"}