{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar CID = require('cids');\n\nvar withIs = require('class-is');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer; // Link represents an IPFS Merkle DAG Link between Nodes.\n\n\nvar DAGLink = /*#__PURE__*/function () {\n  function DAGLink(name, size, cid) {\n    _classCallCheck(this, DAGLink);\n\n    if (!cid) {\n      throw new Error('A link requires a cid to point to');\n    } // assert(size, 'A link requires a size')\n    //  note - links should include size, but this assert is disabled\n    //  for now to maintain consistency with go-ipfs pinset\n\n\n    Object.defineProperties(this, {\n      Name: {\n        value: name || '',\n        writable: false,\n        enumerable: true\n      },\n      Tsize: {\n        value: size,\n        writable: false,\n        enumerable: true\n      },\n      Hash: {\n        value: new CID(cid),\n        writable: false,\n        enumerable: true\n      },\n      _nameBuf: {\n        value: null,\n        writable: true,\n        enumerable: false\n      }\n    });\n  }\n\n  _createClass(DAGLink, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"DAGLink <\".concat(this.Hash.toBaseEncodedString(), \" - name: \\\"\").concat(this.Name, \"\\\", size: \").concat(this.Tsize, \">\");\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      if (!this._json) {\n        this._json = Object.freeze({\n          name: this.Name,\n          size: this.Tsize,\n          cid: this.Hash.toBaseEncodedString()\n        });\n      }\n\n      return Object.assign({}, this._json);\n    } // Memoize the Buffer representation of name\n    // We need this to sort the links, otherwise\n    // we will reallocate new buffers every time\n\n  }, {\n    key: \"nameAsBuffer\",\n    get: function get() {\n      if (this._nameBuf !== null) {\n        return this._nameBuf;\n      }\n\n      this._nameBuf = Buffer.from(this.Name);\n      return this._nameBuf;\n    }\n  }]);\n\n  return DAGLink;\n}();\n\nexports = module.exports = withIs(DAGLink, {\n  className: 'DAGLink',\n  symbolName: '@ipld/js-ipld-dag-pb/daglink'\n});","map":null,"metadata":{},"sourceType":"script"}