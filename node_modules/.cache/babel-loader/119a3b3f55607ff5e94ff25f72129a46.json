{"ast":null,"code":"/* eslint max-nested-callbacks: [\"error\", 8] */\n'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('../../utils'),\n    resolvePath = _require.resolvePath,\n    withTimeoutOption = _require.withTimeoutOption;\n\nmodule.exports = function (_ref) {\n  var pinManager = _ref.pinManager,\n      gcLock = _ref.gcLock,\n      dag = _ref.dag;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(paths, options) {\n      var recursive, cids, pinAdd, lock, release;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              options = options || {};\n              recursive = options.recursive !== false;\n              _context2.next = 4;\n              return resolvePath(dag, paths, {\n                signal: options.signal\n              });\n\n            case 4:\n              cids = _context2.sent;\n\n              pinAdd = /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  var results, _iterator, _step, cid, key, pinset;\n\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          results = []; // verify that each hash can be pinned\n\n                          _iterator = _createForOfIteratorHelper(cids);\n                          _context.prev = 2;\n\n                          _iterator.s();\n\n                        case 4:\n                          if ((_step = _iterator.n()).done) {\n                            _context.next = 24;\n                            break;\n                          }\n\n                          cid = _step.value;\n                          key = cid.toBaseEncodedString();\n\n                          if (!recursive) {\n                            _context.next = 16;\n                            break;\n                          }\n\n                          if (!pinManager.recursivePins.has(key)) {\n                            _context.next = 11;\n                            break;\n                          }\n\n                          // it's already pinned recursively\n                          results.push(cid);\n                          return _context.abrupt(\"continue\", 22);\n\n                        case 11:\n                          _context.next = 13;\n                          return pinManager.fetchCompleteDag(key, {\n                            preload: options.preload,\n                            signal: options.signal\n                          });\n\n                        case 13:\n                          // found all objects, we can add the pin\n                          results.push(cid);\n                          _context.next = 22;\n                          break;\n\n                        case 16:\n                          if (!pinManager.recursivePins.has(key)) {\n                            _context.next = 18;\n                            break;\n                          }\n\n                          throw new Error(\"\".concat(key, \" already pinned recursively\"));\n\n                        case 18:\n                          if (pinManager.directPins.has(key)) {\n                            _context.next = 21;\n                            break;\n                          }\n\n                          _context.next = 21;\n                          return dag.get(cid, {\n                            preload: options.preload\n                          });\n\n                        case 21:\n                          results.push(cid);\n\n                        case 22:\n                          _context.next = 4;\n                          break;\n\n                        case 24:\n                          _context.next = 29;\n                          break;\n\n                        case 26:\n                          _context.prev = 26;\n                          _context.t0 = _context[\"catch\"](2);\n\n                          _iterator.e(_context.t0);\n\n                        case 29:\n                          _context.prev = 29;\n\n                          _iterator.f();\n\n                          return _context.finish(29);\n\n                        case 32:\n                          // update the pin sets in memory\n                          pinset = recursive ? pinManager.recursivePins : pinManager.directPins;\n                          results.forEach(function (cid) {\n                            return pinset.add(cid.toString());\n                          }); // persist updated pin sets to datastore\n\n                          _context.next = 36;\n                          return pinManager.flushPins();\n\n                        case 36:\n                          return _context.abrupt(\"return\", results.map(function (cid) {\n                            return {\n                              cid: cid\n                            };\n                          }));\n\n                        case 37:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, null, [[2, 26, 29, 32]]);\n                }));\n\n                return function pinAdd() {\n                  return _ref2.apply(this, arguments);\n                };\n              }(); // When adding a file, we take a lock that gets released after pinning\n              // is complete, so don't take a second lock here\n\n\n              lock = Boolean(options.lock);\n\n              if (lock) {\n                _context2.next = 9;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", pinAdd());\n\n            case 9:\n              _context2.next = 11;\n              return gcLock.readLock();\n\n            case 11:\n              release = _context2.sent;\n              _context2.prev = 12;\n              _context2.next = 15;\n              return pinAdd();\n\n            case 15:\n              _context2.prev = 15;\n              release();\n              return _context2.finish(15);\n\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[12,, 15, 18]]);\n    }));\n\n    function add(_x, _x2) {\n      return _add.apply(this, arguments);\n    }\n\n    return add;\n  }());\n};","map":null,"metadata":{},"sourceType":"script"}