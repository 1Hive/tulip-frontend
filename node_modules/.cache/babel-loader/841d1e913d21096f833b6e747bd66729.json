{"ast":null,"code":"'use strict';\n\nvar protons = require('protons');\n\nvar proto = protons(require('./dag.proto.js'));\n\nvar DAGLink = require('./dag-link/dagLink');\n\nexports = module.exports;\n\nvar toProtoBuf = function toProtoBuf(node) {\n  var pbn = {};\n\n  if (node.Data && node.Data.length > 0) {\n    pbn.Data = node.Data;\n  } else {\n    // NOTE: this has to be null in order to match go-ipfs serialization\n    // `null !== new Buffer(0)`\n    pbn.Data = null;\n  }\n\n  if (node.Links && node.Links.length > 0) {\n    pbn.Links = node.Links.map(function (link) {\n      return {\n        Hash: link.Hash.buffer,\n        Name: link.Name,\n        Tsize: link.Tsize\n      };\n    });\n  } else {\n    pbn.Links = null;\n  }\n\n  return pbn;\n};\n/**\n * Serialize internal representation into a binary PB block.\n *\n * @param {Object} node - Internal representation of a PB block\n * @returns {Buffer} - The encoded binary representation\n */\n\n\nvar serializeDAGNode = function serializeDAGNode(node) {\n  var data = node.Data;\n  var links = node.Links || [];\n  var serialized = proto.PBNode.encode(toProtoBuf({\n    Data: data,\n    Links: links\n  }));\n  return serialized;\n}; // Serialize an object where the `Links` might not be a `DAGLink` instance yet\n\n\nvar serializeDAGNodeLike = function serializeDAGNodeLike(data) {\n  var links = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var node = {\n    Data: data\n  };\n  node.Links = links.map(function (link) {\n    return DAGLink.isDAGLink(link) ? link : DAGLink.util.createDagLinkFromB58EncodedHash(link);\n  });\n  return serializeDAGNode(node);\n};\n\nexports.serializeDAGNode = serializeDAGNode;\nexports.serializeDAGNodeLike = serializeDAGNodeLike;","map":null,"metadata":{},"sourceType":"script"}