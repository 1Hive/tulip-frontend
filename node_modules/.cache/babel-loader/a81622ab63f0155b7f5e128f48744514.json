{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events');\n\nconst multiaddr = require('multiaddr');\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:circuit:listener');\nlog.err = debug('libp2p:circuit:error:listener');\n/**\n * @param {*} circuit\n * @returns {Listener} a transport listener\n */\n\nmodule.exports = circuit => {\n  const listener = new EventEmitter();\n  const listeningAddrs = new Map();\n  /**\n   * Add swarm handler and listen for incoming connections\n   *\n   * @param {Multiaddr} addr\n   * @return {void}\n   */\n\n  listener.listen = async addr => {\n    const addrString = String(addr).split('/p2p-circuit').find(a => a !== '');\n    const relayConn = await circuit._dialer.connectToPeer(multiaddr(addrString));\n    const relayedAddr = relayConn.remoteAddr.encapsulate('/p2p-circuit');\n    listeningAddrs.set(relayConn.remotePeer.toB58String(), relayedAddr);\n    listener.emit('listening');\n  };\n  /**\n   * TODO: Remove the peers from our topology\n   *\n   * @return {void}\n   */\n\n\n  listener.close = () => {};\n  /**\n   * Get fixed up multiaddrs\n   *\n   * NOTE: This method will grab the peers multiaddrs and expand them such that:\n   *\n   * a) If it's an existing /p2p-circuit address for a specific relay i.e.\n   *    `/ip4/0.0.0.0/tcp/0/ipfs/QmRelay/p2p-circuit` this method will expand the\n   *    address to `/ip4/0.0.0.0/tcp/0/ipfs/QmRelay/p2p-circuit/ipfs/QmPeer` where\n   *    `QmPeer` is this peers id\n   * b) If it's not a /p2p-circuit address, it will encapsulate the address as a /p2p-circuit\n   *    addr, such when dialing over a relay with this address, it will create the circuit using\n   *    the encapsulated transport address. This is useful when for example, a peer should only\n   *    be dialed over TCP rather than any other transport\n   *\n   * @return {Multiaddr[]}\n   */\n\n\n  listener.getAddrs = () => {\n    const addrs = [];\n\n    for (const addr of listeningAddrs.values()) {\n      addrs.push(addr);\n    }\n\n    return addrs;\n  };\n\n  return listener;\n};","map":null,"metadata":{},"sourceType":"script"}