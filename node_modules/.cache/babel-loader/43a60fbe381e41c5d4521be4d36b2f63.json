{"ast":null,"code":"'use strict';\n\nconst io = require('orbit-db-io');\n\nconst Buffer = require('safe-buffer/').Buffer;\n\nconst AccessController = require('./access-controller-interface');\n\nconst type = 'legacy-ipfs';\n\nclass LegacyIPFSAccessController extends AccessController {\n  constructor(ipfs, options) {\n    super();\n    this._ipfs = ipfs;\n    this._write = Array.from(options.write || []);\n  } // Returns the type of the access controller\n\n\n  static get type() {\n    return type;\n  } // Return a Set of keys that have `access` capability\n\n\n  get write() {\n    return this._write;\n  }\n\n  async canAppend(entry, identityProvider) {\n    // Allow if access list contain the writer's publicKey or is '*'\n    const publicKey = entry.key;\n\n    if (this.write.includes(publicKey) || this.write.includes('*')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  async load(address) {\n    // Transform '/ipfs/QmPFtHi3cmfZerxtH9ySLdzpg1yFhocYDZgEZywdUXHxFU'\n    // to 'QmPFtHi3cmfZerxtH9ySLdzpg1yFhocYDZgEZywdUXHxFU'\n    if (address.indexOf('/ipfs') === 0) {\n      address = address.split('/')[2];\n    }\n\n    try {\n      const access = await io.read(this._ipfs, address);\n      this._write = access.write;\n    } catch (e) {\n      console.log('LegacyIPFSAccessController.load ERROR:', e);\n    }\n  }\n\n  async save(options) {\n    let cid;\n    const access = {\n      admin: [],\n      write: this.write,\n      read: []\n    };\n\n    try {\n      cid = await io.write(this._ipfs, 'raw', Buffer.from(JSON.stringify(access, null, 2)), {\n        format: 'dag-pb'\n      });\n    } catch (e) {\n      console.log('LegacyIPFSAccessController.save ERROR:', e);\n    } // return the manifest data\n\n\n    return {\n      address: cid,\n      skipManifest: true\n    };\n  }\n\n  static async create(orbitdb, options = {}) {\n    options = { ...options,\n      ...{\n        write: options.write || [orbitdb.identity.publicKey]\n      }\n    };\n    return new LegacyIPFSAccessController(orbitdb._ipfs, options);\n  }\n\n}\n\nmodule.exports = LegacyIPFSAccessController;","map":null,"metadata":{},"sourceType":"script"}