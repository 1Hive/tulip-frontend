{"ast":null,"code":"var EventEmitter = require('events').EventEmitter;\n\nvar _require = require('nanoid'),\n    nanoid = _require.nanoid;\n\nvar _require2 = require('./constants'),\n    WORKER_REQUEST_READ_LOCK = _require2.WORKER_REQUEST_READ_LOCK,\n    WORKER_RELEASE_READ_LOCK = _require2.WORKER_RELEASE_READ_LOCK,\n    MASTER_GRANT_READ_LOCK = _require2.MASTER_GRANT_READ_LOCK,\n    WORKER_REQUEST_WRITE_LOCK = _require2.WORKER_REQUEST_WRITE_LOCK,\n    WORKER_RELEASE_WRITE_LOCK = _require2.WORKER_RELEASE_WRITE_LOCK,\n    MASTER_GRANT_WRITE_LOCK = _require2.MASTER_GRANT_WRITE_LOCK;\n\nvar observer = require('observable-webworkers');\n\nvar handleWorkerLockRequest = function handleWorkerLockRequest(emitter, masterEvent, requestType, releaseType, grantType) {\n  return function (worker, event) {\n    if (!event || !event.data || event.data.type !== requestType) {\n      return;\n    }\n\n    var requestEvent = {\n      type: event.data.type,\n      name: event.data.name,\n      identifier: event.data.identifier\n    };\n    emitter.emit(masterEvent, requestEvent.name, function () {\n      // grant lock to worker\n      worker.postMessage({\n        type: grantType,\n        name: requestEvent.name,\n        identifier: requestEvent.identifier\n      }); // wait for worker to finish\n\n      return new Promise(function (resolve) {\n        var releaseEventListener = function releaseEventListener(event) {\n          if (!event || !event.data) {\n            return;\n          }\n\n          var releaseEvent = {\n            type: event.data.type,\n            name: event.data.name,\n            identifier: event.data.identifier\n          };\n\n          if (releaseEvent && releaseEvent.type === releaseType && releaseEvent.identifier === requestEvent.identifier) {\n            worker.removeEventListener('message', releaseEventListener);\n            resolve();\n          }\n        };\n\n        worker.addEventListener('message', releaseEventListener);\n      });\n    });\n  };\n};\n\nvar makeWorkerLockRequest = function makeWorkerLockRequest(name, requestType, grantType, releaseType) {\n  return function () {\n    var id = nanoid();\n    globalThis.postMessage({\n      type: requestType,\n      identifier: id,\n      name: name\n    });\n    return new Promise(function (resolve) {\n      var listener = function listener(event) {\n        if (!event || !event.data) {\n          return;\n        }\n\n        var responseEvent = {\n          type: event.data.type,\n          identifier: event.data.identifier\n        };\n\n        if (responseEvent && responseEvent.type === grantType && responseEvent.identifier === id) {\n          globalThis.removeEventListener('message', listener); // grant lock\n\n          resolve(function () {\n            // release lock\n            globalThis.postMessage({\n              type: releaseType,\n              identifier: id,\n              name: name\n            });\n          });\n        }\n      };\n\n      globalThis.addEventListener('message', listener);\n    });\n  };\n};\n\nvar defaultOptions = {\n  singleProcess: false\n};\n\nmodule.exports = function (options) {\n  options = Object.assign({}, defaultOptions, options);\n  var isMaster = !!globalThis.document || options.singleProcess;\n\n  if (isMaster) {\n    var emitter = new EventEmitter();\n    observer.addEventListener('message', handleWorkerLockRequest(emitter, 'requestReadLock', WORKER_REQUEST_READ_LOCK, WORKER_RELEASE_READ_LOCK, MASTER_GRANT_READ_LOCK));\n    observer.addEventListener('message', handleWorkerLockRequest(emitter, 'requestWriteLock', WORKER_REQUEST_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK));\n    return emitter;\n  }\n\n  return {\n    isWorker: true,\n    readLock: function readLock(name) {\n      return makeWorkerLockRequest(name, WORKER_REQUEST_READ_LOCK, MASTER_GRANT_READ_LOCK, WORKER_RELEASE_READ_LOCK);\n    },\n    writeLock: function writeLock(name) {\n      return makeWorkerLockRequest(name, WORKER_REQUEST_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}