{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar extractDataFromBlock = require('../../../utils/extract-data-from-block');\n\nvar validateOffsetAndLength = require('../../../utils/validate-offset-and-length');\n\nvar UnixFS = require('ipfs-unixfs');\n\nvar errCode = require('err-code');\n\nfunction emitBytes(_x, _x2, _x3, _x4) {\n  return _emitBytes.apply(this, arguments);\n}\n\nfunction _emitBytes() {\n  _emitBytes = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ipld, node, start, end) {\n    var streamPosition,\n        options,\n        buf,\n        file,\n        nodeHasData,\n        _buf,\n        childStart,\n        i,\n        childLink,\n        childEnd,\n        child,\n        _iteratorNormalCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        _value,\n        _buf2,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            streamPosition = _args.length > 4 && _args[4] !== undefined ? _args[4] : 0;\n            options = _args.length > 5 ? _args[5] : undefined;\n\n            if (!Buffer.isBuffer(node)) {\n              _context.next = 9;\n              break;\n            }\n\n            buf = extractDataFromBlock(node, streamPosition, start, end);\n\n            if (!buf.length) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 7;\n            return buf;\n\n          case 7:\n            streamPosition += buf.length;\n            return _context.abrupt(\"return\", streamPosition);\n\n          case 9:\n            _context.prev = 9;\n            file = UnixFS.unmarshal(node.Data);\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](9);\n            throw errCode(_context.t0, 'ERR_NOT_UNIXFS');\n\n          case 16:\n            // might be a unixfs `raw` node or have data on intermediate nodes\n            nodeHasData = Boolean(file.data && file.data.length);\n\n            if (!nodeHasData) {\n              _context.next = 23;\n              break;\n            }\n\n            _buf = extractDataFromBlock(file.data, streamPosition, start, end);\n\n            if (!_buf.length) {\n              _context.next = 22;\n              break;\n            }\n\n            _context.next = 22;\n            return _buf;\n\n          case 22:\n            streamPosition += file.data.length;\n\n          case 23:\n            childStart = streamPosition; // work out which child nodes contain the requested data\n\n            i = 0;\n\n          case 25:\n            if (!(i < node.Links.length)) {\n              _context.next = 72;\n              break;\n            }\n\n            childLink = node.Links[i];\n            childEnd = streamPosition + file.blockSizes[i];\n\n            if (!(start >= childStart && start < childEnd || // child has offset byte\n            end > childStart && end <= childEnd || // child has end byte\n            start < childStart && end > childEnd)) {\n              _context.next = 67;\n              break;\n            }\n\n            _context.next = 31;\n            return _awaitAsyncGenerator(ipld.get(childLink.Hash, options));\n\n          case 31:\n            child = _context.sent;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 34;\n            _iterator = _asyncIterator(emitBytes(ipld, child, start, end, streamPosition, options));\n\n          case 36:\n            _context.next = 38;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 38:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 42;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 42:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 51;\n              break;\n            }\n\n            _buf2 = _value;\n            streamPosition += _buf2.length;\n            _context.next = 48;\n            return _buf2;\n\n          case 48:\n            _iteratorNormalCompletion = true;\n            _context.next = 36;\n            break;\n\n          case 51:\n            _context.next = 57;\n            break;\n\n          case 53:\n            _context.prev = 53;\n            _context.t1 = _context[\"catch\"](34);\n            _didIteratorError = true;\n            _iteratorError = _context.t1;\n\n          case 57:\n            _context.prev = 57;\n            _context.prev = 58;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 62;\n              break;\n            }\n\n            _context.next = 62;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 62:\n            _context.prev = 62;\n\n            if (!_didIteratorError) {\n              _context.next = 65;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 65:\n            return _context.finish(62);\n\n          case 66:\n            return _context.finish(57);\n\n          case 67:\n            streamPosition = childEnd;\n            childStart = childEnd + 1;\n\n          case 69:\n            i++;\n            _context.next = 25;\n            break;\n\n          case 72:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[9, 13], [34, 53, 57, 67], [58,, 62, 66]]);\n  }));\n  return _emitBytes.apply(this, arguments);\n}\n\nvar fileContent = function fileContent(cid, node, unixfs, path, resolve, depth, ipld) {\n  return function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var fileSize = unixfs.fileSize();\n\n    var _validateOffsetAndLen = validateOffsetAndLength(fileSize, options.offset, options.length),\n        offset = _validateOffsetAndLen.offset,\n        length = _validateOffsetAndLen.length;\n\n    var start = offset;\n    var end = offset + length;\n    return emitBytes(ipld, node, start, end, 0, options);\n  };\n};\n\nmodule.exports = fileContent;","map":null,"metadata":{},"sourceType":"script"}