{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar exporter = require('ipfs-unixfs-exporter');\n\nvar errCode = require('err-code');\n\nvar _require = require('../utils'),\n    normalizeCidPath = _require.normalizeCidPath,\n    mapFile = _require.mapFile,\n    withTimeoutOption = _require.withTimeoutOption;\n\nmodule.exports = function (_ref) {\n  var ipld = _ref.ipld,\n      preload = _ref.preload;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _ls = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ipfsPath, options) {\n      var path, recursive, pathComponents, file, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, child, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, _child;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = options || {};\n              path = normalizeCidPath(ipfsPath);\n              recursive = options.recursive;\n              pathComponents = path.split('/');\n\n              if (options.preload !== false) {\n                preload(pathComponents[0]);\n              }\n\n              _context.next = 7;\n              return _awaitAsyncGenerator(exporter(ipfsPath, ipld, options));\n\n            case 7:\n              file = _context.sent;\n\n              if (file.unixfs) {\n                _context.next = 10;\n                break;\n              }\n\n              throw errCode(new Error('dag node was not a UnixFS node'), 'ERR_NOT_UNIXFS');\n\n            case 10:\n              if (!(file.unixfs.type === 'file')) {\n                _context.next = 12;\n                break;\n              }\n\n              return _context.abrupt(\"return\", mapFile(file, options));\n\n            case 12:\n              if (!file.unixfs.type.includes('dir')) {\n                _context.next = 88;\n                break;\n              }\n\n              if (!recursive) {\n                _context.next = 51;\n                break;\n              }\n\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 16;\n              _iterator = _asyncIterator(exporter.recursive(file.cid, ipld, options));\n\n            case 18:\n              _context.next = 20;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 20:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 24;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 24:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 34;\n                break;\n              }\n\n              child = _value;\n\n              if (!(file.cid.toBaseEncodedString() === child.cid.toBaseEncodedString())) {\n                _context.next = 29;\n                break;\n              }\n\n              return _context.abrupt(\"continue\", 31);\n\n            case 29:\n              _context.next = 31;\n              return mapFile(child, options);\n\n            case 31:\n              _iteratorNormalCompletion = true;\n              _context.next = 18;\n              break;\n\n            case 34:\n              _context.next = 40;\n              break;\n\n            case 36:\n              _context.prev = 36;\n              _context.t0 = _context[\"catch\"](16);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 40:\n              _context.prev = 40;\n              _context.prev = 41;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 45;\n                break;\n              }\n\n              _context.next = 45;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 45:\n              _context.prev = 45;\n\n              if (!_didIteratorError) {\n                _context.next = 48;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 48:\n              return _context.finish(45);\n\n            case 49:\n              return _context.finish(40);\n\n            case 50:\n              return _context.abrupt(\"return\");\n\n            case 51:\n              _iteratorNormalCompletion2 = true;\n              _didIteratorError2 = false;\n              _context.prev = 53;\n              _iterator2 = _asyncIterator(file.content());\n\n            case 55:\n              _context.next = 57;\n              return _awaitAsyncGenerator(_iterator2.next());\n\n            case 57:\n              _step2 = _context.sent;\n              _iteratorNormalCompletion2 = _step2.done;\n              _context.next = 61;\n              return _awaitAsyncGenerator(_step2.value);\n\n            case 61:\n              _value2 = _context.sent;\n\n              if (_iteratorNormalCompletion2) {\n                _context.next = 71;\n                break;\n              }\n\n              _child = _value2;\n              _child = mapFile(_child, options);\n              _child.depth--;\n              _context.next = 68;\n              return _child;\n\n            case 68:\n              _iteratorNormalCompletion2 = true;\n              _context.next = 55;\n              break;\n\n            case 71:\n              _context.next = 77;\n              break;\n\n            case 73:\n              _context.prev = 73;\n              _context.t1 = _context[\"catch\"](53);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context.t1;\n\n            case 77:\n              _context.prev = 77;\n              _context.prev = 78;\n\n              if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n                _context.next = 82;\n                break;\n              }\n\n              _context.next = 82;\n              return _awaitAsyncGenerator(_iterator2.return());\n\n            case 82:\n              _context.prev = 82;\n\n              if (!_didIteratorError2) {\n                _context.next = 85;\n                break;\n              }\n\n              throw _iteratorError2;\n\n            case 85:\n              return _context.finish(82);\n\n            case 86:\n              return _context.finish(77);\n\n            case 87:\n              return _context.abrupt(\"return\");\n\n            case 88:\n              throw errCode(new Error(\"Unknown UnixFS type \".concat(file.unixfs.type)), 'ERR_UNKNOWN_UNIXFS_TYPE');\n\n            case 89:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[16, 36, 40, 50], [41,, 45, 49], [53, 73, 77, 87], [78,, 82, 86]]);\n    }));\n\n    function ls(_x, _x2) {\n      return _ls.apply(this, arguments);\n    }\n\n    return ls;\n  }());\n};","map":null,"metadata":{},"sourceType":"script"}