{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar errCode = require('err-code');\n\nvar UnixFS = require('ipfs-unixfs');\n\nvar persist = require('../../utils/persist');\n\nvar _require = require('ipld-dag-pb'),\n    DAGNode = _require.DAGNode,\n    DAGLink = _require.DAGLink;\n\nvar all = require('it-all');\n\nvar parallelBatch = require('it-parallel-batch');\n\nvar mh = require('multihashing-async').multihash;\n\nvar dagBuilders = {\n  flat: require('./flat'),\n  balanced: require('./balanced'),\n  trickle: require('./trickle')\n};\n\nfunction buildFileBatch(_x, _x2, _x3, _x4) {\n  return _buildFileBatch.apply(this, arguments);\n}\n\nfunction _buildFileBatch() {\n  _buildFileBatch = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file, source, block, options) {\n    var count, previous, bufferImporter, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, entry;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            count = -1;\n\n            if (typeof options.bufferImporter === 'function') {\n              bufferImporter = options.bufferImporter;\n            } else {\n              bufferImporter = require('./buffer-importer');\n            }\n\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 4;\n            _iterator = _asyncIterator(parallelBatch(bufferImporter(file, source, block, options), options.blockWriteConcurrency));\n\n          case 6:\n            _context.next = 8;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 8:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 12;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 12:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 30;\n              break;\n            }\n\n            entry = _value;\n            count++;\n\n            if (!(count === 0)) {\n              _context.next = 21;\n              break;\n            }\n\n            previous = entry;\n            return _context.abrupt(\"continue\", 27);\n\n          case 21:\n            if (!(count === 1)) {\n              _context.next = 25;\n              break;\n            }\n\n            _context.next = 24;\n            return previous;\n\n          case 24:\n            previous = null;\n\n          case 25:\n            _context.next = 27;\n            return entry;\n\n          case 27:\n            _iteratorNormalCompletion = true;\n            _context.next = 6;\n            break;\n\n          case 30:\n            _context.next = 36;\n            break;\n\n          case 32:\n            _context.prev = 32;\n            _context.t0 = _context[\"catch\"](4);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 36:\n            _context.prev = 36;\n            _context.prev = 37;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 41;\n              break;\n            }\n\n            _context.next = 41;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 41:\n            _context.prev = 41;\n\n            if (!_didIteratorError) {\n              _context.next = 44;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 44:\n            return _context.finish(41);\n\n          case 45:\n            return _context.finish(36);\n\n          case 46:\n            if (!previous) {\n              _context.next = 50;\n              break;\n            }\n\n            previous.single = true;\n            _context.next = 50;\n            return previous;\n\n          case 50:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 32, 36, 46], [37,, 41, 45]]);\n  }));\n  return _buildFileBatch.apply(this, arguments);\n}\n\nvar reduce = function reduce(file, block, options) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(leaves) {\n      var leaf, _yield$block$get, _buffer, multihash, f, links, node, buffer, cid;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf)) {\n                _context2.next = 15;\n                break;\n              }\n\n              leaf = leaves[0];\n\n              if (!(leaf.cid.codec === 'raw' && (file.mtime !== undefined || file.mode !== undefined))) {\n                _context2.next = 14;\n                break;\n              }\n\n              _context2.next = 5;\n              return block.get(leaf.cid, options);\n\n            case 5:\n              _yield$block$get = _context2.sent;\n              _buffer = _yield$block$get.data;\n              leaf.unixfs = new UnixFS({\n                type: 'file',\n                mtime: file.mtime,\n                mode: file.mode,\n                data: _buffer\n              });\n              multihash = mh.decode(leaf.cid.multihash);\n              _buffer = new DAGNode(leaf.unixfs.marshal()).serialize();\n              _context2.next = 12;\n              return persist(_buffer, block, _objectSpread(_objectSpread({}, options), {}, {\n                codec: 'dag-pb',\n                hashAlg: multihash.name,\n                cidVersion: options.cidVersion\n              }));\n\n            case 12:\n              leaf.cid = _context2.sent;\n              leaf.size = _buffer.length;\n\n            case 14:\n              return _context2.abrupt(\"return\", {\n                cid: leaf.cid,\n                path: file.path,\n                unixfs: leaf.unixfs,\n                size: leaf.size\n              });\n\n            case 15:\n              // create a parent node and add all the leaves\n              f = new UnixFS({\n                type: 'file',\n                mtime: file.mtime,\n                mode: file.mode\n              });\n              links = leaves.filter(function (leaf) {\n                if (leaf.cid.codec === 'raw' && leaf.size) {\n                  return true;\n                }\n\n                if (!leaf.unixfs.data && leaf.unixfs.fileSize()) {\n                  return true;\n                }\n\n                return Boolean(leaf.unixfs.data.length);\n              }).map(function (leaf) {\n                if (leaf.cid.codec === 'raw') {\n                  // node is a leaf buffer\n                  f.addBlockSize(leaf.size);\n                  return new DAGLink(leaf.name, leaf.size, leaf.cid);\n                }\n\n                if (!leaf.unixfs.data) {\n                  // node is an intermediate node\n                  f.addBlockSize(leaf.unixfs.fileSize());\n                } else {\n                  // node is a unixfs 'file' leaf node\n                  f.addBlockSize(leaf.unixfs.data.length);\n                }\n\n                return new DAGLink(leaf.name, leaf.size, leaf.cid);\n              });\n              node = new DAGNode(f.marshal(), links);\n              buffer = node.serialize();\n              _context2.next = 21;\n              return persist(buffer, block, options);\n\n            case 21:\n              cid = _context2.sent;\n              return _context2.abrupt(\"return\", {\n                cid: cid,\n                path: file.path,\n                unixfs: f,\n                size: buffer.length + node.Links.reduce(function (acc, curr) {\n                  return acc + curr.Tsize;\n                }, 0)\n              });\n\n            case 23:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x5) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nvar fileBuilder = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(file, source, block, options) {\n    var dagBuilder, roots;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            dagBuilder = dagBuilders[options.strategy];\n\n            if (dagBuilder) {\n              _context3.next = 3;\n              break;\n            }\n\n            throw errCode(new Error(\"Unknown importer build strategy name: \".concat(options.strategy)), 'ERR_BAD_STRATEGY');\n\n          case 3:\n            _context3.next = 5;\n            return all(dagBuilder(buildFileBatch(file, source, block, options), reduce(file, block, options), options));\n\n          case 5:\n            roots = _context3.sent;\n\n            if (!(roots.length > 1)) {\n              _context3.next = 8;\n              break;\n            }\n\n            throw errCode(new Error('expected a maximum of 1 roots and got ' + roots.length), 'ETOOMANYROOTS');\n\n          case 8:\n            return _context3.abrupt(\"return\", roots[0]);\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function fileBuilder(_x6, _x7, _x8, _x9) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nmodule.exports = fileBuilder;","map":null,"metadata":{},"sourceType":"script"}