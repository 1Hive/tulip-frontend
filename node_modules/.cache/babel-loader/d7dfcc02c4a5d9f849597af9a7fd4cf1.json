{"ast":null,"code":"import { useEffect, useMemo, useState } from 'react';\nimport { wallet } from 'tulip-data';\nimport { useWallet } from 'use-wallet';\nconst WALLET_DATA_DEFAULT = {\n  netBalance: 0,\n  poolBalance: 0,\n  assetsList: [],\n  isFetching: false\n};\nconst ASSET_DEFAULT = {\n  symbol: '',\n  name: '',\n  balance: '',\n  price: '',\n  value: '',\n  image1: '',\n  image2: ''\n};\nexport function useWalletData() {\n  const [walletInfo, setWalletInfo] = useState([]);\n  const [poolingInfo, setPoolingInfo] = useState([]);\n  const [isFetching, setIsFetching] = useState(false);\n  const {\n    account\n  } = useWallet();\n  useEffect(() => {\n    let cancelled = false;\n\n    if (!account) {\n      return setWalletInfo([]);\n    }\n\n    const fetchWalletData = async () => {\n      try {\n        setIsFetching(true);\n        const balances = await wallet.tokenBalances({\n          user_address: account\n        });\n        const poolingData = await wallet.poolBalances({\n          user_address: account\n        }); // console.log(balances)\n\n        if (!cancelled) {\n          setWalletInfo(balances);\n          setPoolingInfo(poolingData);\n          return setIsFetching(false);\n        }\n      } catch (err) {\n        console.error(`Could not fetch wallet data `, err);\n      }\n    };\n\n    fetchWalletData();\n    return () => {\n      setIsFetching(false);\n      cancelled = true;\n    };\n  }, [account]);\n  return [walletInfo, poolingInfo, isFetching];\n}\nexport function useNetBalance() {\n  const [walletInfo, poolingInfo, isFetching] = useWalletData();\n  const [walletData, setWalletData] = useState(WALLET_DATA_DEFAULT);\n  return useMemo(() => {\n    if (!walletInfo || walletInfo.length === 0) {\n      setWalletData(info => ({ ...info,\n        isFetching\n      }));\n      return walletData;\n    }\n\n    let netBalance = 0;\n    let walletBalance = 0;\n    let assetsList = [];\n    walletInfo.map(value => {\n      if (value && parseFloat(value.valueUSD)) {\n        walletBalance = walletBalance + parseFloat(value.valueUSD);\n        assetsList.push({\n          symbol: value.symbol,\n          name: value.name,\n          balance: value.balance.toFixed(4),\n          price: value.priceUSD,\n          value: value.valueUSD,\n          image1: value.logoURI\n        });\n      }\n    });\n    poolingInfo.map(value => {\n      if (value && parseFloat(value.valueUSD)) {\n        netBalance = netBalance + parseFloat(value.valueUSD);\n        const asset = ASSET_DEFAULT;\n\n        if (value.tokens && value.tokens.length > 1) {\n          value.tokens.map((token, i) => {\n            asset.symbol = i === 0 ? token.name + ' - ' : token.name;\n\n            if (i === 0) {\n              asset.image1 = token.logoURI;\n            } else {\n              asset.image2 = token.logoURI;\n            }\n          });\n        }\n\n        asset.balance = value.balance;\n        asset.value = value.valueUSD;\n        assetsList.push(asset);\n      }\n    });\n    walletBalance = walletBalance.toFixed(2);\n    netBalance = walletBalance + netBalance.toFixed(2);\n    setWalletData(info => ({ ...info,\n      netBalance,\n      isFetching\n    }));\n    return [netBalance.toFixed(2), isFetching];\n  }, [walletInfo, poolingInfo, isFetching]);\n}","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/hooks/useWalletData.js"],"names":["useEffect","useMemo","useState","wallet","useWallet","WALLET_DATA_DEFAULT","netBalance","poolBalance","assetsList","isFetching","ASSET_DEFAULT","symbol","name","balance","price","value","image1","image2","useWalletData","walletInfo","setWalletInfo","poolingInfo","setPoolingInfo","setIsFetching","account","cancelled","fetchWalletData","balances","tokenBalances","user_address","poolingData","poolBalances","err","console","error","useNetBalance","walletData","setWalletData","length","info","walletBalance","map","parseFloat","valueUSD","push","toFixed","priceUSD","logoURI","asset","tokens","token","i"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useState } from 'react'\r\nimport { wallet } from 'tulip-data'\r\nimport { useWallet } from 'use-wallet'\r\n\r\nconst WALLET_DATA_DEFAULT = {\r\n  netBalance: 0,\r\n  poolBalance: 0,\r\n  assetsList: [],\r\n  isFetching: false,\r\n}\r\n\r\nconst ASSET_DEFAULT = {\r\n  symbol: '',\r\n  name: '',\r\n  balance: '',\r\n  price: '',\r\n  value: '',\r\n  image1: '',\r\n  image2: '',\r\n}\r\n\r\nexport function useWalletData() {\r\n  const [walletInfo, setWalletInfo] = useState([])\r\n  const [poolingInfo, setPoolingInfo] = useState([])\r\n  const [isFetching, setIsFetching] = useState(false)\r\n  const { account } = useWallet()\r\n\r\n  useEffect(() => {\r\n    let cancelled = false\r\n    if (!account) {\r\n      return setWalletInfo([])\r\n    }\r\n\r\n    const fetchWalletData = async () => {\r\n      try {\r\n        setIsFetching(true)\r\n        const balances = await wallet.tokenBalances({\r\n          user_address: account,\r\n        })\r\n\r\n        const poolingData = await wallet.poolBalances({\r\n          user_address: account,\r\n        })\r\n\r\n        // console.log(balances)\r\n        if (!cancelled) {\r\n          setWalletInfo(balances)\r\n          setPoolingInfo(poolingData)\r\n          return setIsFetching(false)\r\n        }\r\n      } catch (err) {\r\n        console.error(`Could not fetch wallet data `, err)\r\n      }\r\n    }\r\n\r\n    fetchWalletData()\r\n    return () => {\r\n      setIsFetching(false)\r\n      cancelled = true\r\n    }\r\n  }, [account])\r\n\r\n  return [walletInfo, poolingInfo, isFetching]\r\n}\r\n\r\nexport function useNetBalance() {\r\n  const [walletInfo, poolingInfo, isFetching] = useWalletData()\r\n  const [walletData, setWalletData] = useState(WALLET_DATA_DEFAULT)\r\n\r\n  return useMemo(() => {\r\n    if (!walletInfo || walletInfo.length === 0) {\r\n      setWalletData(info => ({ ...info, isFetching }))\r\n      return walletData\r\n    }\r\n\r\n    let netBalance = 0\r\n    let walletBalance = 0\r\n    let assetsList = []\r\n    walletInfo.map(value => {\r\n      if (value && parseFloat(value.valueUSD)) {\r\n        walletBalance = walletBalance + parseFloat(value.valueUSD)\r\n        assetsList.push({\r\n          symbol: value.symbol,\r\n          name: value.name,\r\n          balance: value.balance.toFixed(4),\r\n          price: value.priceUSD,\r\n          value: value.valueUSD,\r\n          image1: value.logoURI,\r\n        })\r\n      }\r\n    })\r\n\r\n    poolingInfo.map(value => {\r\n      if (value && parseFloat(value.valueUSD)) {\r\n        netBalance = netBalance + parseFloat(value.valueUSD)\r\n        const asset = ASSET_DEFAULT\r\n        if (value.tokens && value.tokens.length > 1) {\r\n          value.tokens.map((token, i) => {\r\n            asset.symbol = i === 0 ? token.name + ' - ' : token.name\r\n            if (i === 0) {\r\n              asset.image1 = token.logoURI\r\n            } else {\r\n              asset.image2 = token.logoURI\r\n            }\r\n          })\r\n        }\r\n        asset.balance = value.balance\r\n        asset.value = value.valueUSD\r\n        assetsList.push(asset)\r\n      }\r\n    })\r\n    walletBalance = walletBalance.toFixed(2)\r\n    netBalance = walletBalance + netBalance.toFixed(2)\r\n\r\n    setWalletData(info => ({ ...info, netBalance, isFetching }))\r\n\r\n    return [netBalance.toFixed(2), isFetching]\r\n  }, [walletInfo, poolingInfo, isFetching])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}