{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toStableObject = exports.hexToUint8Array = exports.fakeEthProvider = exports.fakeIpfs = exports.sha256Multihash = exports.unpad = exports.pad = void 0;\n\nvar js_sha256_1 = require(\"js-sha256\");\n\nvar multihashes_1 = __importDefault(require(\"multihashes\"));\n\nvar ipld_dag_cbor_1 = __importDefault(require(\"ipld-dag-cbor\"));\n\nvar fast_json_stable_stringify_1 = __importDefault(require(\"fast-json-stable-stringify\"));\n\nvar ENC_BLOCK_SIZE = 24;\n\nexports.pad = function (val) {\n  var blockSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ENC_BLOCK_SIZE;\n  var blockDiff = (blockSize - val.length % blockSize) % blockSize;\n  return \"\".concat(val).concat('\\0'.repeat(blockDiff));\n};\n\nexports.unpad = function (padded) {\n  return padded.replace(/\\0+$/, '');\n};\n\nexports.sha256Multihash = function (str) {\n  return multihashes_1.default.encode(Buffer.from(js_sha256_1.sha256(str)), 'sha2-256').toString('hex');\n};\n\nvar tmpData;\nexports.fakeIpfs = {\n  dag: {\n    put: function put(data, opts) {\n      tmpData = data;\n      return ipld_dag_cbor_1.default.util.cid(ipld_dag_cbor_1.default.util.serialize(data), opts);\n    },\n    get: function get() {\n      return {\n        value: tmpData\n      };\n    }\n  },\n  add: function add() {\n    return 'empty';\n  }\n};\n\nexports.fakeEthProvider = function (wallet) {\n  return {\n    send: function send(request, callback) {\n      if (request.method !== 'personal_sign') {\n        callback(new Error('only supports personal_sign'));\n      } else {\n        var message = request.params[0];\n\n        if (message.startsWith('0x')) {\n          message = Buffer.from(message.slice(2), 'hex').toString('utf8');\n        }\n\n        callback(null, {\n          result: wallet.signMessage(message)\n        });\n      }\n    }\n  };\n};\n\nfunction hexToUint8Array(str) {\n  return new Uint8Array(Buffer.from(str, 'hex'));\n}\n\nexports.hexToUint8Array = hexToUint8Array;\n\nfunction toStableObject(obj) {\n  return JSON.parse(fast_json_stable_stringify_1.default(obj));\n}\n\nexports.toStableObject = toStableObject;","map":null,"metadata":{},"sourceType":"script"}