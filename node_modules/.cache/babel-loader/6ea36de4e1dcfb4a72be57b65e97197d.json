{"ast":null,"code":"'use strict';\n/** @typedef {import('./generated-types').ConstantCodeMap} ConstantCodeMap */\n\n/** @typedef {import('./generated-types').NameUint8ArrayMap} NameUint8ArrayMap */\n\n/** @typedef {import('./generated-types').CodeNameMap} CodeNameMap */\n\n/** @typedef {import('./generated-types').CodecName} CodecName */\n\n/** @typedef {import('./generated-types').CodecConstant} CodecConstant */\n\nconst {\n  baseTable\n} = require('./generated-table');\n\nconst varintEncode = require('./util').varintEncode;\n\nconst nameToVarint =\n/** @type {NameUint8ArrayMap} */\n{};\nconst constantToCode =\n/** @type {ConstantCodeMap} */\n{};\nconst codeToName =\n/** @type {CodeNameMap} */\n{}; // eslint-disable-next-line guard-for-in\n\nfor (const name in baseTable) {\n  const codecName =\n  /** @type {CodecName} */\n  name;\n  const code = baseTable[codecName];\n  nameToVarint[codecName] = varintEncode(code);\n  const constant =\n  /** @type {CodecConstant} */\n  codecName.toUpperCase().replace(/-/g, '_');\n  constantToCode[constant] = code;\n\n  if (!codeToName[code]) {\n    codeToName[code] = codecName;\n  }\n}\n\nObject.freeze(nameToVarint);\nObject.freeze(constantToCode);\nObject.freeze(codeToName);\nconst nameToCode = Object.freeze(baseTable);\nmodule.exports = {\n  nameToVarint,\n  constantToCode,\n  nameToCode,\n  codeToName\n};","map":null,"metadata":{},"sourceType":"script"}