{"ast":null,"code":"var _jsxFileName = \"/Users/fabianmolina/Documents/1hive/tulip-frontend/src/components/LineChart/LineChart.js\";\nimport React, { Component } from 'react';\nimport './LineChart.css';\n\nclass LineChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hoverLoc: null,\n      activePoint: null\n    };\n  } // GET X & Y || MAX & MIN\n\n\n  getX() {\n    const {\n      data\n    } = this.props;\n    return {\n      min: data[0] ? data[0].x : 0,\n      max: data[data.length - 1] ? data[data.length - 1].x : 0\n    };\n  }\n\n  getY() {\n    const {\n      data\n    } = this.props;\n\n    if (data.length > 0) {\n      return {\n        min: data.reduce((min, p) => p.y < min ? p.y : min, data[0].y),\n        max: data.reduce((max, p) => p.y > max ? p.y : max, data[0].y)\n      };\n    } else {\n      return {\n        min: 0,\n        max: 0\n      };\n    }\n  } // GET SVG COORDINATES\n\n\n  getSvgX(x) {\n    const {\n      width,\n      yLabelSize\n    } = this.props;\n    return yLabelSize + x / this.getX().max * (width - yLabelSize);\n  }\n\n  getSvgY(y) {\n    const {\n      height,\n      xLabelSize\n    } = this.props;\n    const gY = this.getY();\n    const gYdiff = gY.max - gY.min > 1 ? gY.max - gY.min : 1;\n    return ((height - xLabelSize) * gY.max - (height - xLabelSize) * y) / gYdiff;\n  } // BUILD SVG PATH\n\n\n  makePath() {\n    const {\n      data,\n      color\n    } = this.props;\n\n    if (data === undefined || data.length === 0) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 14\n        }\n      });\n    }\n\n    let pathD = 'M ' + this.getSvgX(data[0].x) + ' ' + this.getSvgY(data[0].y) + '10 ';\n\n    if (data.every((val, i, arr) => val.y === arr[0].y)) {\n      // If all the values are equal we check if they are 0 or not because 0 is not recognized by the svg path.\n      const value = data[0].y > 0 ? 50 : 100;\n      pathD += data.map((point, i) => {\n        console.log('Point ', point);\n        return 'L ' + this.getSvgX(point.x) + ' ' + value + ' ';\n      });\n    } else {\n      pathD += data.map((point, i) => {\n        console.log('Point ', point);\n        return 'L ' + this.getSvgX(point.x) + ' ' + this.getSvgY(point.y) + ' ';\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"path\", {\n      className: \"linechart_path\",\n      d: pathD,\n      style: {\n        stroke: color\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    });\n  } // BUILD SHADED AREA\n\n\n  makeArea() {\n    const {\n      data\n    } = this.props;\n\n    if (data === undefined || data.length === 0) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 14\n        }\n      });\n    }\n\n    let pathD = 'M ' + this.getSvgX(data[0].x) + ' ' + this.getSvgY(data[0].y) + ' ';\n    pathD += data.map((point, i) => {\n      return 'L ' + this.getSvgX(point.x) + ' ' + this.getSvgY(point.y) + ' ';\n    });\n    const x = this.getX();\n    const y = this.getY();\n    pathD += 'L ' + this.getSvgX(x.max) + ' ' + this.getSvgY(y.min) + ' ' + 'L ' + this.getSvgX(x.min) + ' ' + this.getSvgY(y.min) + ' ';\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"defs\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"linearGradient\", {\n      id: \"MyGradient\",\n      gradientTransform: \"rotate(80)\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"stop\", {\n      offset: \"35%\",\n      stopColor: \"#7ce0d680\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"stop\", {\n      offset: \"95%\",\n      stopColor: \"#7ce0d600\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"path\", {\n      className: \"linechart_area\",\n      d: pathD,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    }));\n  } // BUILD GRID AXIS\n\n\n  makeAxis() {\n    const {\n      yLabelSize\n    } = this.props;\n    const x = this.getX();\n    const y = this.getY();\n    return /*#__PURE__*/React.createElement(\"g\", {\n      className: \"linechart_axis\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"line\", {\n      x1: this.getSvgX(x.min) - yLabelSize,\n      y1: this.getSvgY(y.min),\n      x2: this.getSvgX(x.max),\n      y2: this.getSvgY(y.min),\n      strokeDasharray: \"5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"line\", {\n      x1: this.getSvgX(x.min) - yLabelSize,\n      y1: this.getSvgY(y.max),\n      x2: this.getSvgX(x.max),\n      y2: this.getSvgY(y.max),\n      strokeDasharray: \"5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  makeLabels() {\n    const {\n      height,\n      width,\n      xLabelSize,\n      yLabelSize\n    } = this.props;\n    const padding = 5;\n    return /*#__PURE__*/React.createElement(\"g\", {\n      className: \"linechart_label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"text\", {\n      transform: `translate(${yLabelSize / 2}, 20)`,\n      textAnchor: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }\n    }, this.getY().max.toLocaleString('us-EN', {\n      style: 'currency',\n      currency: 'USD'\n    })), /*#__PURE__*/React.createElement(\"text\", {\n      transform: `translate(${yLabelSize / 2}, ${height - xLabelSize - padding})`,\n      textAnchor: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }\n    }, this.getY().min.toLocaleString('us-EN', {\n      style: 'currency',\n      currency: 'USD'\n    })), /*#__PURE__*/React.createElement(\"text\", {\n      transform: `translate(${yLabelSize}, ${height})`,\n      textAnchor: \"start\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }\n    }, this.props.data[0].d), /*#__PURE__*/React.createElement(\"text\", {\n      transform: `translate(${width}, ${height})`,\n      textAnchor: \"end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }\n    }, this.props.data[this.props.data.length - 1].d));\n  } // FIND CLOSEST POINT TO MOUSE\n\n\n  getCoords(e) {\n    const {\n      width,\n      data,\n      yLabelSize\n    } = this.props;\n    const svgLocation = document.getElementsByClassName('linechart')[0].getBoundingClientRect();\n    const adjustment = (svgLocation.width - width) / 2; // takes padding into consideration\n\n    const relativeLoc = e.clientX - svgLocation.left - adjustment;\n    const svgData = [];\n    data.map((point, i) => {\n      svgData.push({\n        svgX: this.getSvgX(point.x),\n        svgY: this.getSvgY(point.y),\n        d: point.d,\n        p: point.p\n      });\n    });\n    let closestPoint = {};\n\n    if (data.every((val, i, arr) => val.y === arr[0].y)) {// If all the values are equal we check if they are 0 or not because 0 is not recognized by the svg path.\n      // const value = data[0].y > 0 ? 50 : 100\n    }\n\n    console.log('SVG DATA: ', svgData);\n    console.log('relative loc', relativeLoc);\n\n    for (let i = 0, c = 500; i < svgData.length; i++) {\n      if (Math.abs(svgData[i].svgX - this.state.hoverLoc) <= c) {\n        c = Math.abs(svgData[i].svgX - this.state.hoverLoc);\n        console.log('ABS:', c);\n        closestPoint = svgData[i];\n      }\n    }\n\n    if (relativeLoc - yLabelSize < 0) {\n      this.stopHover();\n    } else {\n      this.setState({\n        hoverLoc: relativeLoc,\n        activePoint: closestPoint\n      });\n      this.props.onChartHover(relativeLoc, closestPoint);\n    }\n  } // STOP HOVER\n\n\n  stopHover() {\n    this.setState({\n      hoverLoc: null,\n      activePoint: null\n    });\n    this.props.onChartHover(null, null);\n  } // MAKE ACTIVE POINT\n\n\n  makeActivePoint() {\n    const {\n      color,\n      pointRadius\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"circle\", {\n      className: \"linechart_point\",\n      style: {\n        stroke: color\n      },\n      r: pointRadius,\n      cx: this.state.activePoint.svgX,\n      cy: this.state.activePoint.svgY,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 7\n      }\n    });\n  } // MAKE HOVER LINE\n\n\n  createLine() {\n    const {\n      height,\n      xLabelSize\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"line\", {\n      className: \"hoverLine\",\n      x1: this.state.hoverLoc,\n      y1: -8,\n      x2: this.state.hoverLoc,\n      y2: height - xLabelSize,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 7\n      }\n    });\n  }\n\n  render() {\n    const {\n      height,\n      width\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      width: width,\n      height: height,\n      viewBox: `10 -10 ${width} ${height}`,\n      className: \"linechart\",\n      onMouseLeave: () => this.stopHover(),\n      onMouseMove: e => this.getCoords(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"g\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }\n    }, this.props.makeAxis && this.makeAxis(), this.makePath(), this.makeArea(), this.props.showLabels && this.makeLabels(), this.props.showHoverLoc && this.state.hoverLoc ? this.createLine() : null, this.state.hoverLoc ? this.makeActivePoint() : null));\n  }\n\n} // DEFAULT PROPS\n\n\nLineChart.defaultProps = {\n  data: [],\n  color: '#7CE0D6',\n  pointRadius: 6,\n  height: 300,\n  width: 900,\n  xLabelSize: 20,\n  yLabelSize: 80,\n  showLabels: false,\n  showHoverLoc: false,\n  showAxis: false\n};\nexport default LineChart;","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/components/LineChart/LineChart.js"],"names":["React","Component","LineChart","constructor","props","state","hoverLoc","activePoint","getX","data","min","x","max","length","getY","reduce","p","y","getSvgX","width","yLabelSize","getSvgY","height","xLabelSize","gY","gYdiff","makePath","color","undefined","pathD","every","val","i","arr","value","map","point","console","log","stroke","makeArea","makeAxis","makeLabels","padding","toLocaleString","style","currency","d","getCoords","e","svgLocation","document","getElementsByClassName","getBoundingClientRect","adjustment","relativeLoc","clientX","left","svgData","push","svgX","svgY","closestPoint","c","Math","abs","stopHover","setState","onChartHover","makeActivePoint","pointRadius","createLine","render","showLabels","showHoverLoc","defaultProps","showAxis"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport './LineChart.css'\r\n\r\nclass LineChart extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      hoverLoc: null,\r\n      activePoint: null,\r\n    }\r\n  }\r\n\r\n  // GET X & Y || MAX & MIN\r\n  getX() {\r\n    const { data } = this.props\r\n    return {\r\n      min: data[0] ? data[0].x : 0,\r\n      max: data[data.length - 1] ? data[data.length - 1].x : 0,\r\n    }\r\n  }\r\n\r\n  getY() {\r\n    const { data } = this.props\r\n    if (data.length > 0) {\r\n      return {\r\n        min: data.reduce((min, p) => (p.y < min ? p.y : min), data[0].y),\r\n        max: data.reduce((max, p) => (p.y > max ? p.y : max), data[0].y),\r\n      }\r\n    } else {\r\n      return {\r\n        min: 0,\r\n        max: 0,\r\n      }\r\n    }\r\n  }\r\n\r\n  // GET SVG COORDINATES\r\n  getSvgX(x) {\r\n    const { width, yLabelSize } = this.props\r\n    return yLabelSize + (x / this.getX().max) * (width - yLabelSize)\r\n  }\r\n\r\n  getSvgY(y) {\r\n    const { height, xLabelSize } = this.props\r\n    const gY = this.getY()\r\n    const gYdiff = gY.max - gY.min > 1 ? gY.max - gY.min : 1\r\n    return ((height - xLabelSize) * gY.max - (height - xLabelSize) * y) / gYdiff\r\n  }\r\n\r\n  // BUILD SVG PATH\r\n  makePath() {\r\n    const { data, color } = this.props\r\n    if (data === undefined || data.length === 0) {\r\n      return <div />\r\n    }\r\n    let pathD =\r\n      'M ' + this.getSvgX(data[0].x) + ' ' + this.getSvgY(data[0].y) + '10 '\r\n\r\n    if (data.every((val, i, arr) => val.y === arr[0].y)) {\r\n      // If all the values are equal we check if they are 0 or not because 0 is not recognized by the svg path.\r\n      const value = data[0].y > 0 ? 50 : 100\r\n      pathD += data.map((point, i) => {\r\n        console.log('Point ', point)\r\n        return 'L ' + this.getSvgX(point.x) + ' ' + value + ' '\r\n      })\r\n    } else {\r\n      pathD += data.map((point, i) => {\r\n        console.log('Point ', point)\r\n        return 'L ' + this.getSvgX(point.x) + ' ' + this.getSvgY(point.y) + ' '\r\n      })\r\n    }\r\n\r\n    return (\r\n      <path className=\"linechart_path\" d={pathD} style={{ stroke: color }} />\r\n    )\r\n  }\r\n\r\n  // BUILD SHADED AREA\r\n  makeArea() {\r\n    const { data } = this.props\r\n    if (data === undefined || data.length === 0) {\r\n      return <div />\r\n    }\r\n\r\n    let pathD =\r\n      'M ' + this.getSvgX(data[0].x) + ' ' + this.getSvgY(data[0].y) + ' '\r\n\r\n    pathD += data.map((point, i) => {\r\n      return 'L ' + this.getSvgX(point.x) + ' ' + this.getSvgY(point.y) + ' '\r\n    })\r\n\r\n    const x = this.getX()\r\n    const y = this.getY()\r\n    pathD +=\r\n      'L ' +\r\n      this.getSvgX(x.max) +\r\n      ' ' +\r\n      this.getSvgY(y.min) +\r\n      ' ' +\r\n      'L ' +\r\n      this.getSvgX(x.min) +\r\n      ' ' +\r\n      this.getSvgY(y.min) +\r\n      ' '\r\n\r\n    return (\r\n      <svg>\r\n        <defs>\r\n          <linearGradient id=\"MyGradient\" gradientTransform=\"rotate(80)\">\r\n            <stop offset=\"35%\" stopColor=\"#7ce0d680\" />\r\n            <stop offset=\"95%\" stopColor=\"#7ce0d600\" />\r\n          </linearGradient>\r\n        </defs>\r\n        <path className=\"linechart_area\" d={pathD} />\r\n      </svg>\r\n    )\r\n  }\r\n\r\n  // BUILD GRID AXIS\r\n  makeAxis() {\r\n    const { yLabelSize } = this.props\r\n    const x = this.getX()\r\n    const y = this.getY()\r\n\r\n    return (\r\n      <g className=\"linechart_axis\">\r\n        <line\r\n          x1={this.getSvgX(x.min) - yLabelSize}\r\n          y1={this.getSvgY(y.min)}\r\n          x2={this.getSvgX(x.max)}\r\n          y2={this.getSvgY(y.min)}\r\n          strokeDasharray=\"5\"\r\n        />\r\n        <line\r\n          x1={this.getSvgX(x.min) - yLabelSize}\r\n          y1={this.getSvgY(y.max)}\r\n          x2={this.getSvgX(x.max)}\r\n          y2={this.getSvgY(y.max)}\r\n          strokeDasharray=\"5\"\r\n        />\r\n      </g>\r\n    )\r\n  }\r\n\r\n  makeLabels() {\r\n    const { height, width, xLabelSize, yLabelSize } = this.props\r\n    const padding = 5\r\n    return (\r\n      <g className=\"linechart_label\">\r\n        {/* Y AXIS LABELS */}\r\n        <text\r\n          transform={`translate(${yLabelSize / 2}, 20)`}\r\n          textAnchor=\"middle\"\r\n        >\r\n          {this.getY().max.toLocaleString('us-EN', {\r\n            style: 'currency',\r\n            currency: 'USD',\r\n          })}\r\n        </text>\r\n        <text\r\n          transform={`translate(${yLabelSize / 2}, ${height -\r\n            xLabelSize -\r\n            padding})`}\r\n          textAnchor=\"middle\"\r\n        >\r\n          {this.getY().min.toLocaleString('us-EN', {\r\n            style: 'currency',\r\n            currency: 'USD',\r\n          })}\r\n        </text>\r\n        {/* X AXIS LABELS */}\r\n        <text\r\n          transform={`translate(${yLabelSize}, ${height})`}\r\n          textAnchor=\"start\"\r\n        >\r\n          {this.props.data[0].d}\r\n        </text>\r\n        <text transform={`translate(${width}, ${height})`} textAnchor=\"end\">\r\n          {this.props.data[this.props.data.length - 1].d}\r\n        </text>\r\n      </g>\r\n    )\r\n  }\r\n\r\n  // FIND CLOSEST POINT TO MOUSE\r\n  getCoords(e) {\r\n    const { width, data, yLabelSize } = this.props\r\n    const svgLocation = document\r\n      .getElementsByClassName('linechart')[0]\r\n      .getBoundingClientRect()\r\n    const adjustment = (svgLocation.width - width) / 2 // takes padding into consideration\r\n    const relativeLoc = e.clientX - svgLocation.left - adjustment\r\n\r\n    const svgData = []\r\n    data.map((point, i) => {\r\n      svgData.push({\r\n        svgX: this.getSvgX(point.x),\r\n        svgY: this.getSvgY(point.y),\r\n        d: point.d,\r\n        p: point.p,\r\n      })\r\n    })\r\n\r\n    let closestPoint = {}\r\n    if (data.every((val, i, arr) => val.y === arr[0].y)) {\r\n      // If all the values are equal we check if they are 0 or not because 0 is not recognized by the svg path.\r\n      // const value = data[0].y > 0 ? 50 : 100\r\n    }\r\n    console.log('SVG DATA: ', svgData)\r\n    console.log('relative loc', relativeLoc)\r\n    for (let i = 0, c = 500; i < svgData.length; i++) {\r\n      if (Math.abs(svgData[i].svgX - this.state.hoverLoc) <= c) {\r\n        c = Math.abs(svgData[i].svgX - this.state.hoverLoc)\r\n        console.log('ABS:', c)\r\n        closestPoint = svgData[i]\r\n      }\r\n    }\r\n\r\n    if (relativeLoc - yLabelSize < 0) {\r\n      this.stopHover()\r\n    } else {\r\n      this.setState({\r\n        hoverLoc: relativeLoc,\r\n        activePoint: closestPoint,\r\n      })\r\n      this.props.onChartHover(relativeLoc, closestPoint)\r\n    }\r\n  }\r\n\r\n  // STOP HOVER\r\n  stopHover() {\r\n    this.setState({ hoverLoc: null, activePoint: null })\r\n    this.props.onChartHover(null, null)\r\n  }\r\n\r\n  // MAKE ACTIVE POINT\r\n  makeActivePoint() {\r\n    const { color, pointRadius } = this.props\r\n    return (\r\n      <circle\r\n        className=\"linechart_point\"\r\n        style={{ stroke: color }}\r\n        r={pointRadius}\r\n        cx={this.state.activePoint.svgX}\r\n        cy={this.state.activePoint.svgY}\r\n      />\r\n    )\r\n  }\r\n\r\n  // MAKE HOVER LINE\r\n  createLine() {\r\n    const { height, xLabelSize } = this.props\r\n    return (\r\n      <line\r\n        className=\"hoverLine\"\r\n        x1={this.state.hoverLoc}\r\n        y1={-8}\r\n        x2={this.state.hoverLoc}\r\n        y2={height - xLabelSize}\r\n      />\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const { height, width } = this.props\r\n    return (\r\n      <svg\r\n        width={width}\r\n        height={height}\r\n        viewBox={`10 -10 ${width} ${height}`}\r\n        className=\"linechart\"\r\n        onMouseLeave={() => this.stopHover()}\r\n        onMouseMove={e => this.getCoords(e)}\r\n      >\r\n        <g>\r\n          {this.props.makeAxis && this.makeAxis()}\r\n          {this.makePath()}\r\n          {this.makeArea()}\r\n          {this.props.showLabels && this.makeLabels()}\r\n          {this.props.showHoverLoc && this.state.hoverLoc\r\n            ? this.createLine()\r\n            : null}\r\n          {this.state.hoverLoc ? this.makeActivePoint() : null}\r\n        </g>\r\n      </svg>\r\n    )\r\n  }\r\n}\r\n\r\n// DEFAULT PROPS\r\nLineChart.defaultProps = {\r\n  data: [],\r\n  color: '#7CE0D6',\r\n  pointRadius: 6,\r\n  height: 300,\r\n  width: 900,\r\n  xLabelSize: 20,\r\n  yLabelSize: 80,\r\n  showLabels: false,\r\n  showHoverLoc: false,\r\n  showAxis: false,\r\n}\r\n\r\nexport default LineChart\r\n"]},"metadata":{},"sourceType":"module"}