{"ast":null,"code":"\"use strict\"; // Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar binary_1 = require(\"@stablelib/binary\");\n\nvar wipe_1 = require(\"@stablelib/wipe\");\n\nexports.DIGEST_LENGTH = 64;\nexports.BLOCK_SIZE = 128;\n/**\n * SHA-2-512 cryptographic hash algorithm.\n */\n\nvar SHA512 =\n/** @class */\nfunction () {\n  function SHA512() {\n    /** Length of hash output */\n    this.digestLength = exports.DIGEST_LENGTH;\n    /** Block size */\n\n    this.blockSize = exports.BLOCK_SIZE; // Note: Int32Array is used instead of Uint32Array for performance reasons.\n\n    this._stateHi = new Int32Array(8); // hash state, high bytes\n\n    this._stateLo = new Int32Array(8); // hash state, low bytes\n\n    this._tempHi = new Int32Array(16); // temporary state, high bytes\n\n    this._tempLo = new Int32Array(16); // temporary state, low bytes\n\n    this._buffer = new Uint8Array(256); // buffer for data to hash\n\n    this._bufferLength = 0; // number of bytes in buffer\n\n    this._bytesHashed = 0; // number of total bytes hashed\n\n    this._finished = false; // indicates whether the hash was finalized\n\n    this.reset();\n  }\n\n  SHA512.prototype._initState = function () {\n    this._stateHi[0] = 0x6a09e667;\n    this._stateHi[1] = 0xbb67ae85;\n    this._stateHi[2] = 0x3c6ef372;\n    this._stateHi[3] = 0xa54ff53a;\n    this._stateHi[4] = 0x510e527f;\n    this._stateHi[5] = 0x9b05688c;\n    this._stateHi[6] = 0x1f83d9ab;\n    this._stateHi[7] = 0x5be0cd19;\n    this._stateLo[0] = 0xf3bcc908;\n    this._stateLo[1] = 0x84caa73b;\n    this._stateLo[2] = 0xfe94f82b;\n    this._stateLo[3] = 0x5f1d36f1;\n    this._stateLo[4] = 0xade682d1;\n    this._stateLo[5] = 0x2b3e6c1f;\n    this._stateLo[6] = 0xfb41bd6b;\n    this._stateLo[7] = 0x137e2179;\n  };\n  /**\n   * Resets hash state making it possible\n   * to re-use this instance to hash other data.\n   */\n\n\n  SHA512.prototype.reset = function () {\n    this._initState();\n\n    this._bufferLength = 0;\n    this._bytesHashed = 0;\n    this._finished = false;\n    return this;\n  };\n  /**\n   * Cleans internal buffers and resets hash state.\n   */\n\n\n  SHA512.prototype.clean = function () {\n    wipe_1.wipe(this._buffer);\n    wipe_1.wipe(this._tempHi);\n    wipe_1.wipe(this._tempLo);\n    this.reset();\n  };\n  /**\n   * Updates hash state with the given data.\n   *\n   * Throws error when trying to update already finalized hash:\n   * instance must be reset to update it again.\n   */\n\n\n  SHA512.prototype.update = function (data, dataLength) {\n    if (dataLength === void 0) {\n      dataLength = data.length;\n    }\n\n    if (this._finished) {\n      throw new Error(\"SHA512: can't update because hash was finished.\");\n    }\n\n    var dataPos = 0;\n    this._bytesHashed += dataLength;\n\n    if (this._bufferLength > 0) {\n      while (this._bufferLength < exports.BLOCK_SIZE && dataLength > 0) {\n        this._buffer[this._bufferLength++] = data[dataPos++];\n        dataLength--;\n      }\n\n      if (this._bufferLength === this.blockSize) {\n        hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, this.blockSize);\n        this._bufferLength = 0;\n      }\n    }\n\n    if (dataLength >= this.blockSize) {\n      dataPos = hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, data, dataPos, dataLength);\n      dataLength %= this.blockSize;\n    }\n\n    while (dataLength > 0) {\n      this._buffer[this._bufferLength++] = data[dataPos++];\n      dataLength--;\n    }\n\n    return this;\n  };\n  /**\n   * Finalizes hash state and puts hash into out.\n   * If hash was already finalized, puts the same value.\n   */\n\n\n  SHA512.prototype.finish = function (out) {\n    if (!this._finished) {\n      var bytesHashed = this._bytesHashed;\n      var left = this._bufferLength;\n      var bitLenHi = bytesHashed / 0x20000000 | 0;\n      var bitLenLo = bytesHashed << 3;\n      var padLength = bytesHashed % 128 < 112 ? 128 : 256;\n      this._buffer[left] = 0x80;\n\n      for (var i = left + 1; i < padLength - 8; i++) {\n        this._buffer[i] = 0;\n      }\n\n      binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);\n      binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);\n      hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, padLength);\n      this._finished = true;\n    }\n\n    for (var i = 0; i < this.digestLength / 8; i++) {\n      binary_1.writeUint32BE(this._stateHi[i], out, i * 8);\n      binary_1.writeUint32BE(this._stateLo[i], out, i * 8 + 4);\n    }\n\n    return this;\n  };\n  /**\n   * Returns the final hash digest.\n   */\n\n\n  SHA512.prototype.digest = function () {\n    var out = new Uint8Array(this.digestLength);\n    this.finish(out);\n    return out;\n  };\n  /**\n   * Function useful for HMAC/PBKDF2 optimization. Returns hash state to be\n   * used with restoreState(). Only chain value is saved, not buffers or\n   * other state variables.\n   */\n\n\n  SHA512.prototype.saveState = function () {\n    if (this._finished) {\n      throw new Error(\"SHA256: cannot save finished state\");\n    }\n\n    return {\n      stateHi: new Int32Array(this._stateHi),\n      stateLo: new Int32Array(this._stateLo),\n      buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : undefined,\n      bufferLength: this._bufferLength,\n      bytesHashed: this._bytesHashed\n    };\n  };\n  /**\n   * Function useful for HMAC/PBKDF2 optimization. Restores state saved by\n   * saveState() and sets bytesHashed to the given value.\n   */\n\n\n  SHA512.prototype.restoreState = function (savedState) {\n    this._stateHi.set(savedState.stateHi);\n\n    this._stateLo.set(savedState.stateLo);\n\n    this._bufferLength = savedState.bufferLength;\n\n    if (savedState.buffer) {\n      this._buffer.set(savedState.buffer);\n    }\n\n    this._bytesHashed = savedState.bytesHashed;\n    this._finished = false;\n    return this;\n  };\n  /**\n   * Cleans state returned by saveState().\n   */\n\n\n  SHA512.prototype.cleanSavedState = function (savedState) {\n    wipe_1.wipe(savedState.stateHi);\n    wipe_1.wipe(savedState.stateLo);\n\n    if (savedState.buffer) {\n      wipe_1.wipe(savedState.buffer);\n    }\n\n    savedState.bufferLength = 0;\n    savedState.bytesHashed = 0;\n  };\n\n  return SHA512;\n}();\n\nexports.SHA512 = SHA512; // Constants\n\nvar K = new Int32Array([0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817]);\n\nfunction hashBlocks(wh, wl, hh, hl, m, pos, len) {\n  var ah0 = hh[0],\n      ah1 = hh[1],\n      ah2 = hh[2],\n      ah3 = hh[3],\n      ah4 = hh[4],\n      ah5 = hh[5],\n      ah6 = hh[6],\n      ah7 = hh[7],\n      al0 = hl[0],\n      al1 = hl[1],\n      al2 = hl[2],\n      al3 = hl[3],\n      al4 = hl[4],\n      al5 = hl[5],\n      al6 = hl[6],\n      al7 = hl[7];\n  var h, l;\n  var th, tl;\n  var a, b, c, d;\n\n  while (len >= 128) {\n    for (var i = 0; i < 16; i++) {\n      var j = 8 * i + pos;\n      wh[i] = binary_1.readUint32BE(m, j);\n      wl[i] = binary_1.readUint32BE(m, j + 4);\n    }\n\n    for (var i = 0; i < 80; i++) {\n      var bh0 = ah0;\n      var bh1 = ah1;\n      var bh2 = ah2;\n      var bh3 = ah3;\n      var bh4 = ah4;\n      var bh5 = ah5;\n      var bh6 = ah6;\n      var bh7 = ah7;\n      var bl0 = al0;\n      var bl1 = al1;\n      var bl2 = al2;\n      var bl3 = al3;\n      var bl4 = al4;\n      var bl5 = al5;\n      var bl6 = al6;\n      var bl7 = al7; // add\n\n      h = ah7;\n      l = al7;\n      a = l & 0xffff;\n      b = l >>> 16;\n      c = h & 0xffff;\n      d = h >>> 16; // Sigma1\n\n      h = (ah4 >>> 14 | al4 << 32 - 14) ^ (ah4 >>> 18 | al4 << 32 - 18) ^ (al4 >>> 41 - 32 | ah4 << 32 - (41 - 32));\n      l = (al4 >>> 14 | ah4 << 32 - 14) ^ (al4 >>> 18 | ah4 << 32 - 18) ^ (ah4 >>> 41 - 32 | al4 << 32 - (41 - 32));\n      a += l & 0xffff;\n      b += l >>> 16;\n      c += h & 0xffff;\n      d += h >>> 16; // Ch\n\n      h = ah4 & ah5 ^ ~ah4 & ah6;\n      l = al4 & al5 ^ ~al4 & al6;\n      a += l & 0xffff;\n      b += l >>> 16;\n      c += h & 0xffff;\n      d += h >>> 16; // K\n\n      h = K[i * 2];\n      l = K[i * 2 + 1];\n      a += l & 0xffff;\n      b += l >>> 16;\n      c += h & 0xffff;\n      d += h >>> 16; // w\n\n      h = wh[i % 16];\n      l = wl[i % 16];\n      a += l & 0xffff;\n      b += l >>> 16;\n      c += h & 0xffff;\n      d += h >>> 16;\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n      th = c & 0xffff | d << 16;\n      tl = a & 0xffff | b << 16; // add\n\n      h = th;\n      l = tl;\n      a = l & 0xffff;\n      b = l >>> 16;\n      c = h & 0xffff;\n      d = h >>> 16; // Sigma0\n\n      h = (ah0 >>> 28 | al0 << 32 - 28) ^ (al0 >>> 34 - 32 | ah0 << 32 - (34 - 32)) ^ (al0 >>> 39 - 32 | ah0 << 32 - (39 - 32));\n      l = (al0 >>> 28 | ah0 << 32 - 28) ^ (ah0 >>> 34 - 32 | al0 << 32 - (34 - 32)) ^ (ah0 >>> 39 - 32 | al0 << 32 - (39 - 32));\n      a += l & 0xffff;\n      b += l >>> 16;\n      c += h & 0xffff;\n      d += h >>> 16; // Maj\n\n      h = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;\n      l = al0 & al1 ^ al0 & al2 ^ al1 & al2;\n      a += l & 0xffff;\n      b += l >>> 16;\n      c += h & 0xffff;\n      d += h >>> 16;\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n      bh7 = c & 0xffff | d << 16;\n      bl7 = a & 0xffff | b << 16; // add\n\n      h = bh3;\n      l = bl3;\n      a = l & 0xffff;\n      b = l >>> 16;\n      c = h & 0xffff;\n      d = h >>> 16;\n      h = th;\n      l = tl;\n      a += l & 0xffff;\n      b += l >>> 16;\n      c += h & 0xffff;\n      d += h >>> 16;\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n      bh3 = c & 0xffff | d << 16;\n      bl3 = a & 0xffff | b << 16;\n      ah1 = bh0;\n      ah2 = bh1;\n      ah3 = bh2;\n      ah4 = bh3;\n      ah5 = bh4;\n      ah6 = bh5;\n      ah7 = bh6;\n      ah0 = bh7;\n      al1 = bl0;\n      al2 = bl1;\n      al3 = bl2;\n      al4 = bl3;\n      al5 = bl4;\n      al6 = bl5;\n      al7 = bl6;\n      al0 = bl7;\n\n      if (i % 16 === 15) {\n        for (var j = 0; j < 16; j++) {\n          // add\n          h = wh[j];\n          l = wl[j];\n          a = l & 0xffff;\n          b = l >>> 16;\n          c = h & 0xffff;\n          d = h >>> 16;\n          h = wh[(j + 9) % 16];\n          l = wl[(j + 9) % 16];\n          a += l & 0xffff;\n          b += l >>> 16;\n          c += h & 0xffff;\n          d += h >>> 16; // sigma0\n\n          th = wh[(j + 1) % 16];\n          tl = wl[(j + 1) % 16];\n          h = (th >>> 1 | tl << 32 - 1) ^ (th >>> 8 | tl << 32 - 8) ^ th >>> 7;\n          l = (tl >>> 1 | th << 32 - 1) ^ (tl >>> 8 | th << 32 - 8) ^ (tl >>> 7 | th << 32 - 7);\n          a += l & 0xffff;\n          b += l >>> 16;\n          c += h & 0xffff;\n          d += h >>> 16; // sigma1\n\n          th = wh[(j + 14) % 16];\n          tl = wl[(j + 14) % 16];\n          h = (th >>> 19 | tl << 32 - 19) ^ (tl >>> 61 - 32 | th << 32 - (61 - 32)) ^ th >>> 6;\n          l = (tl >>> 19 | th << 32 - 19) ^ (th >>> 61 - 32 | tl << 32 - (61 - 32)) ^ (tl >>> 6 | th << 32 - 6);\n          a += l & 0xffff;\n          b += l >>> 16;\n          c += h & 0xffff;\n          d += h >>> 16;\n          b += a >>> 16;\n          c += b >>> 16;\n          d += c >>> 16;\n          wh[j] = c & 0xffff | d << 16;\n          wl[j] = a & 0xffff | b << 16;\n        }\n      }\n    } // add\n\n\n    h = ah0;\n    l = al0;\n    a = l & 0xffff;\n    b = l >>> 16;\n    c = h & 0xffff;\n    d = h >>> 16;\n    h = hh[0];\n    l = hl[0];\n    a += l & 0xffff;\n    b += l >>> 16;\n    c += h & 0xffff;\n    d += h >>> 16;\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n    hh[0] = ah0 = c & 0xffff | d << 16;\n    hl[0] = al0 = a & 0xffff | b << 16;\n    h = ah1;\n    l = al1;\n    a = l & 0xffff;\n    b = l >>> 16;\n    c = h & 0xffff;\n    d = h >>> 16;\n    h = hh[1];\n    l = hl[1];\n    a += l & 0xffff;\n    b += l >>> 16;\n    c += h & 0xffff;\n    d += h >>> 16;\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n    hh[1] = ah1 = c & 0xffff | d << 16;\n    hl[1] = al1 = a & 0xffff | b << 16;\n    h = ah2;\n    l = al2;\n    a = l & 0xffff;\n    b = l >>> 16;\n    c = h & 0xffff;\n    d = h >>> 16;\n    h = hh[2];\n    l = hl[2];\n    a += l & 0xffff;\n    b += l >>> 16;\n    c += h & 0xffff;\n    d += h >>> 16;\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n    hh[2] = ah2 = c & 0xffff | d << 16;\n    hl[2] = al2 = a & 0xffff | b << 16;\n    h = ah3;\n    l = al3;\n    a = l & 0xffff;\n    b = l >>> 16;\n    c = h & 0xffff;\n    d = h >>> 16;\n    h = hh[3];\n    l = hl[3];\n    a += l & 0xffff;\n    b += l >>> 16;\n    c += h & 0xffff;\n    d += h >>> 16;\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n    hh[3] = ah3 = c & 0xffff | d << 16;\n    hl[3] = al3 = a & 0xffff | b << 16;\n    h = ah4;\n    l = al4;\n    a = l & 0xffff;\n    b = l >>> 16;\n    c = h & 0xffff;\n    d = h >>> 16;\n    h = hh[4];\n    l = hl[4];\n    a += l & 0xffff;\n    b += l >>> 16;\n    c += h & 0xffff;\n    d += h >>> 16;\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n    hh[4] = ah4 = c & 0xffff | d << 16;\n    hl[4] = al4 = a & 0xffff | b << 16;\n    h = ah5;\n    l = al5;\n    a = l & 0xffff;\n    b = l >>> 16;\n    c = h & 0xffff;\n    d = h >>> 16;\n    h = hh[5];\n    l = hl[5];\n    a += l & 0xffff;\n    b += l >>> 16;\n    c += h & 0xffff;\n    d += h >>> 16;\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n    hh[5] = ah5 = c & 0xffff | d << 16;\n    hl[5] = al5 = a & 0xffff | b << 16;\n    h = ah6;\n    l = al6;\n    a = l & 0xffff;\n    b = l >>> 16;\n    c = h & 0xffff;\n    d = h >>> 16;\n    h = hh[6];\n    l = hl[6];\n    a += l & 0xffff;\n    b += l >>> 16;\n    c += h & 0xffff;\n    d += h >>> 16;\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n    hh[6] = ah6 = c & 0xffff | d << 16;\n    hl[6] = al6 = a & 0xffff | b << 16;\n    h = ah7;\n    l = al7;\n    a = l & 0xffff;\n    b = l >>> 16;\n    c = h & 0xffff;\n    d = h >>> 16;\n    h = hh[7];\n    l = hl[7];\n    a += l & 0xffff;\n    b += l >>> 16;\n    c += h & 0xffff;\n    d += h >>> 16;\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n    hh[7] = ah7 = c & 0xffff | d << 16;\n    hl[7] = al7 = a & 0xffff | b << 16;\n    pos += 128;\n    len -= 128;\n  }\n\n  return pos;\n}\n\nfunction hash(data) {\n  var h = new SHA512();\n  h.update(data);\n  var digest = h.digest();\n  h.clean();\n  return digest;\n}\n\nexports.hash = hash;","map":null,"metadata":{},"sourceType":"script"}