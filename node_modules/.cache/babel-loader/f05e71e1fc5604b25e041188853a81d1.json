{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar slicedToArray = require('./slicedToArray-a8a77f0e.js');\n\nrequire('./unsupportedIterableToArray-f175acfa.js');\n\nvar React = require('react');\n\nvar keycodes = require('./keycodes.js');\n\nfunction useArrowKeysFocus(refs) {\n  var _useState = React.useState(-1),\n      _useState2 = slicedToArray.slicedToArray(_useState, 2),\n      highlightedIndex = _useState2[0],\n      setHighlightedIndex = _useState2[1];\n\n  var cycleFocus = React.useCallback(function (e, change) {\n    e.preventDefault();\n    var next = highlightedIndex + change;\n\n    if (next > refs.length - 1) {\n      next = 0;\n    }\n\n    if (next < 0) {\n      next = refs.length - 1;\n    }\n\n    setHighlightedIndex(next);\n  }, [highlightedIndex, refs.length]);\n  var handleKeyDown = React.useCallback(function (event) {\n    var keyCode = event.keyCode;\n\n    if (keyCode === keycodes.KEY_UP || keyCode === keycodes.KEY_DOWN) {\n      cycleFocus(event, keyCode === keycodes.KEY_UP ? -1 : 1);\n    }\n  }, [cycleFocus]);\n  React.useEffect(function () {\n    document.addEventListener('keydown', handleKeyDown);\n    return function () {\n      return document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyDown]);\n  React.useEffect(function () {\n    if (highlightedIndex === -1) {\n      return;\n    }\n\n    if (!refs[highlightedIndex]) {\n      return;\n    }\n\n    refs[highlightedIndex].focus();\n  }, [highlightedIndex, refs]);\n  return {\n    highlightedIndex: highlightedIndex,\n    setHighlightedIndex: setHighlightedIndex\n  };\n}\n\nexports.useArrowKeysFocus = useArrowKeysFocus;","map":{"version":3,"sources":["../src/hooks/useArrowKeysFocus.js"],"names":["highlightedIndex","setHighlightedIndex","useState","cycleFocus","useCallback","e","next","refs","handleKeyDown","keyCode","event","KEY_UP","KEY_DOWN","useEffect","document"],"mappings":";;;;;;;;;;;;;;AAGO,SAAA,iBAAA,CAAA,IAAA,EAAiC;AAAA,MAAA,SAAA,GACUE,KAAAA,CAAAA,QAAAA,CAAS,CADnB,CACUA,CADV;AAAA,MAAA,UAAA,GAAA,aAAA,CAAA,aAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAC/BF,gBAD+B,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MACbC,mBADa,GAAA,UAAA,CAAA,CAAA,CAAA;;AAGtC,MAAME,UAAU,GAAGC,KAAAA,CAAAA,WAAAA,CACjB,UAAA,CAAA,EAAA,MAAA,EAAe;AACbC,IAAAA,CAAC,CAADA,cAAAA;AACA,QAAIC,IAAI,GAAGN,gBAAgB,GAA3B,MAAA;;AACA,QAAIM,IAAI,GAAGC,IAAI,CAAJA,MAAAA,GAAX,CAAA,EAA4B;AAC1BD,MAAAA,IAAI,GAAJA,CAAAA;AACD;;AACD,QAAIA,IAAI,GAAR,CAAA,EAAc;AACZA,MAAAA,IAAI,GAAGC,IAAI,CAAJA,MAAAA,GAAPD,CAAAA;AACD;;AACDL,IAAAA,mBAAmB,CAAnBA,IAAmB,CAAnBA;AAV0B,GAAXG,EAYjB,CAAA,gBAAA,EAAmBG,IAAI,CAZzB,MAYE,CAZiBH,CAAnB;AAeA,MAAMI,aAAa,GAAGJ,KAAAA,CAAAA,WAAAA,CACpB,UAAA,KAAA,EAAS;AAAA,QACCK,OADD,GACaC,KADb,CAAA,OAAA;;AAEP,QAAID,OAAO,KAAKE,QAAAA,CAAZF,MAAAA,IAAsBA,OAAO,KAAKG,QAAAA,CAAtC,QAAA,EAAgD;AAC9CT,MAAAA,UAAU,CAAA,KAAA,EAAQM,OAAO,KAAKE,QAAAA,CAAZF,MAAAA,GAAqB,CAArBA,CAAAA,GAAlBN,CAAU,CAAVA;AACD;AAL4B,GAAXC,EAOpB,CAPF,UAOE,CAPoBA,CAAtB;AAUAS,EAAAA,KAAAA,CAAAA,SAAAA,CAAU,YAAM;AACdC,IAAAA,QAAQ,CAARA,gBAAAA,CAAAA,SAAAA,EAAAA,aAAAA;AACA,WAAO,YAAA;AAAA,aAAMA,QAAQ,CAARA,mBAAAA,CAAAA,SAAAA,EAAN,aAAMA,CAAN;AAAP,KAAA;AAFO,GAATD,EAGG,CAHHA,aAGG,CAHHA;AAKAA,EAAAA,KAAAA,CAAAA,SAAAA,CAAU,YAAM;AACd,QAAIb,gBAAgB,KAAK,CAAzB,CAAA,EAA6B;AAC3B;AACD;;AACD,QAAI,CAACO,IAAI,CAAT,gBAAS,CAAT,EAA6B;AAC3B;AACD;;AACDA,IAAAA,IAAI,CAAJA,gBAAI,CAAJA,CAAAA,KAAAA;AAPO,GAATM,EAQG,CAAA,gBAAA,EARHA,IAQG,CARHA;AAUA,SAAO;AACLb,IAAAA,gBAAgB,EADX,gBAAA;AAELC,IAAAA,mBAAmB,EAAnBA;AAFK,GAAP;AAID","sourcesContent":["import { useState, useCallback, useEffect } from 'react'\nimport { KEY_UP, KEY_DOWN } from '../utils'\n\nexport function useArrowKeysFocus(refs) {\n  const [highlightedIndex, setHighlightedIndex] = useState(-1)\n\n  const cycleFocus = useCallback(\n    (e, change) => {\n      e.preventDefault()\n      let next = highlightedIndex + change\n      if (next > refs.length - 1) {\n        next = 0\n      }\n      if (next < 0) {\n        next = refs.length - 1\n      }\n      setHighlightedIndex(next)\n    },\n    [highlightedIndex, refs.length]\n  )\n\n  const handleKeyDown = useCallback(\n    event => {\n      const { keyCode } = event\n      if (keyCode === KEY_UP || keyCode === KEY_DOWN) {\n        cycleFocus(event, keyCode === KEY_UP ? -1 : 1)\n      }\n    },\n    [cycleFocus]\n  )\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown)\n    return () => document.removeEventListener('keydown', handleKeyDown)\n  }, [handleKeyDown])\n\n  useEffect(() => {\n    if (highlightedIndex === -1) {\n      return\n    }\n    if (!refs[highlightedIndex]) {\n      return\n    }\n    refs[highlightedIndex].focus()\n  }, [highlightedIndex, refs])\n\n  return {\n    highlightedIndex,\n    setHighlightedIndex,\n  }\n}\n"]},"metadata":{},"sourceType":"script"}