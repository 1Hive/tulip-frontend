{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:webrtc-star');\nlog.error = debug('libp2p:webrtc-star:error');\n\nconst {\n  EventEmitter\n} = require('events');\n\nconst errcode = require('err-code');\n\nconst withIs = require('class-is');\n\nconst {\n  AbortError\n} = require('abortable-iterator');\n\nconst SimplePeer = require('simple-peer');\n\nconst webrtcSupport = require('webrtcsupport');\n\nconst multiaddr = require('multiaddr');\n\nconst mafmt = require('mafmt');\n\nconst PeerId = require('peer-id');\n\nconst PeerInfo = require('peer-info');\n\nconst {\n  CODE_CIRCUIT\n} = require('./constants');\n\nconst createListener = require('./listener');\n\nconst toConnection = require('./socket-to-conn');\n\nconst {\n  cleanMultiaddr\n} = require('./utils');\n\nfunction noop() {}\n/**\n * @class WebRTCStar\n */\n\n\nclass WebRTCStar {\n  /**\n   * @constructor\n   * @param {object} options\n   * @param {Upgrader} options.upgrader\n   */\n  constructor(options = {}) {\n    if (!options.upgrader) {\n      throw new Error('An upgrader must be provided. See https://github.com/libp2p/interface-transport#upgrader.');\n    }\n\n    this._upgrader = options.upgrader;\n    this._signallingAddr = undefined;\n    this.sioOptions = {\n      transports: ['websocket'],\n      'force new connection': true\n    };\n\n    if (options.wrtc) {\n      this.wrtc = options.wrtc;\n    }\n\n    this.listenersRefs = {}; // Discovery\n\n    this.discovery = new EventEmitter();\n    this.discovery.tag = 'webRTCStar';\n    this.discovery._isStarted = false;\n\n    this.discovery.start = () => {\n      this.discovery._isStarted = true;\n    };\n\n    this.discovery.stop = () => {\n      this.discovery._isStarted = false;\n    };\n\n    this._peerDiscovered = this._peerDiscovered.bind(this);\n  }\n  /**\n   * @async\n   * @param {Multiaddr} ma\n   * @param {object} options\n   * @param {AbortSignal} options.signal Used to abort dial requests\n   * @returns {Connection} An upgraded Connection\n   */\n\n\n  async dial(ma, options = {}) {\n    const rawConn = await this._connect(ma, options);\n    const maConn = toConnection(rawConn, {\n      remoteAddr: ma,\n      signal: options.signal\n    });\n    log('new outbound connection %s', maConn.remoteAddr);\n    const conn = await this._upgrader.upgradeOutbound(maConn);\n    log('outbound connection %s upgraded', maConn.remoteAddr);\n    return conn;\n  }\n  /**\n   * @private\n   * @param {Multiaddr} ma\n   * @param {object} options\n   * @param {AbortSignal} options.signal Used to abort dial requests\n   * @returns {Promise<SimplePeer>} Resolves a SimplePeer Webrtc channel\n   */\n\n\n  _connect(ma, options = {}) {\n    if (options.signal && options.signal.aborted) {\n      throw new AbortError();\n    }\n\n    const spOptions = {\n      initiator: true,\n      trickle: false\n    }; // Use custom WebRTC implementation\n\n    if (this.wrtc) {\n      spOptions.wrtc = this.wrtc;\n    }\n\n    const cOpts = ma.toOptions();\n    const intentId = (~~(Math.random() * 1e9)).toString(36) + Date.now();\n    const sioClient = this.listenersRefs[Object.keys(this.listenersRefs)[0]].io;\n    return new Promise((resolve, reject) => {\n      const start = Date.now();\n      let connected;\n      log('dialing %s:%s', cOpts.host, cOpts.port);\n      const channel = new SimplePeer(spOptions);\n\n      const onError = err => {\n        if (!connected) {\n          const msg = `connection error ${cOpts.host}:${cOpts.port}: ${err.message}`;\n          err.message = msg;\n          log.error(msg);\n          done(err);\n        }\n      };\n\n      const onTimeout = () => {\n        log('connnection timeout %s:%s', cOpts.host, cOpts.port);\n        const err = errcode(new Error(`connection timeout after ${Date.now() - start}ms`), 'ERR_CONNECT_TIMEOUT'); // Note: this will result in onError() being called\n\n        channel.emit('error', err);\n      };\n\n      const onConnect = () => {\n        connected = true;\n        log('connection opened %s:%s', cOpts.host, cOpts.port);\n        done(null);\n      };\n\n      const onAbort = () => {\n        log.error('connection aborted %s:%s', cOpts.host, cOpts.port);\n        channel.destroy();\n        done(new AbortError());\n      };\n\n      const done = err => {\n        channel.removeListener('timeout', onTimeout);\n        channel.removeListener('connect', onConnect);\n        options.signal && options.signal.removeEventListener('abort', onAbort);\n        err ? reject(err) : resolve(channel);\n      };\n\n      channel.on('error', onError);\n      channel.once('timeout', onTimeout);\n      channel.once('connect', onConnect);\n      channel.on('close', () => {\n        channel.removeListener('error', onError);\n      });\n      options.signal && options.signal.addEventListener('abort', onAbort);\n      channel.on('signal', signal => {\n        sioClient.emit('ss-handshake', {\n          intentId: intentId,\n          srcMultiaddr: this._signallingAddr.toString(),\n          dstMultiaddr: ma.toString(),\n          signal: signal\n        });\n      }); // NOTE: aegir segfaults if we do .once on the socket.io event emitter and we\n      // are clueless as to why.\n\n      sioClient.on('ws-handshake', offer => {\n        if (offer.intentId === intentId && offer.err) {\n          reject(errcode(offer.err instanceof Error ? offer.err : new Error(offer.err), 'ERR_SIGNALLING_FAILED'));\n        }\n\n        if (offer.intentId !== intentId || !offer.answer || channel.destroyed) {\n          return;\n        }\n\n        channel.signal(offer.signal);\n      });\n    });\n  }\n  /**\n   * Creates a WebrtcStar listener. The provided `handler` function will be called\n   * anytime a new incoming Connection has been successfully upgraded via\n   * `upgrader.upgradeInbound`.\n   * @param {object} [options] simple-peer options for listener\n   * @param {function (Connection)} handler\n   * @returns {Listener} A WebrtcStar listener\n   */\n\n\n  createListener(options = {}, handler) {\n    if (!webrtcSupport.support && !this.wrtc) {\n      throw errcode(new Error('no WebRTC support'), 'ERR_NO_WEBRTC_SUPPORT');\n    }\n\n    if (typeof options === 'function') {\n      handler = options;\n      options = {};\n    }\n\n    handler = handler || noop;\n    return createListener({\n      handler,\n      upgrader: this._upgrader\n    }, this, options);\n  }\n  /**\n   * Takes a list of `Multiaddr`s and returns only valid TCP addresses\n   * @param {Multiaddr[]} multiaddrs\n   * @returns {Multiaddr[]} Valid TCP multiaddrs\n   */\n\n\n  filter(multiaddrs) {\n    multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs];\n    return multiaddrs.filter(ma => {\n      if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n        return false;\n      }\n\n      return mafmt.WebRTCStar.matches(ma);\n    });\n  }\n\n  _peerDiscovered(maStr) {\n    if (!this.discovery._isStarted) return;\n    log('Peer Discovered:', maStr);\n    maStr = cleanMultiaddr(maStr);\n    const ma = multiaddr(maStr);\n    const peerId = PeerId.createFromB58String(ma.getPeerId());\n    const peerInfo = new PeerInfo(peerId);\n    peerInfo.multiaddrs.add(ma);\n    this.discovery.emit('peer', peerInfo);\n  }\n\n}\n\nmodule.exports = withIs(WebRTCStar, {\n  className: 'WebRTCStar',\n  symbolName: '@libp2p/js-libp2p-webrtc-star/webrtcstar'\n});","map":null,"metadata":{},"sourceType":"script"}