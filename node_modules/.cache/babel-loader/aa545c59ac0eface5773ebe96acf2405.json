{"ast":null,"code":"var AbstractLevelDOWN = require('abstract-leveldown').AbstractLevelDOWN;\n\nvar inherits = require('inherits');\n\nvar DeferredIterator = require('./deferred-iterator');\n\nvar deferrables = 'put get del batch clear'.split(' ');\nvar optionalDeferrables = 'approximateSize compactRange'.split(' ');\n\nfunction DeferredLevelDOWN(db) {\n  AbstractLevelDOWN.call(this, db.supports || {}); // TODO (future major): remove this fallback; db must have manifest that\n  // declares approximateSize and compactRange in additionalMethods.\n\n  optionalDeferrables.forEach(function (m) {\n    if (typeof db[m] === 'function' && !this.supports.additionalMethods[m]) {\n      this.supports.additionalMethods[m] = true;\n    }\n  }, this);\n  this._db = db;\n  this._operations = [];\n  closed(this);\n}\n\ninherits(DeferredLevelDOWN, AbstractLevelDOWN);\nDeferredLevelDOWN.prototype.type = 'deferred-leveldown';\n\nDeferredLevelDOWN.prototype._open = function (options, callback) {\n  var self = this;\n\n  this._db.open(options, function (err) {\n    if (err) return callback(err);\n\n    self._operations.forEach(function (op) {\n      if (op.iterator) {\n        op.iterator.setDb(self._db);\n      } else {\n        self._db[op.method].apply(self._db, op.args);\n      }\n    });\n\n    self._operations = [];\n    open(self);\n    callback();\n  });\n};\n\nDeferredLevelDOWN.prototype._close = function (callback) {\n  var self = this;\n\n  this._db.close(function (err) {\n    if (err) return callback(err);\n    closed(self);\n    callback();\n  });\n};\n\nfunction open(self) {\n  deferrables.concat('iterator').forEach(function (m) {\n    self['_' + m] = function () {\n      return this._db[m].apply(this._db, arguments);\n    };\n  });\n  Object.keys(self.supports.additionalMethods).forEach(function (m) {\n    self[m] = function () {\n      return this._db[m].apply(this._db, arguments);\n    };\n  });\n}\n\nfunction closed(self) {\n  deferrables.forEach(function (m) {\n    self['_' + m] = function () {\n      this._operations.push({\n        method: m,\n        args: arguments\n      });\n    };\n  });\n  Object.keys(self.supports.additionalMethods).forEach(function (m) {\n    self[m] = function () {\n      this._operations.push({\n        method: m,\n        args: arguments\n      });\n    };\n  });\n\n  self._iterator = function (options) {\n    var it = new DeferredIterator(self, options);\n\n    this._operations.push({\n      iterator: it\n    });\n\n    return it;\n  };\n}\n\nDeferredLevelDOWN.prototype._serializeKey = function (key) {\n  return key;\n};\n\nDeferredLevelDOWN.prototype._serializeValue = function (value) {\n  return value;\n};\n\nmodule.exports = DeferredLevelDOWN;\nmodule.exports.DeferredIterator = DeferredIterator;","map":null,"metadata":{},"sourceType":"script"}