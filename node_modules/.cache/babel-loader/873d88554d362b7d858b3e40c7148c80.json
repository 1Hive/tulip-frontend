{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar errCode = require('err-code');\n\nvar pAny = require('p-any');\n\nmodule.exports = function (node) {\n  var routers = node._modules.peerRouting || []; // If we have the dht, make it first\n\n  if (node._dht) {\n    routers.unshift(node._dht);\n  }\n\n  return {\n    /**\n     * Iterates over all peer routers in series to find the given peer.\n     *\n     * @param {String} id The id of the peer to find\n     * @param {object} [options]\n     * @param {number} [options.timeout] How long the query should run\n     * @returns {Promise<PeerInfo>}\n     */\n    findPeer: function () {\n      var _findPeer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id, options) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (routers.length) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw errCode(new Error('No peer routers available'), 'NO_ROUTERS_AVAILABLE');\n\n              case 2:\n                return _context2.abrupt(\"return\", pAny(routers.map( /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(router) {\n                    var result;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return router.findPeer(id, options);\n\n                          case 2:\n                            result = _context.sent;\n\n                            if (!(!result || Object.keys(result).length === 0)) {\n                              _context.next = 5;\n                              break;\n                            }\n\n                            throw errCode(new Error('not found'), 'NOT_FOUND');\n\n                          case 5:\n                            return _context.abrupt(\"return\", result);\n\n                          case 6:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x3) {\n                    return _ref.apply(this, arguments);\n                  };\n                }())));\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function findPeer(_x, _x2) {\n        return _findPeer.apply(this, arguments);\n      }\n\n      return findPeer;\n    }()\n  };\n};","map":null,"metadata":{},"sourceType":"script"}