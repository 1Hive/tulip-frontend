{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar errcode = require('err-code');\n\nvar pTimeout = require('p-timeout');\n\nvar libp2pRecord = require('libp2p-record');\n\nvar c = require('../constants');\n\nvar Query = require('../query');\n\nvar utils = require('../utils');\n\nvar Record = libp2pRecord.Record;\n\nmodule.exports = function (dht) {\n  var putLocal = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key, rec) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", dht.datastore.put(utils.bufferToKey(key), rec));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function putLocal(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  /**\n   * Attempt to retrieve the value for the given key from\n   * the local datastore.\n   *\n   * @param {Buffer} key\n   * @returns {Promise<Record>}\n   *\n   * @private\n   */\n\n\n  var getLocal = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(key) {\n      var raw, rec;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dht._log('getLocal %b', key);\n\n              _context2.next = 3;\n              return dht.datastore.get(utils.bufferToKey(key));\n\n            case 3:\n              raw = _context2.sent;\n\n              dht._log('found %b in local datastore', key);\n\n              rec = Record.deserialize(raw);\n              _context2.next = 8;\n              return dht._verifyRecordLocally(rec);\n\n            case 8:\n              return _context2.abrupt(\"return\", rec);\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function getLocal(_x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /**\n   * Send the best record found to any peers that have an out of date record.\n   *\n   * @param {Buffer} key\n   * @param {Array<Object>} vals - values retrieved from the DHT\n   * @param {Object} best - the best record that was found\n   * @returns {Promise}\n   *\n   * @private\n   */\n\n\n  var sendCorrectionRecord = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(key, vals, best) {\n      var fixupRec;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return utils.createPutRecord(key, best);\n\n            case 2:\n              fixupRec = _context4.sent;\n              return _context4.abrupt(\"return\", Promise.all(vals.map( /*#__PURE__*/function () {\n                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(v) {\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          if (!v.val.equals(best)) {\n                            _context3.next = 2;\n                            break;\n                          }\n\n                          return _context3.abrupt(\"return\");\n\n                        case 2:\n                          if (!dht._isSelf(v.from)) {\n                            _context3.next = 12;\n                            break;\n                          }\n\n                          _context3.prev = 3;\n                          _context3.next = 6;\n                          return dht._putLocal(key, fixupRec);\n\n                        case 6:\n                          _context3.next = 11;\n                          break;\n\n                        case 8:\n                          _context3.prev = 8;\n                          _context3.t0 = _context3[\"catch\"](3);\n\n                          dht._log.error('Failed error correcting self', _context3.t0);\n\n                        case 11:\n                          return _context3.abrupt(\"return\");\n\n                        case 12:\n                          _context3.prev = 12;\n                          _context3.next = 15;\n                          return dht._putValueToPeer(key, fixupRec, v.from);\n\n                        case 15:\n                          _context3.next = 20;\n                          break;\n\n                        case 17:\n                          _context3.prev = 17;\n                          _context3.t1 = _context3[\"catch\"](12);\n\n                          dht._log.error('Failed error correcting entry', _context3.t1);\n\n                        case 20:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3, null, [[3, 8], [12, 17]]);\n                }));\n\n                return function (_x7) {\n                  return _ref4.apply(this, arguments);\n                };\n              }())));\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function sendCorrectionRecord(_x4, _x5, _x6) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return {\n    /**\n     * Store the given key/value pair locally, in the datastore.\n     * @param {Buffer} key\n     * @param {Buffer} rec - encoded record\n     * @returns {Promise<void>}\n     * @private\n     */\n    _putLocal: function _putLocal(key, rec) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", putLocal(key, rec));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }))();\n    },\n\n    /**\n     * Store the given key/value  pair in the DHT.\n     *\n     * @param {Buffer} key\n     * @param {Buffer} value\n     * @param {Object} [options] - put options\n     * @param {number} [options.minPeers] - minimum number of peers required to successfully put (default: closestPeers.length)\n     * @returns {Promise<void>}\n     */\n    put: function put(key, value) {\n      var _arguments = arguments;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var options, record, counterAll, counterSuccess, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, peer, minPeers, error;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                options = _arguments.length > 2 && _arguments[2] !== undefined ? _arguments[2] : {};\n\n                dht._log('PutValue %b', key); // create record in the dht format\n\n\n                _context6.next = 4;\n                return utils.createPutRecord(key, value);\n\n              case 4:\n                record = _context6.sent;\n                _context6.next = 7;\n                return putLocal(key, record);\n\n              case 7:\n                // put record to the closest peers\n                counterAll = 0;\n                counterSuccess = 0;\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context6.prev = 11;\n                _iterator = _asyncIterator(dht.getClosestPeers(key, {\n                  shallow: true\n                }));\n\n              case 13:\n                _context6.next = 15;\n                return _iterator.next();\n\n              case 15:\n                _step = _context6.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context6.next = 19;\n                return _step.value;\n\n              case 19:\n                _value = _context6.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context6.next = 35;\n                  break;\n                }\n\n                peer = _value;\n                _context6.prev = 22;\n                counterAll += 1;\n                _context6.next = 26;\n                return dht._putValueToPeer(key, record, peer);\n\n              case 26:\n                counterSuccess += 1;\n                _context6.next = 32;\n                break;\n\n              case 29:\n                _context6.prev = 29;\n                _context6.t0 = _context6[\"catch\"](22);\n\n                dht._log.error('Failed to put to peer (%b): %s', peer.id, _context6.t0);\n\n              case 32:\n                _iteratorNormalCompletion = true;\n                _context6.next = 13;\n                break;\n\n              case 35:\n                _context6.next = 41;\n                break;\n\n              case 37:\n                _context6.prev = 37;\n                _context6.t1 = _context6[\"catch\"](11);\n                _didIteratorError = true;\n                _iteratorError = _context6.t1;\n\n              case 41:\n                _context6.prev = 41;\n                _context6.prev = 42;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context6.next = 46;\n                  break;\n                }\n\n                _context6.next = 46;\n                return _iterator.return();\n\n              case 46:\n                _context6.prev = 46;\n\n                if (!_didIteratorError) {\n                  _context6.next = 49;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 49:\n                return _context6.finish(46);\n\n              case 50:\n                return _context6.finish(41);\n\n              case 51:\n                // verify if we were able to put to enough peers\n                minPeers = options.minPeers || counterAll; // Ensure we have a default `minPeers`\n\n                if (!(minPeers > counterSuccess)) {\n                  _context6.next = 56;\n                  break;\n                }\n\n                error = errcode(new Error(\"Failed to put value to enough peers: \".concat(counterSuccess, \"/\").concat(minPeers)), 'ERR_NOT_ENOUGH_PUT_PEERS');\n\n                dht._log.error(error);\n\n                throw error;\n\n              case 56:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, null, [[11, 37, 41, 51], [22, 29], [42,, 46, 50]]);\n      }))();\n    },\n\n    /**\n     * Get the value to the given key.\n     * Times out after 1 minute by default.\n     *\n     * @param {Buffer} key\n     * @param {Object} [options] - get options\n     * @param {number} [options.timeout] - optional timeout (default: 60000)\n     * @returns {Promise<Buffer>}\n     */\n    get: function get(key) {\n      var _arguments2 = arguments;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var options, vals, recs, i, best;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                options = _arguments2.length > 1 && _arguments2[1] !== undefined ? _arguments2[1] : {};\n                options.timeout = options.timeout || c.minute;\n\n                dht._log('_get %b', key);\n\n                _context7.next = 5;\n                return dht.getMany(key, c.GET_MANY_RECORD_COUNT, options);\n\n              case 5:\n                vals = _context7.sent;\n                recs = vals.map(function (v) {\n                  return v.val;\n                });\n                i = 0;\n                _context7.prev = 8;\n                i = libp2pRecord.selection.bestRecord(dht.selectors, key, recs);\n                _context7.next = 16;\n                break;\n\n              case 12:\n                _context7.prev = 12;\n                _context7.t0 = _context7[\"catch\"](8);\n\n                if (!(_context7.t0.code !== 'ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY')) {\n                  _context7.next = 16;\n                  break;\n                }\n\n                throw _context7.t0;\n\n              case 16:\n                best = recs[i];\n\n                dht._log('GetValue %b %s', key, best);\n\n                if (best) {\n                  _context7.next = 20;\n                  break;\n                }\n\n                throw errcode(new Error('best value was not found'), 'ERR_NOT_FOUND');\n\n              case 20:\n                _context7.next = 22;\n                return sendCorrectionRecord(key, vals, best);\n\n              case 22:\n                return _context7.abrupt(\"return\", best);\n\n              case 23:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, null, [[8, 12]]);\n      }))();\n    },\n\n    /**\n     * Get the `n` values to the given key without sorting.\n     *\n     * @param {Buffer} key\n     * @param {number} nvals\n     * @param {Object} [options] - get options\n     * @param {number} [options.timeout] - optional timeout (default: 60000)\n     * @returns {Promise<Array<{from: PeerId, val: Buffer}>>}\n     */\n    getMany: function getMany(key, nvals) {\n      var _arguments3 = arguments,\n          _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var options, vals, localRec, paths, id, rtp, errMsg, query, error;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                options = _arguments3.length > 2 && _arguments3[2] !== undefined ? _arguments3[2] : {};\n                options.timeout = options.timeout || c.minute;\n\n                dht._log('getMany %b (%s)', key, nvals);\n\n                vals = [];\n                _context9.prev = 4;\n                _context9.next = 7;\n                return getLocal(key);\n\n              case 7:\n                localRec = _context9.sent;\n                _context9.next = 14;\n                break;\n\n              case 10:\n                _context9.prev = 10;\n                _context9.t0 = _context9[\"catch\"](4);\n\n                if (!(nvals === 0)) {\n                  _context9.next = 14;\n                  break;\n                }\n\n                throw _context9.t0;\n\n              case 14:\n                if (localRec) {\n                  vals.push({\n                    val: localRec.value,\n                    from: dht.peerInfo.id\n                  });\n                }\n\n                if (!(vals.length >= nvals)) {\n                  _context9.next = 17;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\", vals);\n\n              case 17:\n                paths = [];\n                _context9.next = 20;\n                return utils.convertBuffer(key);\n\n              case 20:\n                id = _context9.sent;\n                rtp = dht.routingTable.closestPeers(id, _this.kBucketSize);\n\n                dht._log('peers in rt: %d', rtp.length);\n\n                if (!(rtp.length === 0)) {\n                  _context9.next = 29;\n                  break;\n                }\n\n                errMsg = 'Failed to lookup key! No peers from routing table!';\n\n                dht._log.error(errMsg);\n\n                if (!(vals.length === 0)) {\n                  _context9.next = 28;\n                  break;\n                }\n\n                throw errcode(new Error(errMsg), 'ERR_NO_PEERS_IN_ROUTING_TABLE');\n\n              case 28:\n                return _context9.abrupt(\"return\", vals);\n\n              case 29:\n                // we have peers, lets do the actual query to them\n                query = new Query(dht, key, function (pathIndex, numPaths) {\n                  // This function body runs once per disjoint path\n                  var pathSize = utils.pathSize(nvals - vals.length, numPaths);\n                  var pathVals = [];\n                  paths.push(pathVals); // Here we return the query function to use on this particular disjoint path\n\n                  return /*#__PURE__*/function () {\n                    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(peer) {\n                      var rec, peers, lookupErr, results, res;\n                      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n                        while (1) {\n                          switch (_context8.prev = _context8.next) {\n                            case 0:\n                              _context8.prev = 0;\n                              _context8.next = 3;\n                              return dht._getValueOrPeers(peer, key);\n\n                            case 3:\n                              results = _context8.sent;\n                              rec = results.record;\n                              peers = results.peers;\n                              _context8.next = 13;\n                              break;\n\n                            case 8:\n                              _context8.prev = 8;\n                              _context8.t0 = _context8[\"catch\"](0);\n\n                              if (!(_context8.t0.code !== 'ERR_INVALID_RECORD')) {\n                                _context8.next = 12;\n                                break;\n                              }\n\n                              throw _context8.t0;\n\n                            case 12:\n                              lookupErr = _context8.t0;\n\n                            case 13:\n                              res = {\n                                closerPeers: peers\n                              };\n\n                              if (rec && rec.value || lookupErr) {\n                                pathVals.push({\n                                  val: rec && rec.value,\n                                  from: peer\n                                });\n                              } // enough is enough\n\n\n                              if (pathVals.length >= pathSize) {\n                                res.pathComplete = true;\n                              }\n\n                              return _context8.abrupt(\"return\", res);\n\n                            case 17:\n                            case \"end\":\n                              return _context8.stop();\n                          }\n                        }\n                      }, _callee8, null, [[0, 8]]);\n                    }));\n\n                    return function (_x8) {\n                      return _ref5.apply(this, arguments);\n                    };\n                  }();\n                });\n                _context9.prev = 30;\n                _context9.next = 33;\n                return pTimeout(query.run(rtp), options.timeout);\n\n              case 33:\n                _context9.next = 38;\n                break;\n\n              case 35:\n                _context9.prev = 35;\n                _context9.t1 = _context9[\"catch\"](30);\n                error = _context9.t1;\n\n              case 38:\n                query.stop(); // combine vals from each path\n\n                vals = [].concat.apply(vals, paths).slice(0, nvals);\n\n                if (!(error && vals.length === 0)) {\n                  _context9.next = 42;\n                  break;\n                }\n\n                throw error;\n\n              case 42:\n                return _context9.abrupt(\"return\", vals);\n\n              case 43:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, null, [[4, 10], [30, 35]]);\n      }))();\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}