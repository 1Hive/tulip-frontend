{"ast":null,"code":"import merge from 'lodash/merge';\nimport { getContract } from 'utils/web3';\nimport pancakeProfileAbi from 'config/abi/pancakeProfile.json';\nimport teamsList from 'config/constants/teams';\nimport { getPancakeProfileAddress } from 'utils/addressHelpers';\nimport makeBatchRequest from 'utils/makeBatchRequest';\nconst profileContract = getContract(pancakeProfileAbi, getPancakeProfileAddress());\nexport const getTeam = async teamId => {\n  try {\n    const {\n      0: teamName,\n      2: numberUsers,\n      3: numberPoints,\n      4: isJoinable\n    } = await profileContract.methods.getTeamProfile(teamId).call();\n    const staticTeamInfo = teamsList.find(staticTeam => staticTeam.id === teamId);\n    return merge({}, staticTeamInfo, {\n      isJoinable,\n      name: teamName,\n      users: numberUsers,\n      points: numberPoints\n    });\n  } catch (error) {\n    return null;\n  }\n};\n/**\n * Gets on-chain data and merges it with the existing static list of teams\n */\n\nexport const getTeams = async () => {\n  try {\n    const teamsById = teamsList.reduce((accum, team) => {\n      return { ...accum,\n        [team.id]: team\n      };\n    }, {});\n    const nbTeams = await profileContract.methods.numberTeams().call();\n    const calls = [];\n\n    for (let i = 1; i <= nbTeams; i++) {\n      calls.push(profileContract.methods.getTeamProfile(i).call);\n    }\n\n    const teamData = await makeBatchRequest(calls);\n    const onChainTeamData = teamData.reduce((accum, team, index) => {\n      const {\n        0: teamName,\n        2: numberUsers,\n        3: numberPoints,\n        4: isJoinable\n      } = team;\n      return { ...accum,\n        [index + 1]: {\n          name: teamName,\n          users: Number(numberUsers),\n          points: Number(numberPoints),\n          isJoinable\n        }\n      };\n    }, {});\n    return merge({}, teamsById, onChainTeamData);\n  } catch (error) {\n    return null;\n  }\n};","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/state/teams/helpers.ts"],"names":["merge","getContract","pancakeProfileAbi","teamsList","getPancakeProfileAddress","makeBatchRequest","profileContract","getTeam","teamId","teamName","numberUsers","numberPoints","isJoinable","methods","getTeamProfile","call","staticTeamInfo","find","staticTeam","id","name","users","points","error","getTeams","teamsById","reduce","accum","team","nbTeams","numberTeams","calls","i","push","teamData","onChainTeamData","index","Number"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,cAAlB;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAASC,wBAAT,QAAyC,sBAAzC;AAEA,OAAOC,gBAAP,MAA6B,wBAA7B;AAGA,MAAMC,eAAe,GAAGL,WAAW,CAACC,iBAAD,EAAoBE,wBAAwB,EAA5C,CAAnC;AAEA,OAAO,MAAMG,OAAO,GAAG,MAAOC,MAAP,IAAyC;AAC9D,MAAI;AACF,UAAM;AACJ,SAAGC,QADC;AAEJ,SAAGC,WAFC;AAGJ,SAAGC,YAHC;AAIJ,SAAGC;AAJC,QAKF,MAAMN,eAAe,CAACO,OAAhB,CAAwBC,cAAxB,CAAuCN,MAAvC,EAA+CO,IAA/C,EALV;AAMA,UAAMC,cAAc,GAAGb,SAAS,CAACc,IAAV,CAAgBC,UAAD,IAAgBA,UAAU,CAACC,EAAX,KAAkBX,MAAjD,CAAvB;AAEA,WAAOR,KAAK,CAAC,EAAD,EAAKgB,cAAL,EAAqB;AAC/BJ,MAAAA,UAD+B;AAE/BQ,MAAAA,IAAI,EAAEX,QAFyB;AAG/BY,MAAAA,KAAK,EAAEX,WAHwB;AAI/BY,MAAAA,MAAM,EAAEX;AAJuB,KAArB,CAAZ;AAMD,GAfD,CAeE,OAAOY,KAAP,EAAc;AACd,WAAO,IAAP;AACD;AACF,CAnBM;AAqBP;AACA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAG,YAAgC;AACtD,MAAI;AACF,UAAMC,SAAS,GAAGtB,SAAS,CAACuB,MAAV,CAAiB,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAClD,aAAO,EACL,GAAGD,KADE;AAEL,SAACC,IAAI,CAACT,EAAN,GAAWS;AAFN,OAAP;AAID,KALiB,EAKf,EALe,CAAlB;AAMA,UAAMC,OAAO,GAAG,MAAMvB,eAAe,CAACO,OAAhB,CAAwBiB,WAAxB,GAAsCf,IAAtC,EAAtB;AACA,UAAMgB,KAAK,GAAG,EAAd;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIH,OAArB,EAA8BG,CAAC,EAA/B,EAAmC;AACjCD,MAAAA,KAAK,CAACE,IAAN,CAAW3B,eAAe,CAACO,OAAhB,CAAwBC,cAAxB,CAAuCkB,CAAvC,EAA0CjB,IAArD;AACD;;AAED,UAAMmB,QAAQ,GAAI,MAAM7B,gBAAgB,CAAC0B,KAAD,CAAxC;AACA,UAAMI,eAAe,GAAGD,QAAQ,CAACR,MAAT,CAAgB,CAACC,KAAD,EAAQC,IAAR,EAAcQ,KAAd,KAAwB;AAC9D,YAAM;AAAE,WAAG3B,QAAL;AAAe,WAAGC,WAAlB;AAA+B,WAAGC,YAAlC;AAAgD,WAAGC;AAAnD,UAAkEgB,IAAxE;AAEA,aAAO,EACL,GAAGD,KADE;AAEL,SAACS,KAAK,GAAG,CAAT,GAAa;AACXhB,UAAAA,IAAI,EAAEX,QADK;AAEXY,UAAAA,KAAK,EAAEgB,MAAM,CAAC3B,WAAD,CAFF;AAGXY,UAAAA,MAAM,EAAEe,MAAM,CAAC1B,YAAD,CAHH;AAIXC,UAAAA;AAJW;AAFR,OAAP;AASD,KAZuB,EAYrB,EAZqB,CAAxB;AAcA,WAAOZ,KAAK,CAAC,EAAD,EAAKyB,SAAL,EAAgBU,eAAhB,CAAZ;AACD,GA9BD,CA8BE,OAAOZ,KAAP,EAAc;AACd,WAAO,IAAP;AACD;AACF,CAlCM","sourcesContent":["import merge from 'lodash/merge'\nimport { getContract } from 'utils/web3'\nimport pancakeProfileAbi from 'config/abi/pancakeProfile.json'\nimport teamsList from 'config/constants/teams'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport { Team } from 'config/constants/types'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { TeamsById, TeamResponse } from 'state/types'\n\nconst profileContract = getContract(pancakeProfileAbi, getPancakeProfileAddress())\n\nexport const getTeam = async (teamId: number): Promise<Team> => {\n  try {\n    const {\n      0: teamName,\n      2: numberUsers,\n      3: numberPoints,\n      4: isJoinable,\n    } = await profileContract.methods.getTeamProfile(teamId).call()\n    const staticTeamInfo = teamsList.find((staticTeam) => staticTeam.id === teamId)\n\n    return merge({}, staticTeamInfo, {\n      isJoinable,\n      name: teamName,\n      users: numberUsers,\n      points: numberPoints,\n    })\n  } catch (error) {\n    return null\n  }\n}\n\n/**\n * Gets on-chain data and merges it with the existing static list of teams\n */\nexport const getTeams = async (): Promise<TeamsById> => {\n  try {\n    const teamsById = teamsList.reduce((accum, team) => {\n      return {\n        ...accum,\n        [team.id]: team,\n      }\n    }, {})\n    const nbTeams = await profileContract.methods.numberTeams().call()\n    const calls = []\n\n    for (let i = 1; i <= nbTeams; i++) {\n      calls.push(profileContract.methods.getTeamProfile(i).call)\n    }\n\n    const teamData = (await makeBatchRequest(calls)) as TeamResponse[]\n    const onChainTeamData = teamData.reduce((accum, team, index) => {\n      const { 0: teamName, 2: numberUsers, 3: numberPoints, 4: isJoinable } = team\n\n      return {\n        ...accum,\n        [index + 1]: {\n          name: teamName,\n          users: Number(numberUsers),\n          points: Number(numberPoints),\n          isJoinable,\n        },\n      }\n    }, {})\n\n    return merge({}, teamsById, onChainTeamData)\n  } catch (error) {\n    return null\n  }\n}\n"]},"metadata":{},"sourceType":"module"}