{"ast":null,"code":"import _regeneratorRuntime from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { IK } from \"./handshakes/ik\";\nimport { Buffer } from \"buffer\";\nimport { decode0, decode1, encode0, encode1 } from \"./encoder\";\nimport { decodePayload, getPeerIdFromPayload, verifySignedPayload } from \"./utils\";\nimport { FailedIKError } from \"./errors\";\nimport { logger, logLocalStaticKeys, logRemoteStaticKey, logLocalEphemeralKeys, logRemoteEphemeralKey, logCipherState } from \"./logger\";\nexport var IKHandshake = /*#__PURE__*/function () {\n  function IKHandshake(isInitiator, payload, prologue, staticKeypair, connection, remoteStaticKey, remotePeer, handshake) {\n    _classCallCheck(this, IKHandshake);\n\n    _defineProperty(this, \"isInitiator\", void 0);\n\n    _defineProperty(this, \"session\", void 0);\n\n    _defineProperty(this, \"remotePeer\", void 0);\n\n    _defineProperty(this, \"remoteEarlyData\", void 0);\n\n    _defineProperty(this, \"payload\", void 0);\n\n    _defineProperty(this, \"prologue\", void 0);\n\n    _defineProperty(this, \"staticKeypair\", void 0);\n\n    _defineProperty(this, \"connection\", void 0);\n\n    _defineProperty(this, \"ik\", void 0);\n\n    this.isInitiator = isInitiator;\n    this.payload = Buffer.from(payload);\n    this.prologue = prologue;\n    this.staticKeypair = staticKeypair;\n    this.connection = connection;\n\n    if (remotePeer) {\n      this.remotePeer = remotePeer;\n    }\n\n    this.ik = handshake || new IK();\n    this.session = this.ik.initSession(this.isInitiator, this.prologue, this.staticKeypair, remoteStaticKey);\n    this.remoteEarlyData = Buffer.alloc(0);\n  }\n\n  _createClass(IKHandshake, [{\n    key: \"stage0\",\n    value: function () {\n      var _stage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var messageBuffer, receivedMsg, receivedMessageBuffer, _this$ik$recvMessage, plaintext, valid, decodedPayload;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                logLocalStaticKeys(this.session.hs.s);\n                logRemoteStaticKey(this.session.hs.rs);\n\n                if (!this.isInitiator) {\n                  _context.next = 10;\n                  break;\n                }\n\n                logger(\"IK Stage 0 - Initiator sending message...\");\n                messageBuffer = this.ik.sendMessage(this.session, this.payload);\n                this.connection.writeLP(encode1(messageBuffer));\n                logger(\"IK Stage 0 - Initiator sent message.\");\n                logLocalEphemeralKeys(this.session.hs.e);\n                _context.next = 40;\n                break;\n\n              case 10:\n                logger(\"IK Stage 0 - Responder receiving message...\");\n                _context.next = 13;\n                return this.connection.readLP();\n\n              case 13:\n                receivedMsg = _context.sent;\n                _context.prev = 14;\n                receivedMessageBuffer = decode1(receivedMsg.slice());\n                _this$ik$recvMessage = this.ik.recvMessage(this.session, receivedMessageBuffer), plaintext = _this$ik$recvMessage.plaintext, valid = _this$ik$recvMessage.valid;\n\n                if (valid) {\n                  _context.next = 19;\n                  break;\n                }\n\n                throw new Error(\"ik handshake stage 0 decryption validation fail\");\n\n              case 19:\n                logger(\"IK Stage 0 - Responder got message, going to verify payload.\");\n                _context.next = 22;\n                return decodePayload(plaintext);\n\n              case 22:\n                decodedPayload = _context.sent;\n                _context.t0 = this.remotePeer;\n\n                if (_context.t0) {\n                  _context.next = 28;\n                  break;\n                }\n\n                _context.next = 27;\n                return getPeerIdFromPayload(decodedPayload);\n\n              case 27:\n                _context.t0 = _context.sent;\n\n              case 28:\n                this.remotePeer = _context.t0;\n                _context.next = 31;\n                return verifySignedPayload(this.session.hs.rs, decodedPayload, this.remotePeer);\n\n              case 31:\n                this.setRemoteEarlyData(decodedPayload.data);\n                logger(\"IK Stage 0 - Responder successfully verified payload!\");\n                logRemoteEphemeralKey(this.session.hs.re);\n                _context.next = 40;\n                break;\n\n              case 36:\n                _context.prev = 36;\n                _context.t1 = _context[\"catch\"](14);\n                logger(\"Responder breaking up with IK handshake in stage 0.\");\n                throw new FailedIKError(receivedMsg, \"Error occurred while verifying initiator's signed payload: \".concat(_context.t1.message));\n\n              case 40:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[14, 36]]);\n      }));\n\n      function stage0() {\n        return _stage.apply(this, arguments);\n      }\n\n      return stage0;\n    }()\n  }, {\n    key: \"stage1\",\n    value: function () {\n      var _stage2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var receivedMsg, receivedMessageBuffer, _this$ik$recvMessage2, plaintext, valid, decodedPayload, messageBuffer;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this.isInitiator) {\n                  _context2.next = 33;\n                  break;\n                }\n\n                logger(\"IK Stage 1 - Initiator receiving message...\");\n                _context2.next = 4;\n                return this.connection.readLP();\n\n              case 4:\n                receivedMsg = _context2.sent.slice();\n                receivedMessageBuffer = decode0(Buffer.from(receivedMsg));\n                _this$ik$recvMessage2 = this.ik.recvMessage(this.session, receivedMessageBuffer), plaintext = _this$ik$recvMessage2.plaintext, valid = _this$ik$recvMessage2.valid;\n                logger(\"IK Stage 1 - Initiator got message, going to verify payload.\");\n                _context2.prev = 8;\n\n                if (valid) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                throw new Error(\"ik stage 1 decryption validation fail\");\n\n              case 11:\n                _context2.next = 13;\n                return decodePayload(plaintext);\n\n              case 13:\n                decodedPayload = _context2.sent;\n                _context2.t0 = this.remotePeer;\n\n                if (_context2.t0) {\n                  _context2.next = 19;\n                  break;\n                }\n\n                _context2.next = 18;\n                return getPeerIdFromPayload(decodedPayload);\n\n              case 18:\n                _context2.t0 = _context2.sent;\n\n              case 19:\n                this.remotePeer = _context2.t0;\n                _context2.next = 22;\n                return verifySignedPayload(receivedMessageBuffer.ns.slice(0, 32), decodedPayload, this.remotePeer);\n\n              case 22:\n                this.setRemoteEarlyData(decodedPayload.data);\n                logger(\"IK Stage 1 - Initiator successfully verified payload!\");\n                logRemoteEphemeralKey(this.session.hs.re);\n                _context2.next = 31;\n                break;\n\n              case 27:\n                _context2.prev = 27;\n                _context2.t1 = _context2[\"catch\"](8);\n                logger(\"Initiator breaking up with IK handshake in stage 1.\");\n                throw new FailedIKError(receivedMsg, \"Error occurred while verifying responder's signed payload: \".concat(_context2.t1.message));\n\n              case 31:\n                _context2.next = 38;\n                break;\n\n              case 33:\n                logger(\"IK Stage 1 - Responder sending message...\");\n                messageBuffer = this.ik.sendMessage(this.session, this.payload);\n                this.connection.writeLP(encode0(messageBuffer));\n                logger(\"IK Stage 1 - Responder sent message...\");\n                logLocalEphemeralKeys(this.session.hs.e);\n\n              case 38:\n                logCipherState(this.session);\n\n              case 39:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[8, 27]]);\n      }));\n\n      function stage1() {\n        return _stage2.apply(this, arguments);\n      }\n\n      return stage1;\n    }()\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(ciphertext, session) {\n      var cs = this.getCS(session, false);\n      return this.ik.decryptWithAd(cs, Buffer.alloc(0), ciphertext);\n    }\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(plaintext, session) {\n      var cs = this.getCS(session);\n      return this.ik.encryptWithAd(cs, Buffer.alloc(0), plaintext);\n    }\n  }, {\n    key: \"getLocalEphemeralKeys\",\n    value: function getLocalEphemeralKeys() {\n      if (!this.session.hs.e) {\n        throw new Error(\"Ephemeral keys do not exist.\");\n      }\n\n      return this.session.hs.e;\n    }\n  }, {\n    key: \"getCS\",\n    value: function getCS(session) {\n      var encryption = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (!session.cs1 || !session.cs2) {\n        throw new Error(\"Handshake not completed properly, cipher state does not exist.\");\n      }\n\n      if (this.isInitiator) {\n        return encryption ? session.cs1 : session.cs2;\n      } else {\n        return encryption ? session.cs2 : session.cs1;\n      }\n    }\n  }, {\n    key: \"setRemoteEarlyData\",\n    value: function setRemoteEarlyData(data) {\n      if (data) {\n        this.remoteEarlyData = Buffer.from(data.buffer, data.byteOffset, data.length);\n      }\n    }\n  }]);\n\n  return IKHandshake;\n}();","map":null,"metadata":{},"sourceType":"module"}