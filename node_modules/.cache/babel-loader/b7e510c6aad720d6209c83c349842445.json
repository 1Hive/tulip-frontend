{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar Message = require('../../message');\n\nvar utils = require('../../utils');\n\nmodule.exports = function (dht) {\n  var log = utils.logger(dht.peerInfo.id, 'rpc:find-node');\n  /**\n   * Process `FindNode` DHT messages.\n   *\n   * @param {PeerInfo} peer\n   * @param {Message} msg\n   * @returns {Promise<Message>}\n   */\n\n  return /*#__PURE__*/function () {\n    var _findNode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peer, msg) {\n      var closer, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              log('start');\n\n              if (!msg.key.equals(dht.peerInfo.id.id)) {\n                _context.next = 5;\n                break;\n              }\n\n              closer = [dht.peerInfo];\n              _context.next = 8;\n              break;\n\n            case 5:\n              _context.next = 7;\n              return dht._betterPeersToQuery(msg, peer);\n\n            case 7:\n              closer = _context.sent;\n\n            case 8:\n              response = new Message(msg.type, Buffer.alloc(0), msg.clusterLevel);\n\n              if (closer.length > 0) {\n                response.closerPeers = closer;\n              } else {\n                log('handle FindNode %s: could not find anything', peer.id.toB58String());\n              }\n\n              return _context.abrupt(\"return\", response);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function findNode(_x, _x2) {\n      return _findNode.apply(this, arguments);\n    }\n\n    return findNode;\n  }();\n};","map":null,"metadata":{},"sourceType":"script"}