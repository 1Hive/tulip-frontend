{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _postmsgRpc = require(\"postmsg-rpc\");\n\nvar callbackOrThrow = function callbackOrThrow(callback, errMsg) {\n  if (callback) {\n    callback(errMsg);\n  } else {\n    throw errMsg instanceof Error ? errMsg : new Error(errMsg);\n  }\n};\n/**\n *  A 3ID provider proxy, 3ID provider interface that acts as rpc client, to\n *  relay request to iframe (rpc server)\n */\n\n\nvar ThreeIdProviderProxy = /*#__PURE__*/function () {\n  function ThreeIdProviderProxy(postMessage) {\n    (0, _classCallCheck2[\"default\"])(this, ThreeIdProviderProxy);\n    this.postMessage = postMessage;\n    this.is3idProvider = true;\n    this.threeIdConnect = true;\n    this.migration = true;\n    this.sendRPC = (0, _postmsgRpc.caller)('send', {\n      postMessage: this.postMessage\n    });\n  }\n\n  (0, _createClass2[\"default\"])(ThreeIdProviderProxy, [{\n    key: \"send\",\n    value: function () {\n      var _send = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(req, origin, callback) {\n        var res;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (typeof origin === 'function') {\n                  callback = origin;\n                  origin = null;\n                } // Catches rpc errors, method errors are relayed in response for client to handle\n\n\n                _context.prev = 1;\n                _context.t0 = JSON;\n                _context.next = 5;\n                return this.sendRPC(req);\n\n              case 5:\n                _context.t1 = _context.sent;\n                res = _context.t0.parse.call(_context.t0, _context.t1);\n                if (callback) callback(undefined, res);\n                return _context.abrupt(\"return\", res);\n\n              case 11:\n                _context.prev = 11;\n                _context.t2 = _context[\"catch\"](1);\n                callbackOrThrow(callback, _context.t2);\n                return _context.abrupt(\"return\");\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 11]]);\n      }));\n\n      function send(_x, _x2, _x3) {\n        return _send.apply(this, arguments);\n      }\n\n      return send;\n    }()\n  }]);\n  return ThreeIdProviderProxy;\n}();\n\nvar _default = ThreeIdProviderProxy;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}