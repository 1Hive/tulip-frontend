{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar slicedToArray = require('./slicedToArray-a8a77f0e.js');\n\nrequire('./unsupportedIterableToArray-f175acfa.js');\n\nrequire('./_commonjsHelpers-1b94f6bc.js');\n\nvar dayjs_min = require('./dayjs.min-ac79806e.js');\n\nvar UNITS = [['years', 'year'], ['months', 'month'], ['days', 'day'], ['hours', 'hour'], ['minutes', 'minute'], ['seconds', 'second']];\nvar DEFAULT_UNITS = ['years', 'months', 'days', 'hours', 'minutes', 'seconds']; // Return the difference between two dates, per unit.\n// Set `units` to get specific units only, e.g. ['minutes', 'seconds']\n// If `units` is not set, all the units are enabled.\n\nvar difference = function difference(date1, date2) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var units = options.units || DEFAULT_UNITS;\n  var maxUnits = options.maxUnits || -1;\n  var keepLeadingZeros = maxUnits === -1 && options.keepLeadingZeros || false;\n  var start = date2 > date1 ? date1 : date2;\n\n  var getRightMostUnitIndex = function getRightMostUnitIndex() {\n    return [].concat(UNITS).reverse().find(function (_ref) {\n      var _ref2 = slicedToArray.slicedToArray(_ref, 1),\n          unit = _ref2[0];\n\n      return units.includes(unit);\n    })[0];\n  };\n\n  return UNITS.reduce(function (result, _ref3, index) {\n    var _ref4 = slicedToArray.slicedToArray(_ref3, 2),\n        name = _ref4[0],\n        unitName = _ref4[1];\n\n    result[name] = null; // fill the current unit, subtract the difference from the remaining\n\n    if ((maxUnits === -1 || result.remainingUnits > 0) && units.includes(name)) {\n      result[name] = result.remaining.diff(start, unitName);\n      result.remaining = result.remaining.subtract(result[name], unitName);\n    } // remove leading zeros\n\n\n    if (!keepLeadingZeros && !result.seenNonZero) {\n      if (result[name] === 0) {\n        result[name] = null;\n      } else {\n        result.seenNonZero = true;\n      }\n    } // enforce the maxUnits option\n\n\n    if (result.remainingUnits > 0 && result.seenNonZero) {\n      result.remainingUnits -= 1;\n    } // last iteration\n\n\n    if (index === UNITS.length - 1) {\n      delete result.remaining;\n      delete result.remainingUnits;\n      delete result.seenNonZero; // include at least one 0\n\n      if (Object.values(result).every(function (val) {\n        return val === null;\n      })) {\n        result[getRightMostUnitIndex()] = 0;\n      }\n    }\n\n    return result;\n  }, {\n    remaining: dayjs_min.dayjs_min(start === date1 ? date2 : date1),\n    remainingUnits: maxUnits,\n    seenNonZero: false\n  });\n};\n\nvar eachDayOfInterval = function eachDayOfInterval() {\n  var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      start = _ref5.start,\n      end = _ref5.end;\n\n  var startDate = dayjs_min.dayjs_min(start);\n  var endDate = dayjs_min.dayjs_min(end);\n\n  if (!startDate.isValid()) {\n    throw new Error('Start date of interval is invalid');\n  }\n\n  if (!endDate.isValid()) {\n    throw new Error('End date of interval is invalid');\n  }\n\n  startDate = startDate.startOf('day');\n  endDate = endDate.startOf('day');\n\n  if (startDate.isAfter(endDate)) {\n    throw new Error('Start date of interval is after end date');\n  }\n\n  var interval = [];\n\n  while (!startDate.isAfter(endDate)) {\n    interval.push(startDate.toDate());\n    startDate = startDate.add(1, 'day');\n  }\n\n  return interval;\n};\n\nvar formatHtmlDatetime = function formatHtmlDatetime(date) {\n  return dayjs_min.dayjs_min(date).toISOString();\n};\n\nexports.difference = difference;\nexports.eachDayOfInterval = eachDayOfInterval;\nexports.formatHtmlDatetime = formatHtmlDatetime;","map":{"version":3,"sources":["../src/utils/date.js"],"names":["UNITS","DEFAULT_UNITS","difference","options","units","maxUnits","keepLeadingZeros","start","date2","getRightMostUnitIndex","unit","name","unitName","result","index","val","remaining","dayjs","remainingUnits","seenNonZero","eachDayOfInterval","end","startDate","endDate","interval","formatHtmlDatetime"],"mappings":"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","sourcesContent":["import dayjs from 'dayjs'\n\nconst UNITS = [\n  ['years', 'year'],\n  ['months', 'month'],\n  ['days', 'day'],\n  ['hours', 'hour'],\n  ['minutes', 'minute'],\n  ['seconds', 'second'],\n]\n\nconst DEFAULT_UNITS = ['years', 'months', 'days', 'hours', 'minutes', 'seconds']\n\n// Return the difference between two dates, per unit.\n// Set `units` to get specific units only, e.g. ['minutes', 'seconds']\n// If `units` is not set, all the units are enabled.\nexport const difference = (date1, date2, options = {}) => {\n  const units = options.units || DEFAULT_UNITS\n  const maxUnits = options.maxUnits || -1\n  const keepLeadingZeros =\n    (maxUnits === -1 && options.keepLeadingZeros) || false\n\n  const start = date2 > date1 ? date1 : date2\n\n  const getRightMostUnitIndex = () =>\n    [...UNITS].reverse().find(([unit]) => units.includes(unit))[0]\n\n  return UNITS.reduce(\n    (result, [name, unitName], index) => {\n      result[name] = null\n\n      // fill the current unit, subtract the difference from the remaining\n      if (\n        (maxUnits === -1 || result.remainingUnits > 0) &&\n        units.includes(name)\n      ) {\n        result[name] = result.remaining.diff(start, unitName)\n        result.remaining = result.remaining.subtract(result[name], unitName)\n      }\n\n      // remove leading zeros\n      if (!keepLeadingZeros && !result.seenNonZero) {\n        if (result[name] === 0) {\n          result[name] = null\n        } else {\n          result.seenNonZero = true\n        }\n      }\n\n      // enforce the maxUnits option\n      if (result.remainingUnits > 0 && result.seenNonZero) {\n        result.remainingUnits -= 1\n      }\n\n      // last iteration\n      if (index === UNITS.length - 1) {\n        delete result.remaining\n        delete result.remainingUnits\n        delete result.seenNonZero\n\n        // include at least one 0\n        if (Object.values(result).every(val => val === null)) {\n          result[getRightMostUnitIndex()] = 0\n        }\n      }\n\n      return result\n    },\n    {\n      remaining: dayjs(start === date1 ? date2 : date1),\n      remainingUnits: maxUnits,\n      seenNonZero: false,\n    }\n  )\n}\n\nexport const eachDayOfInterval = ({ start, end } = {}) => {\n  let startDate = dayjs(start)\n  let endDate = dayjs(end)\n\n  if (!startDate.isValid()) {\n    throw new Error('Start date of interval is invalid')\n  }\n  if (!endDate.isValid()) {\n    throw new Error('End date of interval is invalid')\n  }\n\n  startDate = startDate.startOf('day')\n  endDate = endDate.startOf('day')\n\n  if (startDate.isAfter(endDate)) {\n    throw new Error('Start date of interval is after end date')\n  }\n\n  const interval = []\n  while (!startDate.isAfter(endDate)) {\n    interval.push(startDate.toDate())\n    startDate = startDate.add(1, 'day')\n  }\n\n  return interval\n}\n\nexport const formatHtmlDatetime = date => dayjs(date).toISOString()\n"]},"metadata":{},"sourceType":"script"}