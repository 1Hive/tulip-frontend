{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Logger = require('logplease');\n\nvar logger = Logger.create('cache', {\n  color: Logger.Colors.Magenta\n});\nLogger.setLogLevel('ERROR');\n\nvar Cache = /*#__PURE__*/function () {\n  function Cache(store) {\n    _classCallCheck(this, Cache);\n\n    this._store = store;\n  }\n\n  _createClass(Cache, [{\n    key: \"status\",\n    get: function get() {\n      return this._store.db.status;\n    }\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this._store) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", Promise.reject(new Error('No cache store found to close')));\n\n              case 2:\n                if (!(this.status === 'open')) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 5;\n                return this._store.close();\n\n              case 5:\n                return _context.abrupt(\"return\", Promise.resolve());\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function close() {\n        return _close.apply(this, arguments);\n      }\n\n      return close;\n    }()\n  }, {\n    key: \"open\",\n    value: function () {\n      var _open = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this._store) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", Promise.reject(new Error('No cache store found to open')));\n\n              case 2:\n                if (!(this.status !== 'open')) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                _context2.next = 5;\n                return this._store.open();\n\n              case 5:\n                return _context2.abrupt(\"return\", Promise.resolve());\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function open() {\n        return _open.apply(this, arguments);\n      }\n\n      return open;\n    }()\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(key) {\n        var _this = this;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  _this._store.get(key, function (err, value) {\n                    if (err) {\n                      // Ignore error if key was not found\n                      if (err.toString().indexOf('NotFoundError: Key not found in database') === -1 && err.toString().indexOf('NotFound') === -1) {\n                        return reject(err);\n                      }\n                    }\n\n                    resolve(value ? JSON.parse(value) : null);\n                  });\n                }));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function get(_x) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }() // Set value in the cache and return the new value\n\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this2._store.put(key, JSON.stringify(value), function (err) {\n          if (err) {\n            // Ignore error if key was not found\n            if (err.toString().indexOf('NotFoundError: Key not found in database') === -1 && err.toString().indexOf('NotFound') === -1) {\n              return reject(err);\n            }\n          }\n\n          logger.debug(\"cache: Set \".concat(key, \" to \").concat(value));\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: \"load\",\n    value: function load() {} // noop\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {} // noop\n    // Remove a value and key from the cache\n\n  }, {\n    key: \"del\",\n    value: function () {\n      var _del = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(key) {\n        var _this3 = this;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  _this3._store.del(key, function (err) {\n                    if (err) {\n                      // Ignore error if key was not found\n                      if (err.toString().indexOf('NotFoundError: Key not found in database') === -1 && err.toString().indexOf('NotFound') === -1) {\n                        return reject(err);\n                      }\n                    }\n\n                    resolve();\n                  });\n                }));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function del(_x2) {\n        return _del.apply(this, arguments);\n      }\n\n      return del;\n    }()\n  }]);\n\n  return Cache;\n}();\n\nmodule.exports = Cache;","map":null,"metadata":{},"sourceType":"script"}