{"ast":null,"code":"import { _ as _slicedToArray } from './slicedToArray-ad07b557.js';\nimport './unsupportedIterableToArray-aef68344.js';\nimport React, { useContext, useMemo } from 'react';\nimport './_commonjsHelpers-97e6d7b1.js';\nimport { P as PropTypes } from './index-097535f1.js';\nimport { _ as _defineProperty } from './defineProperty-a0480c32.js';\nimport './toConsumableArray-07f01111.js';\nimport './getPrototypeOf-97db713a.js';\nimport color from './color.js';\nimport './components.js';\nimport './contains-component.js';\nimport './css.js';\nimport './dayjs.min-e57fb69a.js';\nimport './date.js';\nimport './miscellaneous.js';\nimport { warnOnce } from './environment.js';\nimport './font.js';\nimport './math-e6d0e93a.js';\nimport './characters.js';\nimport './format.js';\nimport './keycodes.js';\nimport './url.js';\nimport './web3.js';\nimport dark from './theme-dark.js';\nimport light from './theme-light.js';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // The appearance can be either “dark” or “light”.\n\n\nvar APPEARANCES = ['dark', 'light'];\nvar EMBEDDED_THEMES = {\n  dark: dark,\n  light: light\n};\nvar THEME_DEFAULT = 'light';\nvar RESERVED_KEYS = ['_appearance', '_name'];\nvar DEPRECATED_COLORS = new Map([['error', 'negative'], ['success', 'positive']]);\nvar COLOR_FALLBACK = '#FF00FF';\n\nfunction getTheme(theme) {\n  var validationError = validateTheme(theme);\n\n  if (validationError !== null) {\n    warnOnce(\"theme:theme-invalid:\".concat(validationError), \"Theme invalid: \".concat(validationError, \". \") + \"Using the theme \\u201C\".concat(THEME_DEFAULT, \"\\u201D instead.\"));\n    return EMBEDDED_THEMES[THEME_DEFAULT];\n  }\n\n  if (typeof theme === 'string' && EMBEDDED_THEMES[theme]) {\n    return EMBEDDED_THEMES[theme];\n  }\n\n  var baseTheme = EMBEDDED_THEMES[theme._appearance === 'dark' ? 'dark' : 'light'];\n  return _objectSpread({}, baseTheme, {}, theme);\n} // Setting the default is needed for cases when components are used without being wrapped in `<Theme />`, e.g. for tests.\n\n\nvar ThemeContext = React.createContext(prepareTheme(getTheme(THEME_DEFAULT)));\n\nfunction convertThemeColor(name, value) {\n  if (RESERVED_KEYS.includes(name)) {\n    return value;\n  }\n\n  try {\n    return color(value);\n  } catch (err) {\n    return color(COLOR_FALLBACK);\n  }\n} // prepareTheme() does a few things:\n// - Wrap every color in a color() object (see utils/color.js).\n// - Filter out invalid colors added in custom themes.\n// - Wraps the theme in a proxy that warns about deprecated colors.\n\n\nfunction prepareTheme(theme) {\n  var themeConverted = Object.fromEntries(Object.entries(theme).filter(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n        name = _ref2[0];\n\n    if (!EMBEDDED_THEMES[THEME_DEFAULT][name]) {\n      warnOnce(\"theme:invalid:\".concat(name), \"Theme: the color \\u201C\".concat(name, \"\\u201D is invalid and will be ignored. \") + \"Please check src/theme/theme-light.js in the aragonUI \" + \"repository for a list of valid colors.\");\n      return false;\n    }\n\n    return true;\n  }).map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        name = _ref4[0],\n        value = _ref4[1];\n\n    return [name, convertThemeColor(name, value)];\n  }));\n  return new Proxy(themeConverted, {\n    get: function get(theme, name) {\n      if (DEPRECATED_COLORS.has(name)) {\n        warnOnce(\"theme:deprecated:\".concat(name), \"useTheme(): the color \\u201C\".concat(name, \"\\u201D has been deprecated and will be removed soon. \") + \"Please use \\u201C\".concat(DEPRECATED_COLORS.get(name), \"\\u201D instead.\"));\n        return theme[DEPRECATED_COLORS.get(name)];\n      }\n\n      if (!theme[name]) {\n        warnOnce(\"theme:unknown:\".concat(name), \"useTheme(): the color \\u201C\".concat(name, \"\\u201D doesn\\u2019t exist in the theme.\"));\n        return COLOR_FALLBACK;\n      }\n\n      return theme[name];\n    }\n  });\n}\n\nfunction validateTheme(theme) {\n  if (typeof theme === 'string') {\n    return EMBEDDED_THEMES[theme] ? null : \"the theme \\u201C\".concat(theme, \"\\u201D doesn\\u2019t exist\");\n  }\n\n  if (theme && !theme._name) {\n    return \"the \\u201C_name\\u201D key of the theme is missing\";\n  }\n\n  if (theme && !APPEARANCES.includes(theme._appearance)) {\n    return \"the \\u201C_appearance\\u201D key of the theme is missing\";\n  }\n\n  return null;\n}\n\nfunction Theme(_ref5) {\n  var theme = _ref5.theme,\n      children = _ref5.children;\n\n  if (theme === undefined) {\n    theme = THEME_DEFAULT;\n  }\n\n  var themeConverted = useMemo(function () {\n    return prepareTheme(getTheme(theme));\n  }, [theme]);\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: themeConverted\n  }, children);\n}\n\nTheme.propTypes = {\n  children: PropTypes.node,\n  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.string])\n};\n\nfunction useTheme() {\n  return useContext(ThemeContext);\n}\n\nTheme.THEME_DEFAULT = THEME_DEFAULT;\nTheme.EMBEDDED_THEMES = EMBEDDED_THEMES;\nexport { Theme, useTheme };","map":null,"metadata":{},"sourceType":"module"}