{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar path = require('path');\n\nvar fs = require('../fs-shim');\n\nvar Cache = require('orbit-db-cache');\n\nvar Logger = require('logplease');\n\nvar logger = Logger.create('orbit-db');\nLogger.setLogLevel('ERROR');\n\nfunction migrate(_x, _x2, _x3) {\n  return _migrate.apply(this, arguments);\n}\n\nfunction _migrate() {\n  _migrate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(OrbitDB, options, dbAddress) {\n    var oldCache, oldStore, addr, _localHeads, keyRoot, migrationKeys, i, key, val;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            oldCache = OrbitDB.caches[options.directory] ? OrbitDB.caches[options.directory].cache : null;\n\n            if (oldCache) {\n              _context.next = 9;\n              break;\n            }\n\n            addr = (path.posix || path).join(OrbitDB.directory, dbAddress.root, dbAddress.path);\n\n            if (!(fs && fs.existsSync && !fs.existsSync(addr))) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 5:\n            _context.next = 7;\n            return OrbitDB.storage.createStore(addr);\n\n          case 7:\n            oldStore = _context.sent;\n            oldCache = new Cache(oldStore);\n\n          case 9:\n            _context.next = 11;\n            return oldCache.get('_localHeads');\n\n          case 11:\n            _localHeads = _context.sent;\n\n            if (_localHeads) {\n              _context.next = 14;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 14:\n            keyRoot = dbAddress.toString();\n            logger.debug('Attempting to migrate from old cache location');\n            migrationKeys = ['_remoteHeads', '_localHeads', 'snapshot', 'queue'];\n            _context.t0 = _regeneratorRuntime.keys(migrationKeys);\n\n          case 18:\n            if ((_context.t1 = _context.t0()).done) {\n              _context.next = 35;\n              break;\n            }\n\n            i = _context.t1.value;\n            _context.prev = 20;\n            key = path.join(keyRoot, migrationKeys[i]);\n            _context.next = 24;\n            return oldCache.get(migrationKeys[i]);\n\n          case 24:\n            val = _context.sent;\n\n            if (!val) {\n              _context.next = 28;\n              break;\n            }\n\n            _context.next = 28;\n            return options.cache.set(key, val);\n\n          case 28:\n            _context.next = 33;\n            break;\n\n          case 30:\n            _context.prev = 30;\n            _context.t2 = _context[\"catch\"](20);\n            logger.debug(_context.t2.message);\n\n          case 33:\n            _context.next = 18;\n            break;\n\n          case 35:\n            _context.next = 37;\n            return options.cache.set(path.join(keyRoot, '_manifest'), dbAddress.root);\n\n          case 37:\n            if (!oldStore) {\n              _context.next = 40;\n              break;\n            }\n\n            _context.next = 40;\n            return oldStore.close();\n\n          case 40:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[20, 30]]);\n  }));\n  return _migrate.apply(this, arguments);\n}\n\nmodule.exports = migrate;","map":null,"metadata":{},"sourceType":"script"}