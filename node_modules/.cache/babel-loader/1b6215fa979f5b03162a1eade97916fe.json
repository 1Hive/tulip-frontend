{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar CID = require('cids');\n\nvar errcode = require('err-code');\n\nvar utils = require('../../utils');\n\nmodule.exports = function (dht) {\n  var log = utils.logger(dht.peerInfo.id, 'rpc:add-provider');\n  /**\n   * Process `AddProvider` DHT messages.\n   *\n   * @param {PeerInfo} peer\n   * @param {Message} msg\n   * @returns {Promise<void>}\n   */\n\n  return /*#__PURE__*/function () {\n    var _addProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peer, msg) {\n      var cid, errMsg;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // eslint-disable-line require-await\n              log('start');\n\n              if (!(!msg.key || msg.key.length === 0)) {\n                _context.next = 3;\n                break;\n              }\n\n              throw errcode(new Error('Missing key'), 'ERR_MISSING_KEY');\n\n            case 3:\n              _context.prev = 3;\n              cid = new CID(msg.key);\n              _context.next = 11;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](3);\n              errMsg = \"Invalid CID: \".concat(_context.t0.message);\n              throw errcode(new Error(errMsg), 'ERR_INVALID_CID');\n\n            case 11:\n              msg.providerPeers.forEach(function (pi) {\n                // Ignore providers not from the originator\n                if (!pi.id.isEqual(peer.id)) {\n                  log('invalid provider peer %s from %s', pi.id.toB58String(), peer.id.toB58String());\n                  return;\n                }\n\n                if (pi.multiaddrs.size < 1) {\n                  log('no valid addresses for provider %s. Ignore', peer.id.toB58String());\n                  return;\n                }\n\n                log('received provider %s for %s (addrs %s)', peer.id.toB58String(), cid.toBaseEncodedString(), pi.multiaddrs.toArray().map(function (m) {\n                  return m.toString();\n                }));\n\n                if (!dht._isSelf(pi.id)) {\n                  dht.peerStore.put(pi);\n                  return dht.providers.addProvider(cid, pi.id);\n                }\n              }); // Previous versions of the JS DHT sent erroneous providers in the\n              // `providerPeers` field. In order to accommodate older clients that have\n              // this bug, we fall back to assuming the originator is the provider if\n              // we can't find any valid providers in the payload.\n              // https://github.com/libp2p/js-libp2p-kad-dht/pull/127\n              // https://github.com/libp2p/js-libp2p-kad-dht/issues/128\n\n              return _context.abrupt(\"return\", dht.providers.addProvider(cid, peer.id));\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 7]]);\n    }));\n\n    function addProvider(_x, _x2) {\n      return _addProvider.apply(this, arguments);\n    }\n\n    return addProvider;\n  }();\n};","map":null,"metadata":{},"sourceType":"script"}