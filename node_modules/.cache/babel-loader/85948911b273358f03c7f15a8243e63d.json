{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events').EventEmitter;\n/**\n * Interface for OrbitDB Access Controllers\n *\n * Any OrbitDB access controller needs to define and implement\n * the methods defined by the interface here.\n */\n\n\nclass AccessController extends EventEmitter {\n  /*\n    Every AC needs to have a 'Factory' method\n    that creates an instance of the AccessController\n  */\n  static async create(orbitdb, options) {}\n  /* Return the type for this controller */\n\n\n  static get type() {\n    throw new Error('\\'static get type ()\\' needs to be defined in the inheriting class');\n  }\n  /*\n    Return the type for this controller\n    NOTE! This is the only property of the interface that\n    shouldn't be overridden in the inherited Access Controller\n  */\n\n\n  get type() {\n    return this.constructor.type;\n  }\n  /* Each Access Controller has some address to anchor to */\n\n\n  get address() {}\n  /*\n    Called by the databases (the log) to see if entry should\n    be allowed in the database. Return true if the entry is allowed,\n    false is not allowed\n  */\n\n\n  async canAppend(entry, identityProvider) {}\n  /* Add and remove access */\n\n\n  async grant(access, identity) {\n    return false;\n  }\n\n  async revoke(access, identity) {\n    return false;\n  }\n  /* AC creation and loading */\n\n\n  async load(address) {}\n  /* Returns AC manifest parameters object */\n\n\n  async save() {}\n  /* Called when the database for this AC gets closed */\n\n\n  async close() {}\n\n}\n\nmodule.exports = AccessController;","map":null,"metadata":{},"sourceType":"script"}