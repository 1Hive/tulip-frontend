{"ast":null,"code":"'use strict';\n\nconst Logger = require('logplease');\n\nconst logger = Logger.create('cache', {\n  color: Logger.Colors.Magenta\n});\nLogger.setLogLevel('ERROR');\n\nclass Cache {\n  constructor(store) {\n    this._store = store;\n  }\n\n  get status() {\n    return this._store.db.status;\n  }\n\n  async close() {\n    if (!this._store) return Promise.reject(new Error('No cache store found to close'));\n\n    if (this.status === 'open') {\n      await this._store.close();\n      return Promise.resolve();\n    }\n  }\n\n  async open() {\n    if (!this._store) return Promise.reject(new Error('No cache store found to open'));\n\n    if (this.status !== 'open') {\n      await this._store.open();\n      return Promise.resolve();\n    }\n  }\n\n  async get(key) {\n    return new Promise((resolve, reject) => {\n      this._store.get(key, (err, value) => {\n        if (err) {\n          // Ignore error if key was not found\n          if (err.toString().indexOf('NotFoundError: Key not found in database') === -1 && err.toString().indexOf('NotFound') === -1) {\n            return reject(err);\n          }\n        }\n\n        resolve(value ? JSON.parse(value) : null);\n      });\n    });\n  } // Set value in the cache and return the new value\n\n\n  set(key, value) {\n    return new Promise((resolve, reject) => {\n      this._store.put(key, JSON.stringify(value), err => {\n        if (err) {\n          // Ignore error if key was not found\n          if (err.toString().indexOf('NotFoundError: Key not found in database') === -1 && err.toString().indexOf('NotFound') === -1) {\n            return reject(err);\n          }\n        }\n\n        logger.debug(`cache: Set ${key} to ${value}`);\n        resolve();\n      });\n    });\n  }\n\n  load() {} // noop\n\n\n  destroy() {} // noop\n  // Remove a value and key from the cache\n\n\n  async del(key) {\n    return new Promise((resolve, reject) => {\n      this._store.del(key, err => {\n        if (err) {\n          // Ignore error if key was not found\n          if (err.toString().indexOf('NotFoundError: Key not found in database') === -1 && err.toString().indexOf('NotFound') === -1) {\n            return reject(err);\n          }\n        }\n\n        resolve();\n      });\n    });\n  }\n\n}\n\nmodule.exports = Cache;","map":null,"metadata":{},"sourceType":"script"}