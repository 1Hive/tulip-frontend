{"ast":null,"code":"'use strict';\n\nconst batch = require('it-batch');\n/**\n * @template T\n * @typedef {{ok:true, value:T}} Success\n */\n\n/**\n * @typedef {{ok:false, err:Error}} Failure\n */\n\n/**\n * Takes an (async) iterator that emits promise-returning functions,\n * invokes them in parallel and emits the results as they become available but\n * in the same order as the input\n *\n * @template T\n * @param {AsyncIterable<() => Promise<T>>} source\n * @param {number} [size=1]\n * @returns {AsyncIterable<T>}\n */\n\n\nasync function* parallelBatch(source, size = 1) {\n  for await (const tasks of batch(source, size)) {\n    /** @type {Promise<Success<T>|Failure>[]} */\n    const things = tasks.map(\n    /**\n     * @param {() => Promise<T>} p\n     */\n    p => {\n      return p().then(value => ({\n        ok: true,\n        value\n      }), err => ({\n        ok: false,\n        err\n      }));\n    });\n\n    for (let i = 0; i < things.length; i++) {\n      const result = await things[i];\n\n      if (result.ok) {\n        yield result.value;\n      } else {\n        throw result.err;\n      }\n    }\n  }\n}\n\nmodule.exports = parallelBatch;","map":null,"metadata":{},"sourceType":"script"}