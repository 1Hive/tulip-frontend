{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Storage for static keys of previously connected peers.\n */\n\n\nclass Keycache {\n  constructor() {\n    _defineProperty(this, \"storage\", new Map());\n  }\n\n  store(peerId, key) {\n    this.storage.set(peerId.id, key);\n  }\n\n  load(peerId) {\n    if (!peerId) {\n      return null;\n    }\n\n    return this.storage.get(peerId.id) || null;\n  }\n\n  resetStorage() {\n    this.storage.clear();\n  }\n\n}\n\nconst KeyCache = new Keycache();\nexport { KeyCache };","map":null,"metadata":{},"sourceType":"module"}