{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar Reader = require('it-reader');\n\nvar log = require('debug')('it-multistream-select:ls');\n\nvar multistream = require('./multistream');\n\nvar handshake = require('it-handshake');\n\nvar lp = require('it-length-prefixed');\n\nvar pipe = require('it-pipe');\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(stream) {\n    var _handshake, reader, writer, rest, shakeStream, res, protocolsReader, protocols;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _handshake = handshake(stream), reader = _handshake.reader, writer = _handshake.writer, rest = _handshake.rest, shakeStream = _handshake.stream;\n            log('write \"ls\"');\n            multistream.write(writer, 'ls');\n            rest(); // Next message from remote will be (e.g. for 2 protocols):\n            // <varint-msg-len><varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\n\n            _context2.next = 6;\n            return multistream.read(reader);\n\n          case 6:\n            res = _context2.sent;\n            // After reading response we have:\n            // <varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\n            protocolsReader = Reader([res]);\n            protocols = []; // Decode each of the protocols from the reader\n\n            _context2.next = 11;\n            return pipe(protocolsReader, lp.decode(), /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source) {\n                var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, protocol;\n\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _iteratorNormalCompletion = true;\n                        _didIteratorError = false;\n                        _context.prev = 2;\n                        _iterator = _asyncIterator(source);\n\n                      case 4:\n                        _context.next = 6;\n                        return _iterator.next();\n\n                      case 6:\n                        _step = _context.sent;\n                        _iteratorNormalCompletion = _step.done;\n                        _context.next = 10;\n                        return _step.value;\n\n                      case 10:\n                        _value = _context.sent;\n\n                        if (_iteratorNormalCompletion) {\n                          _context.next = 17;\n                          break;\n                        }\n\n                        protocol = _value;\n                        // Remove the newline\n                        protocols.push(protocol.shallowSlice(0, -1).toString());\n\n                      case 14:\n                        _iteratorNormalCompletion = true;\n                        _context.next = 4;\n                        break;\n\n                      case 17:\n                        _context.next = 23;\n                        break;\n\n                      case 19:\n                        _context.prev = 19;\n                        _context.t0 = _context[\"catch\"](2);\n                        _didIteratorError = true;\n                        _iteratorError = _context.t0;\n\n                      case 23:\n                        _context.prev = 23;\n                        _context.prev = 24;\n\n                        if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                          _context.next = 28;\n                          break;\n                        }\n\n                        _context.next = 28;\n                        return _iterator.return();\n\n                      case 28:\n                        _context.prev = 28;\n\n                        if (!_didIteratorError) {\n                          _context.next = 31;\n                          break;\n                        }\n\n                        throw _iteratorError;\n\n                      case 31:\n                        return _context.finish(28);\n\n                      case 32:\n                        return _context.finish(23);\n\n                      case 33:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, null, [[2, 19, 23, 33], [24,, 28, 32]]);\n              }));\n\n              return function (_x2) {\n                return _ref2.apply(this, arguments);\n              };\n            }());\n\n          case 11:\n            return _context2.abrupt(\"return\", {\n              stream: shakeStream,\n              protocols: protocols\n            });\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}