{"ast":null,"code":"'use strict';\n\nclass DocumentIndex {\n  constructor() {\n    this._index = {};\n  }\n\n  get(key, fullOp = false) {\n    return fullOp ? this._index[key] : this._index[key] ? this._index[key].payload.value : null;\n  }\n\n  updateIndex(oplog, onProgressCallback) {\n    const reducer = (handled, item, idx) => {\n      if (item.payload.op === 'PUTALL' && item.payload.docs[Symbol.iterator]) {\n        for (const doc of item.payload.docs) {\n          if (doc && handled[doc.key] !== true) {\n            handled[doc.key] = true;\n            this._index[doc.key] = {\n              payload: {\n                op: 'PUT',\n                key: doc.key,\n                value: doc.value\n              }\n            };\n          }\n        }\n      } else if (handled[item.payload.key] !== true) {\n        handled[item.payload.key] = true;\n\n        if (item.payload.op === 'PUT') {\n          this._index[item.payload.key] = item;\n        } else if (item.payload.op === 'DEL') {\n          delete this._index[item.payload.key];\n        }\n      }\n\n      if (onProgressCallback) onProgressCallback(item, idx);\n      return handled;\n    };\n\n    oplog.values.slice().reverse().reduce(reducer, {});\n  }\n\n}\n\nmodule.exports = DocumentIndex;","map":null,"metadata":{},"sourceType":"script"}