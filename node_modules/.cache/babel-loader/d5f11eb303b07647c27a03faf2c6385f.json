{"ast":null,"code":"const BufferList = require('bl/BufferList');\n\nmodule.exports = source => {\n  const reader = async function* () {\n    let bytes = yield; // Allows us to receive 8 when reader.next(8) is called\n\n    let bl = new BufferList();\n\n    for await (const chunk of source) {\n      if (!bytes) {\n        bytes = yield bl.append(chunk);\n        bl = new BufferList();\n        continue;\n      }\n\n      bl.append(chunk);\n\n      while (bl.length >= bytes) {\n        const data = bl.shallowSlice(0, bytes);\n        bl.consume(bytes);\n        bytes = yield data; // If we no longer want a specific byte length, we yield the rest now\n\n        if (!bytes) {\n          if (bl.length) {\n            bytes = yield bl;\n            bl = new BufferList();\n          }\n\n          break; // bytes is null and/or no more buffer to yield\n        }\n      }\n    } // Consumer wants more bytes but the source has ended and our buffer\n    // is not big enough to satisfy.\n\n\n    if (bytes) {\n      throw Object.assign(new Error(`stream ended before ${bytes} bytes became available`), {\n        code: 'ERR_UNDER_READ',\n        buffer: bl\n      });\n    }\n  }();\n\n  reader.next();\n  return reader;\n};","map":null,"metadata":{},"sourceType":"script"}