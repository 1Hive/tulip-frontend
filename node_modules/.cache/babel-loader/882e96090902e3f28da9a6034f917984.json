{"ast":null,"code":"import frame from './icons/Frame.png';\nimport cipher from './icons/Cipher.png';\nimport metamask from './icons/Metamask.png';\nimport status from './icons/Status.png';\nimport wallet from \"./icons/wallet.svg\";\nimport fortmatic from \"./icons/Fortmatic.svg\";\nimport portis from \"./icons/Portis.svg\"; // See the corresponding prop type, EthereumProviderType, in prop-types.js.\n\nconst PROVIDERS = new Map([{\n  id: 'frame',\n  name: 'Frame',\n  type: 'Desktop',\n  image: frame,\n  strings: {\n    'your Ethereum wallet': 'Frame'\n  }\n}, {\n  id: 'metamask',\n  name: 'Metamask',\n  type: 'Desktop',\n  image: metamask,\n  strings: {\n    'your Ethereum wallet': 'Metamask'\n  }\n}, {\n  id: 'status',\n  name: 'Status',\n  type: 'Mobile',\n  image: status,\n  strings: {\n    'your Ethereum wallet': 'Status'\n  }\n}, {\n  id: 'cipher',\n  name: 'Cipher',\n  type: 'Mobile',\n  image: cipher,\n  strings: {\n    'your Ethereum wallet': 'Cipher'\n  }\n}, {\n  id: 'fortmatic',\n  name: 'Fortmatic',\n  type: 'Any',\n  image: fortmatic,\n  strings: {\n    'your Ethereum wallet': 'Fortmatic'\n  }\n}, {\n  id: 'portis',\n  name: 'Portis',\n  type: 'Any',\n  image: portis,\n  strings: {\n    'your Ethereum wallet': 'Portis'\n  }\n}, {\n  id: 'unknown',\n  name: 'Unknown',\n  type: 'Desktop',\n  image: wallet,\n  strings: {\n    'your Ethereum wallet': 'your wallet'\n  }\n}].map(provider => [provider.id, provider])); // Get a providers object for a given ID.\n\nfunction getProvider(providerId) {\n  return PROVIDERS.get(providerId);\n} // Get a string that depends on the current Ethereum provider.\n// The default string is used as an identifier (à la gettext).\n\n\nfunction getProviderString(string, providerId = 'unknown') {\n  const provider = getProvider(providerId);\n  return provider && provider.strings[string] || string;\n} // Get an identifier for the provider, if it can be detected.\n\n\nfunction identifyProvider(provider) {\n  if (provider && provider.isMetaMask) {\n    return 'metamask';\n  }\n\n  return 'unknown';\n} // Get a provider from its useWallet() identifier.\n\n\nfunction getProviderFromUseWalletId(id) {\n  if (id === 'injected') {\n    return getProvider(identifyProvider(window.ethereum)) || getProvider('unknown');\n  }\n\n  return getProvider(id) || getProvider('unknown');\n}\n\nexport { getProvider, identifyProvider, getProviderString, getProviderFromUseWalletId };\nexport default PROVIDERS;","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/ethereum-providers/index.js"],"names":["frame","cipher","metamask","status","PROVIDERS","Map","id","name","type","image","strings","fortmatic","portis","wallet","map","provider","getProvider","providerId","get","getProviderString","string","identifyProvider","isMetaMask","getProviderFromUseWalletId","window","ethereum"],"mappings":"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","sourcesContent":["import frame from './icons/Frame.png'\nimport cipher from './icons/Cipher.png'\nimport metamask from './icons/Metamask.png'\nimport status from './icons/Status.png'\nimport wallet from './icons/wallet.svg'\nimport fortmatic from './icons/Fortmatic.svg'\nimport portis from './icons/Portis.svg'\n\n// See the corresponding prop type, EthereumProviderType, in prop-types.js.\nconst PROVIDERS = new Map(\n  [\n    {\n      id: 'frame',\n      name: 'Frame',\n      type: 'Desktop',\n      image: frame,\n      strings: {\n        'your Ethereum wallet': 'Frame',\n      },\n    },\n    {\n      id: 'metamask',\n      name: 'Metamask',\n      type: 'Desktop',\n      image: metamask,\n      strings: {\n        'your Ethereum wallet': 'Metamask',\n      },\n    },\n    {\n      id: 'status',\n      name: 'Status',\n      type: 'Mobile',\n      image: status,\n      strings: {\n        'your Ethereum wallet': 'Status',\n      },\n    },\n    {\n      id: 'cipher',\n      name: 'Cipher',\n      type: 'Mobile',\n      image: cipher,\n      strings: {\n        'your Ethereum wallet': 'Cipher',\n      },\n    },\n    {\n      id: 'fortmatic',\n      name: 'Fortmatic',\n      type: 'Any',\n      image: fortmatic,\n      strings: {\n        'your Ethereum wallet': 'Fortmatic',\n      },\n    },\n    {\n      id: 'portis',\n      name: 'Portis',\n      type: 'Any',\n      image: portis,\n      strings: {\n        'your Ethereum wallet': 'Portis',\n      },\n    },\n    {\n      id: 'unknown',\n      name: 'Unknown',\n      type: 'Desktop',\n      image: wallet,\n      strings: {\n        'your Ethereum wallet': 'your wallet',\n      },\n    },\n  ].map(provider => [provider.id, provider])\n)\n\n// Get a providers object for a given ID.\nfunction getProvider(providerId) {\n  return PROVIDERS.get(providerId)\n}\n\n// Get a string that depends on the current Ethereum provider.\n// The default string is used as an identifier (à la gettext).\nfunction getProviderString(string, providerId = 'unknown') {\n  const provider = getProvider(providerId)\n  return (provider && provider.strings[string]) || string\n}\n\n// Get an identifier for the provider, if it can be detected.\nfunction identifyProvider(provider) {\n  if (provider && provider.isMetaMask) {\n    return 'metamask'\n  }\n  return 'unknown'\n}\n\n// Get a provider from its useWallet() identifier.\nfunction getProviderFromUseWalletId(id) {\n  if (id === 'injected') {\n    return (\n      getProvider(identifyProvider(window.ethereum)) || getProvider('unknown')\n    )\n  }\n  return getProvider(id) || getProvider('unknown')\n}\n\nexport {\n  getProvider,\n  identifyProvider,\n  getProviderString,\n  getProviderFromUseWalletId,\n}\nexport default PROVIDERS\n"]},"metadata":{},"sourceType":"module"}