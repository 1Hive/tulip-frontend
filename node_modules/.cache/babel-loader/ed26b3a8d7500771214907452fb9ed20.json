{"ast":null,"code":"import { useCallback, useEffect } from 'react';\nimport keycodes from '../keycodes';\nexport default function useArrows({\n  onUp,\n  onLeft,\n  onDown,\n  onRight\n} = {}) {\n  useEffect(() => {\n    const actions = [[keycodes.up, onUp], [keycodes.left, onLeft], [keycodes.down, onDown], [keycodes.right, onRight]];\n\n    const onKeyDown = e => {\n      for (const [keyCode, cb] of actions) {\n        if (cb && e.keyCode === keyCode) {\n          e.preventDefault();\n          cb();\n          break;\n        }\n      }\n    };\n\n    document.addEventListener('keydown', onKeyDown);\n    return () => {\n      document.removeEventListener('keydown', onKeyDown);\n    };\n  }, [onUp, onLeft, onDown, onRight]);\n}\nexport function useEsc(cb) {\n  const handlekeyDown = useCallback(e => {\n    if (e.keyCode === keycodes.esc) {\n      cb();\n    }\n  }, [cb]);\n  useEffect(() => {\n    window.addEventListener('keydown', handlekeyDown);\n    return () => window.removeEventListener('keydown', handlekeyDown);\n  }, [handlekeyDown]);\n}\nexport function useEnterKey(cb) {\n  const handleKeyPress = useCallback(({\n    keyCode\n  }) => {\n    if (keyCode === keycodes.enter) {\n      cb();\n    }\n  }, [cb]);\n  useEffect(() => {\n    window.addEventListener('keypress', handleKeyPress);\n    return () => window.removeEventListener('keypress', handleKeyPress);\n  }, [handleKeyPress]);\n}","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/hooks/useKeyboardArrows.js"],"names":["useCallback","useEffect","keycodes","useArrows","onUp","onLeft","onDown","onRight","actions","up","left","down","right","onKeyDown","e","keyCode","cb","preventDefault","document","addEventListener","removeEventListener","useEsc","handlekeyDown","esc","window","useEnterKey","handleKeyPress","enter"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,QAAuC,OAAvC;AACA,OAAOC,QAAP,MAAqB,aAArB;AAEA,eAAe,SAASC,SAAT,CAAmB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,MAAR;AAAgBC,EAAAA,MAAhB;AAAwBC,EAAAA;AAAxB,IAAoC,EAAvD,EAA2D;AACxEN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,OAAO,GAAG,CACd,CAACN,QAAQ,CAACO,EAAV,EAAcL,IAAd,CADc,EAEd,CAACF,QAAQ,CAACQ,IAAV,EAAgBL,MAAhB,CAFc,EAGd,CAACH,QAAQ,CAACS,IAAV,EAAgBL,MAAhB,CAHc,EAId,CAACJ,QAAQ,CAACU,KAAV,EAAiBL,OAAjB,CAJc,CAAhB;;AAMA,UAAMM,SAAS,GAAGC,CAAC,IAAI;AACrB,WAAK,MAAM,CAACC,OAAD,EAAUC,EAAV,CAAX,IAA4BR,OAA5B,EAAqC;AACnC,YAAIQ,EAAE,IAAIF,CAAC,CAACC,OAAF,KAAcA,OAAxB,EAAiC;AAC/BD,UAAAA,CAAC,CAACG,cAAF;AACAD,UAAAA,EAAE;AACF;AACD;AACF;AACF,KARD;;AASAE,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,EAAqCN,SAArC;AACA,WAAO,MAAM;AACXK,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,SAA7B,EAAwCP,SAAxC;AACD,KAFD;AAGD,GApBQ,EAoBN,CAACT,IAAD,EAAOC,MAAP,EAAeC,MAAf,EAAuBC,OAAvB,CApBM,CAAT;AAqBD;AAED,OAAO,SAASc,MAAT,CAAgBL,EAAhB,EAAoB;AACzB,QAAMM,aAAa,GAAGtB,WAAW,CAC/Bc,CAAC,IAAI;AACH,QAAIA,CAAC,CAACC,OAAF,KAAcb,QAAQ,CAACqB,GAA3B,EAAgC;AAC9BP,MAAAA,EAAE;AACH;AACF,GAL8B,EAM/B,CAACA,EAAD,CAN+B,CAAjC;AAQAf,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,MAAM,CAACL,gBAAP,CAAwB,SAAxB,EAAmCG,aAAnC;AACA,WAAO,MAAME,MAAM,CAACJ,mBAAP,CAA2B,SAA3B,EAAsCE,aAAtC,CAAb;AACD,GAHQ,EAGN,CAACA,aAAD,CAHM,CAAT;AAID;AAED,OAAO,SAASG,WAAT,CAAqBT,EAArB,EAAyB;AAC9B,QAAMU,cAAc,GAAG1B,WAAW,CAChC,CAAC;AAAEe,IAAAA;AAAF,GAAD,KAAiB;AACf,QAAIA,OAAO,KAAKb,QAAQ,CAACyB,KAAzB,EAAgC;AAC9BX,MAAAA,EAAE;AACH;AACF,GAL+B,EAMhC,CAACA,EAAD,CANgC,CAAlC;AASAf,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,MAAM,CAACL,gBAAP,CAAwB,UAAxB,EAAoCO,cAApC;AACA,WAAO,MAAMF,MAAM,CAACJ,mBAAP,CAA2B,UAA3B,EAAuCM,cAAvC,CAAb;AACD,GAHQ,EAGN,CAACA,cAAD,CAHM,CAAT;AAID","sourcesContent":["import { useCallback, useEffect } from 'react'\r\nimport keycodes from '../keycodes'\r\n\r\nexport default function useArrows({ onUp, onLeft, onDown, onRight } = {}) {\r\n  useEffect(() => {\r\n    const actions = [\r\n      [keycodes.up, onUp],\r\n      [keycodes.left, onLeft],\r\n      [keycodes.down, onDown],\r\n      [keycodes.right, onRight],\r\n    ]\r\n    const onKeyDown = e => {\r\n      for (const [keyCode, cb] of actions) {\r\n        if (cb && e.keyCode === keyCode) {\r\n          e.preventDefault()\r\n          cb()\r\n          break\r\n        }\r\n      }\r\n    }\r\n    document.addEventListener('keydown', onKeyDown)\r\n    return () => {\r\n      document.removeEventListener('keydown', onKeyDown)\r\n    }\r\n  }, [onUp, onLeft, onDown, onRight])\r\n}\r\n\r\nexport function useEsc(cb) {\r\n  const handlekeyDown = useCallback(\r\n    e => {\r\n      if (e.keyCode === keycodes.esc) {\r\n        cb()\r\n      }\r\n    },\r\n    [cb]\r\n  )\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handlekeyDown)\r\n    return () => window.removeEventListener('keydown', handlekeyDown)\r\n  }, [handlekeyDown])\r\n}\r\n\r\nexport function useEnterKey(cb) {\r\n  const handleKeyPress = useCallback(\r\n    ({ keyCode }) => {\r\n      if (keyCode === keycodes.enter) {\r\n        cb()\r\n      }\r\n    },\r\n    [cb]\r\n  )\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('keypress', handleKeyPress)\r\n    return () => window.removeEventListener('keypress', handleKeyPress)\r\n  }, [handleKeyPress])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}