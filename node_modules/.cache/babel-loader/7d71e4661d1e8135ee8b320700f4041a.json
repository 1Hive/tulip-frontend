{"ast":null,"code":"import dayjs from 'dayjs';\nimport isBetween from 'dayjs/plugin/isBetween';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport utc from 'dayjs/plugin/utc';\nexport const SECOND = 1000;\nexport const MINUTE = 60 * SECOND;\nexport const HOUR = 60 * MINUTE;\nexport const DAY = 24 * HOUR;\nexport const toMs = seconds => seconds * 1000;\nconst KNOWN_FORMATS = {\n  iso: 'YYYY-MM-DDTHH:mm:ssZ',\n  onlyDate: 'YYYY-MM-DD',\n  standard: 'YYYY-MM-DD h:mm A'\n}; // dayjs plugins\n\ndayjs.extend(isBetween);\ndayjs.extend(relativeTime);\ndayjs.extend(utc);\n\nfunction dateFormat(date, format) {\n  return dayjs(date).format(KNOWN_FORMATS[format] || format);\n}\n\nexport function formatDuration(duration) {\n  const dayInSeconds = 86400;\n  const hourInSeconds = 3600;\n  const minuteInSeconds = 60;\n  const units = ['day', 'hour', 'minute', 'second'];\n  const days = Math.floor(duration / dayInSeconds);\n  const hours = Math.floor(duration % dayInSeconds / hourInSeconds);\n  const minutes = Math.floor(duration % dayInSeconds % hourInSeconds / minuteInSeconds);\n  const seconds = duration % dayInSeconds % hourInSeconds % minuteInSeconds;\n  return [days, hours, minutes, seconds].map((elem, index) => elem > 0 ? `${elem} ${units[index]}${elem > 1 ? 's' : ''}` : '').join(' ').trim();\n} // Displays the difference between two dates\n\nfunction getRelativeTime(from, to) {\n  return dayjs(to).from(from).replace(/minutes?/, 'min').replace(/seconds?/, 'sec').trim();\n}\n\nexport { dayjs, dateFormat, getRelativeTime };","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/utils/date-utils.js"],"names":["dayjs","isBetween","relativeTime","utc","SECOND","MINUTE","HOUR","DAY","toMs","seconds","KNOWN_FORMATS","iso","onlyDate","standard","extend","dateFormat","date","format","formatDuration","duration","dayInSeconds","hourInSeconds","minuteInSeconds","units","days","Math","floor","hours","minutes","map","elem","index","join","trim","getRelativeTime","from","to","replace"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AAEA,OAAO,MAAMC,MAAM,GAAG,IAAf;AACP,OAAO,MAAMC,MAAM,GAAG,KAAKD,MAApB;AACP,OAAO,MAAME,IAAI,GAAG,KAAKD,MAAlB;AACP,OAAO,MAAME,GAAG,GAAG,KAAKD,IAAjB;AAEP,OAAO,MAAME,IAAI,GAAGC,OAAO,IAAIA,OAAO,GAAG,IAAlC;AAEP,MAAMC,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,sBADe;AAEpBC,EAAAA,QAAQ,EAAE,YAFU;AAGpBC,EAAAA,QAAQ,EAAE;AAHU,CAAtB,C,CAMA;;AACAb,KAAK,CAACc,MAAN,CAAab,SAAb;AACAD,KAAK,CAACc,MAAN,CAAaZ,YAAb;AACAF,KAAK,CAACc,MAAN,CAAaX,GAAb;;AAEA,SAASY,UAAT,CAAoBC,IAApB,EAA0BC,MAA1B,EAAkC;AAChC,SAAOjB,KAAK,CAACgB,IAAD,CAAL,CAAYC,MAAZ,CAAmBP,aAAa,CAACO,MAAD,CAAb,IAAyBA,MAA5C,CAAP;AACD;;AAED,OAAO,SAASC,cAAT,CAAwBC,QAAxB,EAAkC;AACvC,QAAMC,YAAY,GAAG,KAArB;AACA,QAAMC,aAAa,GAAG,IAAtB;AACA,QAAMC,eAAe,GAAG,EAAxB;AACA,QAAMC,KAAK,GAAG,CAAC,KAAD,EAAQ,MAAR,EAAgB,QAAhB,EAA0B,QAA1B,CAAd;AAEA,QAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWP,QAAQ,GAAGC,YAAtB,CAAb;AACA,QAAMO,KAAK,GAAGF,IAAI,CAACC,KAAL,CAAYP,QAAQ,GAAGC,YAAZ,GAA4BC,aAAvC,CAAd;AACA,QAAMO,OAAO,GAAGH,IAAI,CAACC,KAAL,CACZP,QAAQ,GAAGC,YAAZ,GAA4BC,aAA7B,GAA8CC,eADhC,CAAhB;AAGA,QAAMb,OAAO,GAAKU,QAAQ,GAAGC,YAAZ,GAA4BC,aAA7B,GAA8CC,eAA9D;AAEA,SAAO,CAACE,IAAD,EAAOG,KAAP,EAAcC,OAAd,EAAuBnB,OAAvB,EACJoB,GADI,CACA,CAACC,IAAD,EAAOC,KAAP,KACHD,IAAI,GAAG,CAAP,GAAY,GAAEA,IAAK,IAAGP,KAAK,CAACQ,KAAD,CAAQ,GAAED,IAAI,GAAG,CAAP,GAAW,GAAX,GAAiB,EAAG,EAAzD,GAA6D,EAF1D,EAIJE,IAJI,CAIC,GAJD,EAKJC,IALI,EAAP;AAMD,C,CAED;;AACA,SAASC,eAAT,CAAyBC,IAAzB,EAA+BC,EAA/B,EAAmC;AACjC,SAAOpC,KAAK,CAACoC,EAAD,CAAL,CACJD,IADI,CACCA,IADD,EAEJE,OAFI,CAEI,UAFJ,EAEgB,KAFhB,EAGJA,OAHI,CAGI,UAHJ,EAGgB,KAHhB,EAIJJ,IAJI,EAAP;AAKD;;AAED,SAASjC,KAAT,EAAgBe,UAAhB,EAA4BmB,eAA5B","sourcesContent":["import dayjs from 'dayjs'\nimport isBetween from 'dayjs/plugin/isBetween'\nimport relativeTime from 'dayjs/plugin/relativeTime'\nimport utc from 'dayjs/plugin/utc'\n\nexport const SECOND = 1000\nexport const MINUTE = 60 * SECOND\nexport const HOUR = 60 * MINUTE\nexport const DAY = 24 * HOUR\n\nexport const toMs = seconds => seconds * 1000\n\nconst KNOWN_FORMATS = {\n  iso: 'YYYY-MM-DDTHH:mm:ssZ',\n  onlyDate: 'YYYY-MM-DD',\n  standard: 'YYYY-MM-DD h:mm A',\n}\n\n// dayjs plugins\ndayjs.extend(isBetween)\ndayjs.extend(relativeTime)\ndayjs.extend(utc)\n\nfunction dateFormat(date, format) {\n  return dayjs(date).format(KNOWN_FORMATS[format] || format)\n}\n\nexport function formatDuration(duration) {\n  const dayInSeconds = 86400\n  const hourInSeconds = 3600\n  const minuteInSeconds = 60\n  const units = ['day', 'hour', 'minute', 'second']\n\n  const days = Math.floor(duration / dayInSeconds)\n  const hours = Math.floor((duration % dayInSeconds) / hourInSeconds)\n  const minutes = Math.floor(\n    ((duration % dayInSeconds) % hourInSeconds) / minuteInSeconds\n  )\n  const seconds = ((duration % dayInSeconds) % hourInSeconds) % minuteInSeconds\n\n  return [days, hours, minutes, seconds]\n    .map((elem, index) =>\n      elem > 0 ? `${elem} ${units[index]}${elem > 1 ? 's' : ''}` : ''\n    )\n    .join(' ')\n    .trim()\n}\n\n// Displays the difference between two dates\nfunction getRelativeTime(from, to) {\n  return dayjs(to)\n    .from(from)\n    .replace(/minutes?/, 'min')\n    .replace(/seconds?/, 'sec')\n    .trim()\n}\n\nexport { dayjs, dateFormat, getRelativeTime }\n"]},"metadata":{},"sourceType":"module"}