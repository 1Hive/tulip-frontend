{"ast":null,"code":"'use strict';\n/*\n  Index\n\n  Index contains the state of a datastore, ie. what data we currently have.\n\n  Index receives a call from a Store when the operations log for the Store\n  was updated, ie. new operations were added. In updateIndex, the Index\n  implements its CRDT logic: add, remove or update items in the data\n  structure. Each new operation received from the operations log is applied\n  in order onto the current state, ie. each new operation changes the data\n  and the state changes.\n\n  Implementing each CRDT as an Index, we can implement both operation-based\n  and state-based CRDTs with the same higher level abstractions.\n\n  To read the current state of the database, Index provides a single public\n  function: `get()`. It is up to the Store to decide what kind of query\n  capabilities it provides to the consumer.\n\n  Usage:\n  ```javascript\n  const Index = new Index(userId)\n  ```\n*/\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Index = /*#__PURE__*/function () {\n  /*\n    @param id - unique identifier of this index, eg. a user id or a hash\n  */\n  function Index(id) {\n    _classCallCheck(this, Index);\n\n    this.id = id;\n    this._index = [];\n  }\n  /*\n    Returns the state of the datastore, ie. most up-to-date data\n    @return - current state\n  */\n\n\n  _createClass(Index, [{\n    key: \"get\",\n    value: function get() {\n      return this._index;\n    }\n    /*\n      Applies operations to the Index and updates the state\n      @param oplog - the source operations log that called updateIndex\n      @param entries - operations that were added to the log\n    */\n\n  }, {\n    key: \"updateIndex\",\n    value: function () {\n      var _updateIndex = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(oplog, entries) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this._index = oplog.values;\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function updateIndex(_x, _x2) {\n        return _updateIndex.apply(this, arguments);\n      }\n\n      return updateIndex;\n    }()\n  }]);\n\n  return Index;\n}();\n\nmodule.exports = Index;","map":null,"metadata":{},"sourceType":"script"}