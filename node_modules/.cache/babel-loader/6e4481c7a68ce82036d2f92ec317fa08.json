{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nrequire('node-forge/lib/asn1');\n\nrequire('node-forge/lib/rsa');\n\nconst forge = require('node-forge/lib/forge');\n\nconst {\n  bigIntegerToUintBase64url,\n  base64urlToBigInteger\n} = require('./../util'); // Convert a PKCS#1 in ASN1 DER format to a JWK key\n\n\nexports.pkcs1ToJwk = function (bytes) {\n  bytes = Buffer.from(bytes); // convert Uint8Arrays\n\n  const asn1 = forge.asn1.fromDer(bytes.toString('binary'));\n  const privateKey = forge.pki.privateKeyFromAsn1(asn1); // https://tools.ietf.org/html/rfc7518#section-6.3.1\n\n  return {\n    kty: 'RSA',\n    n: bigIntegerToUintBase64url(privateKey.n),\n    e: bigIntegerToUintBase64url(privateKey.e),\n    d: bigIntegerToUintBase64url(privateKey.d),\n    p: bigIntegerToUintBase64url(privateKey.p),\n    q: bigIntegerToUintBase64url(privateKey.q),\n    dp: bigIntegerToUintBase64url(privateKey.dP),\n    dq: bigIntegerToUintBase64url(privateKey.dQ),\n    qi: bigIntegerToUintBase64url(privateKey.qInv),\n    alg: 'RS256',\n    kid: '2011-04-29'\n  };\n}; // Convert a JWK key into PKCS#1 in ASN1 DER format\n\n\nexports.jwkToPkcs1 = function (jwk) {\n  const asn1 = forge.pki.privateKeyToAsn1({\n    n: base64urlToBigInteger(jwk.n),\n    e: base64urlToBigInteger(jwk.e),\n    d: base64urlToBigInteger(jwk.d),\n    p: base64urlToBigInteger(jwk.p),\n    q: base64urlToBigInteger(jwk.q),\n    dP: base64urlToBigInteger(jwk.dp),\n    dQ: base64urlToBigInteger(jwk.dq),\n    qInv: base64urlToBigInteger(jwk.qi)\n  });\n  return Buffer.from(forge.asn1.toDer(asn1).getBytes(), 'binary');\n}; // Convert a PKCIX in ASN1 DER format to a JWK key\n\n\nexports.pkixToJwk = function (bytes) {\n  const asn1 = forge.asn1.fromDer(bytes.toString('binary'));\n  const publicKey = forge.pki.publicKeyFromAsn1(asn1);\n  return {\n    kty: 'RSA',\n    n: bigIntegerToUintBase64url(publicKey.n),\n    e: bigIntegerToUintBase64url(publicKey.e),\n    alg: 'RS256',\n    kid: '2011-04-29'\n  };\n}; // Convert a JWK key to PKCIX in ASN1 DER format\n\n\nexports.jwkToPkix = function (jwk) {\n  const asn1 = forge.pki.publicKeyToAsn1({\n    n: base64urlToBigInteger(jwk.n),\n    e: base64urlToBigInteger(jwk.e)\n  });\n  return Buffer.from(forge.asn1.toDer(asn1).getBytes(), 'binary');\n};","map":null,"metadata":{},"sourceType":"script"}