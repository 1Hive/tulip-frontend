{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nimport { dateTimestampInSeconds, getGlobalObject, isPlainObject, isThenable, SyncPromise } from '@sentry/utils';\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\n\nvar Scope =\n/** @class */\nfunction () {\n  function Scope() {\n    /** Flag if notifiying is happening. */\n    this._notifyingListeners = false;\n    /** Callback for client to receive scope changes. */\n\n    this._scopeListeners = [];\n    /** Callback list that will be called after {@link applyToEvent}. */\n\n    this._eventProcessors = [];\n    /** Array of breadcrumbs. */\n\n    this._breadcrumbs = [];\n    /** User */\n\n    this._user = {};\n    /** Tags */\n\n    this._tags = {};\n    /** Extra */\n\n    this._extra = {};\n    /** Contexts */\n\n    this._contexts = {};\n  }\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n\n\n  Scope.clone = function (scope) {\n    var newScope = new Scope();\n\n    if (scope) {\n      newScope._breadcrumbs = __spread(scope._breadcrumbs);\n      newScope._tags = __assign({}, scope._tags);\n      newScope._extra = __assign({}, scope._extra);\n      newScope._contexts = __assign({}, scope._contexts);\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._session = scope._session;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = __spread(scope._eventProcessors);\n    }\n\n    return newScope;\n  };\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n\n\n  Scope.prototype.addScopeListener = function (callback) {\n    this._scopeListeners.push(callback);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.addEventProcessor = function (callback) {\n    this._eventProcessors.push(callback);\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setUser = function (user) {\n    this._user = user || {};\n\n    if (this._session) {\n      this._session.update({\n        user: user\n      });\n    }\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.getUser = function () {\n    return this._user;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setTags = function (tags) {\n    this._tags = __assign(__assign({}, this._tags), tags);\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setTag = function (key, value) {\n    var _a;\n\n    this._tags = __assign(__assign({}, this._tags), (_a = {}, _a[key] = value, _a));\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setExtras = function (extras) {\n    this._extra = __assign(__assign({}, this._extra), extras);\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setExtra = function (key, extra) {\n    var _a;\n\n    this._extra = __assign(__assign({}, this._extra), (_a = {}, _a[key] = extra, _a));\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setFingerprint = function (fingerprint) {\n    this._fingerprint = fingerprint;\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setLevel = function (level) {\n    this._level = level;\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setTransactionName = function (name) {\n    this._transactionName = name;\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * Can be removed in major version.\n   * @deprecated in favor of {@link this.setTransactionName}\n   */\n\n\n  Scope.prototype.setTransaction = function (name) {\n    return this.setTransactionName(name);\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setContext = function (key, context) {\n    var _a;\n\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts = __assign(__assign({}, this._contexts), (_a = {}, _a[key] = context, _a));\n    }\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setSpan = function (span) {\n    this._span = span;\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.getSpan = function () {\n    return this._span;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.getTransaction = function () {\n    var _a, _b, _c, _d; // often, this span will be a transaction, but it's not guaranteed to be\n\n\n    var span = this.getSpan(); // try it the new way first\n\n    if ((_a = span) === null || _a === void 0 ? void 0 : _a.transaction) {\n      return (_b = span) === null || _b === void 0 ? void 0 : _b.transaction;\n    } // fallback to the old way (known bug: this only finds transactions with sampled = true)\n\n\n    if ((_d = (_c = span) === null || _c === void 0 ? void 0 : _c.spanRecorder) === null || _d === void 0 ? void 0 : _d.spans[0]) {\n      return span.spanRecorder.spans[0];\n    } // neither way found a transaction\n\n\n    return undefined;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.setSession = function (session) {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.getSession = function () {\n    return this._session;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.update = function (captureContext) {\n    if (!captureContext) {\n      return this;\n    }\n\n    if (typeof captureContext === 'function') {\n      var updatedScope = captureContext(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n\n    if (captureContext instanceof Scope) {\n      this._tags = __assign(__assign({}, this._tags), captureContext._tags);\n      this._extra = __assign(__assign({}, this._extra), captureContext._extra);\n      this._contexts = __assign(__assign({}, this._contexts), captureContext._contexts);\n\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext;\n      this._tags = __assign(__assign({}, this._tags), captureContext.tags);\n      this._extra = __assign(__assign({}, this._extra), captureContext.extra);\n      this._contexts = __assign(__assign({}, this._contexts), captureContext.contexts);\n\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n    }\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.clear = function () {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._span = undefined;\n    this._session = undefined;\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.addBreadcrumb = function (breadcrumb, maxBreadcrumbs) {\n    var mergedBreadcrumb = __assign({\n      timestamp: dateTimestampInSeconds()\n    }, breadcrumb);\n\n    this._breadcrumbs = maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0 ? __spread(this._breadcrumbs, [mergedBreadcrumb]).slice(-maxBreadcrumbs) : __spread(this._breadcrumbs, [mergedBreadcrumb]);\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Scope.prototype.clearBreadcrumbs = function () {\n    this._breadcrumbs = [];\n\n    this._notifyScopeListeners();\n\n    return this;\n  };\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event Event\n   * @param hint May contain additional informartion about the original exception.\n   * @hidden\n   */\n\n\n  Scope.prototype.applyToEvent = function (event, hint) {\n    var _a;\n\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = __assign(__assign({}, this._extra), event.extra);\n    }\n\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = __assign(__assign({}, this._tags), event.tags);\n    }\n\n    if (this._user && Object.keys(this._user).length) {\n      event.user = __assign(__assign({}, this._user), event.user);\n    }\n\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = __assign(__assign({}, this._contexts), event.contexts);\n    }\n\n    if (this._level) {\n      event.level = this._level;\n    }\n\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    } // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relys on that.\n\n\n    if (this._span) {\n      event.contexts = __assign({\n        trace: this._span.getTraceContext()\n      }, event.contexts);\n      var transactionName = (_a = this._span.transaction) === null || _a === void 0 ? void 0 : _a.name;\n\n      if (transactionName) {\n        event.tags = __assign({\n          transaction: transactionName\n        }, event.tags);\n      }\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = __spread(event.breadcrumbs || [], this._breadcrumbs);\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n    return this._notifyEventProcessors(__spread(getGlobalEventProcessors(), this._eventProcessors), event, hint);\n  };\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n\n\n  Scope.prototype._notifyEventProcessors = function (processors, event, hint, index) {\n    var _this = this;\n\n    if (index === void 0) {\n      index = 0;\n    }\n\n    return new SyncPromise(function (resolve, reject) {\n      var processor = processors[index];\n\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        var result = processor(__assign({}, event), hint);\n\n        if (isThenable(result)) {\n          result.then(function (final) {\n            return _this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve);\n          }).then(null, reject);\n        } else {\n          _this._notifyEventProcessors(processors, result, hint, index + 1).then(resolve).then(null, reject);\n        }\n      }\n    });\n  };\n  /**\n   * This will be called on every set call.\n   */\n\n\n  Scope.prototype._notifyScopeListeners = function () {\n    var _this = this; // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n\n\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n\n      this._scopeListeners.forEach(function (callback) {\n        callback(_this);\n      });\n\n      this._notifyingListeners = false;\n    }\n  };\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n\n\n  Scope.prototype._applyFingerprint = function (event) {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint ? Array.isArray(event.fingerprint) ? event.fingerprint : [event.fingerprint] : []; // If we have something on the scope, then merge it with event\n\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    } // If we have no data at all, remove empty array default\n\n\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  };\n\n  return Scope;\n}();\n\nexport { Scope };\n/**\n * Retruns the global event processors.\n */\n\nfunction getGlobalEventProcessors() {\n  /* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access  */\n  var global = getGlobalObject();\n  global.__SENTRY__ = global.__SENTRY__ || {};\n  global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];\n  return global.__SENTRY__.globalEventProcessors;\n  /* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n}\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\n\n\nexport function addGlobalEventProcessor(callback) {\n  getGlobalEventProcessors().push(callback);\n}","map":null,"metadata":{},"sourceType":"module"}