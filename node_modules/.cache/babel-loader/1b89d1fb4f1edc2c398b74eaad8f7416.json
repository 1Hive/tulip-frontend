{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar errCode = require('err-code');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar log = require('debug')('ipfs:mfs:utils:to-async-iterator');\n\nvar _require2 = require('../../../utils'),\n    MFS_MAX_CHUNK_SIZE = _require2.MFS_MAX_CHUNK_SIZE;\n\nvar toAsyncIterator = function toAsyncIterator(content) {\n  if (!content) {\n    throw errCode(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH');\n  }\n\n  if (typeof content === 'string' || content instanceof String) {\n    log('Content was a string');\n    content = Buffer.from(content);\n  }\n\n  if (content.length) {\n    log('Content was array-like');\n    return _defineProperty({}, Symbol.asyncIterator, /*#__PURE__*/_regeneratorRuntime.mark(function bufferContent() {\n      return _regeneratorRuntime.wrap(function bufferContent$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return content;\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, bufferContent);\n    }));\n  }\n\n  if (content[Symbol.asyncIterator]) {\n    log('Content was an async iterator');\n    return content;\n  }\n\n  if (content[Symbol.iterator]) {\n    log('Content was an iterator');\n    return content;\n  }\n\n  if (global.Blob && content instanceof global.Blob) {\n    // HTML5 Blob objects (including Files)\n    log('Content was an HTML5 Blob');\n    var index = 0;\n    var iterator = {\n      next: function next() {\n        if (index > content.size) {\n          return {\n            done: true\n          };\n        }\n\n        return new Promise(function (resolve, reject) {\n          var chunk = content.slice(index, MFS_MAX_CHUNK_SIZE);\n          index += MFS_MAX_CHUNK_SIZE;\n          var reader = new global.FileReader();\n\n          var handleLoad = function handleLoad(ev) {\n            reader.removeEventListener('loadend', handleLoad, false);\n\n            if (ev.error) {\n              return reject(ev.error);\n            }\n\n            resolve({\n              done: false,\n              value: Buffer.from(reader.result)\n            });\n          };\n\n          reader.addEventListener('loadend', handleLoad);\n          reader.readAsArrayBuffer(chunk);\n        });\n      }\n    };\n    return _defineProperty({}, Symbol.asyncIterator, function () {\n      return iterator;\n    });\n  }\n\n  throw errCode(new Error(\"Don't know how to convert \".concat(content, \" into an async iterator\")), 'ERR_INVALID_PARAMS');\n};\n\nmodule.exports = toAsyncIterator;","map":null,"metadata":{},"sourceType":"script"}