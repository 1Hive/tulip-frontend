{"ast":null,"code":"!function (t, i) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? module.exports = i() : \"function\" == typeof define && define.amd ? define(i) : t.dayjs_plugin_utc = i();\n}(this, function () {\n  \"use strict\";\n\n  return function (t, i, e) {\n    var s = i.prototype;\n    e.utc = function (t) {\n      return new i({\n        date: t,\n        utc: !0,\n        args: arguments\n      });\n    }, s.utc = function (t) {\n      var i = e(this.toDate(), {\n        locale: this.$L,\n        utc: !0\n      });\n      return t ? i.add(this.utcOffset(), \"minute\") : i;\n    }, s.local = function () {\n      return e(this.toDate(), {\n        locale: this.$L,\n        utc: !1\n      });\n    };\n    var f = s.parse;\n\n    s.parse = function (t) {\n      t.utc && (this.$u = !0), this.$utils().u(t.$offset) || (this.$offset = t.$offset), f.call(this, t);\n    };\n\n    var n = s.init;\n\n    s.init = function () {\n      if (this.$u) {\n        var t = this.$d;\n        this.$y = t.getUTCFullYear(), this.$M = t.getUTCMonth(), this.$D = t.getUTCDate(), this.$W = t.getUTCDay(), this.$H = t.getUTCHours(), this.$m = t.getUTCMinutes(), this.$s = t.getUTCSeconds(), this.$ms = t.getUTCMilliseconds();\n      } else n.call(this);\n    };\n\n    var u = s.utcOffset;\n\n    s.utcOffset = function (t, i) {\n      var e = this.$utils().u;\n      if (e(t)) return this.$u ? 0 : e(this.$offset) ? u.call(this) : this.$offset;\n      var s = Math.abs(t) <= 16 ? 60 * t : t,\n          f = this;\n      if (i) return f.$offset = s, f.$u = 0 === t, f;\n\n      if (0 !== t) {\n        var n = this.$u ? this.toDate().getTimezoneOffset() : -1 * this.utcOffset();\n        (f = this.local().add(s + n, \"minute\")).$offset = s, f.$x.$localOffset = n;\n      } else f = this.utc();\n\n      return f;\n    };\n\n    var o = s.format;\n    s.format = function (t) {\n      var i = t || (this.$u ? \"YYYY-MM-DDTHH:mm:ss[Z]\" : \"\");\n      return o.call(this, i);\n    }, s.valueOf = function () {\n      var t = this.$utils().u(this.$offset) ? 0 : this.$offset + (this.$x.$localOffset || new Date().getTimezoneOffset());\n      return this.$d.valueOf() - 6e4 * t;\n    }, s.isUTC = function () {\n      return !!this.$u;\n    }, s.toISOString = function () {\n      return this.toDate().toISOString();\n    }, s.toString = function () {\n      return this.toDate().toUTCString();\n    };\n    var r = s.toDate;\n\n    s.toDate = function (t) {\n      return \"s\" === t && this.$offset ? e(this.format(\"YYYY-MM-DD HH:mm:ss:SSS\")).toDate() : r.call(this);\n    };\n\n    var a = s.diff;\n\n    s.diff = function (t, i, s) {\n      if (t && this.$u === t.$u) return a.call(this, t, i, s);\n      var f = this.local(),\n          n = e(t).local();\n      return a.call(f, n, i, s);\n    };\n  };\n});","map":null,"metadata":{},"sourceType":"script"}