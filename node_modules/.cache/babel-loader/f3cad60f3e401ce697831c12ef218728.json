{"ast":null,"code":"// If the passed object is an (async) iterable, then get the iterator\n// If it's probably an iterator already (i.e. has next function) return it\n// else throw\nmodule.exports = function getIterator(obj) {\n  if (obj) {\n    if (typeof obj[Symbol.iterator] === 'function') {\n      return obj[Symbol.iterator]();\n    }\n\n    if (typeof obj[Symbol.asyncIterator] === 'function') {\n      return obj[Symbol.asyncIterator]();\n    }\n\n    if (typeof obj.next === 'function') {\n      return obj; // probably an iterator\n    }\n  }\n\n  throw new Error('argument is not an iterator or iterable');\n};","map":null,"metadata":{},"sourceType":"script"}