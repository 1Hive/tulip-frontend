{"ast":null,"code":"/* eslint-env browser */\n'use strict';\n\nconst {\n  default: PQueue\n} = require('p-queue');\n\nconst HTTP = require('ipfs-utils/src/http');\n\nconst debug = require('debug');\n\nconst log = debug('ipfs:preload');\nlog.error = debug('ipfs:preload:error'); // browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\n\nconst httpQueue = new PQueue({\n  concurrency: 4\n});\n\nmodule.exports = function preload(url, options) {\n  log(url);\n  options = options || {};\n  return httpQueue.add(async () => {\n    const res = await HTTP.get(url, {\n      signal: options.signal\n    });\n    const reader = res.body.getReader();\n\n    try {\n      while (true) {\n        const {\n          done\n        } = await reader.read();\n        if (done) return; // Read to completion but do not cache\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}