{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar _require = require('./utils/index'),\n    throwIfUndefined = _require.throwIfUndefined,\n    throwIfNotEqualLenArrays = _require.throwIfNotEqualLenArrays;\n\nvar KeyValueStore = /*#__PURE__*/function () {\n  /**\n   * Please use **box.public** or **box.private** to get the instance of this class\n   */\n  function KeyValueStore(name, replicator, threeId) {\n    (0, _classCallCheck2[\"default\"])(this, KeyValueStore);\n    this._name = name;\n    this._replicator = replicator;\n\n    if (this._name.startsWith('3box.space.')) {\n      this._space = this._name.split('.')[2];\n    }\n\n    this._3id = threeId;\n  }\n  /**\n   * Get the value and optionally metadata of the given key\n   *\n   * @param     {String}    key                             the key\n   * @param     {Object}    opts                            optional parameters\n   * @param     {Boolean}   opts.metadata                   return both value and metadata\n   * @return    {String|{value: String, timestamp: Number}} the value associated with the key, undefined if there's no such key\n   */\n\n\n  (0, _createClass2[\"default\"])(KeyValueStore, [{\n    key: \"get\",\n    value: function () {\n      var _get2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(key) {\n        var opts,\n            x,\n            metadata,\n            _args = arguments;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                opts = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                _context.next = 3;\n                return this._get(key);\n\n              case 3:\n                x = _context.sent;\n\n                if (x) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", x);\n\n              case 6:\n                if (!opts.metadata) {\n                  _context.next = 9;\n                  break;\n                }\n\n                metadata = this._extractMetadata(x);\n                return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, metadata), {}, {\n                  value: x.value\n                }));\n\n              case 9:\n                return _context.abrupt(\"return\", x.value);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function get(_x) {\n        return _get2.apply(this, arguments);\n      }\n\n      return get;\n    }()\n    /**\n     * Get metadata for for a given key\n     *\n     * @param     {String}    key                     the key\n     * @return    {Metadata}                          Metadata for the key, undefined if there's no such key\n     */\n\n  }, {\n    key: \"getMetadata\",\n    value: function () {\n      var _getMetadata = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2(key) {\n        var x;\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._get(key);\n\n              case 2:\n                x = _context2.sent;\n\n                if (x) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", x);\n\n              case 5:\n                return _context2.abrupt(\"return\", this._extractMetadata(x));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getMetadata(_x2) {\n        return _getMetadata.apply(this, arguments);\n      }\n\n      return getMetadata;\n    }()\n    /**\n     * Set a value for the given key\n     *\n     * @param     {String}    key                     the key\n     * @param     {String}    value                   the value\n     * @return    {Boolean}                           true if successful\n     */\n\n  }, {\n    key: \"set\",\n    value: function () {\n      var _set = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(key, value) {\n        var timeStamp;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                throwIfUndefined(key, 'key');\n\n                this._requireLoad();\n\n                this._replicator.ensureConnected(this._db.address.toString());\n\n                timeStamp = new Date().getTime();\n                _context3.next = 6;\n                return this._db.put(key, {\n                  value: value,\n                  timeStamp: timeStamp\n                });\n\n              case 6:\n                return _context3.abrupt(\"return\", true);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function set(_x3, _x4) {\n        return _set.apply(this, arguments);\n      }\n\n      return set;\n    }()\n    /**\n    * Set multiple values for multiple keys\n    *\n    * @param     {Array<String>}    keys                     the keys\n    * @param     {Array<String>}    values                   the values\n    * @return    {Boolean}                                  true if successful, throw error if not\n    */\n\n  }, {\n    key: \"setMultiple\",\n    value: function () {\n      var _setMultiple = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee5(keys, values) {\n        var _this = this;\n\n        return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                throwIfNotEqualLenArrays(keys, values);\n\n                this._requireLoad();\n\n                this._replicator.ensureConnected(this._db.address.toString());\n\n                _context5.prev = 3;\n                _context5.next = 6;\n                return keys.reduce( /*#__PURE__*/function () {\n                  var _ref = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(previousPromise, nextKey, index) {\n                    var timeStamp;\n                    return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n                      while (1) {\n                        switch (_context4.prev = _context4.next) {\n                          case 0:\n                            _context4.next = 2;\n                            return previousPromise;\n\n                          case 2:\n                            throwIfUndefined(nextKey, 'key');\n                            timeStamp = new Date().getTime();\n                            return _context4.abrupt(\"return\", _this._db.put(nextKey, {\n                              value: values[index],\n                              timeStamp: timeStamp\n                            }));\n\n                          case 5:\n                          case \"end\":\n                            return _context4.stop();\n                        }\n                      }\n                    }, _callee4);\n                  }));\n\n                  return function (_x7, _x8, _x9) {\n                    return _ref.apply(this, arguments);\n                  };\n                }(), Promise.resolve());\n\n              case 6:\n                return _context5.abrupt(\"return\", true);\n\n              case 9:\n                _context5.prev = 9;\n                _context5.t0 = _context5[\"catch\"](3);\n                throw new Error(_context5.t0);\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[3, 9]]);\n      }));\n\n      function setMultiple(_x5, _x6) {\n        return _setMultiple.apply(this, arguments);\n      }\n\n      return setMultiple;\n    }()\n    /**\n     * Remove the value for the given key\n     *\n     * @param     {String}    key                     the key\n     * @return    {Boolean}                           true if successful\n     */\n\n  }, {\n    key: \"remove\",\n    value: function () {\n      var _remove = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee6(key) {\n        return _regenerator[\"default\"].wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                throwIfUndefined(key, 'key');\n\n                this._requireLoad();\n\n                this._replicator.ensureConnected(this._db.address.toString());\n\n                _context6.next = 5;\n                return this._db.del(key);\n\n              case 5:\n                return _context6.abrupt(\"return\", true);\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function remove(_x10) {\n        return _remove.apply(this, arguments);\n      }\n\n      return remove;\n    }()\n    /**\n     * Extract metadata from store object\n     * @private\n     * @param x {Object} data from store\n     * @return {Metadata} store metadata\n     */\n\n  }, {\n    key: \"_extractMetadata\",\n    value: function _extractMetadata(x) {\n      // ms -> seconds, see issue #396 for details\n      var timestamp = Math.floor(x.timeStamp / 1000);\n      return {\n        timestamp: timestamp\n      };\n    }\n    /**\n     * Get the raw value of the given key\n     * @private\n     *\n     * @param     {String}    key                     the key\n     * @return    {String}                            the value associated with the key\n     */\n\n  }, {\n    key: \"_get\",\n    value: function () {\n      var _get3 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee7(key) {\n        return _regenerator[\"default\"].wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                this._requireLoad();\n\n                return _context7.abrupt(\"return\", this._db.get(key));\n\n              case 2:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function _get(_x11) {\n        return _get3.apply(this, arguments);\n      }\n\n      return _get;\n    }()\n  }, {\n    key: \"_sync\",\n    value: function () {\n      var _sync2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee8() {\n        return _regenerator[\"default\"].wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                this._requireLoad();\n\n                _context8.next = 3;\n                return this._replicator.syncDB(this._db);\n\n              case 3:\n                return _context8.abrupt(\"return\", this._db.address.toString());\n\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function _sync() {\n        return _sync2.apply(this, arguments);\n      }\n\n      return _sync;\n    }()\n  }, {\n    key: \"_load\",\n    value: function () {\n      var _load2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee9(threeId) {\n        var _this2 = this;\n\n        var odbAddress, key, odbIdentity;\n        return _regenerator[\"default\"].wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                this._3id = threeId || this._3id;\n                odbAddress = this._replicator.listStoreAddresses().find(function (odbAddress) {\n                  return odbAddress.includes(_this2._name);\n                });\n\n                if (!odbAddress) {\n                  _context9.next = 8;\n                  break;\n                }\n\n                _context9.next = 5;\n                return this._replicator.getStore(odbAddress);\n\n              case 5:\n                this._db = _context9.sent;\n                _context9.next = 14;\n                break;\n\n              case 8:\n                _context9.next = 10;\n                return this._3id.getPublicKeys(this._space, true);\n\n              case 10:\n                key = _context9.sent.signingKey;\n                _context9.next = 13;\n                return this._replicator.addKVStore(this._name, key, Boolean(this._space), this._3id.getSubDID(this._space));\n\n              case 13:\n                this._db = _context9.sent;\n\n              case 14:\n                _context9.next = 16;\n                return this._3id.getOdbId(this._space);\n\n              case 16:\n                odbIdentity = _context9.sent;\n\n                this._db.setIdentity(odbIdentity);\n\n                return _context9.abrupt(\"return\", this._db.address.toString());\n\n              case 19:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function _load(_x12) {\n        return _load2.apply(this, arguments);\n      }\n\n      return _load;\n    }()\n  }, {\n    key: \"_requireLoad\",\n    value: function _requireLoad() {\n      if (!this._db) throw new Error('_load must be called before interacting with the store');\n    }\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee10() {\n        return _regenerator[\"default\"].wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                this._requireLoad();\n\n                _context10.next = 3;\n                return this._db.close();\n\n              case 3:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function close() {\n        return _close.apply(this, arguments);\n      }\n\n      return close;\n    }()\n    /**\n     * Get all values and optionally metadata\n     *\n     * @param     {Object}    opts                                    optional parameters\n     * @param     {Boolean}   opts.metadata                           return both values and metadata\n     * @return    {Array<String|{value: String, timestamp: Number}>}  the values\n     */\n\n  }, {\n    key: \"all\",\n    value: function () {\n      var _all = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee11() {\n        var _this3 = this;\n\n        var opts,\n            entries,\n            allSimple,\n            _args11 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                opts = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : {};\n\n                this._requireLoad();\n\n                entries = this._db.all;\n                allSimple = {};\n                Object.keys(entries).map(function (key) {\n                  var entry = entries[key];\n\n                  if (opts.metadata) {\n                    allSimple[key] = _objectSpread(_objectSpread({}, _this3._extractMetadata(entry)), {}, {\n                      value: entry.value\n                    });\n                  } else {\n                    allSimple[key] = entry.value;\n                  }\n                });\n                return _context11.abrupt(\"return\", allSimple);\n\n              case 6:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function all() {\n        return _all.apply(this, arguments);\n      }\n\n      return all;\n    }()\n    /**\n     * Returns array of underlying log entries. In linearized order according to their Lamport clocks.\n     * Useful for generating a complete history of all operations on store.\n     *\n     *  @example\n     *  const log = store.log\n     *  const entry = log[0]\n     *  console.log(entry)\n     *  // { op: 'PUT', key: 'Name', value: 'Botbot', timeStamp: '1538575416068' }\n     *\n     * @return    {Array<Object>}     Array of ordered log entry objects\n     */\n\n  }, {\n    key: \"log\",\n    value: function () {\n      var _log = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee12() {\n        return _regenerator[\"default\"].wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                return _context12.abrupt(\"return\", this._db._oplog.values.map(function (obj) {\n                  return {\n                    op: obj.payload.op,\n                    key: obj.payload.key,\n                    value: obj.payload.value ? obj.payload.value.value : null,\n                    timeStamp: obj.payload.value ? obj.payload.value.timeStamp : null\n                  };\n                }));\n\n              case 1:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function log() {\n        return _log.apply(this, arguments);\n      }\n\n      return log;\n    }()\n  }]);\n  return KeyValueStore;\n}();\n\nmodule.exports = KeyValueStore;","map":null,"metadata":{},"sourceType":"script"}