{"ast":null,"code":"export const ERROR_TYPES = {\n  ERROR_FETCHING_IPFS: Symbol('Error fetching ipfs content')\n};\nexport const Status = {\n  Open: Symbol('Open'),\n  Closed: Symbol('Closed'),\n  Voided: Symbol('Voided')\n};\nexport const Phase = {\n  All: Symbol('All'),\n  Invalid: Symbol('Invalid'),\n  Adjudicating: Symbol('Adjudicating'),\n  Ruled: Symbol('Ruled'),\n  Evidence: Symbol('Evidence submission'),\n  NotStarted: Symbol('Not started'),\n  JuryDrafting: Symbol('Jury drafting'),\n  VotingPeriod: Symbol('Voting period'),\n  RevealVote: Symbol('Reveal vote'),\n  AppealRuling: Symbol('Appealing'),\n  ConfirmAppeal: Symbol('ConfirmingAppeal'),\n  ClaimRewards: Symbol('Claim rewards'),\n  Ended: Symbol('Ended'),\n  ExecuteRuling: Symbol('Execute Ruling'),\n  Created: Symbol('Dispute created')\n};\nconst stringMapping = {\n  [Status.Open]: 'Open',\n  [Status.Closed]: 'Closed',\n  [Phase.All]: 'All',\n  [Phase.Evidence]: 'Comments submission',\n  [Phase.JuryDrafting]: 'Keepers drafting',\n  [Phase.NotStarted]: 'Starts in',\n  [Phase.VotingPeriod]: 'Voting period',\n  [Phase.RevealVote]: 'Reveal vote',\n  [Phase.AppealRuling]: 'Appeal ruling',\n  [Phase.ConfirmAppeal]: 'Confirm appeal',\n  [Phase.ClaimRewards]: 'Claim rewards',\n  [Phase.Invalid]: 'Invalid',\n  [Phase.Ended]: 'Ended',\n  [Phase.ExecuteRuling]: 'Execute Ruling',\n  [Phase.Created]: 'Dispute created'\n};\nconst endedStringMapping = {\n  [Status.Open]: 'Open',\n  [Status.Closed]: 'Closed',\n  [Phase.All]: 'All',\n  [Phase.Evidence]: 'Comments submitted',\n  [Phase.JuryDrafting]: 'Keepers drafted',\n  [Phase.VotingPeriod]: 'Voting period',\n  [Phase.RevealVote]: 'Vote revealed',\n  [Phase.AppealRuling]: 'Appeal ruling',\n  [Phase.ConfirmAppeal]: 'Appeal confirmed',\n  [Phase.ClaimRewards]: 'Claim rewards',\n  [Phase.Invalid]: 'Started',\n  [Phase.Ended]: 'Ended',\n  [Phase.ExecuteRuling]: 'Ruling Executed',\n  [Phase.Created]: 'Dispute created'\n};\nconst symbolMapping = {\n  All: Phase.All,\n  Invalid: Phase.Invalid,\n  Committing: Phase.VotingPeriod,\n  Revealing: Phase.RevealVote,\n  Drafting: Phase.JuryDrafting,\n  Adjudicating: Phase.Adjudicating,\n  Appeal: Phase.AppealRuling,\n  ConfirmAppeal: Phase.ConfirmAppeal,\n  ConfirmingAppeal: Phase.ConfirmAppeal,\n  Ruled: Phase.Ruled,\n  Evidence: Phase.Evidence,\n  ExecuteRuling: Phase.ExecuteRuling,\n  Created: Phase.Created\n};\nconst taskActionsMapping = {\n  [Phase.All]: 'All',\n  [Phase.VotingPeriod]: 'Commit vote',\n  [Phase.RevealVote]: 'Reveal vote',\n  [Phase.AppealRuling]: 'Appeal ruling',\n  [Phase.ConfirmAppeal]: 'Confirm appeal'\n};\nexport function convertFromString(str) {\n  return symbolMapping[str];\n}\nexport function convertToString(symbol) {\n  return stringMapping[symbol];\n}\nexport function getPhaseStringForStatus(symbol, active) {\n  if (active) {\n    return stringMapping[symbol];\n  } else {\n    return endedStringMapping[symbol];\n  }\n}\nexport function getTaskActionString(symbol) {\n  return taskActionsMapping[symbol];\n}","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/types/dispute-status-types.js"],"names":["ERROR_TYPES","ERROR_FETCHING_IPFS","Symbol","Status","Open","Closed","Voided","Phase","All","Invalid","Adjudicating","Ruled","Evidence","NotStarted","JuryDrafting","VotingPeriod","RevealVote","AppealRuling","ConfirmAppeal","ClaimRewards","Ended","ExecuteRuling","Created","stringMapping","endedStringMapping","symbolMapping","Committing","Revealing","Drafting","Appeal","ConfirmingAppeal","taskActionsMapping","convertFromString","str","convertToString","symbol","getPhaseStringForStatus","active","getTaskActionString"],"mappings":"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","sourcesContent":["export const ERROR_TYPES = {\r\n  ERROR_FETCHING_IPFS: Symbol('Error fetching ipfs content'),\r\n}\r\n\r\nexport const Status = {\r\n  Open: Symbol('Open'),\r\n  Closed: Symbol('Closed'),\r\n  Voided: Symbol('Voided'),\r\n}\r\n\r\nexport const Phase = {\r\n  All: Symbol('All'),\r\n  Invalid: Symbol('Invalid'),\r\n  Adjudicating: Symbol('Adjudicating'),\r\n  Ruled: Symbol('Ruled'),\r\n  Evidence: Symbol('Evidence submission'),\r\n  NotStarted: Symbol('Not started'),\r\n  JuryDrafting: Symbol('Jury drafting'),\r\n  VotingPeriod: Symbol('Voting period'),\r\n  RevealVote: Symbol('Reveal vote'),\r\n  AppealRuling: Symbol('Appealing'),\r\n  ConfirmAppeal: Symbol('ConfirmingAppeal'),\r\n  ClaimRewards: Symbol('Claim rewards'),\r\n  Ended: Symbol('Ended'),\r\n  ExecuteRuling: Symbol('Execute Ruling'),\r\n  Created: Symbol('Dispute created'),\r\n}\r\n\r\nconst stringMapping = {\r\n  [Status.Open]: 'Open',\r\n  [Status.Closed]: 'Closed',\r\n  [Phase.All]: 'All',\r\n  [Phase.Evidence]: 'Comments submission',\r\n  [Phase.JuryDrafting]: 'Keepers drafting',\r\n  [Phase.NotStarted]: 'Starts in',\r\n  [Phase.VotingPeriod]: 'Voting period',\r\n  [Phase.RevealVote]: 'Reveal vote',\r\n  [Phase.AppealRuling]: 'Appeal ruling',\r\n  [Phase.ConfirmAppeal]: 'Confirm appeal',\r\n  [Phase.ClaimRewards]: 'Claim rewards',\r\n  [Phase.Invalid]: 'Invalid',\r\n  [Phase.Ended]: 'Ended',\r\n  [Phase.ExecuteRuling]: 'Execute Ruling',\r\n  [Phase.Created]: 'Dispute created',\r\n}\r\n\r\nconst endedStringMapping = {\r\n  [Status.Open]: 'Open',\r\n  [Status.Closed]: 'Closed',\r\n  [Phase.All]: 'All',\r\n  [Phase.Evidence]: 'Comments submitted',\r\n  [Phase.JuryDrafting]: 'Keepers drafted',\r\n  [Phase.VotingPeriod]: 'Voting period',\r\n  [Phase.RevealVote]: 'Vote revealed',\r\n  [Phase.AppealRuling]: 'Appeal ruling',\r\n  [Phase.ConfirmAppeal]: 'Appeal confirmed',\r\n  [Phase.ClaimRewards]: 'Claim rewards',\r\n  [Phase.Invalid]: 'Started',\r\n  [Phase.Ended]: 'Ended',\r\n  [Phase.ExecuteRuling]: 'Ruling Executed',\r\n  [Phase.Created]: 'Dispute created',\r\n}\r\n\r\nconst symbolMapping = {\r\n  All: Phase.All,\r\n  Invalid: Phase.Invalid,\r\n  Committing: Phase.VotingPeriod,\r\n  Revealing: Phase.RevealVote,\r\n  Drafting: Phase.JuryDrafting,\r\n  Adjudicating: Phase.Adjudicating,\r\n  Appeal: Phase.AppealRuling,\r\n  ConfirmAppeal: Phase.ConfirmAppeal,\r\n  ConfirmingAppeal: Phase.ConfirmAppeal,\r\n  Ruled: Phase.Ruled,\r\n  Evidence: Phase.Evidence,\r\n  ExecuteRuling: Phase.ExecuteRuling,\r\n  Created: Phase.Created,\r\n}\r\n\r\nconst taskActionsMapping = {\r\n  [Phase.All]: 'All',\r\n  [Phase.VotingPeriod]: 'Commit vote',\r\n  [Phase.RevealVote]: 'Reveal vote',\r\n  [Phase.AppealRuling]: 'Appeal ruling',\r\n  [Phase.ConfirmAppeal]: 'Confirm appeal',\r\n}\r\n\r\nexport function convertFromString(str) {\r\n  return symbolMapping[str]\r\n}\r\n\r\nexport function convertToString(symbol) {\r\n  return stringMapping[symbol]\r\n}\r\n\r\nexport function getPhaseStringForStatus(symbol, active) {\r\n  if (active) {\r\n    return stringMapping[symbol]\r\n  } else {\r\n    return endedStringMapping[symbol]\r\n  }\r\n}\r\n\r\nexport function getTaskActionString(symbol) {\r\n  return taskActionsMapping[symbol]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}