{"ast":null,"code":"'use strict';\n\nvar protobuf = require('protons');\n\nmodule.exports = protobuf(\"\\nmessage CircuitRelay {\\n\\n  enum Status {\\n    SUCCESS                    = 100;\\n    HOP_SRC_ADDR_TOO_LONG      = 220;\\n    HOP_DST_ADDR_TOO_LONG      = 221;\\n    HOP_SRC_MULTIADDR_INVALID  = 250;\\n    HOP_DST_MULTIADDR_INVALID  = 251;\\n    HOP_NO_CONN_TO_DST         = 260;\\n    HOP_CANT_DIAL_DST          = 261;\\n    HOP_CANT_OPEN_DST_STREAM   = 262;\\n    HOP_CANT_SPEAK_RELAY       = 270;\\n    HOP_CANT_RELAY_TO_SELF     = 280;\\n    STOP_SRC_ADDR_TOO_LONG     = 320;\\n    STOP_DST_ADDR_TOO_LONG     = 321;\\n    STOP_SRC_MULTIADDR_INVALID = 350;\\n    STOP_DST_MULTIADDR_INVALID = 351;\\n    STOP_RELAY_REFUSED         = 390;\\n    MALFORMED_MESSAGE          = 400;\\n  }\\n\\n  enum Type { // RPC identifier, either HOP, STOP or STATUS\\n    HOP = 1;\\n    STOP = 2;\\n    STATUS = 3;\\n    CAN_HOP = 4;\\n  }\\n\\n  message Peer {\\n    required bytes id = 1;    // peer id\\n    repeated bytes addrs = 2; // peer's known addresses\\n  }\\n\\n  optional Type type = 1;     // Type of the message\\n\\n  optional Peer srcPeer = 2;  // srcPeer and dstPeer are used when Type is HOP or STATUS\\n  optional Peer dstPeer = 3;\\n\\n  optional Status code = 4;   // Status code, used when Type is STATUS\\n}\\n\");","map":null,"metadata":{},"sourceType":"script"}