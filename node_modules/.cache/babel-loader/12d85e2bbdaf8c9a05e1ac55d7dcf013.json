{"ast":null,"code":"'use strict';\n\nconst exporter = require('ipfs-unixfs-exporter');\n\nconst toMfsPath = require('./utils/to-mfs-path');\n\nconst {\n  MFS_FILE_TYPES,\n  withTimeoutOption\n} = require('../../utils');\n\nconst toOutput = fsEntry => {\n  let type = 0;\n  let size = fsEntry.node.size || fsEntry.node.length;\n  let mode;\n  let mtime;\n\n  if (fsEntry.unixfs) {\n    size = fsEntry.unixfs.fileSize();\n    type = MFS_FILE_TYPES[fsEntry.unixfs.type];\n    mode = fsEntry.unixfs.mode;\n    mtime = fsEntry.unixfs.mtime;\n  }\n\n  const output = {\n    cid: fsEntry.cid,\n    name: fsEntry.name,\n    type,\n    size\n  };\n\n  if (mtime !== undefined) {\n    output.mtime = mtime;\n  }\n\n  if (mode !== undefined) {\n    output.mode = mode;\n  }\n\n  return output;\n};\n\nmodule.exports = context => {\n  return withTimeoutOption(async function* mfsLs(path = '/', options = {}) {\n    if (typeof path === 'object' && !(path instanceof String)) {\n      options = path;\n      path = '/';\n    }\n\n    const mfsPath = await toMfsPath(context, path);\n    const fsDir = await exporter(mfsPath.mfsPath, context.ipld); // single file/node\n\n    if (!fsDir.unixfs || !fsDir.unixfs.type.includes('directory')) {\n      yield toOutput(fsDir);\n      return;\n    } // directory, perhaps sharded\n\n\n    for await (const fsEntry of fsDir.content(options)) {\n      yield toOutput(fsEntry);\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}