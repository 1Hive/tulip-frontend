{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar utils = require('../../utils');\n\nvar errcode = require('err-code');\n\nmodule.exports = function (dht) {\n  var log = utils.logger(dht.peerInfo.id, 'rpc:put-value');\n  /**\n   * Process `PutValue` DHT messages.\n   *\n   * @param {PeerInfo} peer\n   * @param {Message} msg\n   * @returns {Promise<Message>}\n   */\n\n  return /*#__PURE__*/function () {\n    var _putValue = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peer, msg) {\n      var key, record, errMsg, recordKey;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              key = msg.key;\n              log('key: %b', key);\n              record = msg.record;\n\n              if (record) {\n                _context.next = 7;\n                break;\n              }\n\n              errMsg = \"Empty record from: \".concat(peer.id.toB58String());\n              log.error(errMsg);\n              throw errcode(new Error(errMsg), 'ERR_EMPTY_RECORD');\n\n            case 7:\n              _context.next = 9;\n              return dht._verifyRecordLocally(record);\n\n            case 9:\n              record.timeReceived = new Date();\n              recordKey = utils.bufferToKey(record.key);\n              _context.next = 13;\n              return dht.datastore.put(recordKey, record.serialize());\n\n            case 13:\n              return _context.abrupt(\"return\", msg);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function putValue(_x, _x2) {\n      return _putValue.apply(this, arguments);\n    }\n\n    return putValue;\n  }();\n};","map":null,"metadata":{},"sourceType":"script"}