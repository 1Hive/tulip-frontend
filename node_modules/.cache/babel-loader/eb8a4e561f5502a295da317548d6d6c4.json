{"ast":null,"code":"'use strict';\n\nconst Key = require('interface-datastore').Key;\n\nconst KeytransformDatastore = require('./keytransform');\n/**\n * Wraps a given datastore into a keytransform which\n * makes a given prefix transparent.\n *\n * For example, if the prefix is `new Key(/hello)` a call\n * to `store.put(new Key('/world'), mydata)` would store the data under\n * `/hello/world`.\n *\n */\n\n\nclass NamespaceDatastore extends KeytransformDatastore {\n  constructor(child, prefix) {\n    super(child, {\n      convert(key) {\n        return prefix.child(key);\n      },\n\n      invert(key) {\n        if (prefix.toString() === '/') {\n          return key;\n        }\n\n        if (!prefix.isAncestorOf(key)) {\n          throw new Error(`Expected prefix: (${prefix.toString()}) in key: ${key.toString()}`);\n        }\n\n        return new Key(key.toString().slice(prefix.toString().length), false);\n      }\n\n    });\n    this.prefix = prefix;\n  }\n\n  query(q) {\n    if (q.prefix && this.prefix.toString() !== '/') {\n      return super.query(Object.assign({}, q, {\n        prefix: this.prefix.child(new Key(q.prefix)).toString()\n      }));\n    }\n\n    return super.query(q);\n  }\n\n}\n\nmodule.exports = NamespaceDatastore;","map":null,"metadata":{},"sourceType":"script"}