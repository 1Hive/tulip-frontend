{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport multicall from 'utils/multicall';\nimport { getMasterChefAddress } from 'utils/addressHelpers';\nimport masterChefABI from 'config/abi/masterchef.json';\nimport { farmsConfig } from 'config/constants';\nimport useRefresh from './useRefresh';\n\nconst useFarmsWithBalance = () => {\n  _s();\n\n  const [farmsWithBalances, setFarmsWithBalances] = useState([]);\n  const {\n    account\n  } = useWallet();\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map(farm => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account]\n      }));\n      const rawResults = await multicall(masterChefABI, calls);\n      const results = farmsConfig.map((farm, index) => ({ ...farm,\n        balance: new BigNumber(rawResults[index])\n      }));\n      setFarmsWithBalances(results);\n    };\n\n    if (account) {\n      fetchBalances();\n    }\n  }, [account, fastRefresh]);\n  return farmsWithBalances;\n};\n\n_s(useFarmsWithBalance, \"CHNPAMzPWe7dKEIn65bMTj3w5JE=\", false, function () {\n  return [useWallet, useRefresh];\n});\n\nexport default useFarmsWithBalance;","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/hooks/useFarmsWithBalance.ts"],"names":["useEffect","useState","BigNumber","useWallet","multicall","getMasterChefAddress","masterChefABI","farmsConfig","useRefresh","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","account","fastRefresh","fetchBalances","calls","map","farm","address","name","params","pid","rawResults","results","index","balance"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,oBAAT,QAAqC,sBAArC;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,OAAOC,UAAP,MAAuB,cAAvB;;AAMA,MAAMC,mBAAmB,GAAG,MAAM;AAAA;;AAChC,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CV,QAAQ,CAAoB,EAApB,CAA1D;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAcT,SAAS,EAA7B;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAkBL,UAAU,EAAlC;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,aAAa,GAAG,YAAY;AAChC,YAAMC,KAAK,GAAGR,WAAW,CAACS,GAAZ,CAAiBC,IAAD,KAAW;AACvCC,QAAAA,OAAO,EAAEb,oBAAoB,EADU;AAEvCc,QAAAA,IAAI,EAAE,aAFiC;AAGvCC,QAAAA,MAAM,EAAE,CAACH,IAAI,CAACI,GAAN,EAAWT,OAAX;AAH+B,OAAX,CAAhB,CAAd;AAMA,YAAMU,UAAU,GAAG,MAAMlB,SAAS,CAACE,aAAD,EAAgBS,KAAhB,CAAlC;AACA,YAAMQ,OAAO,GAAGhB,WAAW,CAACS,GAAZ,CAAgB,CAACC,IAAD,EAAOO,KAAP,MAAkB,EAAE,GAAGP,IAAL;AAAWQ,QAAAA,OAAO,EAAE,IAAIvB,SAAJ,CAAcoB,UAAU,CAACE,KAAD,CAAxB;AAApB,OAAlB,CAAhB,CAAhB;AAEAb,MAAAA,oBAAoB,CAACY,OAAD,CAApB;AACD,KAXD;;AAaA,QAAIX,OAAJ,EAAa;AACXE,MAAAA,aAAa;AACd;AACF,GAjBQ,EAiBN,CAACF,OAAD,EAAUC,WAAV,CAjBM,CAAT;AAmBA,SAAOH,iBAAP;AACD,CAzBD;;GAAMD,mB;UAEgBN,S,EACIK,U;;;AAwB1B,eAAeC,mBAAf","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n"]},"metadata":{},"sourceType":"module"}