{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar EventEmitter = require('events');\n\nvar lp = require('it-length-prefixed');\n\nvar pushable = require('it-pushable');\n\nvar pipe = require('it-pipe');\n\nvar debug = require('debug');\n\nvar log = debug('libp2p-pubsub:peer');\nlog.error = debug('libp2p-pubsub:peer:error');\n\nvar _require = require('./message'),\n    RPC = _require.RPC;\n/**\n * The known state of a connected peer.\n */\n\n\nvar Peer = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Peer, _EventEmitter);\n\n  var _super = _createSuper(Peer);\n\n  /**\n   * @param {PeerInfo} info\n   */\n  function Peer(info) {\n    var _this;\n\n    _classCallCheck(this, Peer);\n\n    _this = _super.call(this);\n    /**\n     * @type {PeerInfo}\n     */\n\n    _this.info = info;\n    /**\n     * @type {Connection}\n     */\n\n    _this.conn = null;\n    /**\n     * @type {Set}\n     */\n\n    _this.topics = new Set();\n    /**\n     * @type {Pushable}\n     */\n\n    _this.stream = null;\n    return _this;\n  }\n  /**\n   * Is the peer connected currently?\n   *\n   * @type {boolean}\n   */\n\n\n  _createClass(Peer, [{\n    key: \"isConnected\",\n    get: function get() {\n      return Boolean(this.conn);\n    }\n    /**\n     * Do we have a connection to write on?\n     *\n     * @type {boolean}\n     */\n\n  }, {\n    key: \"isWritable\",\n    get: function get() {\n      return Boolean(this.stream);\n    }\n    /**\n     * Send a message to this peer.\n     * Throws if there is no `stream` to write to available.\n     *\n     * @param {Buffer} msg\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(msg) {\n      if (!this.isWritable) {\n        var id = this.info.id.toB58String();\n        throw new Error('No writable connection to ' + id);\n      }\n\n      this.stream.push(msg);\n    }\n    /**\n     * Attach the peer to a connection and setup a write stream\n     *\n     * @param {Connection} conn\n     * @returns {void}\n     */\n\n  }, {\n    key: \"attachConnection\",\n    value: function () {\n      var _attachConnection = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(conn) {\n        var _this2 = this;\n\n        var _prevStream;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _prevStream = this.stream;\n\n                if (!_prevStream) {\n                  _context.next = 4;\n                  break;\n                }\n\n                _context.next = 4;\n                return _prevStream.end(false);\n\n              case 4:\n                this.stream = pushable({\n                  onEnd: function onEnd(emit) {\n                    // close readable side of the stream\n                    _this2.conn.reset && _this2.conn.reset();\n                    _this2.conn = null;\n                    _this2.stream = null;\n\n                    if (emit !== false) {\n                      _this2.emit('close');\n                    }\n                  }\n                });\n                this.conn = conn;\n                pipe(this.stream, lp.encode(), conn).catch(function (err) {\n                  log.error(err);\n                }); // Only emit if the connection is new\n\n                if (!_prevStream) {\n                  this.emit('connection');\n                }\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function attachConnection(_x) {\n        return _attachConnection.apply(this, arguments);\n      }\n\n      return attachConnection;\n    }()\n  }, {\n    key: \"_sendRawSubscriptions\",\n    value: function _sendRawSubscriptions(topics, subscribe) {\n      if (topics.size === 0) {\n        return;\n      }\n\n      var subs = [];\n      topics.forEach(function (topic) {\n        subs.push({\n          subscribe: subscribe,\n          topicID: topic\n        });\n      });\n      this.write(RPC.encode({\n        subscriptions: subs\n      }));\n    }\n    /**\n     * Send the given subscriptions to this peer.\n     * @param {Set|Array} topics\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"sendSubscriptions\",\n    value: function sendSubscriptions(topics) {\n      this._sendRawSubscriptions(topics, true);\n    }\n    /**\n     * Send the given unsubscriptions to this peer.\n     * @param {Set|Array} topics\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"sendUnsubscriptions\",\n    value: function sendUnsubscriptions(topics) {\n      this._sendRawSubscriptions(topics, false);\n    }\n    /**\n     * Send messages to this peer.\n     *\n     * @param {Array<any>} msgs\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"sendMessages\",\n    value: function sendMessages(msgs) {\n      this.write(RPC.encode({\n        msgs: msgs\n      }));\n    }\n    /**\n     * Bulk process subscription updates.\n     *\n     * @param {Array} changes\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"updateSubscriptions\",\n    value: function updateSubscriptions(changes) {\n      var _this3 = this;\n\n      changes.forEach(function (subopt) {\n        if (subopt.subscribe) {\n          _this3.topics.add(subopt.topicID);\n        } else {\n          _this3.topics.delete(subopt.topicID);\n        }\n      });\n    }\n    /**\n     * Closes the open connection to peer\n     * @returns {void}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      // End the pushable\n      if (this.stream) {\n        this.stream.end();\n      }\n\n      this.conn = null;\n      this.stream = null;\n      this.emit('close');\n    }\n  }]);\n\n  return Peer;\n}(EventEmitter);\n\nmodule.exports = Peer;","map":null,"metadata":{},"sourceType":"script"}