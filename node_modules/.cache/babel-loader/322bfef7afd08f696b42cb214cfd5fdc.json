{"ast":null,"code":"'use strict';\n\nconst errors = require('./errors');\n\nconst debug = require('debug');\n\nconst log = debug('repo:lock');\nconst lockFile = 'repo.lock';\nconst LOCKS = {};\n/**\n * Lock the repo in the given dir.\n *\n * @param {string} dir\n * @returns {Promise<Object>}\n */\n\nexports.lock = async dir => {\n  // eslint-disable-line require-await\n  const file = dir + '/' + lockFile;\n  log('locking %s', file);\n\n  if (LOCKS[file] === true) {\n    throw new errors.LockExistsError(`Lock already being held for file: ${file}`);\n  }\n\n  LOCKS[file] = true;\n  const closer = {\n    async close() {\n      // eslint-disable-line require-await\n      if (LOCKS[file]) {\n        delete LOCKS[file];\n      }\n    }\n\n  };\n  return closer;\n};\n/**\n * Check if the repo in the given directory is locked.\n *\n * @param {string} dir\n * @returns {bool}\n */\n\n\nexports.locked = async dir => {\n  // eslint-disable-line require-await\n  const file = dir + '/' + lockFile;\n  log(`checking lock: ${file}`);\n  return Boolean(LOCKS[file]);\n};","map":null,"metadata":{},"sourceType":"script"}