{"ast":null,"code":"import { useEffect, useMemo, useState } from 'react';\nimport { wallet } from 'tulip-data';\nimport { useWallet } from 'use-wallet';\nconst ASSET_DEFAULT = {\n  symbol: '',\n  name: '',\n  balance: '',\n  price: '',\n  value: '',\n  image1: '',\n  image2: ''\n};\nexport function useWalletData() {\n  const [walletInfo, setWalletInfo] = useState([]);\n  const [poolingInfo, setPoolingInfo] = useState([]);\n  const [isFetchingWallet, setIsFetchingWallet] = useState(false);\n  const [isFetchingPool, setIsFetchingPool] = useState(false);\n  const {\n    account\n  } = useWallet();\n  useEffect(() => {\n    let cancelled = false;\n\n    if (!account) {\n      return setWalletInfo([]);\n    }\n\n    const fetchWalletData = async () => {\n      try {\n        setIsFetchingWallet(true);\n        const balances = await wallet.tokenBalances({\n          user_address: account\n        });\n\n        if (!cancelled) {\n          setWalletInfo(balances);\n          return setIsFetchingWallet(false);\n        }\n      } catch (err) {\n        console.error(`Could not fetch wallet data `, err);\n      }\n    };\n\n    const fetchPoolingData = async () => {\n      try {\n        setIsFetchingPool(true);\n        const poolingData = await wallet.poolBalances({\n          user_address: account\n        });\n\n        if (!cancelled) {\n          setPoolingInfo(poolingData);\n          return setIsFetchingPool(false);\n        }\n      } catch (err) {\n        console.error(`Could not fetch wallet data `, err);\n      }\n    };\n\n    fetchWalletData();\n    fetchPoolingData();\n    return () => {\n      cancelled = true;\n    };\n  }, [account]);\n  return [walletInfo, poolingInfo, isFetchingWallet || isFetchingPool];\n}\nexport function useNetBalance() {\n  const [walletInfo, poolingInfo, isFetching] = useWalletData();\n  return useMemo(() => {\n    let netBalance = 0;\n    let walletBalance = 0;\n    let poolBalance = 0;\n    const assetsList = [];\n\n    if (!walletInfo || walletInfo.length === 0 || !poolingInfo) {\n      return {\n        walletBalance,\n        poolBalance,\n        netBalance,\n        assetsList,\n        isFetching\n      };\n    }\n\n    walletInfo.map(value => {\n      if (value && parseFloat(value.valueUSD)) {\n        walletBalance = walletBalance + parseFloat(value.valueUSD);\n        assetsList.push({\n          symbol: value.symbol,\n          name: value.name,\n          balance: value.balance.toFixed(4),\n          price: value.priceUSD.toFixed(4),\n          value: value.valueUSD.toFixed(2),\n          image1: value.logoURI,\n          image2: ''\n        });\n      }\n    });\n    poolingInfo.map(value => {\n      if (value && parseFloat(value.valueUSD)) {\n        poolBalance = Number(poolBalance) + parseFloat(value.valueUSD);\n        const asset = ASSET_DEFAULT;\n\n        if (value.tokens && value.tokens.length > 1) {\n          value.tokens.map((token, i) => {\n            console.log(token);\n            asset.symbol = i === 0 ? token.symbol + '-' : asset.symbol + token.symbol;\n\n            if (i === 0) {\n              asset.image1 = token.logoURI;\n            } else {\n              asset.image2 = token.logoURI;\n            }\n          });\n        }\n\n        asset.balance = Number(value.balance).toFixed(4);\n        asset.value = Number(value.valueUSD).toFixed(2);\n        asset.price = Number(value.valueUSD / value.balance).toFixed(4);\n        asset.name = 'HoneySwap';\n        assetsList.push(asset);\n      }\n    });\n    walletBalance = walletBalance.toFixed(2);\n    poolBalance = poolBalance.toFixed(2);\n    netBalance = parseFloat(Number(walletBalance) + Number(poolBalance) + netBalance).toFixed(2);\n    return {\n      walletBalance,\n      poolBalance,\n      netBalance,\n      assetsList,\n      isFetching\n    };\n  }, [isFetching]);\n}","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/hooks/useWalletData.js"],"names":["useEffect","useMemo","useState","wallet","useWallet","ASSET_DEFAULT","symbol","name","balance","price","value","image1","image2","useWalletData","walletInfo","setWalletInfo","poolingInfo","setPoolingInfo","isFetchingWallet","setIsFetchingWallet","isFetchingPool","setIsFetchingPool","account","cancelled","fetchWalletData","balances","tokenBalances","user_address","err","console","error","fetchPoolingData","poolingData","poolBalances","useNetBalance","isFetching","netBalance","walletBalance","poolBalance","assetsList","length","map","parseFloat","valueUSD","push","toFixed","priceUSD","logoURI","Number","asset","tokens","token","i","log"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useState } from 'react'\r\nimport { wallet } from 'tulip-data'\r\nimport { useWallet } from 'use-wallet'\r\n\r\nconst ASSET_DEFAULT = {\r\n  symbol: '',\r\n  name: '',\r\n  balance: '',\r\n  price: '',\r\n  value: '',\r\n  image1: '',\r\n  image2: '',\r\n}\r\n\r\nexport function useWalletData() {\r\n  const [walletInfo, setWalletInfo] = useState([])\r\n  const [poolingInfo, setPoolingInfo] = useState([])\r\n  const [isFetchingWallet, setIsFetchingWallet] = useState(false)\r\n  const [isFetchingPool, setIsFetchingPool] = useState(false)\r\n  const { account } = useWallet()\r\n\r\n  useEffect(() => {\r\n    let cancelled = false\r\n    if (!account) {\r\n      return setWalletInfo([])\r\n    }\r\n\r\n    const fetchWalletData = async () => {\r\n      try {\r\n        setIsFetchingWallet(true)\r\n        const balances = await wallet.tokenBalances({\r\n          user_address: account,\r\n        })\r\n\r\n        if (!cancelled) {\r\n          setWalletInfo(balances)\r\n          return setIsFetchingWallet(false)\r\n        }\r\n      } catch (err) {\r\n        console.error(`Could not fetch wallet data `, err)\r\n      }\r\n    }\r\n\r\n    const fetchPoolingData = async () => {\r\n      try {\r\n        setIsFetchingPool(true)\r\n\r\n        const poolingData = await wallet.poolBalances({\r\n          user_address: account,\r\n        })\r\n\r\n        if (!cancelled) {\r\n          setPoolingInfo(poolingData)\r\n          return setIsFetchingPool(false)\r\n        }\r\n      } catch (err) {\r\n        console.error(`Could not fetch wallet data `, err)\r\n      }\r\n    }\r\n\r\n    fetchWalletData()\r\n    fetchPoolingData()\r\n    return () => {\r\n      cancelled = true\r\n    }\r\n  }, [account])\r\n\r\n  return [walletInfo, poolingInfo, isFetchingWallet || isFetchingPool]\r\n}\r\n\r\nexport function useNetBalance() {\r\n  const [walletInfo, poolingInfo, isFetching] = useWalletData()\r\n\r\n  return useMemo(() => {\r\n    let netBalance = 0\r\n    let walletBalance = 0\r\n    let poolBalance = 0\r\n    const assetsList = []\r\n    if (!walletInfo || walletInfo.length === 0 || !poolingInfo) {\r\n      return { walletBalance, poolBalance, netBalance, assetsList, isFetching }\r\n    }\r\n\r\n    walletInfo.map(value => {\r\n      if (value && parseFloat(value.valueUSD)) {\r\n        walletBalance = walletBalance + parseFloat(value.valueUSD)\r\n        assetsList.push({\r\n          symbol: value.symbol,\r\n          name: value.name,\r\n          balance: value.balance.toFixed(4),\r\n          price: value.priceUSD.toFixed(4),\r\n          value: value.valueUSD.toFixed(2),\r\n          image1: value.logoURI,\r\n          image2: '',\r\n        })\r\n      }\r\n    })\r\n\r\n    poolingInfo.map(value => {\r\n      if (value && parseFloat(value.valueUSD)) {\r\n        poolBalance = Number(poolBalance) + parseFloat(value.valueUSD)\r\n        const asset = ASSET_DEFAULT\r\n        if (value.tokens && value.tokens.length > 1) {\r\n          value.tokens.map((token, i) => {\r\n            console.log(token)\r\n            asset.symbol =\r\n              i === 0 ? token.symbol + '-' : asset.symbol + token.symbol\r\n            if (i === 0) {\r\n              asset.image1 = token.logoURI\r\n            } else {\r\n              asset.image2 = token.logoURI\r\n            }\r\n          })\r\n        }\r\n        asset.balance = Number(value.balance).toFixed(4)\r\n        asset.value = Number(value.valueUSD).toFixed(2)\r\n        asset.price = Number(value.valueUSD / value.balance).toFixed(4)\r\n        asset.name = 'HoneySwap'\r\n        assetsList.push(asset)\r\n      }\r\n    })\r\n\r\n    walletBalance = walletBalance.toFixed(2)\r\n    poolBalance = poolBalance.toFixed(2)\r\n    netBalance = parseFloat(\r\n      Number(walletBalance) + Number(poolBalance) + netBalance\r\n    ).toFixed(2)\r\n\r\n    return { walletBalance, poolBalance, netBalance, assetsList, isFetching }\r\n  }, [isFetching])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}