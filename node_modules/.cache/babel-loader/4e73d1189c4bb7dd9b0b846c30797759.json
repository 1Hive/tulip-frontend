{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst errCode = require('err-code');\n\nconst {\n  parallelMap,\n  filter\n} = require('streaming-iterables');\n\nconst pipe = require('it-pipe');\n\nconst {\n  PinTypes\n} = require('../pin/pin-manager');\n\nconst {\n  cleanCid\n} = require('./utils');\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n\nconst BLOCK_RM_CONCURRENCY = 8;\n\nmodule.exports = ({\n  blockService,\n  gcLock,\n  pinManager\n}) => {\n  return withTimeoutOption(async function* rm(cids, options) {\n    options = options || {};\n\n    if (!Array.isArray(cids)) {\n      cids = [cids];\n    } // We need to take a write lock here to ensure that adding and removing\n    // blocks are exclusive operations\n\n\n    const release = await gcLock.writeLock();\n\n    try {\n      yield* pipe(cids, parallelMap(BLOCK_RM_CONCURRENCY, async cid => {\n        cid = cleanCid(cid);\n        const result = {\n          cid\n        };\n\n        try {\n          const pinResult = await pinManager.isPinnedWithType(cid, PinTypes.all);\n\n          if (pinResult.pinned) {\n            if (CID.isCID(pinResult.reason)) {\n              // eslint-disable-line max-depth\n              throw errCode(new Error(`pinned via ${pinResult.reason}`));\n            }\n\n            throw errCode(new Error(`pinned: ${pinResult.reason}`));\n          } // remove has check when https://github.com/ipfs/js-ipfs-block-service/pull/88 is merged\n\n\n          const has = await blockService._repo.blocks.has(cid);\n\n          if (!has) {\n            throw errCode(new Error('block not found'), 'ERR_BLOCK_NOT_FOUND');\n          }\n\n          await blockService.delete(cid);\n        } catch (err) {\n          if (!options.force) {\n            err.message = `cannot remove ${cid}: ${err.message}`;\n            result.error = err;\n          }\n        }\n\n        return result;\n      }), filter(() => !options.quiet));\n    } finally {\n      release();\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}