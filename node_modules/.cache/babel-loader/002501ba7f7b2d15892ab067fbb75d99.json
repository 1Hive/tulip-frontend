{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar slicedToArray = require('./slicedToArray-a8a77f0e.js');\n\nrequire('./unsupportedIterableToArray-f175acfa.js');\n\nvar toConsumableArray = require('./toConsumableArray-cc0d28a9.js');\n\nvar math = require('./math-ecfd5d91.js');\n\nvar characters = require('./characters.js');\n/**\n * Formats an integer based on a limited range.\n *\n * Example:\n *   formatIntegerRange(234, 0, 99, '+') === \"99+\"\n *\n * @param {number} value     The number to format.\n * @param {number} min       Range minimum.\n * @param {number} max       Range maximum.\n * @param {number} maxSuffix Suffix to add if the value exceeds the max.\n */\n\n\nfunction formatIntegerRange() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 99;\n  var maxSuffix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  value = parseInt(value, 10);\n\n  if (value <= min) {\n    return \"\".concat(parseInt(min, 10));\n  }\n\n  if (value > max) {\n    return \"\".concat(parseInt(max, 10)).concat(maxSuffix);\n  }\n\n  return String(value);\n}\n/**\n * Formats a number for display purposes.\n *\n * This function is not using Intl.NumberFormat() to be compatible with big\n * integers expressed as string, or BigInt-like objects.\n *\n * @param {BigInt|string|number} number Number to convert\n * @returns {string}\n */\n\n\nfunction formatNumber(number) {\n  var numAsString = String(number);\n\n  var _numAsString$split = numAsString.split('.'),\n      _numAsString$split2 = slicedToArray.slicedToArray(_numAsString$split, 2),\n      integer = _numAsString$split2[0],\n      decimals = _numAsString$split2[1];\n\n  return toConsumableArray.toConsumableArray(integer).reverse().reduce(function (result, digit, index) {\n    return digit + (index > 0 && index % 3 === 0 ? ',' : '') + result;\n  }, decimals ? \".\".concat(decimals) : '');\n}\n/**\n * Formats a token amount for display purposes.\n *\n * @param {BigInt|string|number} amount              Number to round\n * @param {BigInt|string|number} decimals            Decimal placement for amount\n * @param {BigInt|string|number} digits              Rounds the number to a given decimal place\n * @param {boolean}              options.displaySign Decides if the sign should be displayed\n * @param {string}               options.symbol      Symbol for the token amount\n * @returns {string}\n */\n\n\nfunction formatTokenAmount(amount, decimals) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$digits = _ref.digits,\n      digits = _ref$digits === void 0 ? 2 : _ref$digits,\n      _ref$symbol = _ref.symbol,\n      symbol = _ref$symbol === void 0 ? '' : _ref$symbol,\n      _ref$displaySign = _ref.displaySign,\n      displaySign = _ref$displaySign === void 0 ? false : _ref$displaySign;\n\n  amount = math.JSBI.BigInt(String(amount));\n  decimals = math.JSBI.BigInt(String(decimals));\n  digits = math.JSBI.BigInt(String(digits));\n\n  var _0 = math.JSBI.BigInt(0);\n\n  var _10 = math.JSBI.BigInt(10);\n\n  if (math.JSBI.lessThan(decimals, _0)) {\n    throw new Error('formatTokenAmount(): decimals cannot be negative');\n  }\n\n  if (math.JSBI.lessThan(digits, _0)) {\n    throw new Error('formatTokenAmount(): digits cannot be negative');\n  }\n\n  if (math.JSBI.lessThan(decimals, digits)) {\n    digits = decimals;\n  }\n\n  var negative = math.JSBI.lessThan(amount, _0);\n\n  if (negative) {\n    amount = math.JSBI.unaryMinus(amount);\n  }\n\n  var amountConverted = math.JSBI.equal(decimals, _0) ? amount : math.JSBI.BigInt(math.divideRoundBigInt(amount, math.JSBI.exponentiate(_10, math.JSBI.subtract(decimals, digits))));\n  var leftPart = formatNumber(math.JSBI.divide(amountConverted, math.JSBI.exponentiate(_10, digits)));\n  var rightPart = String(math.JSBI.remainder(amountConverted, math.JSBI.exponentiate(_10, digits))).padStart(digits, '0').replace(/0+$/, '');\n  return [displaySign ? negative ? '-' : '+' : '', leftPart, rightPart ? \".\".concat(rightPart) : '', symbol ? \"\".concat(characters.NO_BREAK_SPACE).concat(symbol) : ''].join('');\n}\n\nexports.formatIntegerRange = formatIntegerRange;\nexports.formatNumber = formatNumber;\nexports.formatTokenAmount = formatTokenAmount;","map":{"version":3,"sources":["../src/utils/format.js"],"names":["value","min","max","maxSuffix","parseInt","String","numAsString","integer","decimals","digit","index","digits","symbol","displaySign","amount","JSBI","_0","_10","negative","amountConverted","divideRoundBigInt","leftPart","formatNumber","rightPart","NO_BREAK_SPACE"],"mappings":";;;;;;;;;;;;;;;AAIA;;;;;;;;;;;;;AAWO,SAAA,kBAAA,GAKL;AAAA,MAJAA,KAIA,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAJQ,CAAC,CAIT;AAAA,MAHAC,GAGA,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAHM,CAGN;AAAA,MAFAC,GAEA,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAFM,EAEN;AAAA,MADAC,SACA,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GADY,EACZ;AACAH,EAAAA,KAAK,GAAGI,QAAQ,CAAA,KAAA,EAAhBJ,EAAgB,CAAhBA;;AACA,MAAIA,KAAK,IAAT,GAAA,EAAkB;AAChB,WAAA,GAAA,MAAA,CAAUI,QAAQ,CAAA,GAAA,EAAlB,EAAkB,CAAlB,CAAA;AACD;;AACD,MAAIJ,KAAK,GAAT,GAAA,EAAiB;AACf,WAAA,GAAA,MAAA,CAAUI,QAAQ,CAAA,GAAA,EAAlB,EAAkB,CAAlB,EAAA,MAAA,CAAA,SAAA,CAAA;AACD;;AACD,SAAOC,MAAM,CAAb,KAAa,CAAb;AACD;AAED;;;;;;;;;;;AASO,SAAA,YAAA,CAAA,MAAA,EAA8B;AACnC,MAAMC,WAAW,GAAGD,MAAM,CAA1B,MAA0B,CAA1B;;AADmC,MAAA,kBAAA,GAEPC,WAAW,CAAXA,KAAAA,CAFO,GAEPA,CAFO;AAAA,MAAA,mBAAA,GAAA,aAAA,CAAA,aAAA,CAAA,kBAAA,EAAA,CAAA,CAAA;AAAA,MAE5BC,OAF4B,GAAA,mBAAA,CAAA,CAAA,CAAA;AAAA,MAEnBC,QAFmB,GAAA,mBAAA,CAAA,CAAA,CAAA;;AAInC,SAAO,iBAAA,CAAA,iBAAA,CAAA,OAAA,EAAA,OAAA,GAAA,MAAA,CACL,UAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAA0B;AACxB,WAAOC,KAAK,IAAIC,KAAK,GAALA,CAAAA,IAAaA,KAAK,GAALA,CAAAA,KAAbA,CAAAA,GAAAA,GAAAA,GAATD,EAAK,CAALA,GAAP,MAAA;AAFG,GAAA,EAILD,QAAQ,GAAA,IAAA,MAAA,CAAA,QAAA,CAAA,GAJV,EAAO,CAAP;AAMD;AAED;;;;;;;;;;;;AAUO,SAAA,iBAAA,CAAA,MAAA,EAAA,QAAA,EAIL;AAAA,MAAA,IAAA,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GADmD,EACnD;AAAA,MAAA,WAAA,GAAA,IAAA,CADEG,MACF;AAAA,MADEA,MACF,GAAA,WAAA,KAAA,KAAA,CAAA,GADW,CACX,GAAA,WAAA;AAAA,MAAA,WAAA,GAAA,IAAA,CADcC,MACd;AAAA,MADcA,MACd,GAAA,WAAA,KAAA,KAAA,CAAA,GADuB,EACvB,GAAA,WAAA;AAAA,MAAA,gBAAA,GAAA,IAAA,CAD2BC,WAC3B;AAAA,MAD2BA,WAC3B,GAAA,gBAAA,KAAA,KAAA,CAAA,GADyC,KACzC,GAAA,gBAAA;;AACAC,EAAAA,MAAM,GAAGC,IAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAYV,MAAM,CAA3BS,MAA2B,CAAlBC,CAATD;AACAN,EAAAA,QAAQ,GAAGO,IAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAYV,MAAM,CAA7BG,QAA6B,CAAlBO,CAAXP;AACAG,EAAAA,MAAM,GAAGI,IAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAYV,MAAM,CAA3BM,MAA2B,CAAlBI,CAATJ;;AAEA,MAAMK,EAAE,GAAGD,IAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAX,CAAWA,CAAX;;AACA,MAAME,GAAG,GAAGF,IAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAZ,EAAYA,CAAZ;;AAEA,MAAIA,IAAAA,CAAAA,IAAAA,CAAAA,QAAAA,CAAAA,QAAAA,EAAJ,EAAIA,CAAJ,EAAiC;AAC/B,UAAM,IAAA,KAAA,CAAN,kDAAM,CAAN;AACD;;AAED,MAAIA,IAAAA,CAAAA,IAAAA,CAAAA,QAAAA,CAAAA,MAAAA,EAAJ,EAAIA,CAAJ,EAA+B;AAC7B,UAAM,IAAA,KAAA,CAAN,gDAAM,CAAN;AACD;;AAED,MAAIA,IAAAA,CAAAA,IAAAA,CAAAA,QAAAA,CAAAA,QAAAA,EAAJ,MAAIA,CAAJ,EAAqC;AACnCJ,IAAAA,MAAM,GAANA,QAAAA;AACD;;AAED,MAAMO,QAAQ,GAAGH,IAAAA,CAAAA,IAAAA,CAAAA,QAAAA,CAAAA,MAAAA,EAAjB,EAAiBA,CAAjB;;AAEA,MAAA,QAAA,EAAc;AACZD,IAAAA,MAAM,GAAGC,IAAAA,CAAAA,IAAAA,CAAAA,UAAAA,CAATD,MAASC,CAATD;AACD;;AAED,MAAMK,eAAe,GAAGJ,IAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAAAA,QAAAA,EAAAA,EAAAA,IAAAA,MAAAA,GAEpBA,IAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CACEK,IAAAA,CAAAA,iBAAAA,CAAiB,MAAjBA,EAEEL,IAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAAA,GAAAA,EAAuBA,IAAAA,CAAAA,IAAAA,CAAAA,QAAAA,CAAAA,QAAAA,EAL/B,MAK+BA,CAAvBA,CAFFK,CADFL,CAFJ;AASA,MAAMM,QAAQ,GAAGC,YAAY,CAC3BP,IAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,eAAAA,EAA6BA,IAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAAA,GAAAA,EAD/B,MAC+BA,CAA7BA,CAD2B,CAA7B;AAIA,MAAMQ,SAAS,GAAGlB,MAAM,CACtBU,IAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CAAAA,eAAAA,EAAgCA,IAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAAA,GAAAA,EADhBV,MACgBU,CAAhCA,CADsB,CAANV,CAAAA,QAAAA,CAAAA,MAAAA,EAAAA,GAAAA,EAAAA,OAAAA,CAAAA,KAAAA,EAAlB,EAAkBA,CAAlB;AAMA,SAAO,CACLQ,WAAW,GAAIK,QAAQ,GAAA,GAAA,GAAZ,GAAA,GADN,EAAA,EAAA,QAAA,EAGLK,SAAS,GAAA,IAAA,MAAA,CAAA,SAAA,CAAA,GAHJ,EAAA,EAILX,MAAM,GAAA,GAAA,MAAA,CAAMY,UAAAA,CAAN,cAAA,EAAA,MAAA,CAAA,MAAA,CAAA,GAJD,EAAA,EAAA,IAAA,CAAP,EAAO,CAAP;AAMD","sourcesContent":["import JSBI from 'jsbi'\nimport { NO_BREAK_SPACE } from './characters'\nimport { divideRoundBigInt } from './math'\n\n/**\n * Formats an integer based on a limited range.\n *\n * Example:\n *   formatIntegerRange(234, 0, 99, '+') === \"99+\"\n *\n * @param {number} value     The number to format.\n * @param {number} min       Range minimum.\n * @param {number} max       Range maximum.\n * @param {number} maxSuffix Suffix to add if the value exceeds the max.\n */\nexport function formatIntegerRange(\n  value = -1,\n  min = 0,\n  max = 99,\n  maxSuffix = ''\n) {\n  value = parseInt(value, 10)\n  if (value <= min) {\n    return `${parseInt(min, 10)}`\n  }\n  if (value > max) {\n    return `${parseInt(max, 10)}${maxSuffix}`\n  }\n  return String(value)\n}\n\n/**\n * Formats a number for display purposes.\n *\n * This function is not using Intl.NumberFormat() to be compatible with big\n * integers expressed as string, or BigInt-like objects.\n *\n * @param {BigInt|string|number} number Number to convert\n * @returns {string}\n */\nexport function formatNumber(number) {\n  const numAsString = String(number)\n  const [integer, decimals] = numAsString.split('.')\n\n  return [...integer].reverse().reduce(\n    (result, digit, index) => {\n      return digit + (index > 0 && index % 3 === 0 ? ',' : '') + result\n    },\n    decimals ? `.${decimals}` : ''\n  )\n}\n\n/**\n * Formats a token amount for display purposes.\n *\n * @param {BigInt|string|number} amount              Number to round\n * @param {BigInt|string|number} decimals            Decimal placement for amount\n * @param {BigInt|string|number} digits              Rounds the number to a given decimal place\n * @param {boolean}              options.displaySign Decides if the sign should be displayed\n * @param {string}               options.symbol      Symbol for the token amount\n * @returns {string}\n */\nexport function formatTokenAmount(\n  amount,\n  decimals,\n  { digits = 2, symbol = '', displaySign = false } = {}\n) {\n  amount = JSBI.BigInt(String(amount))\n  decimals = JSBI.BigInt(String(decimals))\n  digits = JSBI.BigInt(String(digits))\n\n  const _0 = JSBI.BigInt(0)\n  const _10 = JSBI.BigInt(10)\n\n  if (JSBI.lessThan(decimals, _0)) {\n    throw new Error('formatTokenAmount(): decimals cannot be negative')\n  }\n\n  if (JSBI.lessThan(digits, _0)) {\n    throw new Error('formatTokenAmount(): digits cannot be negative')\n  }\n\n  if (JSBI.lessThan(decimals, digits)) {\n    digits = decimals\n  }\n\n  const negative = JSBI.lessThan(amount, _0)\n\n  if (negative) {\n    amount = JSBI.unaryMinus(amount)\n  }\n\n  const amountConverted = JSBI.equal(decimals, _0)\n    ? amount\n    : JSBI.BigInt(\n        divideRoundBigInt(\n          amount,\n          JSBI.exponentiate(_10, JSBI.subtract(decimals, digits))\n        )\n      )\n\n  const leftPart = formatNumber(\n    JSBI.divide(amountConverted, JSBI.exponentiate(_10, digits))\n  )\n\n  const rightPart = String(\n    JSBI.remainder(amountConverted, JSBI.exponentiate(_10, digits))\n  )\n    .padStart(digits, '0')\n    .replace(/0+$/, '')\n\n  return [\n    displaySign ? (negative ? '-' : '+') : '',\n    leftPart,\n    rightPart ? `.${rightPart}` : '',\n    symbol ? `${NO_BREAK_SPACE}${symbol}` : '',\n  ].join('')\n}\n"]},"metadata":{},"sourceType":"script"}