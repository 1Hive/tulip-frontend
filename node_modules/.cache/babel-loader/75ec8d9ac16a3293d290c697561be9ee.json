{"ast":null,"code":"const ws = require('isomorphic-ws');\n\nconst {\n  SubscriptionClient\n} = require('subscriptions-transport-ws');\n\nconst {\n  request,\n  gql\n} = require('graphql-request');\n\nconst {\n  graphAPIEndpoints,\n  graphWSEndpoints,\n  barAddress\n} = require('./../constants');\n\nconst {\n  timestampToBlock\n} = require('./../utils');\n\nmodule.exports = {\n  async info({\n    block = undefined,\n    timestamp = undefined\n  } = {}) {\n    block = block ? block : timestamp ? await timestampToBlock(timestamp) : undefined;\n    block = block ? `block: { number: ${block} }` : \"\";\n    const result = await request(graphAPIEndpoints.bar, gql`{\n                    bar(id: \"${barAddress}\", ${block}) {\n                        ${info.properties.toString()}\n                    }\n                }`);\n    return info.callback(result.bar);\n  },\n\n  observeInfo() {\n    const query = gql`\n            subscription {\n                bar(id: \"${barAddress}\") {\n                    ${info.properties.toString()}\n                }\n        }`;\n    const client = new SubscriptionClient(graphWSEndpoints.bar, {\n      reconnect: true\n    }, ws);\n    const observable = client.request({\n      query\n    });\n    return {\n      subscribe({\n        next,\n        error,\n        complete\n      }) {\n        return observable.subscribe({\n          next(results) {\n            next(info.callback(results.data.bar));\n          },\n\n          error,\n          complete\n        });\n      }\n\n    };\n  },\n\n  async user({\n    block = undefined,\n    timestamp = undefined,\n    user_address = undefined\n  } = {}) {\n    if (!user_address) {\n      throw new Error(\"sushi-data: User address undefined\");\n    }\n\n    block = block ? block : timestamp ? await timestampToBlock(timestamp) : undefined;\n    block = block ? `block: { number: ${block} }` : \"\";\n    const result = await request(graphAPIEndpoints.bar, gql`{\n                    user(id: \"${user_address.toLowerCase()}\", ${block}) {\n                        ${user.properties.toString()}\n                    }\n                }`);\n    return user.callback(result.user);\n  }\n\n};\nconst info = {\n  properties: ['decimals', 'name', 'sushi', 'symbol', 'totalSupply', 'ratio', 'xSushiMinted', 'xSushiBurned', 'sushiStaked', 'sushiStakedUSD', 'sushiHarvested', 'sushiHarvestedUSD', 'xSushiAge', 'xSushiAgeDestroyed', 'updatedAt'],\n\n  callback(results) {\n    return {\n      decimals: Number(results.decimals),\n      name: results.name,\n      sushi: results.sushi,\n      symbol: results.symbol,\n      totalSupply: Number(results.totalSupply),\n      ratio: Number(results.ratio),\n      xSushiMinted: Number(results.xSushiMinted),\n      xSushiBurned: Number(results.xSushiBurned),\n      sushiStaked: Number(results.totalSupply) * Number(results.ratio),\n      sushiStakedUSD: Number(results.sushiStakedUSD),\n      sushiHarvested: Number(results.sushiHarvested),\n      sushiHarvestedUSD: Number(results.sushiHarvestedUSD),\n      xSushiAge: Number(results.xSushiAge),\n      xSushiAgeDestroyed: Number(results.xSushiAgeDestroyed),\n      updatedAt: Number(results.updatedAt)\n    };\n  }\n\n};\nconst user = {\n  properties: ['xSushi', 'xSushiIn', 'xSushiOut', 'xSushiMinted', 'xSushiBurned', 'xSushiOffset', 'xSushiAge', 'xSushiAgeDestroyed', 'sushiStaked', 'sushiStakedUSD', 'sushiHarvested', 'sushiHarvestedUSD', 'sushiIn', 'sushiOut', 'usdOut', 'usdIn', 'updatedAt', 'sushiOffset', 'usdOffset'],\n\n  callback(results) {\n    return {\n      xSushi: Number(results.xSushi),\n      xSushiIn: Number(results.xSushiIn),\n      xSushiOut: Number(results.xSushiOut),\n      xSushiMinted: Number(results.xSushiMinted),\n      xSushiBurned: Number(results.xSushiBurned),\n      xSushiOffset: Number(results.xSushiOffset),\n      xSushiAge: Number(results.xSushiAge),\n      xSushiAgeDestroyed: Number(results.xSushiAgeDestroyed),\n      sushiStaked: Number(results.sushiStaked),\n      sushiStakedUSD: Number(results.sushiStakedUSD),\n      sushiHarvested: Number(results.sushiHarvested),\n      sushiHarvestedUSD: Number(results.sushiHarvestedUSD),\n      sushiIn: Number(results.sushiIn),\n      sushiOut: Number(results.sushiOut),\n      usdOut: Number(results.usdOut),\n      usdIn: Number(results.usdIn),\n      updatedAt: Number(results.updatedAt),\n      sushiOffset: Number(results.sushiOffset),\n      usdOffset: Number(results.usdOffset)\n    };\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}