{"ast":null,"code":"'use strict';\n\nconst dagPB = require('ipld-dag-pb');\n\nconst DAGNode = dagPB.DAGNode;\nconst DAGLink = dagPB.DAGLink;\n\nconst mh = require('multihashes');\n\nconst multicodec = require('multicodec');\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n\nconst {\n  Buffer\n} = require('buffer');\n\nfunction parseBuffer(buf, encoding) {\n  switch (encoding) {\n    case 'json':\n      return parseJSONBuffer(buf);\n\n    case 'protobuf':\n      return parseProtoBuffer(buf);\n\n    default:\n      throw new Error(`unkown encoding: ${encoding}`);\n  }\n}\n\nfunction parseJSONBuffer(buf) {\n  let data;\n  let links;\n\n  try {\n    const parsed = JSON.parse(buf.toString());\n    links = (parsed.Links || []).map(link => {\n      return new DAGLink(link.Name || link.name, link.Size || link.size, mh.fromB58String(link.Hash || link.hash || link.multihash));\n    });\n    data = Buffer.from(parsed.Data);\n  } catch (err) {\n    throw new Error('failed to parse JSON: ' + err);\n  }\n\n  return new DAGNode(data, links);\n}\n\nfunction parseProtoBuffer(buf) {\n  return dagPB.util.deserialize(buf);\n}\n\nmodule.exports = ({\n  ipld,\n  gcLock,\n  preload\n}) => {\n  return withTimeoutOption(async function put(obj, options) {\n    options = options || {};\n    const encoding = options.enc;\n    let node;\n\n    if (Buffer.isBuffer(obj)) {\n      if (encoding) {\n        node = await parseBuffer(obj, encoding);\n      } else {\n        node = new DAGNode(obj);\n      }\n    } else if (DAGNode.isDAGNode(obj)) {\n      // already a dag node\n      node = obj;\n    } else if (typeof obj === 'object') {\n      node = new DAGNode(obj.Data, obj.Links);\n    } else {\n      throw new Error('obj not recognized');\n    }\n\n    const release = await gcLock.readLock();\n\n    try {\n      const cid = await ipld.put(node, multicodec.DAG_PB, {\n        cidVersion: 0,\n        hashAlg: multicodec.SHA2_256\n      });\n\n      if (options.preload !== false) {\n        preload(cid);\n      }\n\n      return cid;\n    } finally {\n      release();\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}