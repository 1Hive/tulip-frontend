{"ast":null,"code":"var _jsxFileName = \"/Users/fabianmolina/Documents/1hive/tulip-frontend/src/providers/Poolprovider.js\";\nimport React, { useContext } from 'react';\nimport { useQuery } from 'react-query'; // import { getNetworkConfig } from '../networks'\n\nimport { getContract } from '../web3-contracts';\nimport { addresses } from '../constants/addresses';\nimport honeyFarm from '../abi/honeyfarm.json';\nimport erc20 from '../abi/ERC20.json'; // import { ethers } from 'ethers'\n\nconst PoolContext = /*#__PURE__*/React.createContext();\n\nconst loadPoolData = async () => {\n  const contract = getContract(addresses.honeyfarm, honeyFarm); // const SCALE = await contract.functions.SCALE()\n\n  const poolLength = await contract.functions.poolLength();\n  const poolLengthToNumber = poolLength[0].toNumber();\n  const poolData = [];\n\n  for (let i = 0; i < poolLengthToNumber; i++) {\n    const data = await contract.functions.getPoolByIndex(i);\n    const c = getContract(data.poolToken, erc20);\n    console.log(c);\n    poolData.push({ ...data,\n      name: await c.name(),\n      symbol: await c.symbol()\n    });\n  }\n\n  return poolData;\n};\n\nexport function PoolProvider({\n  children\n}) {\n  const {\n    data,\n    status\n  } = useQuery('loadPoolData', loadPoolData);\n  const r = {\n    data,\n    status\n  };\n  return /*#__PURE__*/React.createElement(PoolContext.Provider, {\n    value: r,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 10\n    }\n  }, children);\n}\nexport function usePoolProvider() {\n  return useContext(PoolContext);\n}","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/providers/Poolprovider.js"],"names":["React","useContext","useQuery","getContract","addresses","honeyFarm","erc20","PoolContext","createContext","loadPoolData","contract","honeyfarm","poolLength","functions","poolLengthToNumber","toNumber","poolData","i","data","getPoolByIndex","c","poolToken","console","log","push","name","symbol","PoolProvider","children","status","r","usePoolProvider"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,QAAT,QAAyB,aAAzB,C,CACA;;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,KAAP,MAAkB,mBAAlB,C,CACA;;AAEA,MAAMC,WAAW,gBAAGP,KAAK,CAACQ,aAAN,EAApB;;AAEA,MAAMC,YAAY,GAAG,YAAY;AAC/B,QAAMC,QAAQ,GAAGP,WAAW,CAACC,SAAS,CAACO,SAAX,EAAsBN,SAAtB,CAA5B,CAD+B,CAE/B;;AAEA,QAAMO,UAAU,GAAG,MAAMF,QAAQ,CAACG,SAAT,CAAmBD,UAAnB,EAAzB;AACA,QAAME,kBAAkB,GAAGF,UAAU,CAAC,CAAD,CAAV,CAAcG,QAAd,EAA3B;AACA,QAAMC,QAAQ,GAAG,EAAjB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,kBAApB,EAAwCG,CAAC,EAAzC,EAA6C;AAC3C,UAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACG,SAAT,CAAmBM,cAAnB,CAAkCF,CAAlC,CAAnB;AACA,UAAMG,CAAC,GAAGjB,WAAW,CAACe,IAAI,CAACG,SAAN,EAAiBf,KAAjB,CAArB;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAYH,CAAZ;AACAJ,IAAAA,QAAQ,CAACQ,IAAT,CAAc,EACZ,GAAGN,IADS;AAEZO,MAAAA,IAAI,EAAE,MAAML,CAAC,CAACK,IAAF,EAFA;AAGZC,MAAAA,MAAM,EAAE,MAAMN,CAAC,CAACM,MAAF;AAHF,KAAd;AAKD;;AACD,SAAOV,QAAP;AACD,CAlBD;;AAmBA,OAAO,SAASW,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoC;AACzC,QAAM;AAAEV,IAAAA,IAAF;AAAQW,IAAAA;AAAR,MAAmB3B,QAAQ,CAAC,cAAD,EAAiBO,YAAjB,CAAjC;AACA,QAAMqB,CAAC,GAAG;AACRZ,IAAAA,IADQ;AAERW,IAAAA;AAFQ,GAAV;AAIA,sBAAO,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCF,QAAjC,CAAP;AACD;AAED,OAAO,SAASG,eAAT,GAA2B;AAChC,SAAO9B,UAAU,CAACM,WAAD,CAAjB;AACD","sourcesContent":["import React, { useContext } from 'react'\nimport { useQuery } from 'react-query'\n// import { getNetworkConfig } from '../networks'\nimport { getContract } from '../web3-contracts'\nimport { addresses } from '../constants/addresses'\nimport honeyFarm from '../abi/honeyfarm.json'\nimport erc20 from '../abi/ERC20.json'\n// import { ethers } from 'ethers'\n\nconst PoolContext = React.createContext()\n\nconst loadPoolData = async () => {\n  const contract = getContract(addresses.honeyfarm, honeyFarm)\n  // const SCALE = await contract.functions.SCALE()\n\n  const poolLength = await contract.functions.poolLength()\n  const poolLengthToNumber = poolLength[0].toNumber()\n  const poolData = []\n  for (let i = 0; i < poolLengthToNumber; i++) {\n    const data = await contract.functions.getPoolByIndex(i)\n    const c = getContract(data.poolToken, erc20)\n    console.log(c)\n    poolData.push({\n      ...data,\n      name: await c.name(),\n      symbol: await c.symbol(),\n    })\n  }\n  return poolData\n}\nexport function PoolProvider({ children }) {\n  const { data, status } = useQuery('loadPoolData', loadPoolData)\n  const r = {\n    data,\n    status,\n  }\n  return <PoolContext.Provider value={r}>{children}</PoolContext.Provider>\n}\n\nexport function usePoolProvider() {\n  return useContext(PoolContext)\n}\n"]},"metadata":{},"sourceType":"module"}