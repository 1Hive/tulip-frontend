{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar errors = require('./errors');\n\nvar debug = require('debug');\n\nvar log = debug('repo:lock');\nvar lockFile = 'repo.lock';\nvar LOCKS = {};\n/**\n * Lock the repo in the given dir.\n *\n * @param {string} dir\n * @returns {Promise<Object>}\n */\n\nexports.lock = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dir) {\n    var file, closer;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // eslint-disable-line require-await\n            file = dir + '/' + lockFile;\n            log('locking %s', file);\n\n            if (!(LOCKS[file] === true)) {\n              _context2.next = 4;\n              break;\n            }\n\n            throw new errors.LockExistsError(\"Lock already being held for file: \".concat(file));\n\n          case 4:\n            LOCKS[file] = true;\n            closer = {\n              close: function close() {\n                return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          // eslint-disable-line require-await\n                          if (LOCKS[file]) {\n                            delete LOCKS[file];\n                          }\n\n                        case 1:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))();\n              }\n            };\n            return _context2.abrupt(\"return\", closer);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Check if the repo in the given directory is locked.\n *\n * @param {string} dir\n * @returns {bool}\n */\n\n\nexports.locked = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dir) {\n    var file;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            // eslint-disable-line require-await\n            file = dir + '/' + lockFile;\n            log(\"checking lock: \".concat(file));\n            return _context3.abrupt(\"return\", Boolean(LOCKS[file]));\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function (_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}