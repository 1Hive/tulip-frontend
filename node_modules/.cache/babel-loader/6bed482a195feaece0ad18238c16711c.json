{"ast":null,"code":"'use strict';\n\nconst errCode = require('err-code');\n\nconst pAny = require('p-any');\n\nmodule.exports = node => {\n  const routers = node._modules.peerRouting || []; // If we have the dht, make it first\n\n  if (node._dht) {\n    routers.unshift(node._dht);\n  }\n\n  return {\n    /**\n     * Iterates over all peer routers in series to find the given peer.\n     *\n     * @param {String} id The id of the peer to find\n     * @param {object} [options]\n     * @param {number} [options.timeout] How long the query should run\n     * @returns {Promise<PeerInfo>}\n     */\n    findPeer: async (id, options) => {\n      // eslint-disable-line require-await\n      if (!routers.length) {\n        throw errCode(new Error('No peer routers available'), 'NO_ROUTERS_AVAILABLE');\n      }\n\n      return pAny(routers.map(async router => {\n        const result = await router.findPeer(id, options); // If we don't have a result, we need to provide an error to keep trying\n\n        if (!result || Object.keys(result).length === 0) {\n          throw errCode(new Error('not found'), 'NOT_FOUND');\n        }\n\n        return result;\n      }));\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}