{"ast":null,"code":"'use strict';\n\nconst pTry = require('p-try');\n\nconst pLimit = concurrency => {\n  if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {\n    return Promise.reject(new TypeError('Expected `concurrency` to be a number from 1 and up'));\n  }\n\n  const queue = [];\n  let activeCount = 0;\n\n  const next = () => {\n    activeCount--;\n\n    if (queue.length > 0) {\n      queue.shift()();\n    }\n  };\n\n  const run = (fn, resolve, ...args) => {\n    activeCount++;\n    const result = pTry(fn, ...args);\n    resolve(result);\n    result.then(next, next);\n  };\n\n  const enqueue = (fn, resolve, ...args) => {\n    if (activeCount < concurrency) {\n      run(fn, resolve, ...args);\n    } else {\n      queue.push(run.bind(null, fn, resolve, ...args));\n    }\n  };\n\n  const generator = (fn, ...args) => new Promise(resolve => enqueue(fn, resolve, ...args));\n\n  Object.defineProperties(generator, {\n    activeCount: {\n      get: () => activeCount\n    },\n    pendingCount: {\n      get: () => queue.length\n    },\n    clearQueue: {\n      value: () => {\n        queue.length = 0;\n      }\n    }\n  });\n  return generator;\n};\n\nmodule.exports = pLimit;\nmodule.exports.default = pLimit;","map":null,"metadata":{},"sourceType":"script"}