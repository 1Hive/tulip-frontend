{"ast":null,"code":"import _regeneratorRuntime from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport HKDF from 'bcrypto/lib/hkdf';\nimport x25519 from 'bcrypto/lib/js/x25519';\nimport SHA256 from 'bcrypto/lib/js/sha256';\nimport { Buffer } from \"buffer\";\nimport PeerId from \"peer-id\";\nimport { keys } from 'libp2p-crypto';\nimport { pb } from \"./proto/payload\";\nvar NoiseHandshakePayloadProto = pb.NoiseHandshakePayload;\nexport function generateKeypair() {\n  var privateKey = x25519.privateKeyGenerate();\n  var publicKey = x25519.publicKeyCreate(privateKey);\n  return {\n    publicKey: publicKey,\n    privateKey: privateKey\n  };\n}\nexport function getPayload(_x, _x2, _x3) {\n  return _getPayload.apply(this, arguments);\n}\n\nfunction _getPayload() {\n  _getPayload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(localPeer, staticPublicKey, earlyData) {\n    var signedPayload, earlyDataPayload;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return signPayload(localPeer, getHandshakePayload(staticPublicKey));\n\n          case 2:\n            signedPayload = _context.sent;\n            earlyDataPayload = earlyData || Buffer.alloc(0);\n            _context.next = 6;\n            return createHandshakePayload(localPeer.marshalPubKey(), signedPayload, earlyDataPayload);\n\n          case 6:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getPayload.apply(this, arguments);\n}\n\nexport function createHandshakePayload(_x4, _x5, _x6) {\n  return _createHandshakePayload.apply(this, arguments);\n}\n\nfunction _createHandshakePayload() {\n  _createHandshakePayload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(libp2pPublicKey, signedPayload, earlyData) {\n    var payloadInit;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            payloadInit = NoiseHandshakePayloadProto.create({\n              identityKey: libp2pPublicKey,\n              identitySig: signedPayload,\n              data: earlyData || null\n            });\n            return _context2.abrupt(\"return\", Buffer.from(NoiseHandshakePayloadProto.encode(payloadInit).finish()));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _createHandshakePayload.apply(this, arguments);\n}\n\nexport function signPayload(_x7, _x8) {\n  return _signPayload.apply(this, arguments);\n}\n\nfunction _signPayload() {\n  _signPayload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(peerId, payload) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", peerId.privKey.sign(payload));\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _signPayload.apply(this, arguments);\n}\n\nexport function getPeerIdFromPayload(_x9) {\n  return _getPeerIdFromPayload.apply(this, arguments);\n}\n\nfunction _getPeerIdFromPayload() {\n  _getPeerIdFromPayload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(payload) {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return PeerId.createFromPubKey(Buffer.from(payload.identityKey));\n\n          case 2:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 3:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getPeerIdFromPayload.apply(this, arguments);\n}\n\nexport function decodePayload(_x10) {\n  return _decodePayload.apply(this, arguments);\n}\n\nfunction _decodePayload() {\n  _decodePayload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(payload) {\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            return _context5.abrupt(\"return\", NoiseHandshakePayloadProto.toObject(NoiseHandshakePayloadProto.decode(Buffer.from(payload))));\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _decodePayload.apply(this, arguments);\n}\n\nexport function getHandshakePayload(publicKey) {\n  return Buffer.concat([Buffer.from(\"noise-libp2p-static-key:\"), publicKey]);\n}\n\nfunction isValidPeerId(_x11, _x12) {\n  return _isValidPeerId.apply(this, arguments);\n}\n/**\n * Verifies signed payload, throws on any irregularities.\n * @param {bytes} noiseStaticKey - owner's noise static key\n * @param {bytes} payload - decoded payload\n * @param {PeerId} remotePeer - owner's libp2p peer ID\n * @returns {Promise<PeerId>} - peer ID of payload owner\n */\n\n\nfunction _isValidPeerId() {\n  _isValidPeerId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(peerId, publicKeyProtobuf) {\n    var generatedPeerId;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return PeerId.createFromPubKey(publicKeyProtobuf);\n\n          case 2:\n            generatedPeerId = _context6.sent;\n            return _context6.abrupt(\"return\", generatedPeerId.id.equals(peerId));\n\n          case 4:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _isValidPeerId.apply(this, arguments);\n}\n\nexport function verifySignedPayload(_x13, _x14, _x15) {\n  return _verifySignedPayload.apply(this, arguments);\n}\n\nfunction _verifySignedPayload() {\n  _verifySignedPayload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(noiseStaticKey, payload, remotePeer) {\n    var identityKey, generatedPayload, publicKey;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            identityKey = Buffer.from(payload.identityKey);\n            _context7.next = 3;\n            return isValidPeerId(remotePeer.id, identityKey);\n\n          case 3:\n            if (_context7.sent) {\n              _context7.next = 5;\n              break;\n            }\n\n            throw new Error(\"Peer ID doesn't match libp2p public key.\");\n\n          case 5:\n            generatedPayload = getHandshakePayload(noiseStaticKey); // Unmarshaling from PublicKey protobuf\n\n            publicKey = keys.unmarshalPublicKey(identityKey);\n\n            if (!(!payload.identitySig || !publicKey.verify(generatedPayload, Buffer.from(payload.identitySig)))) {\n              _context7.next = 9;\n              break;\n            }\n\n            throw new Error(\"Static key doesn't match to peer that signed payload!\");\n\n          case 9:\n            return _context7.abrupt(\"return\", PeerId.createFromPubKey(identityKey));\n\n          case 10:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _verifySignedPayload.apply(this, arguments);\n}\n\nexport function getHkdf(ck, ikm) {\n  var info = Buffer.alloc(0);\n  var prk = HKDF.extract(SHA256, ikm, ck);\n  var okm = HKDF.expand(SHA256, prk, info, 96);\n  var k1 = okm.slice(0, 32);\n  var k2 = okm.slice(32, 64);\n  var k3 = okm.slice(64, 96);\n  return [k1, k2, k3];\n}\nexport function isValidPublicKey(pk) {\n  return x25519.publicKeyVerify(pk.slice(0, 32));\n}","map":null,"metadata":{},"sourceType":"module"}