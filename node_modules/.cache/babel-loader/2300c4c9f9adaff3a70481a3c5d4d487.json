{"ast":null,"code":"'use strict';\n\nrequire('node-forge/lib/pkcs7');\n\nrequire('node-forge/lib/pbe');\n\nconst forge = require('node-forge/lib/forge');\n\nconst {\n  certificateForKey,\n  findAsync\n} = require('./util');\n\nconst errcode = require('err-code');\n/**\n * Cryptographic Message Syntax (aka PKCS #7)\n *\n * CMS describes an encapsulation syntax for data protection. It\n * is used to digitally sign, digest, authenticate, or encrypt\n * arbitrary message content.\n *\n * See RFC 5652 for all the details.\n */\n\n\nclass CMS {\n  /**\n   * Creates a new instance with a keychain\n   *\n   * @param {Keychain} keychain - the available keys\n   */\n  constructor(keychain) {\n    if (!keychain) {\n      throw errcode(new Error('keychain is required'), 'ERR_KEYCHAIN_REQUIRED');\n    }\n\n    this.keychain = keychain;\n  }\n  /**\n   * Creates some protected data.\n   *\n   * The output Buffer contains the PKCS #7 message in DER.\n   *\n   * @param {string} name - The local key name.\n   * @param {Buffer} plain - The data to encrypt.\n   * @returns {undefined}\n   */\n\n\n  async encrypt(name, plain) {\n    if (!Buffer.isBuffer(plain)) {\n      throw errcode(new Error('Plain data must be a Buffer'), 'ERR_INVALID_PARAMS');\n    }\n\n    const key = await this.keychain.findKeyByName(name);\n    const pem = await this.keychain._getPrivateKey(name);\n    const privateKey = forge.pki.decryptRsaPrivateKey(pem, this.keychain._());\n    const certificate = await certificateForKey(key, privateKey); // create a p7 enveloped message\n\n    const p7 = forge.pkcs7.createEnvelopedData();\n    p7.addRecipient(certificate);\n    p7.content = forge.util.createBuffer(plain);\n    p7.encrypt(); // convert message to DER\n\n    const der = forge.asn1.toDer(p7.toAsn1()).getBytes();\n    return Buffer.from(der, 'binary');\n  }\n  /**\n   * Reads some protected data.\n   *\n   * The keychain must contain one of the keys used to encrypt the data.  If none of the keys\n   * exists, an Error is returned with the property 'missingKeys'.  It is array of key ids.\n   *\n   * @param {Buffer} cmsData - The CMS encrypted data to decrypt.\n   * @returns {undefined}\n   */\n\n\n  async decrypt(cmsData) {\n    if (!Buffer.isBuffer(cmsData)) {\n      throw errcode(new Error('CMS data is required'), 'ERR_INVALID_PARAMS');\n    }\n\n    let cms;\n\n    try {\n      const buf = forge.util.createBuffer(cmsData.toString('binary'));\n      const obj = forge.asn1.fromDer(buf);\n      cms = forge.pkcs7.messageFromAsn1(obj);\n    } catch (err) {\n      throw errcode(new Error('Invalid CMS: ' + err.message), 'ERR_INVALID_CMS');\n    } // Find a recipient whose key we hold. We only deal with recipient certs\n    // issued by ipfs (O=ipfs).\n\n\n    const recipients = cms.recipients.filter(r => r.issuer.find(a => a.shortName === 'O' && a.value === 'ipfs')).filter(r => r.issuer.find(a => a.shortName === 'CN')).map(r => {\n      return {\n        recipient: r,\n        keyId: r.issuer.find(a => a.shortName === 'CN').value\n      };\n    });\n    const r = await findAsync(recipients, async recipient => {\n      try {\n        const key = await this.keychain.findKeyById(recipient.keyId);\n        if (key) return true;\n      } catch (err) {\n        return false;\n      }\n\n      return false;\n    });\n\n    if (!r) {\n      const missingKeys = recipients.map(r => r.keyId);\n      throw errcode(new Error('Decryption needs one of the key(s): ' + missingKeys.join(', ')), 'ERR_MISSING_KEYS', {\n        missingKeys\n      });\n    }\n\n    const key = await this.keychain.findKeyById(r.keyId);\n    const pem = await this.keychain._getPrivateKey(key.name);\n    const privateKey = forge.pki.decryptRsaPrivateKey(pem, this.keychain._());\n    cms.decrypt(r.recipient, privateKey);\n    return Buffer.from(cms.content.getBytes(), 'binary');\n  }\n\n}\n\nmodule.exports = CMS;","map":null,"metadata":{},"sourceType":"script"}