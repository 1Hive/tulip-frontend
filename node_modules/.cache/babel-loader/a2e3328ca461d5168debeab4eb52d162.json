{"ast":null,"code":"const ws = require('isomorphic-ws');\n\nconst {\n  SubscriptionClient\n} = require('subscriptions-transport-ws');\n\nconst {\n  request,\n  gql\n} = require('graphql-request');\n\nconst {\n  subWeeks,\n  getUnixTime,\n  fromUnixTime\n} = require(\"date-fns\");\n\nconst {\n  graphAPIEndpoints,\n  graphWSEndpoints\n} = require('./../../constants');\n\nconst {\n  timestampToBlock,\n  timestampsToBlocks\n} = require('./../../utils');\n\nmodule.exports = {\n  async ethPrice({\n    block = undefined,\n    timestamp = undefined\n  } = {}) {\n    block = block ? block : timestamp ? await timestampToBlock(timestamp) : undefined;\n    block = block ? `block: { number: ${block} }` : \"\";\n    const result = await request(graphAPIEndpoints.exchange, gql`{\n                    bundle(id: 1, ${block}) {\n                        ${ethPrice.properties.toString()}\n                    }\n                }`);\n    return ethPrice.callback(result.bundle);\n  },\n\n  async ethPriceHourly({\n    minTimestamp = undefined,\n    maxTimestamp = undefined,\n    minBlock = undefined,\n    maxBlock = undefined\n  } = {}) {\n    minTimestamp = minBlock ? blockToTimestamp(minBlock) : minTimestamp;\n    maxTimestamp = maxBlock ? blockToTimestamp(maxBlock) : maxTimestamp;\n    const endTime = maxTimestamp ? fromUnixTime(maxTimestamp) : new Date();\n    let time = minTimestamp ? minTimestamp : getUnixTime(subWeeks(endTime, 1)); // create an array of hour start times until we reach current hour\n\n    const timestamps = [];\n\n    while (time <= getUnixTime(endTime) - 3600) {\n      timestamps.push(time);\n      time += 3600;\n    }\n\n    let blocks = await timestampsToBlocks(timestamps);\n    const query = gql`{\n                ${blocks.map((block, i) => gql`\n                    timestamp${timestamps[i]}: bundle(id: 1, block: {number: ${block}}) {\n                        ${ethPrice.properties.toString()}\n                }`)}\n            }`;\n    let result = await request(graphAPIEndpoints.exchange, query);\n    result = Object.keys(result).map(key => ({ ...result[key],\n      timestamp: key.split(\"timestamp\")[1]\n    })).sort((a, b) => Number(a.timestamp) - b.timestamp);\n    return ethPrice.callbackHourly(result);\n  },\n\n  observeEthPrice() {\n    const query = gql`\n            subscription {\n                bundle(id: 1) {\n                    ${ethPrice.properties.toString()}\n                }\n        }`;\n    const client = new SubscriptionClient(graphWSEndpoints.exchange, {\n      reconnect: true\n    }, ws);\n    const observable = client.request({\n      query\n    });\n    return {\n      subscribe({\n        next,\n        error,\n        complete\n      }) {\n        return observable.subscribe({\n          next(results) {\n            next(ethPrice.callback(results.data.bundle));\n          },\n\n          error,\n          complete\n        });\n      }\n\n    };\n  }\n\n};\nconst ethPrice = {\n  properties: ['ethPrice'],\n\n  callback(results) {\n    return Number(results.ethPrice);\n  },\n\n  callbackHourly(results) {\n    return results.map(result => ({\n      timestamp: Number(result.timestamp),\n      priceUSD: Number(result.ethPrice)\n    }));\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}