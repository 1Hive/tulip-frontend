{"ast":null,"code":"const type = 'moderator-access';\nconst MODERATOR = 'MODERATOR';\nconst MEMBER = 'MEMBER';\n\nclass ModeratorAccessController {\n  constructor(firstModerator, options) {\n    this._capabilityTypes = [MODERATOR];\n    this._write = []; // Allowed to add other mods or members\n\n    this._firstModerator = firstModerator;\n\n    this._write.push(this._firstModerator);\n\n    this._members = Boolean(options.members);\n    if (this._members) this._capabilityTypes.push(MEMBER);\n    this._encKeyId = options.encKeyId;\n  }\n\n  static get type() {\n    return type;\n  }\n\n  isMod(id) {\n    return this._write.includes(id);\n  }\n\n  isValidCapability(capability) {\n    return this._capabilityTypes.includes(capability);\n  }\n\n  get firstModerator() {\n    return this._firstModerator;\n  }\n\n  async canAppend(entry, identityProvider) {\n    const entryID = entry.identity.id;\n    const capability = entry.payload.value.capability;\n    const idAdd = entry.payload.value.id;\n    const isMod = this.isMod(entryID);\n    const validCapability = this.isValidCapability(capability);\n\n    const validSig = async () => identityProvider.verifyIdentity(entry.identity);\n\n    if (isMod && validCapability && (await validSig())) {\n      if (capability === MODERATOR) {\n        if (idAdd === this.firstModerator) return true;\n\n        this._write.push(idAdd);\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  async load(address) {\n    const addList = address.split('/');\n    const suffix = addList.pop();\n    this._members = suffix === 'members';\n    const mod = suffix.includes('mod') ? suffix : addList.pop();\n    this._firstModerator = mod.split('_')[1];\n  }\n\n  async save() {\n    // TODO if entire obj saved in manfest, can just pass our own fields\n    let address = `${type}/mod_${this._firstModerator}`;\n    address += this._members ? '/members' : '';\n    const manifest = {\n      address\n    };\n    if (this._encKeyId) manifest.encKeyId = this._encKeyId;\n    return manifest;\n  }\n\n  static async create(orbitdb, options = {}) {\n    let firstModerator, members, encKeyId;\n\n    if (options.address) {\n      members = options.address.includes('members');\n      firstModerator = options.address.split('/')[1].split('_')[1];\n      encKeyId = options.encKeyId;\n    } else {\n      members = options.members;\n      firstModerator = options.firstModerator;\n      encKeyId = options.encKeyId;\n    }\n\n    if (!firstModerator) throw new Error('Moderator AC: firstModerator required');\n    return new ModeratorAccessController(firstModerator, {\n      members,\n      encKeyId\n    });\n  }\n\n}\n\nmodule.exports = ModeratorAccessController;","map":null,"metadata":{},"sourceType":"script"}