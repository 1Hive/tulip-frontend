{"ast":null,"code":"const pageResults = require('graph-results-pager');\n\nconst {\n  request,\n  gql\n} = require('graphql-request');\n\nconst blocklytics = 'https://api.thegraph.com/subgraphs/name/blocklytics/ethereum-blocks';\n\nconst {\n  getUnixTime,\n  startOfHour,\n  startOfMinute,\n  startOfSecond,\n  subHours\n} = require(\"date-fns\");\n\nasync function timestampToBlock(timestamp) {\n  timestamp = String(timestamp).length > 10 ? Math.floor(timestamp / 1000) : timestamp;\n  let result = await request(blocklytics, gql`{\n            blocks(first: 1, orderBy: timestamp, orderDirection: desc, where: { timestamp_lte: ${timestamp} }) {\n                number\n            }\n        }`);\n  return Number(result.blocks[0].number);\n}\n\nasync function timestampsToBlocks(timestamps) {\n  const query = gql`{\n            ${timestamps.map(timestamp => gql`\n                timestamp${timestamp}: blocks(first:1, orderBy: timestamp, orderDirection: desc, where: { timestamp_lte: ${timestamp}}) {\n                    number\n            }`)}\n        }`;\n  let result = await request(blocklytics, query);\n  result = Object.keys(result).map(key => ({ ...result[key],\n    timestamp: key.split(\"timestamp\")[1]\n  })).sort((a, b) => Number(a.timestamp) - b.timestamp);\n  result.forEach(e => delete e.timestamp);\n  return result = Object.values(result).map(e => Number(e[0].number));\n}\n\nasync function blockToTimestamp(block) {\n  const result = await request(blocklytics, gql`{\n            blocks(first: 1, where: { number: ${block} }) {\n                timestamp\n            }\n        }`);\n  return Number(result.blocks[0].timestamp);\n}\n\nasync function getAverageBlockTime({\n  block = undefined,\n  timestamp = undefined\n} = {}) {\n  timestamp = timestamp ? String(timestamp).length > 10 ? Math.floor(timestamp / 1000) : timestamp : undefined;\n  timestamp = timestamp ? timestamp : block ? await blockToTimestamp(block) : undefined;\n  const now = startOfSecond(startOfMinute(startOfHour(timestamp ? timestamp * 1000 : Date.now())));\n  const start = getUnixTime(subHours(now, 6));\n  const end = getUnixTime(now);\n  const blocks = await pageResults({\n    api: blocklytics,\n    query: {\n      entity: 'blocks',\n      selection: {\n        orderBy: \"number\",\n        orderDirection: \"desc\",\n        where: {\n          timestamp_gte: start,\n          timestamp_lte: end\n        }\n      },\n      properties: ['timestamp']\n    }\n  });\n  const averageBlockTime = blocks.sort((a, b) => Number(b.timestamp) - Number(a.timestamp)).reduce((previousValue, currentValue, currentIndex) => {\n    if (previousValue.timestamp) {\n      const difference = previousValue.timestamp - currentValue.timestamp;\n      previousValue.difference = previousValue.difference + difference;\n    }\n\n    previousValue.timestamp = currentValue.timestamp;\n\n    if (currentIndex === blocks.length - 1) {\n      return previousValue.difference / blocks.length;\n    }\n\n    return previousValue;\n  }, {\n    timestamp: null,\n    difference: 0\n  });\n  return averageBlockTime;\n}\n\nmodule.exports = {\n  timestampToBlock,\n  timestampsToBlocks,\n  blockToTimestamp,\n  getAverageBlockTime\n};","map":null,"metadata":{},"sourceType":"script"}