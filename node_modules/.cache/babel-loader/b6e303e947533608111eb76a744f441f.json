{"ast":null,"code":"var _jsxFileName = \"/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/views/Profile/ProfileCreation/UserName.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport BigNumber from 'bignumber.js';\nimport { Card, CardBody, Heading, Text, Input as UIKitInput, Button, AutoRenewIcon, CheckmarkIcon, Flex, WarningIcon, useModal, Skeleton, Checkbox } from '@pancakeswap-libs/uikit';\nimport { parseISO, formatDistance } from 'date-fns';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { useToast } from 'state/hooks';\nimport useWeb3 from 'hooks/useWeb3';\nimport useI18n from 'hooks/useI18n';\nimport useHasCakeBalance from 'hooks/useHasCakeBalance';\nimport debounce from 'lodash/debounce';\nimport ConfirmProfileCreationModal from '../components/ConfirmProfileCreationModal';\nimport useProfileCreation from './contexts/hook';\nimport { USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH, REGISTER_COST } from './config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar ExistingUserState;\n\n(function (ExistingUserState) {\n  ExistingUserState[\"IDLE\"] = \"idle\";\n  ExistingUserState[\"CREATED\"] = \"created\";\n  ExistingUserState[\"NEW\"] = \"new\";\n})(ExistingUserState || (ExistingUserState = {}));\n\nconst profileApiUrl = process.env.REACT_APP_API_PROFILE;\nconst minimumCakeToRegister = new BigNumber(REGISTER_COST).multipliedBy(new BigNumber(10).pow(18));\nconst InputWrap = styled.div`\n  position: relative;\n  max-width: 240px;\n`;\n_c = InputWrap;\nconst Input = styled(UIKitInput)`\n  padding-right: 40px;\n`;\n_c2 = Input;\nconst Indicator = styled(Flex)`\n  align-items: center;\n  height: 24px;\n  justify-content: center;\n  margin-top: -12px;\n  position: absolute;\n  right: 16px;\n  top: 50%;\n  width: 24px;\n`;\n_c3 = Indicator;\n\nconst UserName = () => {\n  _s();\n\n  const [isAcknowledged, setIsAcknoledged] = useState(false);\n  const {\n    teamId,\n    tokenId,\n    userName,\n    actions,\n    minimumCakeRequired,\n    allowance\n  } = useProfileCreation();\n  const TranslateString = useI18n();\n  const {\n    account,\n    ethereum\n  } = useWallet();\n  const {\n    toastError\n  } = useToast();\n  const web3 = useWeb3();\n  const [existingUserState, setExistingUserState] = useState(ExistingUserState.IDLE);\n  const [isValid, setIsValid] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const hasMinimumCakeRequired = useHasCakeBalance(minimumCakeToRegister);\n  const [onPresentConfirmProfileCreation] = useModal( /*#__PURE__*/_jsxDEV(ConfirmProfileCreationModal, {\n    userName: userName,\n    tokenId: tokenId,\n    account: account,\n    teamId: teamId,\n    minimumCakeRequired: minimumCakeRequired,\n    allowance: allowance\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this), false);\n  const isUserCreated = existingUserState === ExistingUserState.CREATED;\n  const checkUsernameValidity = debounce(async value => {\n    try {\n      setIsLoading(true);\n      const res = await fetch(`${profileApiUrl}/api/users/valid/${value}`);\n\n      if (res.ok) {\n        setIsValid(true);\n        setMessage('');\n      } else {\n        var _data$error;\n\n        const data = await res.json();\n        setIsValid(false);\n        setMessage(data === null || data === void 0 ? void 0 : (_data$error = data.error) === null || _data$error === void 0 ? void 0 : _data$error.message);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  }, 200);\n\n  const handleChange = event => {\n    const {\n      value\n    } = event.target;\n    actions.setUserName(value);\n    checkUsernameValidity(value);\n  };\n\n  const handleConfirm = async () => {\n    try {\n      var _await$provider$bnbSi;\n\n      setIsLoading(true);\n      const provider = ethereum;\n      const signature = (provider === null || provider === void 0 ? void 0 : provider.bnbSign) ? (_await$provider$bnbSi = await provider.bnbSign(account, userName)) === null || _await$provider$bnbSi === void 0 ? void 0 : _await$provider$bnbSi.signature : await web3.eth.personal.sign(userName, account, null); // Last param is the password, and is null to request a signature in the wallet\n\n      const response = await fetch(`${profileApiUrl}/api/users/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          address: account,\n          username: userName,\n          signature\n        })\n      });\n\n      if (response.ok) {\n        setExistingUserState(ExistingUserState.CREATED);\n      } else {\n        var _data$error2;\n\n        const data = await response.json();\n        toastError(data === null || data === void 0 ? void 0 : (_data$error2 = data.error) === null || _data$error2 === void 0 ? void 0 : _data$error2.message);\n      }\n    } catch (error) {\n      toastError((error === null || error === void 0 ? void 0 : error.message) ? error.message : JSON.stringify(error));\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleAcknoledge = () => setIsAcknoledged(!isAcknowledged); // Perform an initial check to see if the wallet has already created a username\n\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const response = await fetch(`${profileApiUrl}/api/users/${account}`);\n        const data = await response.json();\n\n        if (response.ok) {\n          const dateCreated = formatDistance(parseISO(data.created_at), new Date());\n          setMessage(`Created ${dateCreated} ago`);\n          actions.setUserName(data.username);\n          setExistingUserState(ExistingUserState.CREATED);\n          setIsValid(true);\n        } else {\n          setExistingUserState(ExistingUserState.NEW);\n        }\n      } catch (error) {\n        toastError('Error: Unable to verify username');\n      }\n    };\n\n    if (account) {\n      fetchUser();\n    }\n  }, [account, setExistingUserState, setIsValid, setMessage, actions, toastError]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      fontSize: \"20px\",\n      color: \"textSubtle\",\n      bold: true,\n      children: TranslateString(999, `Step ${4}`)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h3\",\n      size: \"xl\",\n      mb: \"24px\",\n      children: TranslateString(1110, 'Set Your Name')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      as: \"p\",\n      mb: \"24px\",\n      children: TranslateString(999, 'This name will be shown in team leaderboards and search results as long as your profile is active.')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      mb: \"24px\",\n      children: /*#__PURE__*/_jsxDEV(CardBody, {\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          as: \"h4\",\n          size: \"lg\",\n          mb: \"8px\",\n          children: TranslateString(1110, 'Set Your Name')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          as: \"p\",\n          color: \"textSubtle\",\n          mb: \"24px\",\n          children: TranslateString(840, 'Your name must be at least 3 and at most 15 standard letters and numbers long. You canâ€™t change this once you click Confirm.')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this), existingUserState === ExistingUserState.IDLE ? /*#__PURE__*/_jsxDEV(Skeleton, {\n          height: \"40px\",\n          width: \"240px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(InputWrap, {\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            onChange: handleChange,\n            isWarning: userName && !isValid,\n            isSuccess: userName && isValid,\n            minLength: USERNAME_MIN_LENGTH,\n            maxLength: USERNAME_MAX_LENGTH,\n            disabled: isUserCreated,\n            placeholder: TranslateString(1094, 'Enter your name...'),\n            value: userName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Indicator, {\n            children: [isLoading && /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n              spin: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 31\n            }, this), !isLoading && isValid && userName && /*#__PURE__*/_jsxDEV(CheckmarkIcon, {\n              color: \"success\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 55\n            }, this), !isLoading && !isValid && userName && /*#__PURE__*/_jsxDEV(WarningIcon, {\n              color: \"failure\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 56\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          color: \"textSubtle\",\n          fontSize: \"14px\",\n          py: \"4px\",\n          mb: \"16px\",\n          style: {\n            minHeight: '30px'\n          },\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          as: \"p\",\n          color: \"failure\",\n          mb: \"8px\",\n          children: TranslateString(1100, \"Only reuse a name from other social media if you're OK with people viewing your wallet. You can't change your name once you click Confirm.\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"checkbox\",\n          style: {\n            display: 'block',\n            cursor: 'pointer',\n            marginBottom: '24px'\n          },\n          children: /*#__PURE__*/_jsxDEV(Flex, {\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                flex: 'none'\n              },\n              children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                id: \"checkbox\",\n                scale: \"sm\",\n                checked: isAcknowledged,\n                onChange: handleAcknoledge\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              ml: \"8px\",\n              children: TranslateString(1096, 'I understand that people can view my wallet if they know my username')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleConfirm,\n          disabled: !isValid || isUserCreated || isLoading || !isAcknowledged,\n          children: TranslateString(464, 'Confirm')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: onPresentConfirmProfileCreation,\n      disabled: !isValid || !isUserCreated,\n      children: TranslateString(842, 'Complete Profile')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), !hasMinimumCakeRequired && /*#__PURE__*/_jsxDEV(Text, {\n      color: \"failure\",\n      mt: \"16px\",\n      children: TranslateString(1098, `A minimum of ${REGISTER_COST} CAKE is required`, {\n        num: REGISTER_COST\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(UserName, \"lGbeIPgTIvnzIGXYNr0CCAgdsoY=\", false, function () {\n  return [useProfileCreation, useI18n, useWallet, useToast, useWeb3, useHasCakeBalance, useModal];\n});\n\n_c4 = UserName;\nexport default UserName;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"InputWrap\");\n$RefreshReg$(_c2, \"Input\");\n$RefreshReg$(_c3, \"Indicator\");\n$RefreshReg$(_c4, \"UserName\");","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/views/Profile/ProfileCreation/UserName.tsx"],"names":["React","useEffect","useState","styled","BigNumber","Card","CardBody","Heading","Text","Input","UIKitInput","Button","AutoRenewIcon","CheckmarkIcon","Flex","WarningIcon","useModal","Skeleton","Checkbox","parseISO","formatDistance","useWallet","useToast","useWeb3","useI18n","useHasCakeBalance","debounce","ConfirmProfileCreationModal","useProfileCreation","USERNAME_MIN_LENGTH","USERNAME_MAX_LENGTH","REGISTER_COST","ExistingUserState","profileApiUrl","process","env","REACT_APP_API_PROFILE","minimumCakeToRegister","multipliedBy","pow","InputWrap","div","Indicator","UserName","isAcknowledged","setIsAcknoledged","teamId","tokenId","userName","actions","minimumCakeRequired","allowance","TranslateString","account","ethereum","toastError","web3","existingUserState","setExistingUserState","IDLE","isValid","setIsValid","isLoading","setIsLoading","message","setMessage","hasMinimumCakeRequired","onPresentConfirmProfileCreation","isUserCreated","CREATED","checkUsernameValidity","value","res","fetch","ok","data","json","error","handleChange","event","target","setUserName","handleConfirm","provider","signature","bnbSign","eth","personal","sign","response","method","headers","body","JSON","stringify","address","username","handleAcknoledge","fetchUser","dateCreated","created_at","Date","NEW","minHeight","display","cursor","marginBottom","flex","num"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Text,\n  Input as UIKitInput,\n  Button,\n  AutoRenewIcon,\n  CheckmarkIcon,\n  Flex,\n  WarningIcon,\n  useModal,\n  Skeleton,\n  Checkbox,\n} from '@pancakeswap-libs/uikit'\nimport { parseISO, formatDistance } from 'date-fns'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useToast } from 'state/hooks'\nimport useWeb3 from 'hooks/useWeb3'\nimport useI18n from 'hooks/useI18n'\nimport useHasCakeBalance from 'hooks/useHasCakeBalance'\nimport debounce from 'lodash/debounce'\nimport ConfirmProfileCreationModal from '../components/ConfirmProfileCreationModal'\nimport useProfileCreation from './contexts/hook'\nimport { USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH, REGISTER_COST } from './config'\n\nenum ExistingUserState {\n  IDLE = 'idle', // initial state\n  CREATED = 'created', // username has already been created\n  NEW = 'new', // username has not been created\n}\n\nconst profileApiUrl = process.env.REACT_APP_API_PROFILE\nconst minimumCakeToRegister = new BigNumber(REGISTER_COST).multipliedBy(new BigNumber(10).pow(18))\n\nconst InputWrap = styled.div`\n  position: relative;\n  max-width: 240px;\n`\n\nconst Input = styled(UIKitInput)`\n  padding-right: 40px;\n`\n\nconst Indicator = styled(Flex)`\n  align-items: center;\n  height: 24px;\n  justify-content: center;\n  margin-top: -12px;\n  position: absolute;\n  right: 16px;\n  top: 50%;\n  width: 24px;\n`\n\nconst UserName: React.FC = () => {\n  const [isAcknowledged, setIsAcknoledged] = useState(false)\n  const { teamId, tokenId, userName, actions, minimumCakeRequired, allowance } = useProfileCreation()\n  const TranslateString = useI18n()\n  const { account, ethereum } = useWallet()\n  const { toastError } = useToast()\n  const web3 = useWeb3()\n  const [existingUserState, setExistingUserState] = useState<ExistingUserState>(ExistingUserState.IDLE)\n  const [isValid, setIsValid] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const [message, setMessage] = useState('')\n  const hasMinimumCakeRequired = useHasCakeBalance(minimumCakeToRegister)\n  const [onPresentConfirmProfileCreation] = useModal(\n    <ConfirmProfileCreationModal\n      userName={userName}\n      tokenId={tokenId}\n      account={account}\n      teamId={teamId}\n      minimumCakeRequired={minimumCakeRequired}\n      allowance={allowance}\n    />,\n    false,\n  )\n  const isUserCreated = existingUserState === ExistingUserState.CREATED\n\n  const checkUsernameValidity = debounce(async (value: string) => {\n    try {\n      setIsLoading(true)\n      const res = await fetch(`${profileApiUrl}/api/users/valid/${value}`)\n\n      if (res.ok) {\n        setIsValid(true)\n        setMessage('')\n      } else {\n        const data = await res.json()\n        setIsValid(false)\n        setMessage(data?.error?.message)\n      }\n    } finally {\n      setIsLoading(false)\n    }\n  }, 200)\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target\n    actions.setUserName(value)\n    checkUsernameValidity(value)\n  }\n\n  const handleConfirm = async () => {\n    try {\n      setIsLoading(true)\n\n      const provider = ethereum as any\n      const signature = provider?.bnbSign\n        ? (await provider.bnbSign(account, userName))?.signature\n        : await web3.eth.personal.sign(userName, account, null) // Last param is the password, and is null to request a signature in the wallet\n\n      const response = await fetch(`${profileApiUrl}/api/users/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          address: account,\n          username: userName,\n          signature,\n        }),\n      })\n\n      if (response.ok) {\n        setExistingUserState(ExistingUserState.CREATED)\n      } else {\n        const data = await response.json()\n        toastError(data?.error?.message)\n      }\n    } catch (error) {\n      toastError(error?.message ? error.message : JSON.stringify(error))\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleAcknoledge = () => setIsAcknoledged(!isAcknowledged)\n\n  // Perform an initial check to see if the wallet has already created a username\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const response = await fetch(`${profileApiUrl}/api/users/${account}`)\n        const data = await response.json()\n\n        if (response.ok) {\n          const dateCreated = formatDistance(parseISO(data.created_at), new Date())\n          setMessage(`Created ${dateCreated} ago`)\n\n          actions.setUserName(data.username)\n          setExistingUserState(ExistingUserState.CREATED)\n          setIsValid(true)\n        } else {\n          setExistingUserState(ExistingUserState.NEW)\n        }\n      } catch (error) {\n        toastError('Error: Unable to verify username')\n      }\n    }\n\n    if (account) {\n      fetchUser()\n    }\n  }, [account, setExistingUserState, setIsValid, setMessage, actions, toastError])\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {TranslateString(999, `Step ${4}`)}\n      </Text>\n      <Heading as=\"h3\" size=\"xl\" mb=\"24px\">\n        {TranslateString(1110, 'Set Your Name')}\n      </Heading>\n      <Text as=\"p\" mb=\"24px\">\n        {TranslateString(\n          999,\n          'This name will be shown in team leaderboards and search results as long as your profile is active.',\n        )}\n      </Text>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" size=\"lg\" mb=\"8px\">\n            {TranslateString(1110, 'Set Your Name')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {TranslateString(\n              840,\n              'Your name must be at least 3 and at most 15 standard letters and numbers long. You canâ€™t change this once you click Confirm.',\n            )}\n          </Text>\n          {existingUserState === ExistingUserState.IDLE ? (\n            <Skeleton height=\"40px\" width=\"240px\" />\n          ) : (\n            <InputWrap>\n              <Input\n                onChange={handleChange}\n                isWarning={userName && !isValid}\n                isSuccess={userName && isValid}\n                minLength={USERNAME_MIN_LENGTH}\n                maxLength={USERNAME_MAX_LENGTH}\n                disabled={isUserCreated}\n                placeholder={TranslateString(1094, 'Enter your name...')}\n                value={userName}\n              />\n              <Indicator>\n                {isLoading && <AutoRenewIcon spin />}\n                {!isLoading && isValid && userName && <CheckmarkIcon color=\"success\" />}\n                {!isLoading && !isValid && userName && <WarningIcon color=\"failure\" />}\n              </Indicator>\n            </InputWrap>\n          )}\n          <Text color=\"textSubtle\" fontSize=\"14px\" py=\"4px\" mb=\"16px\" style={{ minHeight: '30px' }}>\n            {message}\n          </Text>\n          <Text as=\"p\" color=\"failure\" mb=\"8px\">\n            {TranslateString(\n              1100,\n              \"Only reuse a name from other social media if you're OK with people viewing your wallet. You can't change your name once you click Confirm.\",\n            )}\n          </Text>\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={isAcknowledged} onChange={handleAcknoledge} />\n              </div>\n              <Text ml=\"8px\">\n                {TranslateString(1096, 'I understand that people can view my wallet if they know my username')}\n              </Text>\n            </Flex>\n          </label>\n          <Button onClick={handleConfirm} disabled={!isValid || isUserCreated || isLoading || !isAcknowledged}>\n            {TranslateString(464, 'Confirm')}\n          </Button>\n        </CardBody>\n      </Card>\n      <Button onClick={onPresentConfirmProfileCreation} disabled={!isValid || !isUserCreated}>\n        {TranslateString(842, 'Complete Profile')}\n      </Button>\n      {!hasMinimumCakeRequired && (\n        <Text color=\"failure\" mt=\"16px\">\n          {TranslateString(1098, `A minimum of ${REGISTER_COST} CAKE is required`, { num: REGISTER_COST })}\n        </Text>\n      )}\n    </>\n  )\n}\n\nexport default UserName\n"]},"metadata":{},"sourceType":"module"}