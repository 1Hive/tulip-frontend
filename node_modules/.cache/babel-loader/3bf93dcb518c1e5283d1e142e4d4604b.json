{"ast":null,"code":"var _jsxFileName = \"/Users/fabianmolina/Documents/1hive/tulip-frontend/src/providers/CourtClock.js\";\nimport React, { useContext, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport useNow from '../hooks/useNow';\nimport { useCourtConfig } from './CourtConfig';\nimport { getTermPeriod, getExpectedCurrentTermId } from '../utils/court-utils';\nconst CourtClockContext = /*#__PURE__*/React.createContext();\n\nfunction CourtClockProvider({\n  children\n}) {\n  const now = useNow();\n  const courtConfig = useCourtConfig();\n  const {\n    currentTerm: actualCurrentTerm,\n    terms = [],\n    termDuration = 0\n  } = courtConfig || {};\n  let expectedCurrentTerm = 0;\n  let [termStartTime, termEndTime] = [0, 0];\n\n  if (terms.length > 0) {\n    expectedCurrentTerm = getExpectedCurrentTermId(now, {\n      terms,\n      termDuration\n    });\n    const termPeriod = getTermPeriod(expectedCurrentTerm, {\n      terms,\n      termDuration\n    });\n    termStartTime = termPeriod[0];\n    termEndTime = termPeriod[1];\n  }\n\n  const courtClock = useMemo(() => ({\n    currentTermId: expectedCurrentTerm,\n    currentTermStartDate: new Date(termStartTime),\n    currentTermEndDate: new Date(termEndTime),\n    isSynced: expectedCurrentTerm === actualCurrentTerm,\n    neededTransitions: expectedCurrentTerm - actualCurrentTerm\n  }), [actualCurrentTerm, expectedCurrentTerm, termEndTime, termStartTime]);\n  return /*#__PURE__*/React.createElement(CourtClockContext.Provider, {\n    value: courtClock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nCourtClockProvider.propTypes = {\n  children: PropTypes.node\n};\n\nfunction useCourtClock() {\n  return useContext(CourtClockContext);\n}\n\nexport { CourtClockProvider, useCourtClock };","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/providers/CourtClock.js"],"names":["React","useContext","useMemo","PropTypes","useNow","useCourtConfig","getTermPeriod","getExpectedCurrentTermId","CourtClockContext","createContext","CourtClockProvider","children","now","courtConfig","currentTerm","actualCurrentTerm","terms","termDuration","expectedCurrentTerm","termStartTime","termEndTime","length","termPeriod","courtClock","currentTermId","currentTermStartDate","Date","currentTermEndDate","isSynced","neededTransitions","propTypes","node","useCourtClock"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,OAA5B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,aAAT,EAAwBC,wBAAxB,QAAwD,sBAAxD;AAEA,MAAMC,iBAAiB,gBAAGR,KAAK,CAACS,aAAN,EAA1B;;AAEA,SAASC,kBAAT,CAA4B;AAAEC,EAAAA;AAAF,CAA5B,EAA0C;AACxC,QAAMC,GAAG,GAAGR,MAAM,EAAlB;AACA,QAAMS,WAAW,GAAGR,cAAc,EAAlC;AAEA,QAAM;AAAES,IAAAA,WAAW,EAAEC,iBAAf;AAAkCC,IAAAA,KAAK,GAAG,EAA1C;AAA8CC,IAAAA,YAAY,GAAG;AAA7D,MACJJ,WAAW,IAAI,EADjB;AAGA,MAAIK,mBAAmB,GAAG,CAA1B;AACA,MAAI,CAACC,aAAD,EAAgBC,WAAhB,IAA+B,CAAC,CAAD,EAAI,CAAJ,CAAnC;;AAEA,MAAIJ,KAAK,CAACK,MAAN,GAAe,CAAnB,EAAsB;AACpBH,IAAAA,mBAAmB,GAAGX,wBAAwB,CAACK,GAAD,EAAM;AAClDI,MAAAA,KADkD;AAElDC,MAAAA;AAFkD,KAAN,CAA9C;AAKA,UAAMK,UAAU,GAAGhB,aAAa,CAACY,mBAAD,EAAsB;AACpDF,MAAAA,KADoD;AAEpDC,MAAAA;AAFoD,KAAtB,CAAhC;AAKAE,IAAAA,aAAa,GAAGG,UAAU,CAAC,CAAD,CAA1B;AACAF,IAAAA,WAAW,GAAGE,UAAU,CAAC,CAAD,CAAxB;AACD;;AAED,QAAMC,UAAU,GAAGrB,OAAO,CACxB,OAAO;AACLsB,IAAAA,aAAa,EAAEN,mBADV;AAELO,IAAAA,oBAAoB,EAAE,IAAIC,IAAJ,CAASP,aAAT,CAFjB;AAGLQ,IAAAA,kBAAkB,EAAE,IAAID,IAAJ,CAASN,WAAT,CAHf;AAILQ,IAAAA,QAAQ,EAAEV,mBAAmB,KAAKH,iBAJ7B;AAKLc,IAAAA,iBAAiB,EAAEX,mBAAmB,GAAGH;AALpC,GAAP,CADwB,EAQxB,CAACA,iBAAD,EAAoBG,mBAApB,EAAyCE,WAAzC,EAAsDD,aAAtD,CARwB,CAA1B;AAWA,sBACE,oBAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAEI,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGZ,QADH,CADF;AAKD;;AAEDD,kBAAkB,CAACoB,SAAnB,GAA+B;AAC7BnB,EAAAA,QAAQ,EAAER,SAAS,CAAC4B;AADS,CAA/B;;AAIA,SAASC,aAAT,GAAyB;AACvB,SAAO/B,UAAU,CAACO,iBAAD,CAAjB;AACD;;AAED,SAASE,kBAAT,EAA6BsB,aAA7B","sourcesContent":["import React, { useContext, useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport useNow from '../hooks/useNow'\r\nimport { useCourtConfig } from './CourtConfig'\r\nimport { getTermPeriod, getExpectedCurrentTermId } from '../utils/court-utils'\r\n\r\nconst CourtClockContext = React.createContext()\r\n\r\nfunction CourtClockProvider({ children }) {\r\n  const now = useNow()\r\n  const courtConfig = useCourtConfig()\r\n\r\n  const { currentTerm: actualCurrentTerm, terms = [], termDuration = 0 } =\r\n    courtConfig || {}\r\n\r\n  let expectedCurrentTerm = 0\r\n  let [termStartTime, termEndTime] = [0, 0]\r\n\r\n  if (terms.length > 0) {\r\n    expectedCurrentTerm = getExpectedCurrentTermId(now, {\r\n      terms,\r\n      termDuration,\r\n    })\r\n\r\n    const termPeriod = getTermPeriod(expectedCurrentTerm, {\r\n      terms,\r\n      termDuration,\r\n    })\r\n\r\n    termStartTime = termPeriod[0]\r\n    termEndTime = termPeriod[1]\r\n  }\r\n\r\n  const courtClock = useMemo(\r\n    () => ({\r\n      currentTermId: expectedCurrentTerm,\r\n      currentTermStartDate: new Date(termStartTime),\r\n      currentTermEndDate: new Date(termEndTime),\r\n      isSynced: expectedCurrentTerm === actualCurrentTerm,\r\n      neededTransitions: expectedCurrentTerm - actualCurrentTerm,\r\n    }),\r\n    [actualCurrentTerm, expectedCurrentTerm, termEndTime, termStartTime]\r\n  )\r\n\r\n  return (\r\n    <CourtClockContext.Provider value={courtClock}>\r\n      {children}\r\n    </CourtClockContext.Provider>\r\n  )\r\n}\r\n\r\nCourtClockProvider.propTypes = {\r\n  children: PropTypes.node,\r\n}\r\n\r\nfunction useCourtClock() {\r\n  return useContext(CourtClockContext)\r\n}\r\n\r\nexport { CourtClockProvider, useCourtClock }\r\n"]},"metadata":{},"sourceType":"module"}