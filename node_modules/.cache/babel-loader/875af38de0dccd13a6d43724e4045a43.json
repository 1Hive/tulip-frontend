{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _createForOfIteratorHelper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _toConsumableArray = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar isPlainObject = require('is-plain-obj');\n\nmodule.exports = function (object) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isPlainObject(object) && !Array.isArray(object)) {\n    throw new TypeError('Expected a plain object or array');\n  }\n\n  var deep = options.deep;\n  var seenInput = [];\n  var seenOutput = [];\n\n  var deepSortArray = function deepSortArray(array) {\n    var seenIndex = seenInput.indexOf(array);\n\n    if (seenIndex !== -1) {\n      return seenOutput[seenIndex];\n    }\n\n    var result = [];\n    seenInput.push(array);\n    seenOutput.push(result);\n    result.push.apply(result, _toConsumableArray(array.map(function (item) {\n      if (Array.isArray(item)) {\n        return deepSortArray(item);\n      }\n\n      if (isPlainObject(item)) {\n        return sortKeys(item);\n      }\n\n      return item;\n    })));\n    return result;\n  };\n\n  var sortKeys = function sortKeys(object) {\n    var seenIndex = seenInput.indexOf(object);\n\n    if (seenIndex !== -1) {\n      return seenOutput[seenIndex];\n    }\n\n    var result = {};\n    var keys = Object.keys(object).sort(options.compare);\n    seenInput.push(object);\n    seenOutput.push(result);\n\n    var _iterator = _createForOfIteratorHelper(keys),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var key = _step.value;\n        var value = object[key];\n        var newValue = void 0;\n\n        if (deep && Array.isArray(value)) {\n          newValue = deepSortArray(value);\n        } else {\n          newValue = deep && isPlainObject(value) ? sortKeys(value) : value;\n        }\n\n        Object.defineProperty(result, key, _objectSpread(_objectSpread({}, Object.getOwnPropertyDescriptor(object, key)), {}, {\n          value: newValue\n        }));\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return result;\n  };\n\n  if (Array.isArray(object)) {\n    return deep ? deepSortArray(object) : object.slice();\n  }\n\n  return sortKeys(object);\n};","map":null,"metadata":{},"sourceType":"script"}