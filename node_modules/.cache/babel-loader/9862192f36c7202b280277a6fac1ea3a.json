{"ast":null,"code":"\"use strict\";\n\nimport _regeneratorRuntime from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\"; // The transaction has already been sanitized by the calls in Provider\n\nfunction getTransactionPostData(transaction) {\n  var result = {};\n\n  for (var key in transaction) {\n    if (transaction[key] == null) {\n      continue;\n    }\n\n    var value = hexlify(transaction[key]); // Quantity-types require no leading zero, unless 0\n\n    if ({\n      gasLimit: true,\n      gasPrice: true,\n      nonce: true,\n      value: true\n    }[key]) {\n      value = hexValue(value);\n    }\n\n    result[key] = value;\n  }\n\n  return result;\n}\n\nfunction getResult(result) {\n  // getLogs, getHistory have weird success responses\n  if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n    return result.result;\n  }\n\n  if (result.status != 1 || result.message != \"OK\") {\n    var error = new Error(\"invalid response\");\n    error.result = JSON.stringify(result);\n\n    if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n      error.throttleRetry = true;\n    }\n\n    throw error;\n  }\n\n  return result.result;\n}\n\nfunction getJsonResult(result) {\n  // This response indicates we are being throttled\n  if (result && result.status == 0 && result.message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n    var error = new Error(\"throttled response\");\n    error.result = JSON.stringify(result);\n    error.throttleRetry = true;\n    throw error;\n  }\n\n  if (result.jsonrpc != \"2.0\") {\n    // @TODO: not any\n    var _error = new Error(\"invalid response\");\n\n    _error.result = JSON.stringify(result);\n    throw _error;\n  }\n\n  if (result.error) {\n    // @TODO: not any\n    var _error2 = new Error(result.error.message || \"unknown error\");\n\n    if (result.error.code) {\n      _error2.code = result.error.code;\n    }\n\n    if (result.error.data) {\n      _error2.data = result.error.data;\n    }\n\n    throw _error2;\n  }\n\n  return result.result;\n} // The blockTag was normalized as a string by the Provider pre-perform operations\n\n\nfunction checkLogTag(blockTag) {\n  if (blockTag === \"pending\") {\n    throw new Error(\"pending not supported\");\n  }\n\n  if (blockTag === \"latest\") {\n    return blockTag;\n  }\n\n  return parseInt(blockTag.substring(2), 16);\n}\n\nvar defaultApiKey = \"9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB\";\n\nfunction checkError(method, error, transaction) {\n  // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n  if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n    var e = error.error;\n\n    if (e && e.message.match(\"reverted\") && isHexString(e.data)) {\n      return e.data;\n    }\n  } // Get the message from any nested error structure\n\n\n  var message = error.message;\n\n  if (error.code === Logger.errors.SERVER_ERROR) {\n    if (error.error && typeof error.error.message === \"string\") {\n      message = error.error.message;\n    } else if (typeof error.body === \"string\") {\n      message = error.body;\n    } else if (typeof error.responseText === \"string\") {\n      message = error.responseText;\n    }\n  }\n\n  message = (message || \"\").toLowerCase(); // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n\n  if (message.match(/insufficient funds/)) {\n    logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  } // \"Transaction with the same hash was already imported.\"\n\n\n  if (message.match(/same hash was already imported|transaction nonce is too low/)) {\n    logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  } // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n\n\n  if (message.match(/another transaction with same nonce/)) {\n    logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  }\n\n  if (message.match(/execution failed due to an exception/)) {\n    logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  }\n\n  throw error;\n}\n\nexport var EtherscanProvider = /*#__PURE__*/function (_BaseProvider) {\n  _inherits(EtherscanProvider, _BaseProvider);\n\n  var _super2 = _createSuper(EtherscanProvider);\n\n  function EtherscanProvider(network, apiKey) {\n    var _this;\n\n    _classCallCheck(this, EtherscanProvider);\n\n    logger.checkNew(this instanceof EtherscanProvider ? this.constructor : void 0, EtherscanProvider);\n    _this = _super2.call(this, network);\n    var name = \"invalid\";\n\n    if (_this.network) {\n      name = _this.network.name;\n    }\n\n    var baseUrl = null;\n\n    switch (name) {\n      case \"homestead\":\n        baseUrl = \"https://api.etherscan.io\";\n        break;\n\n      case \"ropsten\":\n        baseUrl = \"https://api-ropsten.etherscan.io\";\n        break;\n\n      case \"rinkeby\":\n        baseUrl = \"https://api-rinkeby.etherscan.io\";\n        break;\n\n      case \"kovan\":\n        baseUrl = \"https://api-kovan.etherscan.io\";\n        break;\n\n      case \"goerli\":\n        baseUrl = \"https://api-goerli.etherscan.io\";\n        break;\n\n      default:\n        throw new Error(\"unsupported network\");\n    }\n\n    defineReadOnly(_assertThisInitialized(_this), \"baseUrl\", baseUrl);\n    defineReadOnly(_assertThisInitialized(_this), \"apiKey\", apiKey || defaultApiKey);\n    return _this;\n  }\n\n  _createClass(EtherscanProvider, [{\n    key: \"detectNetwork\",\n    value: function detectNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.network);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"perform\",\n    value: function perform(method, params) {\n      var _this2 = this;\n\n      var _super = Object.create(null, {\n        perform: {\n          get: function get() {\n            return _get(_getPrototypeOf(EtherscanProvider.prototype), \"perform\", _this2);\n          }\n        }\n      });\n\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this3 = this;\n\n        var url, apiKey, get, postData, _postData, topic0, logs, blocks, i, log, block;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                url = this.baseUrl + \"/api\";\n                apiKey = \"\";\n\n                if (this.apiKey) {\n                  apiKey += \"&apikey=\" + this.apiKey;\n                }\n\n                get = function get(url, payload, procFunc) {\n                  return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                    var _this4 = this;\n\n                    var connection, payloadStr, result;\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            this.emit(\"debug\", {\n                              action: \"request\",\n                              request: url,\n                              provider: this\n                            });\n                            connection = {\n                              url: url,\n                              throttleSlotInterval: 1000,\n                              throttleCallback: function throttleCallback(attempt, url) {\n                                if (_this4.isCommunityResource()) {\n                                  showThrottleMessage();\n                                }\n\n                                return Promise.resolve(true);\n                              }\n                            };\n                            payloadStr = null;\n\n                            if (payload) {\n                              connection.headers = {\n                                \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\"\n                              };\n                              payloadStr = Object.keys(payload).map(function (key) {\n                                return \"\".concat(key, \"=\").concat(payload[key]);\n                              }).join(\"&\");\n                            }\n\n                            _context2.next = 6;\n                            return fetchJson(connection, payloadStr, procFunc || getJsonResult);\n\n                          case 6:\n                            result = _context2.sent;\n                            this.emit(\"debug\", {\n                              action: \"response\",\n                              request: url,\n                              response: deepCopy(result),\n                              provider: this\n                            });\n                            return _context2.abrupt(\"return\", result);\n\n                          case 9:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, this);\n                  }));\n                };\n\n                _context3.t0 = method;\n                _context3.next = _context3.t0 === \"getBlockNumber\" ? 7 : _context3.t0 === \"getGasPrice\" ? 9 : _context3.t0 === \"getBalance\" ? 11 : _context3.t0 === \"getTransactionCount\" ? 14 : _context3.t0 === \"getCode\" ? 17 : _context3.t0 === \"getStorageAt\" ? 20 : _context3.t0 === \"sendTransaction\" ? 24 : _context3.t0 === \"getBlock\" ? 25 : _context3.t0 === \"getTransaction\" ? 31 : _context3.t0 === \"getTransactionReceipt\" ? 34 : _context3.t0 === \"call\" ? 37 : _context3.t0 === \"estimateGas\" ? 52 : _context3.t0 === \"getLogs\" ? 65 : _context3.t0 === \"getEtherPrice\" ? 90 : 99;\n                break;\n\n              case 7:\n                url += \"?module=proxy&action=eth_blockNumber\" + apiKey;\n                return _context3.abrupt(\"return\", get(url, null));\n\n              case 9:\n                url += \"?module=proxy&action=eth_gasPrice\" + apiKey;\n                return _context3.abrupt(\"return\", get(url, null));\n\n              case 11:\n                // Returns base-10 result\n                url += \"?module=account&action=balance&address=\" + params.address;\n                url += \"&tag=\" + params.blockTag + apiKey;\n                return _context3.abrupt(\"return\", get(url, null, getResult));\n\n              case 14:\n                url += \"?module=proxy&action=eth_getTransactionCount&address=\" + params.address;\n                url += \"&tag=\" + params.blockTag + apiKey;\n                return _context3.abrupt(\"return\", get(url, null));\n\n              case 17:\n                url += \"?module=proxy&action=eth_getCode&address=\" + params.address;\n                url += \"&tag=\" + params.blockTag + apiKey;\n                return _context3.abrupt(\"return\", get(url, null));\n\n              case 20:\n                url += \"?module=proxy&action=eth_getStorageAt&address=\" + params.address;\n                url += \"&position=\" + params.position;\n                url += \"&tag=\" + params.blockTag + apiKey;\n                return _context3.abrupt(\"return\", get(url, null));\n\n              case 24:\n                return _context3.abrupt(\"return\", get(url, {\n                  module: \"proxy\",\n                  action: \"eth_sendRawTransaction\",\n                  hex: params.signedTransaction,\n                  apikey: this.apiKey\n                }).catch(function (error) {\n                  return checkError(\"sendTransaction\", error, params.signedTransaction);\n                }));\n\n              case 25:\n                if (!params.blockTag) {\n                  _context3.next = 30;\n                  break;\n                }\n\n                url += \"?module=proxy&action=eth_getBlockByNumber&tag=\" + params.blockTag;\n\n                if (params.includeTransactions) {\n                  url += \"&boolean=true\";\n                } else {\n                  url += \"&boolean=false\";\n                }\n\n                url += apiKey;\n                return _context3.abrupt(\"return\", get(url, null));\n\n              case 30:\n                throw new Error(\"getBlock by blockHash not implemented\");\n\n              case 31:\n                url += \"?module=proxy&action=eth_getTransactionByHash&txhash=\" + params.transactionHash;\n                url += apiKey;\n                return _context3.abrupt(\"return\", get(url, null));\n\n              case 34:\n                url += \"?module=proxy&action=eth_getTransactionReceipt&txhash=\" + params.transactionHash;\n                url += apiKey;\n                return _context3.abrupt(\"return\", get(url, null));\n\n              case 37:\n                if (!(params.blockTag !== \"latest\")) {\n                  _context3.next = 39;\n                  break;\n                }\n\n                throw new Error(\"EtherscanProvider does not support blockTag for call\");\n\n              case 39:\n                postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_call\";\n                postData.apikey = this.apiKey;\n                _context3.prev = 43;\n                _context3.next = 46;\n                return get(url, postData);\n\n              case 46:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 49:\n                _context3.prev = 49;\n                _context3.t1 = _context3[\"catch\"](43);\n                return _context3.abrupt(\"return\", checkError(\"call\", _context3.t1, params.transaction));\n\n              case 52:\n                _postData = getTransactionPostData(params.transaction);\n                _postData.module = \"proxy\";\n                _postData.action = \"eth_estimateGas\";\n                _postData.apikey = this.apiKey;\n                _context3.prev = 56;\n                _context3.next = 59;\n                return get(url, _postData);\n\n              case 59:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 62:\n                _context3.prev = 62;\n                _context3.t2 = _context3[\"catch\"](56);\n                return _context3.abrupt(\"return\", checkError(\"estimateGas\", _context3.t2, params.transaction));\n\n              case 65:\n                url += \"?module=logs&action=getLogs\";\n\n                if (params.filter.fromBlock) {\n                  url += \"&fromBlock=\" + checkLogTag(params.filter.fromBlock);\n                }\n\n                if (params.filter.toBlock) {\n                  url += \"&toBlock=\" + checkLogTag(params.filter.toBlock);\n                }\n\n                if (params.filter.address) {\n                  url += \"&address=\" + params.filter.address;\n                } // @TODO: We can handle slightly more complicated logs using the logs API\n\n\n                if (params.filter.topics && params.filter.topics.length > 0) {\n                  if (params.filter.topics.length > 1) {\n                    logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, {\n                      topics: params.filter.topics\n                    });\n                  }\n\n                  if (params.filter.topics.length === 1) {\n                    topic0 = params.filter.topics[0];\n\n                    if (typeof topic0 !== \"string\" || topic0.length !== 66) {\n                      logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, {\n                        topic0: topic0\n                      });\n                    }\n\n                    url += \"&topic0=\" + topic0;\n                  }\n                }\n\n                url += apiKey;\n                _context3.next = 73;\n                return get(url, null, getResult);\n\n              case 73:\n                logs = _context3.sent;\n                // Cache txHash => blockHash\n                blocks = {}; // Add any missing blockHash to the logs\n\n                i = 0;\n\n              case 76:\n                if (!(i < logs.length)) {\n                  _context3.next = 89;\n                  break;\n                }\n\n                log = logs[i];\n\n                if (!(log.blockHash != null)) {\n                  _context3.next = 80;\n                  break;\n                }\n\n                return _context3.abrupt(\"continue\", 86);\n\n              case 80:\n                if (!(blocks[log.blockNumber] == null)) {\n                  _context3.next = 85;\n                  break;\n                }\n\n                _context3.next = 83;\n                return this.getBlock(log.blockNumber);\n\n              case 83:\n                block = _context3.sent;\n\n                if (block) {\n                  blocks[log.blockNumber] = block.hash;\n                }\n\n              case 85:\n                log.blockHash = blocks[log.blockNumber];\n\n              case 86:\n                i++;\n                _context3.next = 76;\n                break;\n\n              case 89:\n                return _context3.abrupt(\"return\", logs);\n\n              case 90:\n                if (!(this.network.name !== \"homestead\")) {\n                  _context3.next = 92;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", 0.0);\n\n              case 92:\n                url += \"?module=stats&action=ethprice\";\n                url += apiKey;\n                _context3.t3 = parseFloat;\n                _context3.next = 97;\n                return get(url, null, getResult);\n\n              case 97:\n                _context3.t4 = _context3.sent.ethusd;\n                return _context3.abrupt(\"return\", (0, _context3.t3)(_context3.t4));\n\n              case 99:\n                return _context3.abrupt(\"break\", 100);\n\n              case 100:\n                return _context3.abrupt(\"return\", _super.perform.call(this, method, params));\n\n              case 101:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[43, 49], [56, 62]]);\n      }));\n    } // @TODO: Allow startBlock and endBlock to be Promises\n\n  }, {\n    key: \"getHistory\",\n    value: function getHistory(addressOrName, startBlock, endBlock) {\n      var _this5 = this;\n\n      var url = this.baseUrl;\n      var apiKey = \"\";\n\n      if (this.apiKey) {\n        apiKey += \"&apikey=\" + this.apiKey;\n      }\n\n      if (startBlock == null) {\n        startBlock = 0;\n      }\n\n      if (endBlock == null) {\n        endBlock = 99999999;\n      }\n\n      return this.resolveName(addressOrName).then(function (address) {\n        url += \"/api?module=account&action=txlist&address=\" + address;\n        url += \"&startblock=\" + startBlock;\n        url += \"&endblock=\" + endBlock;\n        url += \"&sort=asc\" + apiKey;\n\n        _this5.emit(\"debug\", {\n          action: \"request\",\n          request: url,\n          provider: _this5\n        });\n\n        var connection = {\n          url: url,\n          throttleSlotInterval: 1000,\n          throttleCallback: function throttleCallback(attempt, url) {\n            if (_this5.apiKey === defaultApiKey) {\n              showThrottleMessage();\n            }\n\n            return Promise.resolve(true);\n          }\n        };\n        return fetchJson(connection, null, getResult).then(function (result) {\n          _this5.emit(\"debug\", {\n            action: \"response\",\n            request: url,\n            response: deepCopy(result),\n            provider: _this5\n          });\n\n          var output = [];\n          result.forEach(function (tx) {\n            [\"contractAddress\", \"to\"].forEach(function (key) {\n              if (tx[key] == \"\") {\n                delete tx[key];\n              }\n            });\n\n            if (tx.creates == null && tx.contractAddress != null) {\n              tx.creates = tx.contractAddress;\n            }\n\n            var item = _this5.formatter.transactionResponse(tx);\n\n            if (tx.timeStamp) {\n              item.timestamp = parseInt(tx.timeStamp);\n            }\n\n            output.push(item);\n          });\n          return output;\n        });\n      });\n    }\n  }, {\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.apiKey === defaultApiKey;\n    }\n  }]);\n\n  return EtherscanProvider;\n}(BaseProvider);","map":null,"metadata":{},"sourceType":"module"}