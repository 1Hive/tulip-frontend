{"ast":null,"code":"const pageResults = require('graph-results-pager');\n\nconst ws = require('isomorphic-ws');\n\nconst {\n  SubscriptionClient\n} = require('subscriptions-transport-ws');\n\nconst {\n  request,\n  gql\n} = require('graphql-request');\n\nconst {\n  graphAPIEndpoints,\n  graphWSEndpoints,\n  TWENTY_FOUR_HOURS\n} = require('./../../constants');\n\nconst {\n  timestampToBlock,\n  blockToTimestamp\n} = require('./../../utils');\n\nmodule.exports = {\n  async factory({\n    block = undefined,\n    timestamp = undefined\n  } = {}) {\n    block = block ? block : timestamp ? await timestampToBlock(timestamp) : undefined;\n    block = block ? `block: { number: ${block} }` : \"\";\n    const result = await request(graphAPIEndpoints.exchange, gql`{\n                    factory(id: \"${factoryAddress}\", ${block}) {\n                        ${factory.properties.toString()}\n                    }\n                }`);\n    return factory.callback(result.factory);\n  },\n\n  observeFactory() {\n    const query = gql`\n            subscription {\n                factory(id: \"${factoryAddress}\") {\n                    ${factory.properties.toString()}\n                }\n        }`;\n    const client = new SubscriptionClient(graphWSEndpoints.exchange, {\n      reconnect: true\n    }, ws);\n    const observable = client.request({\n      query\n    });\n    return {\n      subscribe({\n        next,\n        error,\n        complete\n      }) {\n        return observable.subscribe({\n          next(results) {\n            next(factory.callback(results.data.factory));\n          },\n\n          error,\n          complete\n        });\n      }\n\n    };\n  },\n\n  async dayData({\n    minTimestamp = undefined,\n    maxTimestamp = undefined,\n    minBlock = undefined,\n    maxBlock = undefined\n  } = {}) {\n    return pageResults({\n      api: graphAPIEndpoints.exchange,\n      query: {\n        entity: 'dayDatas',\n        selection: {\n          orderDirection: 'desc',\n          where: {\n            date_gte: minTimestamp || (minBlock ? await blockToTimestamp(minBlock) : undefined),\n            date_lte: maxTimestamp || (maxBlock ? await blockToTimestamp(maxBlock) : undefined)\n          }\n        },\n        properties: dayData.properties\n      }\n    }).then(results => dayData.callback(results)).catch(err => console.log(err));\n  },\n\n  async twentyFourHourData({\n    block = undefined,\n    timestamp = undefined\n  } = {}) {\n    timestamp = timestamp ? timestamp : block ? await blockToTimestamp(block) : Date.now() / 1000;\n    timestamp24ago = timestamp - TWENTY_FOUR_HOURS;\n    block = await timestampToBlock(timestamp);\n    block24ago = await timestampToBlock(timestamp24ago);\n    block = `block: { number: ${block} }`;\n    block24ago = `block: { number: ${block24ago} }`;\n    const result = await request(graphAPIEndpoints.exchange, gql`{\n                    factory(id: \"${factoryAddress}\", ${block}) {\n                        ${twentyFourHourData.properties.toString()}\n                    }\n                }`);\n    const result24ago = await request(graphAPIEndpoints.exchange, gql`{\n                    factory(id: \"${factoryAddress}\", ${block24ago}) {\n                        ${twentyFourHourData.properties.toString()}\n                    }\n                }`);\n    return twentyFourHourData.callback(result.factory, result24ago.factory);\n  }\n\n};\nconst factory = {\n  properties: ['pairCount', 'volumeUSD', 'volumeETH', 'untrackedVolumeUSD', 'liquidityUSD', 'liquidityETH', 'txCount', 'tokenCount', 'userCount'],\n\n  callback(results) {\n    return {\n      pairCount: Number(results.pairCount),\n      volumeUSD: Number(results.volumeUSD),\n      volumeETH: Number(results.volumeETH),\n      untrackedVolumeUSD: Number(results.untrackedVolumeUSD),\n      liquidityUSD: Number(results.liquidityUSD),\n      liquidityETH: Number(results.liquidityETH),\n      txCount: Number(results.txCount),\n      tokenCount: Number(results.tokenCount),\n      userCount: Number(results.userCount)\n    };\n  }\n\n};\nconst dayData = {\n  properties: ['id', 'date', 'volumeETH', 'volumeUSD', 'liquidityETH', 'liquidityUSD', 'txCount'],\n\n  callback(results) {\n    return results.map(({\n      id,\n      date,\n      volumeETH,\n      volumeUSD,\n      liquidityETH,\n      liquidityUSD,\n      txCount\n    }) => ({\n      id: Number(id),\n      date: new Date(date * 1000),\n      volumeETH: Number(volumeETH),\n      volumeUSD: Number(volumeUSD),\n      liquidityETH: Number(liquidityETH),\n      liquidityUSD: Number(liquidityUSD),\n      txCount: Number(txCount)\n    }));\n  }\n\n};\nconst twentyFourHourData = {\n  properties: ['id', 'volumeUSD', 'volumeETH', 'untrackedVolumeUSD', 'liquidityUSD', 'liquidityETH', 'txCount', 'pairCount'],\n\n  callback(results, results24ago) {\n    return {\n      id: results.id,\n      volumeUSD: Number(results.volumeUSD) - Number(results24ago.volumeUSD),\n      volumeETH: Number(results.volumeETH) - Number(results24ago.volumeETH),\n      untrackedVolumeUSD: Number(results.untrackedVolumeUSD) - Number(results24ago.untrackedVolumeUSD),\n      liquidityETH: Number(results.liquidityETH) - Number(results24ago.liquidityETH),\n      liquidityUSD: Number(results.liquidityUSD) - Number(results24ago.liquidityUSD),\n      txCount: Number(results.txCount) - Number(results24ago.txCount),\n      pairCount: Number(results.pairCount) - Number(results24ago.pairCount)\n    };\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}