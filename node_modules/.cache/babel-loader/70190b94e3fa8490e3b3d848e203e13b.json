{"ast":null,"code":"import { _ as _slicedToArray } from './slicedToArray-ad07b557.js';\nimport './unsupportedIterableToArray-aef68344.js';\nimport { P as PropTypes } from './index-097535f1.js';\nimport './defineProperty-a0480c32.js';\nimport 'styled-components';\nimport './miscellaneous.js';\nimport './environment.js';\nimport './font.js';\nimport { GU } from './constants.js';\nimport './breakpoints.js';\nimport './springs.js';\nimport './text-styles.js';\nimport { o } from './index-422d37c0.js';\nvar ICON_SIZES = new Map([['large', 6 * GU], ['medium', 3 * GU], ['small', 2 * GU], ['tiny', 1.75 * GU]]); // Mapping of button size => icon size\n\nvar BUTTON_ICON_SIZES = new Map([['medium', 'medium'], ['small', 'medium'], ['mini', 'small']]);\n\nfunction useIconSize(size) {\n  var _useInside = o('Button:icon'),\n      _useInside2 = _slicedToArray(_useInside, 2),\n      insideButtonIcon = _useInside2[0],\n      buttonData = _useInside2[1]; // If no size is set on the icon, and it is inside\n  // a Button icon slot, adapt it to the size of the button.\n\n\n  var sizeName = !size && insideButtonIcon ? BUTTON_ICON_SIZES.get(buttonData.size) : size;\n  return ICON_SIZES.get(sizeName || 'medium');\n}\n\nvar IconPropTypes = {\n  size: PropTypes.oneOf(['large', 'medium', 'small', 'tiny'])\n};\nexport { IconPropTypes as I, useIconSize as u };","map":null,"metadata":{},"sourceType":"module"}