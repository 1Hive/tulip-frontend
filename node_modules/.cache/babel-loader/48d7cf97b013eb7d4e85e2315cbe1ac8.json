{"ast":null,"code":"'use strict';\n\nconst AccessController = require('./access-controller-interface');\n\nconst AccessControllerManifest = require('./access-controller-manifest');\n\nconst LegacyIPFSAccessController = require('./legacy-ipfs-access-controller');\n\nconst IPFSAccessController = require('./ipfs-access-controller');\n\nconst OrbitDBAccessController = require('./orbitdb-access-controller');\n\nconst supportedTypes = {\n  'legacy-ipfs': LegacyIPFSAccessController,\n  ipfs: IPFSAccessController,\n  orbitdb: OrbitDBAccessController\n};\n\nconst getHandlerFor = type => {\n  if (!AccessControllers.isSupported(type)) {\n    throw new Error(`AccessController type '${type}' is not supported`);\n  }\n\n  return supportedTypes[type];\n};\n\nclass AccessControllers {\n  static get AccessController() {\n    return AccessController;\n  }\n\n  static isSupported(type) {\n    return Object.keys(supportedTypes).includes(type);\n  }\n\n  static addAccessController(options) {\n    if (!options.AccessController) {\n      throw new Error('AccessController class needs to be given as an option');\n    }\n\n    if (!options.AccessController.type || typeof options.AccessController.type !== 'string') {\n      throw new Error('Given AccessController class needs to implement: static get type() { /* return a string */}.');\n    }\n\n    supportedTypes[options.AccessController.type] = options.AccessController;\n  }\n\n  static addAccessControllers(options) {\n    const accessControllers = options.AccessControllers;\n\n    if (!accessControllers) {\n      throw new Error('AccessController classes need to be given as an option');\n    }\n\n    accessControllers.forEach(accessController => {\n      AccessControllers.addAccessController({\n        AccessController: accessController\n      });\n    });\n  }\n\n  static removeAccessController(type) {\n    delete supportedTypes[type];\n  }\n\n  static async resolve(orbitdb, manifestAddress, options = {}) {\n    const {\n      type,\n      params\n    } = await AccessControllerManifest.resolve(orbitdb._ipfs, manifestAddress, options);\n    const AccessController = getHandlerFor(type);\n    const accessController = await AccessController.create(orbitdb, Object.assign({}, options, params));\n    await accessController.load(params.address);\n    return accessController;\n  }\n\n  static async create(orbitdb, type, options = {}) {\n    const AccessController = getHandlerFor(type);\n    const ac = await AccessController.create(orbitdb, options);\n    const params = await ac.save();\n    const hash = await AccessControllerManifest.create(orbitdb._ipfs, type, params);\n    return hash;\n  }\n\n}\n\nmodule.exports = AccessControllers;","map":null,"metadata":{},"sourceType":"script"}