{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst PeerInfo = require('peer-info');\n\nconst PeerId = require('peer-id');\n\nconst {\n  validateAddrs\n} = require('./utils');\n\nconst StreamHandler = require('./stream-handler');\n\nconst {\n  CircuitRelay: CircuitPB\n} = require('../protocol');\n\nconst pipe = require('it-pipe');\n\nconst errCode = require('err-code');\n\nconst {\n  codes: Errors\n} = require('../../errors');\n\nconst {\n  stop\n} = require('./stop');\n\nconst multicodec = require('./../multicodec');\n\nconst log = debug('libp2p:circuit:hop');\nlog.error = debug('libp2p:circuit:hop:error');\n\nmodule.exports.handleHop = async function handleHop({\n  connection,\n  request,\n  streamHandler,\n  circuit\n}) {\n  // Ensure hop is enabled\n  if (!circuit._options.hop.enabled) {\n    log('HOP request received but we are not acting as a relay');\n    return streamHandler.end({\n      type: CircuitPB.Type.STATUS,\n      code: CircuitPB.Status.HOP_CANT_SPEAK_RELAY\n    });\n  } // Validate the HOP request has the required input\n\n\n  try {\n    validateAddrs(request, streamHandler);\n  } catch (err) {\n    return log.error('invalid hop request via peer %s', connection.remotePeer.toB58String(), err);\n  } // Get the connection to the destination (stop) peer\n\n\n  const destinationPeer = new PeerId(request.dstPeer.id);\n\n  const destinationConnection = circuit._registrar.getConnection(new PeerInfo(destinationPeer));\n\n  if (!destinationConnection && !circuit._options.hop.active) {\n    log('HOP request received but we are not connected to the destination peer');\n    return streamHandler.end({\n      type: CircuitPB.Type.STATUS,\n      code: CircuitPB.Status.HOP_NO_CONN_TO_DST\n    });\n  } // TODO: Handle being an active relay\n  // Handle the incoming HOP request by performing a STOP request\n\n\n  const stopRequest = {\n    type: CircuitPB.Type.STOP,\n    dstPeer: request.dstPeer,\n    srcPeer: request.srcPeer\n  };\n  let destinationStream;\n\n  try {\n    destinationStream = await stop({\n      connection: destinationConnection,\n      request: stopRequest,\n      circuit\n    });\n  } catch (err) {\n    return log.error(err);\n  }\n\n  log('hop request from %s is valid', connection.remotePeer.toB58String());\n  streamHandler.write({\n    type: CircuitPB.Type.STATUS,\n    code: CircuitPB.Status.SUCCESS\n  });\n  const sourceStream = streamHandler.rest(); // Short circuit the two streams to create the relayed connection\n\n  return pipe(sourceStream, destinationStream, sourceStream);\n};\n/**\n * Performs a HOP request to a relay peer, to request a connection to another\n * peer. A new, virtual, connection will be created between the two via the relay.\n *\n * @param {object} options\n * @param {Connection} options.connection Connection to the relay\n * @param {*} options.request\n * @param {Circuit} options.circuit\n * @returns {Promise<Connection>}\n */\n\n\nmodule.exports.hop = async function hop({\n  connection,\n  request\n}) {\n  // Create a new stream to the relay\n  const {\n    stream\n  } = await connection.newStream([multicodec.relay]); // Send the HOP request\n\n  const streamHandler = new StreamHandler({\n    stream\n  });\n  streamHandler.write(request);\n  const response = await streamHandler.read();\n\n  if (response.code === CircuitPB.Status.SUCCESS) {\n    log('hop request was successful');\n    return streamHandler.rest();\n  }\n\n  log('hop request failed with code %d, closing stream', response.code);\n  streamHandler.close();\n  throw errCode(new Error(`HOP request failed with code ${response.code}`), Errors.ERR_HOP_REQUEST_FAILED);\n};\n/**\n * Creates an unencoded CAN_HOP response based on the Circuits configuration\n * @private\n */\n\n\nmodule.exports.handleCanHop = function handleCanHop({\n  connection,\n  streamHandler,\n  circuit\n}) {\n  const canHop = circuit._options.hop.enabled;\n  log('can hop (%s) request from %s', canHop, connection.remotePeer.toB58String());\n  streamHandler.end({\n    type: CircuitPB.Type.STATUS,\n    code: canHop ? CircuitPB.Status.SUCCESS : CircuitPB.Status.HOP_CANT_SPEAK_RELAY\n  });\n};","map":null,"metadata":{},"sourceType":"script"}