{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        (0, _defineProperty2[\"default\"])(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar _require = require('./index'),\n    fetchText = _require.fetchText,\n    getMessageConsent = _require.getMessageConsent;\n\nvar didJWT = require('did-jwt');\n\nvar _require2 = require('@ethersproject/wallet'),\n    verifyMessage = _require2.verifyMessage;\n\nvar config = require('../config.js');\n\nvar utils = require('./index');\n\nvar _require3 = require('did-resolver'),\n    Resolver = _require3.Resolver;\n\nvar get3IdResolver = require('3id-resolver').getResolver;\n\nvar getMuportResolver = require('muport-did-resolver').getResolver;\n\nvar getHttpsResolver = require('https-did-resolver')[\"default\"];\n\nvar PROFILE_SERVER_URL = config.profile_server_url; // Mocks ipfs obj for 3id resolve, to resolve through api, until ipfs instance is available\n\nvar ipfs = {\n  dag: {\n    get: function () {\n      var _get = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(cid) {\n        var req;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                req = \"\".concat(PROFILE_SERVER_URL, \"/did-doc?cid=\").concat(encodeURIComponent(cid));\n                return _context.abrupt(\"return\", utils.fetchJson(req));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function get(_x) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  }\n};\nvar resolver = new Resolver(_objectSpread(_objectSpread(_objectSpread({}, get3IdResolver(ipfs, {\n  pin: false\n})), getMuportResolver(ipfs)), getHttpsResolver()));\nmodule.exports = {\n  /**\n   * Verifies that the gist contains the given 3ID and returns the users github username.\n   * Throws an error otherwise.\n   *\n   * @param     {String}            did                     The 3ID of the user (or array of equivalent dids)\n   * @param     {Object}            gistUrl                 URL of the proof\n   * @return    {Object}                                    Object containing username, and proof\n   */\n  verifyGithub: function () {\n    var _verifyGithub = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2(did, gistUrl) {\n      var dids, gistFileContent, includeDid, username;\n      return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dids = typeof did === 'string' ? [did] : did;\n\n              if (!(!gistUrl || gistUrl.trim() === '')) {\n                _context2.next = 3;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", null);\n\n            case 3:\n              _context2.next = 5;\n              return fetchText(gistUrl);\n\n            case 5:\n              gistFileContent = _context2.sent;\n              includeDid = dids.reduce(function (acc, val) {\n                return acc || gistFileContent.indexOf(val) !== -1;\n              }, false);\n\n              if (includeDid) {\n                _context2.next = 9;\n                break;\n              }\n\n              throw new Error('Gist File provided does not contain the correct DID of the user');\n\n            case 9:\n              username = gistUrl.split('/')[3];\n              return _context2.abrupt(\"return\", {\n                username: username,\n                proof: gistUrl\n              });\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function verifyGithub(_x2, _x3) {\n      return _verifyGithub.apply(this, arguments);\n    }\n\n    return verifyGithub;\n  }(),\n\n  /**\n   * Verifies that the tweet contains the given 3ID and returns the users twitter username.\n   * Throws an error otherwise.\n   *\n   * @param     {String}            did             The 3ID of the user (or array of equivalent dids)\n   * @param     {String}            claim           A did-JWT with claim\n   * @return    {Object}                            Object containing username, proof, and the verifier\n   */\n  verifyTwitter: function () {\n    var _verifyTwitter = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(did, claim) {\n      var dids, verified, claimData;\n      return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              dids = typeof did === 'string' ? [did] : did;\n\n              if (claim) {\n                _context3.next = 3;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", null);\n\n            case 3:\n              _context3.next = 5;\n              return didJWT.verifyJWT(claim, {\n                resolver: resolver\n              });\n\n            case 5:\n              verified = _context3.sent;\n\n              if (dids.includes(verified.payload.sub)) {\n                _context3.next = 8;\n                break;\n              }\n\n              throw new Error('Verification not valid for given user');\n\n            case 8:\n              claimData = verified.payload.claim;\n\n              if (!(!claimData.twitter_handle || !claimData.twitter_proof)) {\n                _context3.next = 11;\n                break;\n              }\n\n              throw new Error('The claim for your twitter is not correct');\n\n            case 11:\n              return _context3.abrupt(\"return\", {\n                username: claimData.twitter_handle,\n                proof: claimData.twitter_proof,\n                verifiedBy: verified.payload.iss\n              });\n\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function verifyTwitter(_x4, _x5) {\n      return _verifyTwitter.apply(this, arguments);\n    }\n\n    return verifyTwitter;\n  }(),\n\n  /**\n   * Verifies that the code entered by the user is the same one that was sent via email.\n   * Throws an error otherwise.\n   *\n   * @param     {String}            did             The 3ID of the user (or array of equivalent dids)\n   * @param     {String}            claim           A did-JWT with claim\n   * @return    {Object}                            Object containing username, proof, and the verifier\n   */\n  verifyEmail: function () {\n    var _verifyEmail = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(did, claim) {\n      var dids, verified, claimData;\n      return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              dids = typeof did === 'string' ? [did] : did;\n\n              if (claim) {\n                _context4.next = 3;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", null);\n\n            case 3:\n              _context4.next = 5;\n              return didJWT.verifyJWT(claim, {\n                resolver: resolver\n              });\n\n            case 5:\n              verified = _context4.sent;\n\n              if (dids.includes(verified.payload.sub)) {\n                _context4.next = 8;\n                break;\n              }\n\n              throw new Error('Verification not valid for given user');\n\n            case 8:\n              claimData = verified.payload.claim;\n\n              if (claimData.email_address) {\n                _context4.next = 11;\n                break;\n              }\n\n              throw new Error('The claim for your email address is not correct');\n\n            case 11:\n              return _context4.abrupt(\"return\", {\n                email_address: claimData.email_address,\n                verifiedBy: verified.payload.iss\n              });\n\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    function verifyEmail(_x6, _x7) {\n      return _verifyEmail.apply(this, arguments);\n    }\n\n    return verifyEmail;\n  }(),\n\n  /**\n   * Verifies that the proof for a did is correct\n   *\n   * @param     {String}            claim           A did-JWT with claim\n   * @return    {String}                            The DID of the user\n   */\n  verifyDID: function () {\n    var _verifyDID = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee5(claim) {\n      var verified, muport, res, muportDID;\n      return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return didJWT.verifyJWT(claim, {\n                resolver: resolver\n              });\n\n            case 2:\n              verified = _context5.sent;\n              muport = verified.payload.muport;\n              res = {};\n\n              if (!muport) {\n                _context5.next = 10;\n                break;\n              }\n\n              _context5.next = 8;\n              return didJWT.verifyJWT(muport, {\n                resolver: resolver\n              });\n\n            case 8:\n              muportDID = _context5.sent.payload.iss;\n              res.muport = muportDID;\n\n            case 10:\n              res.did = verified.payload.iss;\n              return _context5.abrupt(\"return\", res);\n\n            case 12:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    function verifyDID(_x8) {\n      return _verifyDID.apply(this, arguments);\n    }\n\n    return verifyDID;\n  }(),\n\n  /**\n   * Verifies that the proof for an ethereum address is correct\n   *\n   * @param     {Object}    ethProof                      The claim generated by getLinkConsent\n   * @param     {string}    ethProof.consent_msg\n   * @param     {string}    ethProof.consent_signature\n   * @param     {string}    ethProof.linked_did\n   * @param     {String}    did                           The box' did\n   * @return    {String}                                  The ethereum address used to sign the message\n   */\n  verifyEthereum: function () {\n    var _verifyEthereum = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee6(ethProof, did) {\n      var dids, consentMsg, consentSig, expected;\n      return _regenerator[\"default\"].wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              dids = typeof did === 'string' ? [did] : did; // TODO - is this function needed? Can it be removed in\n              // favour of proofs that are in the rootstore?\n\n              consentMsg = ethProof.version ? ethProof.message : ethProof['consent_msg'];\n              consentSig = ethProof.version ? ethProof.signature : ethProof['consent_signature']; // Make sure the message matches our expectation\n\n              expected = getMessageConsent(did);\n\n              if (!(consentMsg !== expected)) {\n                _context6.next = 6;\n                break;\n              }\n\n              throw new Error(\"Invalid consent message, got: \\\"\".concat(consentMsg, \"\\\", expected: \\\"\").concat(expected, \"\\\"\"));\n\n            case 6:\n              return _context6.abrupt(\"return\", verifyMessage(consentMsg, consentSig));\n\n            case 7:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    function verifyEthereum(_x9, _x10) {\n      return _verifyEthereum.apply(this, arguments);\n    }\n\n    return verifyEthereum;\n  }()\n};","map":null,"metadata":{},"sourceType":"script"}