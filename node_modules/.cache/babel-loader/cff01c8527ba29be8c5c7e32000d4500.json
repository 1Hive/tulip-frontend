{"ast":null,"code":"/*!\n * hmac.js - hmac for bcrypto\n * Copyright (c) 2016-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Parts of this software are based on indutny/hash.js:\n *   Copyright (c) 2014, Fedor Indutny (MIT License).\n *   https://github.com/indutny/hash.js\n *\n * Resources:\n *   https://en.wikipedia.org/wiki/HMAC\n *   https://tools.ietf.org/html/rfc2104\n *   https://github.com/indutny/hash.js/blob/master/lib/hash/hmac.js\n */\n'use strict';\n\nconst assert = require('../internal/assert');\n/**\n * HMAC\n */\n\n\nclass HMAC {\n  /**\n   * Create an HMAC.\n   * @param {Function} Hash\n   * @param {Number} size\n   * @param {Array} [x=[]]\n   * @param {Array} [y=[]]\n   */\n  constructor(Hash, size, x = [], y = []) {\n    assert(typeof Hash === 'function');\n    assert(size >>> 0 === size);\n    assert(Array.isArray(x));\n    assert(Array.isArray(y));\n    this.hash = Hash;\n    this.size = size;\n    this.x = x;\n    this.y = y;\n    this.inner = new Hash();\n    this.outer = new Hash();\n  }\n  /**\n   * Initialize HMAC context.\n   * @param {Buffer} data\n   */\n\n\n  init(key) {\n    assert(Buffer.isBuffer(key)); // Shorten key\n\n    if (key.length > this.size) {\n      const Hash = this.hash;\n      const h = new Hash();\n      h.init(...this.x);\n      h.update(key);\n      key = h.final(...this.y);\n      assert(key.length <= this.size);\n    } // Pad key\n\n\n    const pad = Buffer.allocUnsafe(this.size);\n\n    for (let i = 0; i < key.length; i++) pad[i] = key[i] ^ 0x36;\n\n    for (let i = key.length; i < pad.length; i++) pad[i] = 0x36;\n\n    this.inner.init(...this.x);\n    this.inner.update(pad);\n\n    for (let i = 0; i < key.length; i++) pad[i] = key[i] ^ 0x5c;\n\n    for (let i = key.length; i < pad.length; i++) pad[i] = 0x5c;\n\n    this.outer.init(...this.x);\n    this.outer.update(pad);\n    return this;\n  }\n  /**\n   * Update HMAC context.\n   * @param {Buffer} data\n   */\n\n\n  update(data) {\n    this.inner.update(data);\n    return this;\n  }\n  /**\n   * Finalize HMAC context.\n   * @returns {Buffer}\n   */\n\n\n  final() {\n    this.outer.update(this.inner.final(...this.y));\n    return this.outer.final(...this.y);\n  }\n\n}\n/*\n * Expose\n */\n\n\nmodule.exports = HMAC;","map":null,"metadata":{},"sourceType":"script"}