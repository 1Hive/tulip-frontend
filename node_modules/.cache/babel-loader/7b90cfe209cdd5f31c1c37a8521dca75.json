{"ast":null,"code":"import { EventEmitter } from 'events';\nimport { ConnectorEvent } from '@web3-react/types';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar AbstractConnector = /*#__PURE__*/function (_EventEmitter) {\n  _inheritsLoose(AbstractConnector, _EventEmitter);\n\n  function AbstractConnector(_temp) {\n    var _this;\n\n    var _ref = _temp === void 0 ? {} : _temp,\n        supportedChainIds = _ref.supportedChainIds;\n\n    _this = _EventEmitter.call(this) || this;\n    _this.supportedChainIds = supportedChainIds;\n    return _this;\n  }\n\n  var _proto = AbstractConnector.prototype;\n\n  _proto.emitUpdate = function emitUpdate(update) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Emitting '\" + ConnectorEvent.Update + \"' with payload\", update);\n    }\n\n    this.emit(ConnectorEvent.Update, update);\n  };\n\n  _proto.emitError = function emitError(error) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Emitting '\" + ConnectorEvent.Error + \"' with payload\", error);\n    }\n\n    this.emit(ConnectorEvent.Error, error);\n  };\n\n  _proto.emitDeactivate = function emitDeactivate() {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Emitting '\" + ConnectorEvent.Deactivate + \"'\");\n    }\n\n    this.emit(ConnectorEvent.Deactivate);\n  };\n\n  return AbstractConnector;\n}(EventEmitter);\n\nexport { AbstractConnector };","map":null,"metadata":{},"sourceType":"module"}