{"ast":null,"code":"'use strict';\n\nmodule.exports = (iterable, mapper, opts) => new Promise((resolve, reject) => {\n  opts = Object.assign({\n    concurrency: Infinity\n  }, opts);\n  const concurrency = opts.concurrency;\n\n  if (concurrency < 1) {\n    throw new TypeError('Expected `concurrency` to be a number from 1 and up');\n  }\n\n  const ret = [];\n  const iterator = iterable[Symbol.iterator]();\n  let isRejected = false;\n  let iterableDone = false;\n  let resolvingCount = 0;\n  let currentIdx = 0;\n\n  const next = () => {\n    if (isRejected) {\n      return;\n    }\n\n    const nextItem = iterator.next();\n    const i = currentIdx;\n    currentIdx++;\n\n    if (nextItem.done) {\n      iterableDone = true;\n\n      if (resolvingCount === 0) {\n        resolve(ret);\n      }\n\n      return;\n    }\n\n    resolvingCount++;\n    Promise.resolve(nextItem.value).then(el => mapper(el, i)).then(val => {\n      ret[i] = val;\n      resolvingCount--;\n      next();\n    }, err => {\n      isRejected = true;\n      reject(err);\n    });\n  };\n\n  for (let i = 0; i < concurrency; i++) {\n    next();\n\n    if (iterableDone) {\n      break;\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"script"}