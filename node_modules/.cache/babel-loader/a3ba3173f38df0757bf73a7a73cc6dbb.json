{"ast":null,"code":"import env from'./environment';import{graphEndpoint,IPFS_ENDPOINT}from'./endpoints';var DEFAULT_ETH_NODE='DEFAULT_ETH_NODE';var IPFS_GATEWAY='IPFS_GATEWAY';var PACKAGE_VERSION='PACKAGE_VERSION';var SUBGRAPH_HTTP_ENDPOINT='SUBGRAPH_HTTP_ENDPOINT';var DEFAULT_SUBGRAPH_HTTP_ENDPOINT=graphEndpoint();// Get a setting from localStorage\nfunction getLocalStorageSetting(confKey){var storageKey=\"\".concat(confKey,\"_KEY\");return window.localStorage.getItem(storageKey);}// Get a local setting: from the local storage if available, or the env vars.\nfunction getLocalSetting(confKey){return getLocalStorageSetting(confKey)||env(confKey);}function setLocalSetting(confKey,value){var storageKey=\"\".concat(confKey,\"_KEY\");return window.localStorage.setItem(storageKey,value);}export function clearLocalStorageNetworkSettings(){window.localStorage.removeItem('DEFAULT_ETH_NODE_KEY');window.localStorage.removeItem('IPFS_GATEWAY_KEY');window.localStorage.removeItem('SUBGRAPH_HTTP_ENDPOINT_KEY');}export function getDefaultEthNode(){// Let the network configuration handle node defaults\nreturn getLocalSetting(DEFAULT_ETH_NODE)||'';}export function setDefaultEthNode(node){return setLocalSetting(DEFAULT_ETH_NODE,node);}export function getIpfsGateway(){return getLocalSetting(IPFS_GATEWAY)||IPFS_ENDPOINT;}export function setIpfsGateway(gateway){return setLocalSetting(IPFS_GATEWAY,gateway);}// The previous package version is stored in localStorage,\n// while the current one is coming from the environment.\nexport function getPackageVersion(){return env(PACKAGE_VERSION)||'';}export function getLastPackageVersion(){return getLocalStorageSetting(PACKAGE_VERSION)||'';}export function setPackageVersion(version){return setLocalSetting(PACKAGE_VERSION,version);}export function getSubgraphHttpEndpoint(){return getLocalSetting(SUBGRAPH_HTTP_ENDPOINT)||DEFAULT_SUBGRAPH_HTTP_ENDPOINT;}export function setSubgraphHttpEndpoint(endpoint){return setLocalSetting(SUBGRAPH_HTTP_ENDPOINT,endpoint);}","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/local-settings.js"],"names":["env","graphEndpoint","IPFS_ENDPOINT","DEFAULT_ETH_NODE","IPFS_GATEWAY","PACKAGE_VERSION","SUBGRAPH_HTTP_ENDPOINT","DEFAULT_SUBGRAPH_HTTP_ENDPOINT","getLocalStorageSetting","confKey","storageKey","window","localStorage","getItem","getLocalSetting","setLocalSetting","value","setItem","clearLocalStorageNetworkSettings","removeItem","getDefaultEthNode","setDefaultEthNode","node","getIpfsGateway","setIpfsGateway","gateway","getPackageVersion","getLastPackageVersion","setPackageVersion","version","getSubgraphHttpEndpoint","setSubgraphHttpEndpoint","endpoint"],"mappings":"AAAA,MAAOA,CAAAA,GAAP,KAAgB,eAAhB,CACA,OAASC,aAAT,CAAwBC,aAAxB,KAA6C,aAA7C,CAEA,GAAMC,CAAAA,gBAAgB,CAAG,kBAAzB,CACA,GAAMC,CAAAA,YAAY,CAAG,cAArB,CACA,GAAMC,CAAAA,eAAe,CAAG,iBAAxB,CACA,GAAMC,CAAAA,sBAAsB,CAAG,wBAA/B,CACA,GAAMC,CAAAA,8BAA8B,CAAGN,aAAa,EAApD,CAEA;AACA,QAASO,CAAAA,sBAAT,CAAgCC,OAAhC,CAAyC,CACvC,GAAMC,CAAAA,UAAU,WAAMD,OAAN,QAAhB,CACA,MAAOE,CAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BH,UAA5B,CAAP,CACD,CAED;AACA,QAASI,CAAAA,eAAT,CAAyBL,OAAzB,CAAkC,CAChC,MAAOD,CAAAA,sBAAsB,CAACC,OAAD,CAAtB,EAAmCT,GAAG,CAACS,OAAD,CAA7C,CACD,CAED,QAASM,CAAAA,eAAT,CAAyBN,OAAzB,CAAkCO,KAAlC,CAAyC,CACvC,GAAMN,CAAAA,UAAU,WAAMD,OAAN,QAAhB,CACA,MAAOE,CAAAA,MAAM,CAACC,YAAP,CAAoBK,OAApB,CAA4BP,UAA5B,CAAwCM,KAAxC,CAAP,CACD,CAED,MAAO,SAASE,CAAAA,gCAAT,EAA4C,CACjDP,MAAM,CAACC,YAAP,CAAoBO,UAApB,CAA+B,sBAA/B,EACAR,MAAM,CAACC,YAAP,CAAoBO,UAApB,CAA+B,kBAA/B,EACAR,MAAM,CAACC,YAAP,CAAoBO,UAApB,CAA+B,4BAA/B,EACD,CAED,MAAO,SAASC,CAAAA,iBAAT,EAA6B,CAClC;AACA,MAAON,CAAAA,eAAe,CAACX,gBAAD,CAAf,EAAqC,EAA5C,CACD,CAED,MAAO,SAASkB,CAAAA,iBAAT,CAA2BC,IAA3B,CAAiC,CACtC,MAAOP,CAAAA,eAAe,CAACZ,gBAAD,CAAmBmB,IAAnB,CAAtB,CACD,CAED,MAAO,SAASC,CAAAA,cAAT,EAA0B,CAC/B,MAAOT,CAAAA,eAAe,CAACV,YAAD,CAAf,EAAiCF,aAAxC,CACD,CAED,MAAO,SAASsB,CAAAA,cAAT,CAAwBC,OAAxB,CAAiC,CACtC,MAAOV,CAAAA,eAAe,CAACX,YAAD,CAAeqB,OAAf,CAAtB,CACD,CAED;AACA;AACA,MAAO,SAASC,CAAAA,iBAAT,EAA6B,CAClC,MAAO1B,CAAAA,GAAG,CAACK,eAAD,CAAH,EAAwB,EAA/B,CACD,CAED,MAAO,SAASsB,CAAAA,qBAAT,EAAiC,CACtC,MAAOnB,CAAAA,sBAAsB,CAACH,eAAD,CAAtB,EAA2C,EAAlD,CACD,CAED,MAAO,SAASuB,CAAAA,iBAAT,CAA2BC,OAA3B,CAAoC,CACzC,MAAOd,CAAAA,eAAe,CAACV,eAAD,CAAkBwB,OAAlB,CAAtB,CACD,CAED,MAAO,SAASC,CAAAA,uBAAT,EAAmC,CACxC,MACEhB,CAAAA,eAAe,CAACR,sBAAD,CAAf,EAA2CC,8BAD7C,CAGD,CAED,MAAO,SAASwB,CAAAA,uBAAT,CAAiCC,QAAjC,CAA2C,CAChD,MAAOjB,CAAAA,eAAe,CAACT,sBAAD,CAAyB0B,QAAzB,CAAtB,CACD","sourcesContent":["import env from './environment'\r\nimport { graphEndpoint, IPFS_ENDPOINT } from './endpoints'\r\n\r\nconst DEFAULT_ETH_NODE = 'DEFAULT_ETH_NODE'\r\nconst IPFS_GATEWAY = 'IPFS_GATEWAY'\r\nconst PACKAGE_VERSION = 'PACKAGE_VERSION'\r\nconst SUBGRAPH_HTTP_ENDPOINT = 'SUBGRAPH_HTTP_ENDPOINT'\r\nconst DEFAULT_SUBGRAPH_HTTP_ENDPOINT = graphEndpoint()\r\n\r\n// Get a setting from localStorage\r\nfunction getLocalStorageSetting(confKey) {\r\n  const storageKey = `${confKey}_KEY`\r\n  return window.localStorage.getItem(storageKey)\r\n}\r\n\r\n// Get a local setting: from the local storage if available, or the env vars.\r\nfunction getLocalSetting(confKey) {\r\n  return getLocalStorageSetting(confKey) || env(confKey)\r\n}\r\n\r\nfunction setLocalSetting(confKey, value) {\r\n  const storageKey = `${confKey}_KEY`\r\n  return window.localStorage.setItem(storageKey, value)\r\n}\r\n\r\nexport function clearLocalStorageNetworkSettings() {\r\n  window.localStorage.removeItem('DEFAULT_ETH_NODE_KEY')\r\n  window.localStorage.removeItem('IPFS_GATEWAY_KEY')\r\n  window.localStorage.removeItem('SUBGRAPH_HTTP_ENDPOINT_KEY')\r\n}\r\n\r\nexport function getDefaultEthNode() {\r\n  // Let the network configuration handle node defaults\r\n  return getLocalSetting(DEFAULT_ETH_NODE) || ''\r\n}\r\n\r\nexport function setDefaultEthNode(node) {\r\n  return setLocalSetting(DEFAULT_ETH_NODE, node)\r\n}\r\n\r\nexport function getIpfsGateway() {\r\n  return getLocalSetting(IPFS_GATEWAY) || IPFS_ENDPOINT\r\n}\r\n\r\nexport function setIpfsGateway(gateway) {\r\n  return setLocalSetting(IPFS_GATEWAY, gateway)\r\n}\r\n\r\n// The previous package version is stored in localStorage,\r\n// while the current one is coming from the environment.\r\nexport function getPackageVersion() {\r\n  return env(PACKAGE_VERSION) || ''\r\n}\r\n\r\nexport function getLastPackageVersion() {\r\n  return getLocalStorageSetting(PACKAGE_VERSION) || ''\r\n}\r\n\r\nexport function setPackageVersion(version) {\r\n  return setLocalSetting(PACKAGE_VERSION, version)\r\n}\r\n\r\nexport function getSubgraphHttpEndpoint() {\r\n  return (\r\n    getLocalSetting(SUBGRAPH_HTTP_ENDPOINT) || DEFAULT_SUBGRAPH_HTTP_ENDPOINT\r\n  )\r\n}\r\n\r\nexport function setSubgraphHttpEndpoint(endpoint) {\r\n  return setLocalSetting(SUBGRAPH_HTTP_ENDPOINT, endpoint)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}