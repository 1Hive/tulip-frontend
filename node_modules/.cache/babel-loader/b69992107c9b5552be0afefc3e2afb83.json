{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar DirSharded = require('./dir-sharded');\n\nmodule.exports = /*#__PURE__*/function () {\n  var _flatToShard = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(child, dir, threshold, options) {\n    var newDir, parent;\n    return _regeneratorRuntime.wrap(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            newDir = dir;\n\n            if (!(dir.flat && dir.directChildrenCount() >= threshold)) {\n              _context2.next = 5;\n              break;\n            }\n\n            _context2.next = 4;\n            return convertToShard(dir, options);\n\n          case 4:\n            newDir = _context2.sent;\n\n          case 5:\n            parent = newDir.parent;\n\n            if (!parent) {\n              _context2.next = 12;\n              break;\n            }\n\n            if (!(newDir !== dir)) {\n              _context2.next = 11;\n              break;\n            }\n\n            if (child) {\n              child.parent = newDir;\n            }\n\n            _context2.next = 11;\n            return parent.put(newDir.parentKey, newDir);\n\n          case 11:\n            return _context2.abrupt(\"return\", flatToShard(newDir, parent, threshold, options));\n\n          case 12:\n            return _context2.abrupt(\"return\", newDir);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  function flatToShard(_x, _x2, _x3, _x4) {\n    return _flatToShard.apply(this, arguments);\n  }\n\n  return flatToShard;\n}();\n\nfunction convertToShard(oldDir, options) {\n  var newDir, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _value2, key, child;\n\n  return _regeneratorRuntime.async(function convertToShard$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          newDir = new DirSharded({\n            root: oldDir.root,\n            dir: true,\n            parent: oldDir.parent,\n            parentKey: oldDir.parentKey,\n            path: oldDir.path,\n            dirty: oldDir.dirty,\n            flat: false,\n            mtime: oldDir.mtime,\n            mode: oldDir.mode\n          }, options);\n          _iteratorNormalCompletion = true;\n          _didIteratorError = false;\n          _context.prev = 3;\n          _iterator = _asyncIterator(oldDir.eachChildSeries());\n\n        case 5:\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(_iterator.next());\n\n        case 7:\n          _step = _context.sent;\n          _iteratorNormalCompletion = _step.done;\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(_step.value);\n\n        case 11:\n          _value = _context.sent;\n\n          if (_iteratorNormalCompletion) {\n            _context.next = 19;\n            break;\n          }\n\n          _value2 = _value, key = _value2.key, child = _value2.child;\n          _context.next = 16;\n          return _regeneratorRuntime.awrap(newDir.put(key, child));\n\n        case 16:\n          _iteratorNormalCompletion = true;\n          _context.next = 5;\n          break;\n\n        case 19:\n          _context.next = 25;\n          break;\n\n        case 21:\n          _context.prev = 21;\n          _context.t0 = _context[\"catch\"](3);\n          _didIteratorError = true;\n          _iteratorError = _context.t0;\n\n        case 25:\n          _context.prev = 25;\n          _context.prev = 26;\n\n          if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n            _context.next = 30;\n            break;\n          }\n\n          _context.next = 30;\n          return _regeneratorRuntime.awrap(_iterator.return());\n\n        case 30:\n          _context.prev = 30;\n\n          if (!_didIteratorError) {\n            _context.next = 33;\n            break;\n          }\n\n          throw _iteratorError;\n\n        case 33:\n          return _context.finish(30);\n\n        case 34:\n          return _context.finish(25);\n\n        case 35:\n          return _context.abrupt(\"return\", newDir);\n\n        case 36:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[3, 21, 25, 35], [26,, 30, 34]], Promise);\n}","map":null,"metadata":{},"sourceType":"script"}