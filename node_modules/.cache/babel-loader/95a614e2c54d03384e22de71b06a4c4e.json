{"ast":null,"code":"var rawPipe = function rawPipe() {\n  var res;\n\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n\n  while (fns.length) {\n    res = fns.shift()(res);\n  }\n\n  return res;\n};\n\nvar isIterable = function isIterable(obj) {\n  return obj && (typeof obj[Symbol.asyncIterator] === 'function' || typeof obj[Symbol.iterator] === 'function' || typeof obj.next === 'function' // Probably, right?\n  );\n};\n\nvar isDuplex = function isDuplex(obj) {\n  return obj && typeof obj.sink === 'function' && isIterable(obj.source);\n};\n\nvar duplexPipelineFn = function duplexPipelineFn(duplex) {\n  return function (source) {\n    duplex.sink(source); // TODO: error on sink side is unhandled rejection - this is the same as pull streams\n\n    return duplex.source;\n  };\n};\n\nvar pipe = function pipe() {\n  for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    fns[_key2] = arguments[_key2];\n  }\n\n  // Duplex at start: wrap in function and return duplex source\n  if (isDuplex(fns[0])) {\n    var duplex = fns[0];\n\n    fns[0] = function () {\n      return duplex.source;\n    }; // Iterable at start: wrap in function\n\n  } else if (isIterable(fns[0])) {\n    var source = fns[0];\n\n    fns[0] = function () {\n      return source;\n    };\n  }\n\n  if (fns.length > 1) {\n    // Duplex at end: use duplex sink\n    if (isDuplex(fns[fns.length - 1])) {\n      fns[fns.length - 1] = fns[fns.length - 1].sink;\n    }\n  }\n\n  if (fns.length > 2) {\n    // Duplex in the middle, consume source with duplex sink and return duplex source\n    for (var i = 1; i < fns.length - 1; i++) {\n      if (isDuplex(fns[i])) {\n        fns[i] = duplexPipelineFn(fns[i]);\n      }\n    }\n  }\n\n  return rawPipe.apply(void 0, fns);\n};\n\nmodule.exports = pipe;\nmodule.exports.pipe = pipe;\nmodule.exports.rawPipe = rawPipe;\nmodule.exports.isIterable = isIterable;\nmodule.exports.isDuplex = isDuplex;","map":null,"metadata":{},"sourceType":"script"}