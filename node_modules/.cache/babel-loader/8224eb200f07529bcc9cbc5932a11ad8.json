{"ast":null,"code":"'use strict';\n\nconst indentString = require('indent-string');\n\nconst cleanStack = require('clean-stack');\n\nconst cleanInternalStack = stack => stack.replace(/\\s+at .*aggregate-error\\/index.js:\\d+:\\d+\\)?/g, '');\n\nclass AggregateError extends Error {\n  constructor(errors) {\n    if (!Array.isArray(errors)) {\n      throw new TypeError(`Expected input to be an Array, got ${typeof errors}`);\n    }\n\n    errors = [...errors].map(error => {\n      if (error instanceof Error) {\n        return error;\n      }\n\n      if (error !== null && typeof error === 'object') {\n        // Handle plain error objects with message property and/or possibly other metadata\n        return Object.assign(new Error(error.message), error);\n      }\n\n      return new Error(error);\n    });\n    let message = errors.map(error => {\n      // The `stack` property is not standardized, so we can't assume it exists\n      return typeof error.stack === 'string' ? cleanInternalStack(cleanStack(error.stack)) : String(error);\n    }).join('\\n');\n    message = '\\n' + indentString(message, 4);\n    super(message);\n    this.name = 'AggregateError';\n    Object.defineProperty(this, '_errors', {\n      value: errors\n    });\n  }\n\n  *[Symbol.iterator]() {\n    for (const error of this._errors) {\n      yield error;\n    }\n  }\n\n}\n\nmodule.exports = AggregateError;","map":null,"metadata":{},"sourceType":"script"}