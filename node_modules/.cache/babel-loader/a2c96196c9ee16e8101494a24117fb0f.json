{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _slicedToArray = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar applyDefaultOptions = require('./utils/apply-default-options');\n\nvar toMfsPath = require('./utils/to-mfs-path');\n\nvar log = require('debug')('ipfs:mfs:touch');\n\nvar errCode = require('err-code');\n\nvar UnixFS = require('ipfs-unixfs');\n\nvar toTrail = require('./utils/to-trail');\n\nvar addLink = require('./utils/add-link');\n\nvar updateTree = require('./utils/update-tree');\n\nvar updateMfsRoot = require('./utils/update-mfs-root');\n\nvar _require = require('ipld-dag-pb'),\n    DAGNode = _require.DAGNode;\n\nvar mc = require('multicodec');\n\nvar mh = require('multihashes');\n\nvar pipe = require('it-pipe');\n\nvar importer = require('ipfs-unixfs-importer');\n\nvar exporter = require('ipfs-unixfs-exporter');\n\nvar last = require('it-last');\n\nvar cp = require('./cp');\n\nvar rm = require('./rm');\n\nvar persist = require('ipfs-unixfs-importer/src/utils/persist');\n\nvar _require2 = require('../../utils'),\n    withTimeoutOption = _require2.withTimeoutOption;\n\nvar defaultOptions = {\n  flush: true,\n  shardSplitThreshold: 1000,\n  hashAlg: 'sha2-256',\n  cidVersion: 0,\n  recursive: false\n};\n\nfunction calculateModification(mode, originalMode, isDirectory) {\n  var modification = 0;\n\n  if (mode.includes('x') || mode.includes('X') && (isDirectory || originalMode & 1 || originalMode & 8 || originalMode & 64)) {\n    modification += 1;\n  }\n\n  if (mode.includes('w')) {\n    modification += 2;\n  }\n\n  if (mode.includes('r')) {\n    modification += 4;\n  }\n\n  return modification;\n}\n\nfunction calculateUGO(references, modification) {\n  var ugo = 0;\n\n  if (references.includes('u')) {\n    ugo += modification << 6;\n  }\n\n  if (references.includes('g')) {\n    ugo += modification << 3;\n  }\n\n  if (references.includes('o')) {\n    ugo += modification;\n  }\n\n  return ugo;\n}\n\nfunction calculateSpecial(references, mode, modification) {\n  if (mode.includes('t')) {\n    modification += parseInt('1000', 8);\n  }\n\n  if (mode.includes('s')) {\n    if (references.includes('u')) {\n      modification += parseInt('4000', 8);\n    }\n\n    if (references.includes('g')) {\n      modification += parseInt('2000', 8);\n    }\n  }\n\n  return modification;\n} // https://en.wikipedia.org/wiki/Chmod#Symbolic_modes\n\n\nfunction parseSymbolicMode(input, originalMode, isDirectory) {\n  if (!originalMode) {\n    originalMode = 0;\n  }\n\n  var match = input.match(/^(u?g?o?a?)(-?\\+?=?)?(r?w?x?X?s?t?)$/);\n\n  if (!match) {\n    throw new Error(\"Invalid file mode: \".concat(input));\n  }\n\n  var _match = _slicedToArray(match, 4),\n      _ = _match[0],\n      // eslint-disable-line no-unused-vars\n  references = _match[1],\n      operator = _match[2],\n      mode = _match[3];\n\n  if (references === 'a' || !references) {\n    references = 'ugo';\n  }\n\n  var modification = calculateModification(mode, originalMode, isDirectory);\n  modification = calculateUGO(references, modification);\n  modification = calculateSpecial(references, mode, modification);\n\n  if (operator === '=') {\n    if (references.includes('u')) {\n      // blank u bits\n      originalMode = originalMode & parseInt('7077', 8); // or them together\n\n      originalMode = originalMode | modification;\n    }\n\n    if (references.includes('g')) {\n      // blank g bits\n      originalMode = originalMode & parseInt('7707', 8); // or them together\n\n      originalMode = originalMode | modification;\n    }\n\n    if (references.includes('o')) {\n      // blank o bits\n      originalMode = originalMode & parseInt('7770', 8); // or them together\n\n      originalMode = originalMode | modification;\n    }\n\n    return originalMode;\n  }\n\n  if (operator === '+') {\n    return modification | originalMode;\n  }\n\n  if (operator === '-') {\n    return modification ^ originalMode;\n  }\n}\n\nfunction calculateMode(mode, metadata) {\n  if (typeof mode === 'string' || mode instanceof String) {\n    if (mode.match(/^\\d+$/g)) {\n      mode = parseInt(mode, 8);\n    } else {\n      mode = mode.split(',').reduce(function (curr, acc) {\n        return parseSymbolicMode(acc, curr, metadata.isDirectory());\n      }, metadata.mode);\n    }\n  }\n\n  return mode;\n}\n\nmodule.exports = function (context) {\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _mfsChmod = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(path, mode, options) {\n      var _yield$toMfsPath, cid, mfsDirectory, name, root, node, metadata, updatedCid, trail, parent, parentNode, result, newRootCid;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              options = applyDefaultOptions(options, defaultOptions);\n              log(\"Fetching stats for \".concat(path));\n              _context5.next = 4;\n              return toMfsPath(context, path);\n\n            case 4:\n              _yield$toMfsPath = _context5.sent;\n              cid = _yield$toMfsPath.cid;\n              mfsDirectory = _yield$toMfsPath.mfsDirectory;\n              name = _yield$toMfsPath.name;\n\n              if (!(cid.codec !== 'dag-pb')) {\n                _context5.next = 10;\n                break;\n              }\n\n              throw errCode(new Error(\"\".concat(path, \" was not a UnixFS node\")), 'ERR_NOT_UNIXFS');\n\n            case 10:\n              if (!options.recursive) {\n                _context5.next = 19;\n                break;\n              }\n\n              _context5.next = 13;\n              return pipe( /*#__PURE__*/_wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, entry, _node;\n\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _iteratorNormalCompletion = true;\n                        _didIteratorError = false;\n                        _context.prev = 2;\n                        _iterator = _asyncIterator(exporter.recursive(cid, context.ipld));\n\n                      case 4:\n                        _context.next = 6;\n                        return _awaitAsyncGenerator(_iterator.next());\n\n                      case 6:\n                        _step = _context.sent;\n                        _iteratorNormalCompletion = _step.done;\n                        _context.next = 10;\n                        return _awaitAsyncGenerator(_step.value);\n\n                      case 10:\n                        _value = _context.sent;\n\n                        if (_iteratorNormalCompletion) {\n                          _context.next = 23;\n                          break;\n                        }\n\n                        entry = _value;\n                        _context.next = 15;\n                        return _awaitAsyncGenerator(context.ipld.get(entry.cid));\n\n                      case 15:\n                        _node = _context.sent;\n                        entry.unixfs.mode = calculateMode(mode, entry.unixfs);\n                        _node = new DAGNode(entry.unixfs.marshal(), _node.Links);\n                        _context.next = 20;\n                        return {\n                          path: entry.path,\n                          content: _node\n                        };\n\n                      case 20:\n                        _iteratorNormalCompletion = true;\n                        _context.next = 4;\n                        break;\n\n                      case 23:\n                        _context.next = 29;\n                        break;\n\n                      case 25:\n                        _context.prev = 25;\n                        _context.t0 = _context[\"catch\"](2);\n                        _didIteratorError = true;\n                        _iteratorError = _context.t0;\n\n                      case 29:\n                        _context.prev = 29;\n                        _context.prev = 30;\n\n                        if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                          _context.next = 34;\n                          break;\n                        }\n\n                        _context.next = 34;\n                        return _awaitAsyncGenerator(_iterator.return());\n\n                      case 34:\n                        _context.prev = 34;\n\n                        if (!_didIteratorError) {\n                          _context.next = 37;\n                          break;\n                        }\n\n                        throw _iteratorError;\n\n                      case 37:\n                        return _context.finish(34);\n\n                      case 38:\n                        return _context.finish(29);\n\n                      case 39:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, null, [[2, 25, 29, 39], [30,, 34, 38]]);\n              })), function (source) {\n                return importer(source, context.block, _objectSpread(_objectSpread({}, options), {}, {\n                  pin: false,\n                  dagBuilder: function () {\n                    var _ref2 = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(source, block, options) {\n                      var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _loop, _iterator2, _step2, _value2;\n\n                      return _regeneratorRuntime.wrap(function _callee3$(_context4) {\n                        while (1) {\n                          switch (_context4.prev = _context4.next) {\n                            case 0:\n                              _iteratorNormalCompletion2 = true;\n                              _didIteratorError2 = false;\n                              _context4.prev = 2;\n                              _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n                                var entry;\n                                return _regeneratorRuntime.wrap(function _loop$(_context3) {\n                                  while (1) {\n                                    switch (_context3.prev = _context3.next) {\n                                      case 0:\n                                        entry = _value2;\n                                        _context3.next = 3;\n                                        return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                                          var cid;\n                                          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                                            while (1) {\n                                              switch (_context2.prev = _context2.next) {\n                                                case 0:\n                                                  _context2.next = 2;\n                                                  return persist(entry.content.serialize(), block, options);\n\n                                                case 2:\n                                                  cid = _context2.sent;\n                                                  return _context2.abrupt(\"return\", {\n                                                    cid: cid,\n                                                    path: entry.path,\n                                                    unixfs: UnixFS.unmarshal(entry.content.Data),\n                                                    node: entry.content\n                                                  });\n\n                                                case 4:\n                                                case \"end\":\n                                                  return _context2.stop();\n                                              }\n                                            }\n                                          }, _callee2);\n                                        }));\n\n                                      case 3:\n                                      case \"end\":\n                                        return _context3.stop();\n                                    }\n                                  }\n                                }, _loop);\n                              });\n                              _iterator2 = _asyncIterator(source);\n\n                            case 5:\n                              _context4.next = 7;\n                              return _awaitAsyncGenerator(_iterator2.next());\n\n                            case 7:\n                              _step2 = _context4.sent;\n                              _iteratorNormalCompletion2 = _step2.done;\n                              _context4.next = 11;\n                              return _awaitAsyncGenerator(_step2.value);\n\n                            case 11:\n                              _value2 = _context4.sent;\n\n                              if (_iteratorNormalCompletion2) {\n                                _context4.next = 17;\n                                break;\n                              }\n\n                              return _context4.delegateYield(_loop(), \"t0\", 14);\n\n                            case 14:\n                              _iteratorNormalCompletion2 = true;\n                              _context4.next = 5;\n                              break;\n\n                            case 17:\n                              _context4.next = 23;\n                              break;\n\n                            case 19:\n                              _context4.prev = 19;\n                              _context4.t1 = _context4[\"catch\"](2);\n                              _didIteratorError2 = true;\n                              _iteratorError2 = _context4.t1;\n\n                            case 23:\n                              _context4.prev = 23;\n                              _context4.prev = 24;\n\n                              if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n                                _context4.next = 28;\n                                break;\n                              }\n\n                              _context4.next = 28;\n                              return _awaitAsyncGenerator(_iterator2.return());\n\n                            case 28:\n                              _context4.prev = 28;\n\n                              if (!_didIteratorError2) {\n                                _context4.next = 31;\n                                break;\n                              }\n\n                              throw _iteratorError2;\n\n                            case 31:\n                              return _context4.finish(28);\n\n                            case 32:\n                              return _context4.finish(23);\n\n                            case 33:\n                            case \"end\":\n                              return _context4.stop();\n                          }\n                        }\n                      }, _callee3, null, [[2, 19, 23, 33], [24,, 28, 32]]);\n                    }));\n\n                    return function dagBuilder(_x, _x2, _x3) {\n                      return _ref2.apply(this, arguments);\n                    };\n                  }()\n                }));\n              }, function (nodes) {\n                return last(nodes);\n              });\n\n            case 13:\n              root = _context5.sent;\n              _context5.next = 16;\n              return rm(context)(path, options);\n\n            case 16:\n              _context5.next = 18;\n              return cp(context)(\"/ipfs/\".concat(root.cid), path, options);\n\n            case 18:\n              return _context5.abrupt(\"return\");\n\n            case 19:\n              _context5.next = 21;\n              return context.ipld.get(cid);\n\n            case 21:\n              node = _context5.sent;\n              metadata = UnixFS.unmarshal(node.Data);\n              metadata.mode = calculateMode(mode, metadata);\n              node = new DAGNode(metadata.marshal(), node.Links);\n              _context5.next = 27;\n              return context.ipld.put(node, mc.DAG_PB, {\n                cidVersion: cid.version,\n                hashAlg: mh.names[options.hashAlg],\n                onlyHash: !options.flush\n              });\n\n            case 27:\n              updatedCid = _context5.sent;\n              _context5.next = 30;\n              return toTrail(context, mfsDirectory, options);\n\n            case 30:\n              trail = _context5.sent;\n              parent = trail[trail.length - 1];\n              _context5.next = 34;\n              return context.ipld.get(parent.cid);\n\n            case 34:\n              parentNode = _context5.sent;\n              _context5.next = 37;\n              return addLink(context, {\n                parent: parentNode,\n                name: name,\n                cid: updatedCid,\n                size: node.serialize().length,\n                flush: options.flush,\n                hashAlg: options.hashAlg,\n                cidVersion: cid.version\n              });\n\n            case 37:\n              result = _context5.sent;\n              parent.cid = result.cid; // update the tree with the new child\n\n              _context5.next = 41;\n              return updateTree(context, trail, options);\n\n            case 41:\n              newRootCid = _context5.sent;\n              _context5.next = 44;\n              return updateMfsRoot(context, newRootCid);\n\n            case 44:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    function mfsChmod(_x4, _x5, _x6) {\n      return _mfsChmod.apply(this, arguments);\n    }\n\n    return mfsChmod;\n  }());\n};","map":null,"metadata":{},"sourceType":"script"}