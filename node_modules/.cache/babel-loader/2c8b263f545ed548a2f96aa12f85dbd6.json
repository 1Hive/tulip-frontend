{"ast":null,"code":"import { useCallback } from 'react';\nimport { useHeartbeat } from './useCourtContracts';\nimport { useCourtClock } from '../providers/CourtClock';\nimport { useActivity } from '../providers/ActivityProvider';\nimport { useRequestQueue } from '../providers/RequestQueue';\nimport allowedTermsBehind from '../actions/allowedTermsBehind';\nexport function useRequestProcessor() {\n  const {\n    addActivity\n  } = useActivity();\n  const {\n    addRequests\n  } = useRequestQueue();\n  const {\n    heartbeatRequest\n  } = useHeartbeat();\n  const {\n    neededTransitions\n  } = useCourtClock();\n  const processRequests = useCallback((requests = []) => {\n    const processedRequests = requests.map(({\n      action,\n      description,\n      ensureConfirmation = false,\n      isTx = true,\n      type,\n      ...request\n    }) => {\n      const intent = isTx ? () => addActivity(action(), type, description) : action;\n      return {\n        type,\n        intent,\n        description,\n        ensureConfirmation,\n        isTx,\n        ...request\n      };\n    });\n    const maxAllowedTermsBehind = processedRequests.filter(req => req.isTx).reduce((acc, req) => Math.max(acc, allowedTermsBehind[req.type]), -1); // Some court actions require the court clock to be at most x terms behind\n    // Check if a term transition is needed\n\n    if (maxAllowedTermsBehind >= 0 && neededTransitions > maxAllowedTermsBehind) {\n      processedRequests.unshift(heartbeatRequest(neededTransitions, true));\n    } // Add requests to tx queue\n\n\n    addRequests(processedRequests);\n  }, [addActivity, addRequests, heartbeatRequest, neededTransitions]);\n  return processRequests;\n}","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/hooks/useRequestProcessor.js"],"names":["useCallback","useHeartbeat","useCourtClock","useActivity","useRequestQueue","allowedTermsBehind","useRequestProcessor","addActivity","addRequests","heartbeatRequest","neededTransitions","processRequests","requests","processedRequests","map","action","description","ensureConfirmation","isTx","type","request","intent","maxAllowedTermsBehind","filter","req","reduce","acc","Math","max","unshift"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,WAAT,QAA4B,+BAA5B;AACA,SAASC,eAAT,QAAgC,2BAAhC;AAEA,OAAOC,kBAAP,MAA+B,+BAA/B;AAEA,OAAO,SAASC,mBAAT,GAA+B;AACpC,QAAM;AAAEC,IAAAA;AAAF,MAAkBJ,WAAW,EAAnC;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAkBJ,eAAe,EAAvC;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAuBR,YAAY,EAAzC;AACA,QAAM;AAAES,IAAAA;AAAF,MAAwBR,aAAa,EAA3C;AAEA,QAAMS,eAAe,GAAGX,WAAW,CACjC,CAACY,QAAQ,GAAG,EAAZ,KAAmB;AACjB,UAAMC,iBAAiB,GAAGD,QAAQ,CAACE,GAAT,CACxB,CAAC;AACCC,MAAAA,MADD;AAECC,MAAAA,WAFD;AAGCC,MAAAA,kBAAkB,GAAG,KAHtB;AAICC,MAAAA,IAAI,GAAG,IAJR;AAKCC,MAAAA,IALD;AAMC,SAAGC;AANJ,KAAD,KAOM;AACJ,YAAMC,MAAM,GAAGH,IAAI,GACf,MAAMX,WAAW,CAACQ,MAAM,EAAP,EAAWI,IAAX,EAAiBH,WAAjB,CADF,GAEfD,MAFJ;AAIA,aAAO;AACLI,QAAAA,IADK;AAELE,QAAAA,MAFK;AAGLL,QAAAA,WAHK;AAILC,QAAAA,kBAJK;AAKLC,QAAAA,IALK;AAML,WAAGE;AANE,OAAP;AAQD,KArBuB,CAA1B;AAwBA,UAAME,qBAAqB,GAAGT,iBAAiB,CAC5CU,MAD2B,CACpBC,GAAG,IAAIA,GAAG,CAACN,IADS,EAE3BO,MAF2B,CAEpB,CAACC,GAAD,EAAMF,GAAN,KAAcG,IAAI,CAACC,GAAL,CAASF,GAAT,EAAcrB,kBAAkB,CAACmB,GAAG,CAACL,IAAL,CAAhC,CAFM,EAEuC,CAAC,CAFxC,CAA9B,CAzBiB,CA6BjB;AACA;;AACA,QACEG,qBAAqB,IAAI,CAAzB,IACAZ,iBAAiB,GAAGY,qBAFtB,EAGE;AACAT,MAAAA,iBAAiB,CAACgB,OAAlB,CAA0BpB,gBAAgB,CAACC,iBAAD,EAAoB,IAApB,CAA1C;AACD,KApCgB,CAsCjB;;;AACAF,IAAAA,WAAW,CAACK,iBAAD,CAAX;AACD,GAzCgC,EA0CjC,CAACN,WAAD,EAAcC,WAAd,EAA2BC,gBAA3B,EAA6CC,iBAA7C,CA1CiC,CAAnC;AA6CA,SAAOC,eAAP;AACD","sourcesContent":["import { useCallback } from 'react'\nimport { useHeartbeat } from './useCourtContracts'\nimport { useCourtClock } from '../providers/CourtClock'\nimport { useActivity } from '../providers/ActivityProvider'\nimport { useRequestQueue } from '../providers/RequestQueue'\n\nimport allowedTermsBehind from '../actions/allowedTermsBehind'\n\nexport function useRequestProcessor() {\n  const { addActivity } = useActivity()\n  const { addRequests } = useRequestQueue()\n  const { heartbeatRequest } = useHeartbeat()\n  const { neededTransitions } = useCourtClock()\n\n  const processRequests = useCallback(\n    (requests = []) => {\n      const processedRequests = requests.map(\n        ({\n          action,\n          description,\n          ensureConfirmation = false,\n          isTx = true,\n          type,\n          ...request\n        }) => {\n          const intent = isTx\n            ? () => addActivity(action(), type, description)\n            : action\n\n          return {\n            type,\n            intent,\n            description,\n            ensureConfirmation,\n            isTx,\n            ...request,\n          }\n        }\n      )\n\n      const maxAllowedTermsBehind = processedRequests\n        .filter(req => req.isTx)\n        .reduce((acc, req) => Math.max(acc, allowedTermsBehind[req.type]), -1)\n\n      // Some court actions require the court clock to be at most x terms behind\n      // Check if a term transition is needed\n      if (\n        maxAllowedTermsBehind >= 0 &&\n        neededTransitions > maxAllowedTermsBehind\n      ) {\n        processedRequests.unshift(heartbeatRequest(neededTransitions, true))\n      }\n\n      // Add requests to tx queue\n      addRequests(processedRequests)\n    },\n    [addActivity, addRequests, heartbeatRequest, neededTransitions]\n  )\n\n  return processRequests\n}\n"]},"metadata":{},"sourceType":"module"}