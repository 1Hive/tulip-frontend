{"ast":null,"code":"'use strict';\n\nclass CacheEntry {\n  /**\n   * @param {String} msgID\n   * @param {Array<String>} topics\n   *\n   * @constructor\n   */\n  constructor(msgID, topics) {\n    this.msgID = msgID;\n    this.topics = topics;\n  }\n\n}\n\nclass MessageCache {\n  /**\n   * @param {Number} gossip\n   * @param {Number} history\n   * @param {msgIdFn} msgIdFn a function that returns message id from a message\n   *\n   * @constructor\n   */\n  constructor(gossip, history, msgIdFn) {\n    /**\n     * @type {Map<string, RPC.Message>}\n     */\n    this.msgs = new Map();\n    /**\n     * @type {Array<Array<CacheEntry>>}\n     */\n\n    this.history = [];\n\n    for (let i = 0; i < history; i++) {\n      this.history[i] = [];\n    }\n    /**\n     * @type {Number}\n     */\n\n\n    this.gossip = gossip;\n    /**\n     * @type {Function}\n     */\n\n    this.msgIdFn = msgIdFn;\n  }\n  /**\n   * Adds a message to the current window and the cache\n   *\n   * @param {rpc.RPC.Message} msg\n   * @returns {void}\n   */\n\n\n  put(msg) {\n    const msgID = this.getMsgId(msg);\n    this.msgs.set(msgID, msg);\n    this.history[0].push(new CacheEntry(msgID, msg.topicIDs));\n  }\n  /**\n   * Get message id of message.\n   * @param {rpc.RPC.Message} msg\n   * @returns {string}\n   */\n\n\n  getMsgId(msg) {\n    return this.msgIdFn(msg);\n  }\n  /**\n   * Retrieves a message from the cache by its ID, if it is still present\n   *\n   * @param {String} msgID\n   * @returns {rpc.RPC.Message}\n   */\n\n\n  get(msgID) {\n    return this.msgs.get(msgID);\n  }\n  /**\n   * Retrieves a list of message IDs for a given topic\n   *\n   * @param {String} topic\n   *\n   * @returns {Array<String>}\n   */\n\n\n  getGossipIDs(topic) {\n    const msgIDs = [];\n\n    for (let i = 0; i < this.gossip; i++) {\n      this.history[i].forEach(entry => {\n        for (const t of entry.topics) {\n          if (t === topic) {\n            msgIDs.push(entry.msgID);\n            break;\n          }\n        }\n      });\n    }\n\n    return msgIDs;\n  }\n  /**\n   * Shifts the current window, discarding messages older than this.history.length of the cache\n   *\n   * @returns {void}\n   */\n\n\n  shift() {\n    const last = this.history[this.history.length - 1];\n    last.forEach(entry => {\n      this.msgs.delete(entry.msgID);\n    });\n    this.history.pop();\n    this.history.unshift([]);\n  }\n\n}\n\nmodule.exports = {\n  CacheEntry,\n  MessageCache\n};","map":null,"metadata":{},"sourceType":"script"}