{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst extractDataFromBlock = require('../../../utils/extract-data-from-block');\n\nconst validateOffsetAndLength = require('../../../utils/validate-offset-and-length');\n\nconst UnixFS = require('ipfs-unixfs');\n\nconst errCode = require('err-code');\n\nasync function* emitBytes(ipld, node, start, end, streamPosition = 0, options) {\n  // a `raw` node\n  if (Buffer.isBuffer(node)) {\n    const buf = extractDataFromBlock(node, streamPosition, start, end);\n\n    if (buf.length) {\n      yield buf;\n    }\n\n    streamPosition += buf.length;\n    return streamPosition;\n  }\n\n  let file;\n\n  try {\n    file = UnixFS.unmarshal(node.Data);\n  } catch (err) {\n    throw errCode(err, 'ERR_NOT_UNIXFS');\n  } // might be a unixfs `raw` node or have data on intermediate nodes\n\n\n  const nodeHasData = Boolean(file.data && file.data.length);\n\n  if (nodeHasData) {\n    const buf = extractDataFromBlock(file.data, streamPosition, start, end);\n\n    if (buf.length) {\n      yield buf;\n    }\n\n    streamPosition += file.data.length;\n  }\n\n  let childStart = streamPosition; // work out which child nodes contain the requested data\n\n  for (let i = 0; i < node.Links.length; i++) {\n    const childLink = node.Links[i];\n    const childEnd = streamPosition + file.blockSizes[i];\n\n    if (start >= childStart && start < childEnd || // child has offset byte\n    end > childStart && end <= childEnd || // child has end byte\n    start < childStart && end > childEnd) {\n      // child is between offset and end bytes\n      const child = await ipld.get(childLink.Hash, options);\n\n      for await (const buf of emitBytes(ipld, child, start, end, streamPosition, options)) {\n        streamPosition += buf.length;\n        yield buf;\n      }\n    }\n\n    streamPosition = childEnd;\n    childStart = childEnd + 1;\n  }\n}\n\nconst fileContent = (cid, node, unixfs, path, resolve, depth, ipld) => {\n  return (options = {}) => {\n    const fileSize = unixfs.fileSize();\n    const {\n      offset,\n      length\n    } = validateOffsetAndLength(fileSize, options.offset, options.length);\n    const start = offset;\n    const end = offset + length;\n    return emitBytes(ipld, node, start, end, 0, options);\n  };\n};\n\nmodule.exports = fileContent;","map":null,"metadata":{},"sourceType":"script"}