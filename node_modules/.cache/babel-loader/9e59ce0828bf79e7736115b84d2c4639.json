{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar slicedToArray = require('./slicedToArray-a8a77f0e.js');\n\nrequire('./unsupportedIterableToArray-f175acfa.js');\n\nvar React = require('react');\n\nrequire('./_commonjsHelpers-1b94f6bc.js');\n\nvar index = require('./index-46d0e707.js');\n\nvar defineProperty = require('./defineProperty-3cad0327.js');\n\nrequire('./toConsumableArray-cc0d28a9.js');\n\nrequire('./getPrototypeOf-55c9e80c.js');\n\nvar color = require('./color.js');\n\nrequire('./miscellaneous.js');\n\nvar environment = require('./environment.js');\n\nvar themeDark = require('./theme-dark.js');\n\nvar themeLight = require('./theme-light.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty.defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n} // The appearance can be either “dark” or “light”.\n\n\nvar APPEARANCES = ['dark', 'light'];\nvar EMBEDDED_THEMES = {\n  dark: themeDark.default,\n  light: themeLight.default\n};\nvar THEME_DEFAULT = 'light';\nvar RESERVED_KEYS = ['_appearance', '_name'];\nvar DEPRECATED_COLORS = new Map([['error', 'negative'], ['success', 'positive']]);\nvar COLOR_FALLBACK = '#FF00FF';\n\nfunction getTheme(theme) {\n  var validationError = validateTheme(theme);\n\n  if (validationError !== null) {\n    environment.warnOnce(\"theme:theme-invalid:\".concat(validationError), \"Theme invalid: \".concat(validationError, \". \") + \"Using the theme \\u201C\".concat(THEME_DEFAULT, \"\\u201D instead.\"));\n    return EMBEDDED_THEMES[THEME_DEFAULT];\n  }\n\n  if (typeof theme === 'string' && EMBEDDED_THEMES[theme]) {\n    return EMBEDDED_THEMES[theme];\n  }\n\n  var baseTheme = EMBEDDED_THEMES[theme._appearance === 'dark' ? 'dark' : 'light'];\n  return _objectSpread(_objectSpread({}, baseTheme), theme);\n} // Setting the default is needed for cases when components are used without being wrapped in `<Theme />`, e.g. for tests.\n\n\nvar ThemeContext = /*#__PURE__*/React__default['default'].createContext(prepareTheme(getTheme(THEME_DEFAULT)));\n\nfunction convertThemeColor(name, value) {\n  if (RESERVED_KEYS.includes(name)) {\n    return value;\n  }\n\n  try {\n    return color.default(value);\n  } catch (err) {\n    return color.default(COLOR_FALLBACK);\n  }\n} // prepareTheme() does a few things:\n// - Wrap every color in a color() object (see utils/color.js).\n// - Filter out invalid colors added in custom themes.\n// - Wraps the theme in a proxy that warns about deprecated colors.\n\n\nfunction prepareTheme(theme) {\n  var themeConverted = Object.fromEntries(Object.entries(theme).filter(function (_ref) {\n    var _ref2 = slicedToArray.slicedToArray(_ref, 1),\n        name = _ref2[0];\n\n    if (!EMBEDDED_THEMES[THEME_DEFAULT][name]) {\n      environment.warnOnce(\"theme:invalid:\".concat(name), \"Theme: the color \\u201C\".concat(name, \"\\u201D is invalid and will be ignored. \") + \"Please check src/theme/theme-light.js in the aragonUI \" + \"repository for a list of valid colors.\");\n      return false;\n    }\n\n    return true;\n  }).map(function (_ref3) {\n    var _ref4 = slicedToArray.slicedToArray(_ref3, 2),\n        name = _ref4[0],\n        value = _ref4[1];\n\n    return [name, convertThemeColor(name, value)];\n  }));\n  return new Proxy(themeConverted, {\n    get: function get(theme, name) {\n      if (DEPRECATED_COLORS.has(name)) {\n        environment.warnOnce(\"theme:deprecated:\".concat(name), \"useTheme(): the color \\u201C\".concat(name, \"\\u201D has been deprecated and will be removed soon. \") + \"Please use \\u201C\".concat(DEPRECATED_COLORS.get(name), \"\\u201D instead.\"));\n        return theme[DEPRECATED_COLORS.get(name)];\n      }\n\n      if (!theme[name]) {\n        environment.warnOnce(\"theme:unknown:\".concat(name), \"useTheme(): the color \\u201C\".concat(name, \"\\u201D doesn\\u2019t exist in the theme.\"));\n        return COLOR_FALLBACK;\n      }\n\n      return theme[name];\n    }\n  });\n}\n\nfunction validateTheme(theme) {\n  if (typeof theme === 'string') {\n    return EMBEDDED_THEMES[theme] ? null : \"the theme \\u201C\".concat(theme, \"\\u201D doesn\\u2019t exist\");\n  }\n\n  if (theme && !theme._name) {\n    return \"the \\u201C_name\\u201D key of the theme is missing\";\n  }\n\n  if (theme && !APPEARANCES.includes(theme._appearance)) {\n    return \"the \\u201C_appearance\\u201D key of the theme is missing\";\n  }\n\n  return null;\n}\n\nfunction Theme(_ref5) {\n  var theme = _ref5.theme,\n      children = _ref5.children;\n\n  if (theme === undefined) {\n    theme = THEME_DEFAULT;\n  }\n\n  var themeConverted = React.useMemo(function () {\n    return prepareTheme(getTheme(theme));\n  }, [theme]);\n  return /*#__PURE__*/React__default['default'].createElement(ThemeContext.Provider, {\n    value: themeConverted\n  }, children);\n}\n\nTheme.propTypes = {\n  children: index.propTypes.node,\n  theme: index.propTypes.oneOfType([index.propTypes.object, index.propTypes.string])\n};\n\nfunction useTheme() {\n  return React.useContext(ThemeContext);\n}\n\nTheme.THEME_DEFAULT = THEME_DEFAULT;\nTheme.EMBEDDED_THEMES = EMBEDDED_THEMES;\nexports.Theme = Theme;\nexports.useTheme = useTheme;","map":{"version":3,"sources":["../src/theme/Theme.js"],"names":["APPEARANCES","EMBEDDED_THEMES","dark","light","THEME_DEFAULT","RESERVED_KEYS","DEPRECATED_COLORS","COLOR_FALLBACK","validationError","validateTheme","warnOnce","baseTheme","theme","ThemeContext","React","prepareTheme","getTheme","color","themeConverted","name","value","convertThemeColor","get","children","useMemo","Theme","PropTypes","useContext"],"mappings":"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","sourcesContent":["import React, { useContext, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { color, warnOnce } from '../utils'\nimport dark from './theme-dark'\nimport light from './theme-light'\n\n// Every theme has a name and an appearance.\n// The appearance can be either “dark” or “light”.\nconst APPEARANCES = ['dark', 'light']\n\nconst EMBEDDED_THEMES = { dark, light }\nconst THEME_DEFAULT = 'light'\n\nconst RESERVED_KEYS = ['_appearance', '_name']\nconst DEPRECATED_COLORS = new Map([\n  ['error', 'negative'],\n  ['success', 'positive'],\n])\n\nconst COLOR_FALLBACK = '#FF00FF'\n\nfunction getTheme(theme) {\n  const validationError = validateTheme(theme)\n  if (validationError !== null) {\n    warnOnce(\n      `theme:theme-invalid:${validationError}`,\n      `Theme invalid: ${validationError}. ` +\n        `Using the theme “${THEME_DEFAULT}” instead.`\n    )\n    return EMBEDDED_THEMES[THEME_DEFAULT]\n  }\n\n  if (typeof theme === 'string' && EMBEDDED_THEMES[theme]) {\n    return EMBEDDED_THEMES[theme]\n  }\n\n  const baseTheme =\n    EMBEDDED_THEMES[theme._appearance === 'dark' ? 'dark' : 'light']\n\n  return { ...baseTheme, ...theme }\n}\n\n// Setting the default is needed for cases when components are used without being wrapped in `<Theme />`, e.g. for tests.\nconst ThemeContext = React.createContext(prepareTheme(getTheme(THEME_DEFAULT)))\n\nfunction convertThemeColor(name, value) {\n  if (RESERVED_KEYS.includes(name)) {\n    return value\n  }\n\n  try {\n    return color(value)\n  } catch (err) {\n    return color(COLOR_FALLBACK)\n  }\n}\n\n// prepareTheme() does a few things:\n// - Wrap every color in a color() object (see utils/color.js).\n// - Filter out invalid colors added in custom themes.\n// - Wraps the theme in a proxy that warns about deprecated colors.\nfunction prepareTheme(theme) {\n  const themeConverted = Object.fromEntries(\n    Object.entries(theme)\n      .filter(([name]) => {\n        if (!EMBEDDED_THEMES[THEME_DEFAULT][name]) {\n          warnOnce(\n            `theme:invalid:${name}`,\n            `Theme: the color “${name}” is invalid and will be ignored. ` +\n              `Please check src/theme/theme-light.js in the aragonUI ` +\n              `repository for a list of valid colors.`\n          )\n          return false\n        }\n        return true\n      })\n      .map(([name, value]) => [name, convertThemeColor(name, value)])\n  )\n  return new Proxy(themeConverted, {\n    get(theme, name) {\n      if (DEPRECATED_COLORS.has(name)) {\n        warnOnce(\n          `theme:deprecated:${name}`,\n          `useTheme(): the color “${name}” has been deprecated and will be removed soon. ` +\n            `Please use “${DEPRECATED_COLORS.get(name)}” instead.`\n        )\n        return theme[DEPRECATED_COLORS.get(name)]\n      }\n      if (!theme[name]) {\n        warnOnce(\n          `theme:unknown:${name}`,\n          `useTheme(): the color “${name}” doesn’t exist in the theme.`\n        )\n        return COLOR_FALLBACK\n      }\n      return theme[name]\n    },\n  })\n}\n\nfunction validateTheme(theme) {\n  if (typeof theme === 'string') {\n    return EMBEDDED_THEMES[theme] ? null : `the theme “${theme}” doesn’t exist`\n  }\n  if (theme && !theme._name) {\n    return `the “_name” key of the theme is missing`\n  }\n  if (theme && !APPEARANCES.includes(theme._appearance)) {\n    return `the “_appearance” key of the theme is missing`\n  }\n  return null\n}\n\nfunction Theme({ theme, children }) {\n  if (theme === undefined) {\n    theme = THEME_DEFAULT\n  }\n\n  const themeConverted = useMemo(() => prepareTheme(getTheme(theme)), [theme])\n\n  return (\n    <ThemeContext.Provider value={themeConverted}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n\nTheme.propTypes = {\n  children: PropTypes.node,\n  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n}\n\nfunction useTheme() {\n  return useContext(ThemeContext)\n}\n\nTheme.THEME_DEFAULT = THEME_DEFAULT\nTheme.EMBEDDED_THEMES = EMBEDDED_THEMES\n\nexport { Theme, useTheme }\n"]},"metadata":{},"sourceType":"script"}