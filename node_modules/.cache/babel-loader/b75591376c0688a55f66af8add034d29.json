{"ast":null,"code":"'use strict';\n\nvar protons = require('protons');\n/* eslint-disable no-tabs */\n\n\nvar message = \"\\nmessage IpnsEntry {\\n  enum ValidityType {\\n\\t\\tEOL = 0; // setting an EOL says \\\"this record is valid until...\\\"\\n\\t}\\n\\n  required bytes value = 1;\\n\\trequired bytes signature = 2;\\n\\n\\toptional ValidityType validityType = 3;\\n\\toptional bytes validity = 4;\\n\\n\\toptional uint64 sequence = 5;\\n\\n\\toptional uint64 ttl = 6;\\n\\n\\t// in order for nodes to properly validate a record upon receipt, they need the public\\n\\t// key associated with it. For old RSA keys, its easiest if we just send this as part of\\n\\t// the record itself. For newer ed25519 keys, the public key can be embedded in the\\n\\t// peerID, making this field unnecessary.\\n\\toptional bytes pubKey = 7;\\n}\\n\";\nmodule.exports = protons(message).IpnsEntry;","map":null,"metadata":{},"sourceType":"script"}