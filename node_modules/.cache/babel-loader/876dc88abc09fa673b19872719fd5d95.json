{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar BufferList = require('bl/BufferList');\n\nmodule.exports = function (source) {\n  var reader = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var bytes, bl, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return;\n\n          case 2:\n            bytes = _context.sent;\n            // Allows us to receive 8 when reader.next(8) is called\n            bl = new BufferList();\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 6;\n            _iterator = _asyncIterator(source);\n\n          case 8:\n            _context.next = 10;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 10:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 14;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 14:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 42;\n              break;\n            }\n\n            chunk = _value;\n\n            if (bytes) {\n              _context.next = 23;\n              break;\n            }\n\n            _context.next = 20;\n            return bl.append(chunk);\n\n          case 20:\n            bytes = _context.sent;\n            bl = new BufferList();\n            return _context.abrupt(\"continue\", 39);\n\n          case 23:\n            bl.append(chunk);\n\n          case 24:\n            if (!(bl.length >= bytes)) {\n              _context.next = 39;\n              break;\n            }\n\n            data = bl.shallowSlice(0, bytes);\n            bl.consume(bytes);\n            _context.next = 29;\n            return data;\n\n          case 29:\n            bytes = _context.sent;\n\n            if (bytes) {\n              _context.next = 37;\n              break;\n            }\n\n            if (!bl.length) {\n              _context.next = 36;\n              break;\n            }\n\n            _context.next = 34;\n            return bl;\n\n          case 34:\n            bytes = _context.sent;\n            bl = new BufferList();\n\n          case 36:\n            return _context.abrupt(\"break\", 39);\n\n          case 37:\n            _context.next = 24;\n            break;\n\n          case 39:\n            _iteratorNormalCompletion = true;\n            _context.next = 8;\n            break;\n\n          case 42:\n            _context.next = 48;\n            break;\n\n          case 44:\n            _context.prev = 44;\n            _context.t0 = _context[\"catch\"](6);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 48:\n            _context.prev = 48;\n            _context.prev = 49;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 53;\n              break;\n            }\n\n            _context.next = 53;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 53:\n            _context.prev = 53;\n\n            if (!_didIteratorError) {\n              _context.next = 56;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 56:\n            return _context.finish(53);\n\n          case 57:\n            return _context.finish(48);\n\n          case 58:\n            if (!bytes) {\n              _context.next = 60;\n              break;\n            }\n\n            throw Object.assign(new Error(\"stream ended before \".concat(bytes, \" bytes became available\")), {\n              code: 'ERR_UNDER_READ',\n              buffer: bl\n            });\n\n          case 60:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[6, 44, 48, 58], [49,, 53, 57]]);\n  }))();\n\n  reader.next();\n  return reader;\n};","map":null,"metadata":{},"sourceType":"script"}