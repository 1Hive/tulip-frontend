{"ast":null,"code":"var prr = require('prr');\n\nfunction init(type, message, cause) {\n  if (!!message && typeof message != 'string') {\n    message = message.message || message.name;\n  }\n\n  prr(this, {\n    type: type,\n    name: type // can be passed just a 'cause'\n    ,\n    cause: typeof message != 'string' ? message : cause,\n    message: message\n  }, 'ewr');\n} // generic prototype, not intended to be actually used - helpful for `instanceof`\n\n\nfunction CustomError(message, cause) {\n  Error.call(this);\n  if (Error.captureStackTrace) Error.captureStackTrace(this, this.constructor);\n  init.call(this, 'CustomError', message, cause);\n}\n\nCustomError.prototype = new Error();\n\nfunction createError(errno, type, proto) {\n  var err = function (message, cause) {\n    init.call(this, type, message, cause); //TODO: the specificity here is stupid, errno should be available everywhere\n\n    if (type == 'FilesystemError') {\n      this.code = this.cause.code;\n      this.path = this.cause.path;\n      this.errno = this.cause.errno;\n      this.message = (errno.errno[this.cause.errno] ? errno.errno[this.cause.errno].description : this.cause.message) + (this.cause.path ? ' [' + this.cause.path + ']' : '');\n    }\n\n    Error.call(this);\n    if (Error.captureStackTrace) Error.captureStackTrace(this, err);\n  };\n\n  err.prototype = !!proto ? new proto() : new CustomError();\n  return err;\n}\n\nmodule.exports = function (errno) {\n  var ce = function (type, proto) {\n    return createError(errno, type, proto);\n  };\n\n  return {\n    CustomError: CustomError,\n    FilesystemError: ce('FilesystemError'),\n    createError: ce\n  };\n};","map":null,"metadata":{},"sourceType":"script"}