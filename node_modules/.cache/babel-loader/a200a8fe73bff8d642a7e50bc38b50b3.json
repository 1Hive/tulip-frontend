{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar multicodec = require('multicodec');\n\nvar nameToCodec = function nameToCodec(name) {\n  return multicodec[name.toUpperCase().replace(/-/g, '_')];\n};\n\nvar _require = require('../../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nmodule.exports = function (_ref) {\n  var ipld = _ref.ipld,\n      pin = _ref.pin,\n      gcLock = _ref.gcLock,\n      preload = _ref.preload;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dagNode, options) {\n      var optionDefaults, release, cid;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = options || {};\n\n              if (!(options.cid && (options.format || options.hashAlg))) {\n                _context.next = 5;\n                break;\n              }\n\n              throw new Error('Can\\'t put dag node. Please provide either `cid` OR `format` and `hashAlg` options.');\n\n            case 5:\n              if (!(options.format && !options.hashAlg || !options.format && options.hashAlg)) {\n                _context.next = 7;\n                break;\n              }\n\n              throw new Error('Can\\'t put dag node. Please provide `format` AND `hashAlg` options.');\n\n            case 7:\n              optionDefaults = {\n                format: multicodec.DAG_CBOR,\n                hashAlg: multicodec.SHA2_256\n              }; // The IPLD expects the format and hashAlg as constants\n\n              if (options.format && typeof options.format === 'string') {\n                options.format = nameToCodec(options.format);\n              }\n\n              if (options.hashAlg && typeof options.hashAlg === 'string') {\n                options.hashAlg = nameToCodec(options.hashAlg);\n              }\n\n              options = options.cid ? options : Object.assign({}, optionDefaults, options); // js-ipld defaults to verion 1 CIDs. Hence set version 0 explicitly for\n              // dag-pb nodes\n\n              if (options.version === undefined) {\n                if (options.format === multicodec.DAG_PB && options.hashAlg === multicodec.SHA2_256) {\n                  options.version = 0;\n                } else {\n                  options.version = 1;\n                }\n              }\n\n              if (!options.pin) {\n                _context.next = 16;\n                break;\n              }\n\n              _context.next = 15;\n              return gcLock.readLock();\n\n            case 15:\n              release = _context.sent;\n\n            case 16:\n              _context.prev = 16;\n              _context.next = 19;\n              return ipld.put(dagNode, options.format, {\n                hashAlg: options.hashAlg,\n                cidVersion: options.version,\n                signal: options.signal\n              });\n\n            case 19:\n              cid = _context.sent;\n\n              if (!options.pin) {\n                _context.next = 23;\n                break;\n              }\n\n              _context.next = 23;\n              return pin.add(cid, {\n                lock: false\n              });\n\n            case 23:\n              if (options.preload !== false) {\n                preload(cid);\n              }\n\n              return _context.abrupt(\"return\", cid);\n\n            case 25:\n              _context.prev = 25;\n\n              if (release) {\n                release();\n              }\n\n              return _context.finish(25);\n\n            case 28:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[16,, 25, 28]]);\n    }));\n\n    function put(_x, _x2) {\n      return _put.apply(this, arguments);\n    }\n\n    return put;\n  }());\n};","map":null,"metadata":{},"sourceType":"script"}