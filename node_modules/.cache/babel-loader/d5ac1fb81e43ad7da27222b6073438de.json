{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Entry = require('./entry');\n\nvar EntryIO = require('./entry-io');\n\nvar Sorting = require('./log-sorting');\n\nvar LastWriteWins = Sorting.LastWriteWins,\n    NoZeroes = Sorting.NoZeroes;\n\nvar LogError = require('./log-errors');\n\nvar _require = require('./utils'),\n    isDefined = _require.isDefined,\n    findUniques = _require.findUniques,\n    difference = _require.difference,\n    io = _require.io;\n\nvar IPLD_LINKS = ['heads'];\n\nvar last = function last(arr, n) {\n  return arr.slice(arr.length - Math.min(arr.length, n), arr.length);\n};\n\nvar LogIO = /*#__PURE__*/function () {\n  function LogIO() {\n    _classCallCheck(this, LogIO);\n  }\n\n  _createClass(LogIO, null, [{\n    key: \"toMultihash\",\n    value: //\n\n    /**\n     * Get the multihash of a Log.\n     * @param {IPFS} ipfs An IPFS instance\n     * @param {Log} log Log to get a multihash for\n     * @returns {Promise<string>}\n     * @deprecated\n     */\n    function () {\n      var _toMultihash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ipfs, log) {\n        var _ref,\n            format,\n            _args = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _ref = _args.length > 2 && _args[2] !== undefined ? _args[2] : {}, format = _ref.format;\n\n                if (isDefined(ipfs)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                throw LogError.IPFSNotDefinedError();\n\n              case 3:\n                if (isDefined(log)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw LogError.LogNotDefinedError();\n\n              case 5:\n                if (!isDefined(format)) format = 'dag-cbor';\n\n                if (!(log.values.length < 1)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                throw new Error('Can\\'t serialize an empty log');\n\n              case 8:\n                return _context.abrupt(\"return\", io.write(ipfs, format, log.toJSON(), {\n                  links: IPLD_LINKS\n                }));\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function toMultihash(_x, _x2) {\n        return _toMultihash.apply(this, arguments);\n      }\n\n      return toMultihash;\n    }()\n    /**\n     * Create a log from a hashes.\n     * @param {IPFS} ipfs An IPFS instance\n     * @param {string} hash The hash of the log\n     * @param {Object} options\n     * @param {number} options.length How many items to include in the log\n     * @param {Array<Entry>} options.exclude Entries to not fetch (cached)\n     * @param {function(hash, entry, parent, depth)} options.onProgressCallback\n     */\n\n  }, {\n    key: \"fromMultihash\",\n    value: function () {\n      var _fromMultihash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ipfs, hash, _ref2) {\n        var _ref2$length, length, _ref2$exclude, exclude, timeout, concurrency, sortFn, onProgressCallback, logData, isHead, all, logId, entries, heads;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _ref2$length = _ref2.length, length = _ref2$length === void 0 ? -1 : _ref2$length, _ref2$exclude = _ref2.exclude, exclude = _ref2$exclude === void 0 ? [] : _ref2$exclude, timeout = _ref2.timeout, concurrency = _ref2.concurrency, sortFn = _ref2.sortFn, onProgressCallback = _ref2.onProgressCallback;\n\n                if (isDefined(ipfs)) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                throw LogError.IPFSNotDefinedError();\n\n              case 3:\n                if (isDefined(hash)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Invalid hash: \".concat(hash));\n\n              case 5:\n                _context2.next = 7;\n                return io.read(ipfs, hash, {\n                  links: IPLD_LINKS\n                });\n\n              case 7:\n                logData = _context2.sent;\n\n                if (!(!logData.heads || !logData.id)) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                throw LogError.NotALogError();\n\n              case 10:\n                // Use user provided sorting function or the default one\n                sortFn = sortFn || NoZeroes(LastWriteWins);\n\n                isHead = function isHead(e) {\n                  return logData.heads.includes(e.hash);\n                };\n\n                _context2.next = 14;\n                return EntryIO.fetchAll(ipfs, logData.heads, {\n                  length: length,\n                  exclude: exclude,\n                  timeout: timeout,\n                  concurrency: concurrency,\n                  onProgressCallback: onProgressCallback\n                });\n\n              case 14:\n                all = _context2.sent;\n                logId = logData.id;\n                entries = length > -1 ? last(all.sort(sortFn), length) : all;\n                heads = entries.filter(isHead);\n                return _context2.abrupt(\"return\", {\n                  logId: logId,\n                  entries: entries,\n                  heads: heads\n                });\n\n              case 19:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function fromMultihash(_x3, _x4, _x5) {\n        return _fromMultihash.apply(this, arguments);\n      }\n\n      return fromMultihash;\n    }()\n    /**\n     * Create a log from an entry hash.\n     * @param {IPFS} ipfs An IPFS instance\n     * @param {string} hash The hash of the entry\n     * @param {Object} options\n     * @param {number} options.length How many items to include in the log\n     * @param {Array<Entry>} options.exclude Entries to not fetch (cached)\n     * @param {function(hash, entry, parent, depth)} options.onProgressCallback\n     */\n\n  }, {\n    key: \"fromEntryHash\",\n    value: function () {\n      var _fromEntryHash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(ipfs, hash, _ref3) {\n        var _ref3$length, length, _ref3$exclude, exclude, timeout, concurrency, sortFn, onProgressCallback, hashes, all, entries;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _ref3$length = _ref3.length, length = _ref3$length === void 0 ? -1 : _ref3$length, _ref3$exclude = _ref3.exclude, exclude = _ref3$exclude === void 0 ? [] : _ref3$exclude, timeout = _ref3.timeout, concurrency = _ref3.concurrency, sortFn = _ref3.sortFn, onProgressCallback = _ref3.onProgressCallback;\n\n                if (isDefined(ipfs)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                throw LogError.IpfsNotDefinedError();\n\n              case 3:\n                if (isDefined(hash)) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                throw new Error(\"'hash' must be defined\");\n\n              case 5:\n                // Convert input hash(s) to an array\n                hashes = Array.isArray(hash) ? hash : [hash]; // Fetch given length, return size at least the given input entries\n\n                length = length > -1 ? Math.max(length, 1) : length;\n                _context3.next = 9;\n                return EntryIO.fetchParallel(ipfs, hashes, {\n                  length: length,\n                  exclude: exclude,\n                  timeout: timeout,\n                  concurrency: concurrency,\n                  onProgressCallback: onProgressCallback\n                });\n\n              case 9:\n                all = _context3.sent;\n                // Cap the result at the right size by taking the last n entries,\n                // or if given length is -1, then take all\n                sortFn = sortFn || NoZeroes(LastWriteWins);\n                entries = length > -1 ? last(all.sort(sortFn), length) : all;\n                return _context3.abrupt(\"return\", {\n                  entries: entries\n                });\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function fromEntryHash(_x6, _x7, _x8) {\n        return _fromEntryHash.apply(this, arguments);\n      }\n\n      return fromEntryHash;\n    }()\n    /**\n     * Creates a log data from a JSON object, to be passed to a Log constructor\n     *\n     * @param {IPFS} ipfs An IPFS instance\n     * @param {json} json A json object containing valid log data\n     * @param {Object} options\n     * @param {number} options.length How many entries to include\n     * @param {function(hash, entry, parent, depth)} options.onProgressCallback\n     **/\n\n  }, {\n    key: \"fromJSON\",\n    value: function () {\n      var _fromJSON = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(ipfs, json, _ref4) {\n        var _ref4$length, length, timeout, concurrency, onProgressCallback, id, heads, headHashes, all, entries;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _ref4$length = _ref4.length, length = _ref4$length === void 0 ? -1 : _ref4$length, timeout = _ref4.timeout, concurrency = _ref4.concurrency, onProgressCallback = _ref4.onProgressCallback;\n\n                if (isDefined(ipfs)) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                throw LogError.IPFSNotDefinedError();\n\n              case 3:\n                id = json.id, heads = json.heads;\n                headHashes = heads.map(function (e) {\n                  return e.hash;\n                });\n                _context4.next = 7;\n                return EntryIO.fetchParallel(ipfs, headHashes, {\n                  length: length,\n                  timeout: timeout,\n                  concurrency: concurrency,\n                  onProgressCallback: onProgressCallback\n                });\n\n              case 7:\n                all = _context4.sent;\n                entries = all.sort(Entry.compare);\n                return _context4.abrupt(\"return\", {\n                  logId: id,\n                  entries: entries,\n                  heads: heads\n                });\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function fromJSON(_x9, _x10, _x11) {\n        return _fromJSON.apply(this, arguments);\n      }\n\n      return fromJSON;\n    }()\n    /**\n     * Create a new log starting from an entry.\n     * @param {IPFS} ipfs An IPFS instance\n     * @param {Entry|Array<Entry>} sourceEntries An entry or an array of entries to fetch a log from\n     * @param {Object} options\n     * @param {number} options.length How many entries to include\n     * @param {Array<Entry>} options.exclude Entries to not fetch (cached)\n     * @param {function(hash, entry, parent, depth)} options.onProgressCallback\n     */\n\n  }, {\n    key: \"fromEntry\",\n    value: function () {\n      var _fromEntry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(ipfs, sourceEntries, _ref5) {\n        var _ref5$length, length, _ref5$exclude, exclude, timeout, concurrency, onProgressCallback, hashes, all, combined, uniques, sliced, missingSourceEntries, replaceInFront, entries, logId;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _ref5$length = _ref5.length, length = _ref5$length === void 0 ? -1 : _ref5$length, _ref5$exclude = _ref5.exclude, exclude = _ref5$exclude === void 0 ? [] : _ref5$exclude, timeout = _ref5.timeout, concurrency = _ref5.concurrency, onProgressCallback = _ref5.onProgressCallback;\n\n                if (isDefined(ipfs)) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                throw LogError.IPFSNotDefinedError();\n\n              case 3:\n                if (isDefined(sourceEntries)) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                throw new Error(\"'sourceEntries' must be defined\");\n\n              case 5:\n                if (!(!Array.isArray(sourceEntries) && !Entry.isEntry(sourceEntries))) {\n                  _context5.next = 7;\n                  break;\n                }\n\n                throw new Error('\\'sourceEntries\\' argument must be an array of Entry instances or a single Entry');\n\n              case 7:\n                if (!Array.isArray(sourceEntries)) {\n                  sourceEntries = [sourceEntries];\n                } // Fetch given length, return size at least the given input entries\n\n\n                length = length > -1 ? Math.max(length, sourceEntries.length) : length; // Make sure we pass hashes instead of objects to the fetcher function\n\n                hashes = sourceEntries.map(function (e) {\n                  return e.hash;\n                }); // Fetch the entries\n\n                _context5.next = 12;\n                return EntryIO.fetchParallel(ipfs, hashes, {\n                  length: length,\n                  exclude: exclude,\n                  timeout: timeout,\n                  concurrency: concurrency,\n                  onProgressCallback: onProgressCallback\n                });\n\n              case 12:\n                all = _context5.sent;\n                // Combine the fetches with the source entries and take only uniques\n                combined = sourceEntries.concat(all).concat(exclude);\n                uniques = findUniques(combined, 'hash').sort(Entry.compare); // Cap the result at the right size by taking the last n entries\n\n                sliced = uniques.slice(length > -1 ? -length : -uniques.length); // Make sure that the given input entries are present in the result\n                // in order to not lose references\n\n                missingSourceEntries = difference(sliced, sourceEntries, 'hash');\n\n                replaceInFront = function replaceInFront(a, withEntries) {\n                  var sliced = a.slice(withEntries.length, a.length);\n                  return withEntries.concat(sliced);\n                }; // Add the input entries at the beginning of the array and remove\n                // as many elements from the array before inserting the original entries\n\n\n                entries = replaceInFront(sliced, missingSourceEntries);\n                logId = entries[entries.length - 1].id;\n                return _context5.abrupt(\"return\", {\n                  logId: logId,\n                  entries: entries\n                });\n\n              case 21:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function fromEntry(_x12, _x13, _x14) {\n        return _fromEntry.apply(this, arguments);\n      }\n\n      return fromEntry;\n    }()\n  }]);\n\n  return LogIO;\n}();\n\nmodule.exports = LogIO;","map":null,"metadata":{},"sourceType":"script"}