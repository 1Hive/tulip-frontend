{"ast":null,"code":"const pageResults = require('graph-results-pager');\n\nconst ws = require('isomorphic-ws');\n\nconst {\n  SubscriptionClient\n} = require('subscriptions-transport-ws');\n\nconst {\n  gql\n} = require('graphql-request');\n\nconst {\n  graphAPIEndpoints,\n  graphWSEndpoints,\n  sushiAddress\n} = require('./../constants');\n\nconst {\n  timestampToBlock\n} = require('./../utils');\n\nconst {\n  ethPrice\n} = require('./exchange');\n\nmodule.exports = {\n  async priceUSD({\n    block = undefined,\n    timestamp = undefined\n  } = {}) {\n    return (await ethPrice({\n      block,\n      timestamp\n    })) * (await module.exports.priceETH({\n      block,\n      timestamp\n    }));\n  },\n\n  async priceETH({\n    block = undefined,\n    timestamp = undefined\n  } = {}) {\n    return pageResults({\n      api: graphAPIEndpoints.exchange,\n      query: {\n        entity: 'tokens',\n        selection: {\n          where: {\n            id: `\\\\\"${sushiAddress}\\\\\"`\n          },\n          block: block ? {\n            number: block\n          } : timestamp ? {\n            number: await timestampToBlock(timestamp)\n          } : undefined\n        },\n        properties: priceETH.properties\n      }\n    }).then(results => priceETH.callback(results[0])).catch(err => console.error(err));\n  },\n\n  observePriceETH() {\n    const query = gql`\n            subscription {\n                    token(id: \"${sushiAddress}\") {\n                        derivedETH\n                    }\n        }`;\n    const client = new SubscriptionClient(graphWSEndpoints.exchange, {\n      reconnect: true\n    }, ws);\n    const observable = client.request({\n      query\n    });\n    return {\n      subscribe({\n        next,\n        error,\n        complete\n      }) {\n        return observable.subscribe({\n          next(results) {\n            next(priceETH.callback(results.data.token));\n          },\n\n          error,\n          complete\n        });\n      }\n\n    };\n  }\n\n};\nconst priceETH = {\n  properties: ['derivedETH'],\n\n  callback(results) {\n    return Number(results.derivedETH);\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}