{"ast":null,"code":"\"use strict\"; // Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Package int provides helper functions for integerss.\n */\n// Shim using 16-bit pieces.\n\nfunction imulShim(a, b) {\n  var ah = a >>> 16 & 0xffff,\n      al = a & 0xffff;\n  var bh = b >>> 16 & 0xffff,\n      bl = b & 0xffff;\n  return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;\n}\n/** 32-bit integer multiplication.  */\n// Use system Math.imul if available, otherwise use our shim.\n\n\nexports.mul = Math.imul || imulShim;\n/** 32-bit integer addition.  */\n\nfunction add(a, b) {\n  return a + b | 0;\n}\n\nexports.add = add;\n/**  32-bit integer subtraction.  */\n\nfunction sub(a, b) {\n  return a - b | 0;\n}\n\nexports.sub = sub;\n/** 32-bit integer left rotation */\n\nfunction rotl(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nexports.rotl = rotl;\n/** 32-bit integer left rotation */\n\nfunction rotr(x, n) {\n  return x << 32 - n | x >>> n;\n}\n\nexports.rotr = rotr;\n\nfunction isIntegerShim(n) {\n  return typeof n === \"number\" && isFinite(n) && Math.floor(n) === n;\n}\n/**\n * Returns true if the argument is an integer number.\n *\n * In ES2015, Number.isInteger.\n */\n\n\nexports.isInteger = Number.isInteger || isIntegerShim;\n/**\n *  Math.pow(2, 53) - 1\n *\n *  In ES2015 Number.MAX_SAFE_INTEGER.\n */\n\nexports.MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Returns true if the argument is a safe integer number\n * (-MIN_SAFE_INTEGER < number <= MAX_SAFE_INTEGER)\n *\n * In ES2015, Number.isSafeInteger.\n */\n\nexports.isSafeInteger = function (n) {\n  return exports.isInteger(n) && n >= -exports.MAX_SAFE_INTEGER && n <= exports.MAX_SAFE_INTEGER;\n};","map":null,"metadata":{},"sourceType":"script"}