{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar BufferList = require('bl/BufferList');\n\nvar varintEncode = require('./varint-encode');\n\nvar MIN_POOL_SIZE = 8; // Varint.encode(Number.MAX_SAFE_INTEGER).length\n\nvar DEFAULT_POOL_SIZE = 10 * 1024;\n\nfunction encode(options) {\n  options = options || {};\n  var poolSize = Math.max(options.poolSize || DEFAULT_POOL_SIZE, options.minPoolSize || MIN_POOL_SIZE);\n  var encodeLength = options.lengthEncoder || varintEncode;\n  return function (source) {\n    return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var pool, poolOffset, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk, encodedLength;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              pool = Buffer.alloc(poolSize);\n              poolOffset = 0;\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 4;\n              _iterator = _asyncIterator(source);\n\n            case 6:\n              _context.next = 8;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 8:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 12;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 12:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 24;\n                break;\n              }\n\n              chunk = _value;\n              encodeLength(chunk.length, pool, poolOffset);\n              encodedLength = pool.slice(poolOffset, poolOffset + encodeLength.bytes);\n              poolOffset += encodeLength.bytes;\n\n              if (pool.length - poolOffset < MIN_POOL_SIZE) {\n                pool = Buffer.alloc(poolSize);\n                poolOffset = 0;\n              }\n\n              _context.next = 21;\n              return new BufferList().append(encodedLength).append(chunk);\n\n            case 21:\n              _iteratorNormalCompletion = true;\n              _context.next = 6;\n              break;\n\n            case 24:\n              _context.next = 30;\n              break;\n\n            case 26:\n              _context.prev = 26;\n              _context.t0 = _context[\"catch\"](4);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 30:\n              _context.prev = 30;\n              _context.prev = 31;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 35;\n                break;\n              }\n\n              _context.next = 35;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 35:\n              _context.prev = 35;\n\n              if (!_didIteratorError) {\n                _context.next = 38;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 38:\n              return _context.finish(35);\n\n            case 39:\n              return _context.finish(30);\n\n            case 40:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[4, 26, 30, 40], [31,, 35, 39]]);\n    }))();\n  };\n}\n\nencode.single = function (chunk, options) {\n  options = options || {};\n  var encodeLength = options.lengthEncoder || varintEncode;\n  return new BufferList([encodeLength(chunk.length), chunk]);\n};\n\nmodule.exports = encode;\nmodule.exports.MIN_POOL_SIZE = MIN_POOL_SIZE;\nmodule.exports.DEFAULT_POOL_SIZE = DEFAULT_POOL_SIZE;","map":null,"metadata":{},"sourceType":"script"}