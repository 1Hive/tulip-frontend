{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar errCode = require('err-code');\n\nvar extractDataFromBlock = require('../utils/extract-data-from-block');\n\nvar validateOffsetAndLength = require('../utils/validate-offset-and-length');\n\nvar mh = require('multihashing-async').multihash;\n\nvar rawContent = function rawContent(node) {\n  return /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var options,\n        _validateOffsetAndLen,\n        offset,\n        length,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n            _validateOffsetAndLen = validateOffsetAndLength(node.length, options.offset, options.length), offset = _validateOffsetAndLen.offset, length = _validateOffsetAndLen.length;\n            _context.next = 4;\n            return extractDataFromBlock(node, 0, offset, offset + length);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  });\n};\n\nvar resolve = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(cid, name, path, toResolve, _resolve, depth, ipld, options) {\n    var buf;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!toResolve.length) {\n              _context2.next = 2;\n              break;\n            }\n\n            throw errCode(new Error(\"No link named \".concat(path, \" found in raw node \").concat(cid.toBaseEncodedString())), 'ERR_NOT_FOUND');\n\n          case 2:\n            _context2.next = 4;\n            return mh.decode(cid.multihash);\n\n          case 4:\n            buf = _context2.sent;\n            return _context2.abrupt(\"return\", {\n              entry: {\n                name: name,\n                path: path,\n                cid: cid,\n                node: buf,\n                content: rawContent(buf.digest),\n                depth: depth\n              }\n            });\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function resolve(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = resolve;","map":null,"metadata":{},"sourceType":"script"}