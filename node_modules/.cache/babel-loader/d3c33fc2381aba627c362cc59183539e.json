{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar hamtShardedDirectoryContent = function hamtShardedDirectoryContent(cid, node, unixfs, path, resolve, depth, ipld) {\n  return function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return listDirectory(node, path, resolve, depth, ipld, options);\n  };\n};\n\nfunction listDirectory(_x, _x2, _x3, _x4, _x5, _x6) {\n  return _listDirectory.apply(this, arguments);\n}\n\nfunction _listDirectory() {\n  _listDirectory = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(node, path, resolve, depth, ipld, options) {\n    var links, _iterator2, _step2, link, name, result, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, file;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            links = node.Links;\n            _iterator2 = _createForOfIteratorHelper(links);\n            _context.prev = 2;\n\n            _iterator2.s();\n\n          case 4:\n            if ((_step2 = _iterator2.n()).done) {\n              _context.next = 54;\n              break;\n            }\n\n            link = _step2.value;\n            name = link.Name.substring(2);\n\n            if (!name) {\n              _context.next = 15;\n              break;\n            }\n\n            _context.next = 10;\n            return _awaitAsyncGenerator(resolve(link.Hash, name, \"\".concat(path, \"/\").concat(name), [], depth + 1, ipld));\n\n          case 10:\n            result = _context.sent;\n            _context.next = 13;\n            return result.entry;\n\n          case 13:\n            _context.next = 52;\n            break;\n\n          case 15:\n            _context.next = 17;\n            return _awaitAsyncGenerator(ipld.get(link.Hash));\n\n          case 17:\n            node = _context.sent;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 20;\n            _iterator = _asyncIterator(listDirectory(node, path, resolve, depth, ipld, options));\n\n          case 22:\n            _context.next = 24;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 24:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 28;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 28:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 36;\n              break;\n            }\n\n            file = _value;\n            _context.next = 33;\n            return file;\n\n          case 33:\n            _iteratorNormalCompletion = true;\n            _context.next = 22;\n            break;\n\n          case 36:\n            _context.next = 42;\n            break;\n\n          case 38:\n            _context.prev = 38;\n            _context.t0 = _context[\"catch\"](20);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 42:\n            _context.prev = 42;\n            _context.prev = 43;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 47;\n              break;\n            }\n\n            _context.next = 47;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 47:\n            _context.prev = 47;\n\n            if (!_didIteratorError) {\n              _context.next = 50;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 50:\n            return _context.finish(47);\n\n          case 51:\n            return _context.finish(42);\n\n          case 52:\n            _context.next = 4;\n            break;\n\n          case 54:\n            _context.next = 59;\n            break;\n\n          case 56:\n            _context.prev = 56;\n            _context.t1 = _context[\"catch\"](2);\n\n            _iterator2.e(_context.t1);\n\n          case 59:\n            _context.prev = 59;\n\n            _iterator2.f();\n\n            return _context.finish(59);\n\n          case 62:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 56, 59, 62], [20, 38, 42, 52], [43,, 47, 51]]);\n  }));\n  return _listDirectory.apply(this, arguments);\n}\n\nmodule.exports = hamtShardedDirectoryContent;","map":null,"metadata":{},"sourceType":"script"}