{"ast":null,"code":"import { _ as _slicedToArray } from './slicedToArray-ad07b557.js';\nimport './unsupportedIterableToArray-aef68344.js';\nimport { _ as _toConsumableArray } from './toConsumableArray-07f01111.js';\nimport { J as JSBI, d as divideRoundBigInt } from './math-e6d0e93a.js';\nimport { NO_BREAK_SPACE } from './characters.js';\n/**\n * Formats an integer based on a limited range.\n *\n * Example:\n *   formatIntegerRange(234, 0, 99, '+') === \"99+\"\n *\n * @param {number} value     The number to format.\n * @param {number} min       Range minimum.\n * @param {number} max       Range maximum.\n * @param {number} maxSuffix Suffix to add if the value exceeds the max.\n */\n\nfunction formatIntegerRange() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 99;\n  var maxSuffix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  value = parseInt(value, 10);\n\n  if (value <= min) {\n    return \"\".concat(parseInt(min, 10));\n  }\n\n  if (value > max) {\n    return \"\".concat(parseInt(max, 10)).concat(maxSuffix);\n  }\n\n  return String(value);\n}\n/**\n * Formats a number for display purposes.\n *\n * This function is not using Intl.NumberFormat() to be compatible with big\n * integers expressed as string, or BigInt-like objects.\n *\n * @param {BigInt|string|number} number Number to convert\n * @returns {string}\n */\n\n\nfunction formatNumber(number) {\n  var numAsString = String(number);\n\n  var _numAsString$split = numAsString.split('.'),\n      _numAsString$split2 = _slicedToArray(_numAsString$split, 2),\n      integer = _numAsString$split2[0],\n      decimals = _numAsString$split2[1];\n\n  return _toConsumableArray(integer).reverse().reduce(function (result, digit, index) {\n    return digit + (index > 0 && index % 3 === 0 ? ',' : '') + result;\n  }, decimals ? \".\".concat(decimals) : '');\n}\n/**\n * Formats a token amount for display purposes.\n *\n * @param {BigInt|string|number} amount              Number to round\n * @param {BigInt|string|number} decimals            Decimal placement for amount\n * @param {BigInt|string|number} digits              Rounds the number to a given decimal place\n * @param {boolean}              options.displaySign Decides if the sign should be displayed\n * @param {string}               options.symbol      Symbol for the token amount\n * @returns {string}\n */\n\n\nfunction formatTokenAmount(amount, decimals) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$digits = _ref.digits,\n      digits = _ref$digits === void 0 ? 2 : _ref$digits,\n      _ref$symbol = _ref.symbol,\n      symbol = _ref$symbol === void 0 ? '' : _ref$symbol,\n      _ref$displaySign = _ref.displaySign,\n      displaySign = _ref$displaySign === void 0 ? false : _ref$displaySign;\n\n  amount = JSBI.BigInt(String(amount));\n  decimals = JSBI.BigInt(String(decimals));\n  digits = JSBI.BigInt(String(digits));\n\n  var _0 = JSBI.BigInt(0);\n\n  var _10 = JSBI.BigInt(10);\n\n  if (JSBI.lessThan(decimals, _0)) {\n    throw new Error('formatTokenAmount(): decimals cannot be negative');\n  }\n\n  if (JSBI.lessThan(digits, _0)) {\n    throw new Error('formatTokenAmount(): digits cannot be negative');\n  }\n\n  if (JSBI.lessThan(decimals, digits)) {\n    digits = decimals;\n  }\n\n  var negative = JSBI.lessThan(amount, _0);\n\n  if (negative) {\n    amount = JSBI.unaryMinus(amount);\n  }\n\n  var amountConverted = JSBI.equal(decimals, _0) ? amount : JSBI.BigInt(divideRoundBigInt(amount, JSBI.exponentiate(_10, JSBI.subtract(decimals, digits))));\n  var leftPart = formatNumber(JSBI.divide(amountConverted, JSBI.exponentiate(_10, digits)));\n  var rightPart = String(JSBI.remainder(amountConverted, JSBI.exponentiate(_10, digits))).padStart(digits, '0').replace(/0+$/, '');\n  return [displaySign ? negative ? '-' : '+' : '', leftPart, rightPart ? \".\".concat(rightPart) : '', symbol ? \"\".concat(NO_BREAK_SPACE).concat(symbol) : ''].join('');\n}\n\nexport { formatIntegerRange, formatNumber, formatTokenAmount };","map":null,"metadata":{},"sourceType":"module"}