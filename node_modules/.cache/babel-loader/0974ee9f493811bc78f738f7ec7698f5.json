{"ast":null,"code":"'use strict';\n\nmodule.exports = function (iterable, mapper, opts) {\n  return new Promise(function (resolve, reject) {\n    opts = Object.assign({\n      concurrency: Infinity\n    }, opts);\n    var concurrency = opts.concurrency;\n\n    if (concurrency < 1) {\n      throw new TypeError('Expected `concurrency` to be a number from 1 and up');\n    }\n\n    var ret = [];\n    var iterator = iterable[Symbol.iterator]();\n    var isRejected = false;\n    var iterableDone = false;\n    var resolvingCount = 0;\n    var currentIdx = 0;\n\n    var next = function next() {\n      if (isRejected) {\n        return;\n      }\n\n      var nextItem = iterator.next();\n      var i = currentIdx;\n      currentIdx++;\n\n      if (nextItem.done) {\n        iterableDone = true;\n\n        if (resolvingCount === 0) {\n          resolve(ret);\n        }\n\n        return;\n      }\n\n      resolvingCount++;\n      Promise.resolve(nextItem.value).then(function (el) {\n        return mapper(el, i);\n      }).then(function (val) {\n        ret[i] = val;\n        resolvingCount--;\n        next();\n      }, function (err) {\n        isRejected = true;\n        reject(err);\n      });\n    };\n\n    for (var i = 0; i < concurrency; i++) {\n      next();\n\n      if (iterableDone) {\n        break;\n      }\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}