{"ast":null,"code":"import { _ as _slicedToArray } from './slicedToArray-ad07b557.js';\nimport './unsupportedIterableToArray-aef68344.js';\nimport './_commonjsHelpers-97e6d7b1.js';\nimport { d as dayjs } from './dayjs.min-e57fb69a.js';\nvar UNITS = [['years', 'year'], ['months', 'month'], ['days', 'day'], ['hours', 'hour'], ['minutes', 'minute'], ['seconds', 'second']];\nvar DEFAULT_UNITS = ['years', 'months', 'days', 'hours', 'minutes', 'seconds']; // Return the difference between two dates, per unit.\n// Set `units` to get specific units only, e.g. ['minutes', 'seconds']\n// If `units` is not set, all the units are enabled.\n\nvar difference = function difference(date1, date2) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var units = options.units || DEFAULT_UNITS;\n  var maxUnits = options.maxUnits || -1;\n  var keepLeadingZeros = maxUnits === -1 && options.keepLeadingZeros || false;\n  var start = date2 > date1 ? date1 : date2;\n\n  var getRightMostUnitIndex = function getRightMostUnitIndex() {\n    return [].concat(UNITS).reverse().find(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n          unit = _ref2[0];\n\n      return units.includes(unit);\n    })[0];\n  };\n\n  return UNITS.reduce(function (result, _ref3, index) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        name = _ref4[0],\n        unitName = _ref4[1];\n\n    result[name] = null; // fill the current unit, subtract the difference from the remaining\n\n    if ((maxUnits === -1 || result.remainingUnits > 0) && units.includes(name)) {\n      result[name] = result.remaining.diff(start, unitName);\n      result.remaining = result.remaining.subtract(result[name], unitName);\n    } // remove leading zeros\n\n\n    if (!keepLeadingZeros && !result.seenNonZero) {\n      if (result[name] === 0) {\n        result[name] = null;\n      } else {\n        result.seenNonZero = true;\n      }\n    } // enforce the maxUnits option\n\n\n    if (result.remainingUnits > 0 && result.seenNonZero) {\n      result.remainingUnits -= 1;\n    } // last iteration\n\n\n    if (index === UNITS.length - 1) {\n      delete result.remaining;\n      delete result.remainingUnits;\n      delete result.seenNonZero; // include at least one 0\n\n      if (Object.values(result).every(function (val) {\n        return val === null;\n      })) {\n        result[getRightMostUnitIndex()] = 0;\n      }\n    }\n\n    return result;\n  }, {\n    remaining: dayjs(start === date1 ? date2 : date1),\n    remainingUnits: maxUnits,\n    seenNonZero: false\n  });\n};\n\nvar eachDayOfInterval = function eachDayOfInterval() {\n  var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      start = _ref5.start,\n      end = _ref5.end;\n\n  var startDate = dayjs(start);\n  var endDate = dayjs(end);\n\n  if (!startDate.isValid()) {\n    throw new Error('Start date of interval is invalid');\n  }\n\n  if (!endDate.isValid()) {\n    throw new Error('End date of interval is invalid');\n  }\n\n  startDate = startDate.startOf('day');\n  endDate = endDate.startOf('day');\n\n  if (startDate.isAfter(endDate)) {\n    throw new Error('Start date of interval is after end date');\n  }\n\n  var interval = [];\n\n  while (!startDate.isAfter(endDate)) {\n    interval.push(startDate.toDate());\n    startDate = startDate.add(1, 'day');\n  }\n\n  return interval;\n};\n\nvar formatHtmlDatetime = function formatHtmlDatetime(date) {\n  return dayjs(date).toISOString();\n};\n\nexport { difference, eachDayOfInterval, formatHtmlDatetime };","map":null,"metadata":{},"sourceType":"module"}