{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar pipe = require('it-pipe');\n\nvar lp = require('it-length-prefixed');\n\nvar PeerInfo = require('peer-info');\n\nvar Message = require('../message');\n\nvar handlers = require('./handlers');\n\nvar utils = require('../utils');\n\nmodule.exports = function (dht) {\n  var log = utils.logger(dht.peerInfo.id, 'rpc');\n  var getMessageHandler = handlers(dht);\n  /**\n   * Process incoming DHT messages.\n   * @param {PeerInfo} peer\n   * @param {Message} msg\n   * @returns {Promise<Message>}\n   *\n   * @private\n   */\n\n  function handleMessage(_x, _x2) {\n    return _handleMessage.apply(this, arguments);\n  }\n  /**\n   * Handle incoming streams on the dht protocol.\n   * @param {Object} props\n   * @param {DuplexStream} props.stream\n   * @param {Connection} props.connection connection\n   * @returns {Promise<void>}\n   */\n\n\n  function _handleMessage() {\n    _handleMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(peer, msg) {\n      var handler;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // get handler & execute it\n              handler = getMessageHandler(msg.type);\n              _context3.prev = 1;\n              _context3.next = 4;\n              return dht._add(peer);\n\n            case 4:\n              _context3.next = 9;\n              break;\n\n            case 6:\n              _context3.prev = 6;\n              _context3.t0 = _context3[\"catch\"](1);\n              log.error('Failed to update the kbucket store', _context3.t0);\n\n            case 9:\n              if (handler) {\n                _context3.next = 12;\n                break;\n              }\n\n              log.error(\"no handler found for message type: \".concat(msg.type));\n              return _context3.abrupt(\"return\");\n\n            case 12:\n              return _context3.abrupt(\"return\", handler(peer, msg));\n\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[1, 6]]);\n    }));\n    return _handleMessage.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/function () {\n    var _onIncomingStream = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2) {\n      var stream, connection, peerInfo, idB58Str;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              stream = _ref2.stream, connection = _ref2.connection;\n              _context2.next = 3;\n              return PeerInfo.create(connection.remotePeer);\n\n            case 3:\n              peerInfo = _context2.sent;\n              _context2.prev = 4;\n              _context2.next = 7;\n              return dht._add(peerInfo);\n\n            case 7:\n              _context2.next = 12;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](4);\n              log.error(_context2.t0);\n\n            case 12:\n              idB58Str = peerInfo.id.toB58String();\n              log('from: %s', idB58Str);\n              _context2.next = 16;\n              return pipe(stream.source, lp.decode(), function (source) {\n                return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, msg, desMessage, res;\n\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _iteratorNormalCompletion = true;\n                          _didIteratorError = false;\n                          _context.prev = 2;\n                          _iterator = _asyncIterator(source);\n\n                        case 4:\n                          _context.next = 6;\n                          return _awaitAsyncGenerator(_iterator.next());\n\n                        case 6:\n                          _step = _context.sent;\n                          _iteratorNormalCompletion = _step.done;\n                          _context.next = 10;\n                          return _awaitAsyncGenerator(_step.value);\n\n                        case 10:\n                          _value = _context.sent;\n\n                          if (_iteratorNormalCompletion) {\n                            _context.next = 23;\n                            break;\n                          }\n\n                          msg = _value;\n                          // handle the message\n                          desMessage = Message.deserialize(msg.slice());\n                          _context.next = 16;\n                          return _awaitAsyncGenerator(handleMessage(peerInfo, desMessage));\n\n                        case 16:\n                          res = _context.sent;\n\n                          if (!res) {\n                            _context.next = 20;\n                            break;\n                          }\n\n                          _context.next = 20;\n                          return res.serialize();\n\n                        case 20:\n                          _iteratorNormalCompletion = true;\n                          _context.next = 4;\n                          break;\n\n                        case 23:\n                          _context.next = 29;\n                          break;\n\n                        case 25:\n                          _context.prev = 25;\n                          _context.t0 = _context[\"catch\"](2);\n                          _didIteratorError = true;\n                          _iteratorError = _context.t0;\n\n                        case 29:\n                          _context.prev = 29;\n                          _context.prev = 30;\n\n                          if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                            _context.next = 34;\n                            break;\n                          }\n\n                          _context.next = 34;\n                          return _awaitAsyncGenerator(_iterator.return());\n\n                        case 34:\n                          _context.prev = 34;\n\n                          if (!_didIteratorError) {\n                            _context.next = 37;\n                            break;\n                          }\n\n                          throw _iteratorError;\n\n                        case 37:\n                          return _context.finish(34);\n\n                        case 38:\n                          return _context.finish(29);\n\n                        case 39:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, null, [[2, 25, 29, 39], [30,, 34, 38]]);\n                }))();\n              }, lp.encode(), stream.sink);\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[4, 9]]);\n    }));\n\n    function onIncomingStream(_x3) {\n      return _onIncomingStream.apply(this, arguments);\n    }\n\n    return onIncomingStream;\n  }();\n};","map":null,"metadata":{},"sourceType":"script"}