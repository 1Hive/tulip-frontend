{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('ipfs-repo'),\n    repoVersion = _require.repoVersion;\n\nvar _require2 = require('../../utils'),\n    withTimeoutOption = _require2.withTimeoutOption;\n\nmodule.exports = function (_ref) {\n  var repo = _ref.repo;\n\n  /**\n   * If the repo has been initialized, report the current version.\n   * Otherwise report the version that would be initialized.\n   *\n   * @returns {number}\n   */\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _version = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {\n      var match;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return repo._checkInitialized(options);\n\n            case 3:\n              _context.next = 11;\n              break;\n\n            case 5:\n              _context.prev = 5;\n              _context.t0 = _context[\"catch\"](0);\n              // TODO: (dryajov) This is really hacky, there must be a better way\n              match = [/Key not found in database \\[\\/version\\]/, /ENOENT/, /repo is not initialized yet/].some(function (m) {\n                return m.test(_context.t0.message);\n              });\n\n              if (!match) {\n                _context.next = 10;\n                break;\n              }\n\n              return _context.abrupt(\"return\", repoVersion);\n\n            case 10:\n              throw _context.t0;\n\n            case 11:\n              return _context.abrupt(\"return\", repo.version.get(options));\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 5]]);\n    }));\n\n    function version(_x) {\n      return _version.apply(this, arguments);\n    }\n\n    return version;\n  }());\n};","map":null,"metadata":{},"sourceType":"script"}