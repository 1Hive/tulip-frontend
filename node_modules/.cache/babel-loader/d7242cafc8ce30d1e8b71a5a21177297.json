{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar dagPB = require('ipld-dag-pb');\n\nvar DAGNode = dagPB.DAGNode;\n\nvar multicodec = require('multicodec');\n\nvar Unixfs = require('ipfs-unixfs');\n\nvar _require = require('../../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nvar _require2 = require('buffer'),\n    Buffer = _require2.Buffer;\n\nmodule.exports = function (_ref) {\n  var ipld = _ref.ipld,\n      preload = _ref.preload;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _new2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(template, options) {\n      var data, node, cid;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = options || {}; // allow options in the template position\n\n              if (template && typeof template !== 'string') {\n                options = template;\n                template = null;\n              }\n\n              if (!template) {\n                _context.next = 10;\n                break;\n              }\n\n              if (!(template === 'unixfs-dir')) {\n                _context.next = 7;\n                break;\n              }\n\n              data = new Unixfs('directory').marshal();\n              _context.next = 8;\n              break;\n\n            case 7:\n              throw new Error('unknown template');\n\n            case 8:\n              _context.next = 11;\n              break;\n\n            case 10:\n              data = Buffer.alloc(0);\n\n            case 11:\n              node = new DAGNode(data);\n              _context.next = 14;\n              return ipld.put(node, multicodec.DAG_PB, {\n                cidVersion: 0,\n                hashAlg: multicodec.SHA2_256\n              });\n\n            case 14:\n              cid = _context.sent;\n\n              if (options.preload !== false) {\n                preload(cid);\n              }\n\n              return _context.abrupt(\"return\", cid);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function _new(_x, _x2) {\n      return _new2.apply(this, arguments);\n    }\n\n    return _new;\n  }());\n};","map":null,"metadata":{},"sourceType":"script"}