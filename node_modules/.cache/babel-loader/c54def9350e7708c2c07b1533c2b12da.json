{"ast":null,"code":"'use strict';\n\nconst mh = require('multihashes');\n\nconst utils = require('../utils');\n\nconst Run = require('./run');\n/**\n * Divide peers up into disjoint paths (subqueries). Any peer can only be used once over all paths.\n * Within each path, query peers from closest to farthest away.\n */\n\n\nclass Query {\n  /**\n   * User-supplied function to set up an individual disjoint path. Per-path\n   * query state should be held in this function's closure.\n   * @typedef {makePath} function\n   * @param {number} pathNum - Numeric index from zero to numPaths - 1\n   * @returns {queryFunc} - Function to call on each peer in the query\n   */\n\n  /**\n   * Query function.\n   * @typedef {queryFunc} function\n   * @param {PeerId} next - Peer to query\n   * @param {function(Error, Object)} callback - Query result callback\n   */\n\n  /**\n   * Create a new query. The makePath function is called once per disjoint path, so that per-path\n   * variables can be created in that scope. makePath then returns the actual query function (queryFunc) to\n   * use when on that path.\n   *\n   * @param {DHT} dht - DHT instance\n   * @param {Buffer} key\n   * @param {makePath} makePath - Called to set up each disjoint path. Must return the query function.\n   */\n  constructor(dht, key, makePath) {\n    this.dht = dht;\n    this.key = key;\n    this.makePath = makePath;\n    this._log = utils.logger(this.dht.peerInfo.id, 'query:' + mh.toB58String(key));\n    this.running = false;\n    this._onStart = this._onStart.bind(this);\n    this._onComplete = this._onComplete.bind(this);\n  }\n  /**\n   * Run this query, start with the given list of peers first.\n   *\n   * @param {Array<PeerId>} peers\n   * @returns {Promise}\n   */\n\n\n  async run(peers) {\n    // eslint-disable-line require-await\n    if (!this.dht._queryManager.running) {\n      this._log.error('Attempt to run query after shutdown');\n\n      return {\n        finalSet: new Set(),\n        paths: []\n      };\n    }\n\n    if (peers.length === 0) {\n      this._log.error('Running query with no peers');\n\n      return {\n        finalSet: new Set(),\n        paths: []\n      };\n    }\n\n    this._run = new Run(this);\n\n    this._log(`query running with K=${this.dht.kBucketSize}, A=${this.dht.concurrency}, D=${Math.min(this.dht.disjointPaths, peers.length)}`);\n\n    this._run.once('start', this._onStart);\n\n    this._run.once('complete', this._onComplete);\n\n    return this._run.execute(peers);\n  }\n  /**\n   * Called when the run starts.\n   */\n\n\n  _onStart() {\n    this.running = true;\n    this._startTime = Date.now();\n\n    this._log('query:start'); // Register this query so we can stop it if the DHT stops\n\n\n    this.dht._queryManager.queryStarted(this);\n  }\n  /**\n   * Called when the run completes (even if there's an error).\n   */\n\n\n  _onComplete() {\n    // Ensure worker queues for all paths are stopped at the end of the query\n    this.stop();\n  }\n  /**\n   * Stop the query.\n   */\n\n\n  stop() {\n    this._log(`query:done in ${Date.now() - this._startTime}ms`);\n\n    if (this._run) {\n      this._log(`${this._run.errors.length} of ${this._run.peersSeen.size} peers errored (${this._run.errors.length / this._run.peersSeen.size * 100}% fail rate)`);\n    }\n\n    if (!this.running) {\n      return;\n    }\n\n    this._run.removeListener('start', this._onStart);\n\n    this._run.removeListener('complete', this._onComplete);\n\n    this.running = false;\n    this._run && this._run.stop();\n\n    this.dht._queryManager.queryCompleted(this);\n  }\n\n}\n\nmodule.exports = Query;","map":null,"metadata":{},"sourceType":"script"}