{"ast":null,"code":"'use strict';\n\nconst dagPB = require('ipld-dag-pb');\n\nconst DAGLink = dagPB.DAGLink;\n\nconst CID = require('cids');\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n\nfunction findLinks(node, links = []) {\n  for (const key in node) {\n    const val = node[key];\n\n    if (key === '/' && Object.keys(node).length === 1) {\n      try {\n        links.push(new DAGLink('', 0, new CID(val)));\n        continue;\n      } catch (_) {// not a CID\n      }\n    }\n\n    if (CID.isCID(val)) {\n      links.push(new DAGLink('', 0, val));\n      continue;\n    }\n\n    if (Array.isArray(val)) {\n      findLinks(val, links);\n    }\n\n    if (val && typeof val === 'object') {\n      findLinks(val, links);\n    }\n  }\n\n  return links;\n}\n\nmodule.exports = ({\n  dag\n}) => {\n  return withTimeoutOption(async function links(multihash, options) {\n    options = options || {};\n    const cid = new CID(multihash);\n    const result = await dag.get(cid, options);\n\n    if (cid.codec === 'raw') {\n      return [];\n    }\n\n    if (cid.codec === 'dag-pb') {\n      return result.value.Links;\n    }\n\n    if (cid.codec === 'dag-cbor') {\n      return findLinks(result);\n    }\n\n    throw new Error(`Cannot resolve links from codec ${cid.codec}`);\n  });\n};","map":null,"metadata":{},"sourceType":"script"}