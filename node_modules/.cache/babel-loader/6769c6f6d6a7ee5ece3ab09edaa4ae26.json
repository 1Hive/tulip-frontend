{"ast":null,"code":"'use strict';\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar multihash = require('multihashes');\n\nvar multibase = require('multibase');\n\nvar Multiaddr = require('multiaddr');\n\nvar mafmt = require('mafmt');\n\nvar CID = require('cids');\n\nvar _require2 = require('iso-url'),\n    URL = _require2.URL;\n\nvar pathGatewayPattern = /^https?:\\/\\/[^/]+\\/(ip[fn]s)\\/([^/?#]+)/;\nvar pathPattern = /^\\/(ip[fn]s)\\/([^/?#]+)/;\nvar defaultProtocolMatch = 1;\nvar defaultHashMath = 2; // CID, libp2p-key or DNSLink\n\nvar subdomainGatewayPattern = /^https?:\\/\\/([^/]+)\\.(ip[fn]s)\\.[^/?]+/;\nvar subdomainIdMatch = 1;\nvar subdomainProtocolMatch = 2; // Fully qualified domain name (FQDN) that has an explicit .tld suffix\n\nvar fqdnWithTld = /^(([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])\\.)+([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])$/;\n\nfunction isMultihash(hash) {\n  var formatted = convertToString(hash);\n\n  try {\n    multihash.decode(multibase.decode('z' + formatted));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isMultibase(hash) {\n  try {\n    return multibase.isEncoded(hash);\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isCID(hash) {\n  try {\n    new CID(hash); // eslint-disable-line no-new\n\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isMultiaddr(input) {\n  if (!input) return false;\n  if (Multiaddr.isMultiaddr(input)) return true;\n\n  try {\n    new Multiaddr(input); // eslint-disable-line no-new\n\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isPeerMultiaddr(input) {\n  return isMultiaddr(input) && mafmt.IPFS.matches(input);\n}\n\nfunction isIpfs(input, pattern) {\n  var protocolMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultProtocolMatch;\n  var hashMatch = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultHashMath;\n  var formatted = convertToString(input);\n\n  if (!formatted) {\n    return false;\n  }\n\n  var match = formatted.match(pattern);\n\n  if (!match) {\n    return false;\n  }\n\n  if (match[protocolMatch] !== 'ipfs') {\n    return false;\n  }\n\n  var hash = match[hashMatch];\n\n  if (hash && pattern === subdomainGatewayPattern) {\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    hash = hash.toLowerCase();\n  }\n\n  return isCID(hash);\n}\n\nfunction isIpns(input, pattern) {\n  var protocolMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultProtocolMatch;\n  var hashMatch = arguments.length > 3 ? arguments[3] : undefined;\n  var formatted = convertToString(input);\n\n  if (!formatted) {\n    return false;\n  }\n\n  var match = formatted.match(pattern);\n\n  if (!match) {\n    return false;\n  }\n\n  if (match[protocolMatch] !== 'ipns') {\n    return false;\n  }\n\n  var ipnsId = match[hashMatch];\n\n  if (ipnsId && pattern === subdomainGatewayPattern) {\n    // when doing checks for subdomain context\n    // ensure ipnsId is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    ipnsId = ipnsId.toLowerCase(); // Check if it is cidv1\n\n    if (isCID(ipnsId)) return true; // Check if it looks like FQDN\n\n    try {\n      // URL implementation in web browsers forces lowercase of the hostname\n      var _URL = new URL(\"http://\".concat(ipnsId)),\n          hostname = _URL.hostname; // eslint-disable-line no-new\n      // Check if potential FQDN has an explicit TLD\n\n\n      return fqdnWithTld.test(hostname);\n    } catch (e) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isString(input) {\n  return typeof input === 'string';\n}\n\nfunction convertToString(input) {\n  if (Buffer.isBuffer(input)) {\n    return multibase.encode('base58btc', input).toString().slice(1);\n  }\n\n  if (isString(input)) {\n    return input;\n  }\n\n  return false;\n}\n\nvar ipfsSubdomain = function ipfsSubdomain(url) {\n  return isIpfs(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch);\n};\n\nvar ipnsSubdomain = function ipnsSubdomain(url) {\n  return isIpns(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch);\n};\n\nvar subdomain = function subdomain(url) {\n  return ipfsSubdomain(url) || ipnsSubdomain(url);\n};\n\nvar ipfsUrl = function ipfsUrl(url) {\n  return isIpfs(url, pathGatewayPattern) || ipfsSubdomain(url);\n};\n\nvar ipnsUrl = function ipnsUrl(url) {\n  return isIpns(url, pathGatewayPattern) || ipnsSubdomain(url);\n};\n\nvar url = function url(_url) {\n  return ipfsUrl(_url) || ipnsUrl(_url) || subdomain(_url);\n};\n\nvar path = function path(_path) {\n  return isIpfs(_path, pathPattern) || isIpns(_path, pathPattern);\n};\n\nmodule.exports = {\n  multihash: isMultihash,\n  multiaddr: isMultiaddr,\n  peerMultiaddr: isPeerMultiaddr,\n  cid: isCID,\n  base32cid: function base32cid(cid) {\n    return isMultibase(cid) === 'base32' && isCID(cid);\n  },\n  ipfsSubdomain: ipfsSubdomain,\n  ipnsSubdomain: ipnsSubdomain,\n  subdomain: subdomain,\n  subdomainGatewayPattern: subdomainGatewayPattern,\n  ipfsUrl: ipfsUrl,\n  ipnsUrl: ipnsUrl,\n  url: url,\n  pathGatewayPattern: pathGatewayPattern,\n  ipfsPath: function ipfsPath(path) {\n    return isIpfs(path, pathPattern);\n  },\n  ipnsPath: function ipnsPath(path) {\n    return isIpns(path, pathPattern);\n  },\n  path: path,\n  pathPattern: pathPattern,\n  urlOrPath: function urlOrPath(x) {\n    return url(x) || path(x);\n  },\n  cidPath: function cidPath(path) {\n    return isString(path) && !isCID(path) && isIpfs(\"/ipfs/\".concat(path), pathPattern);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}