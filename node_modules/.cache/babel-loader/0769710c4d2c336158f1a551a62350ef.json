{"ast":null,"code":"'use strict';\n\nconst isBuffer = require('is-buffer');\n\nconst Shake = require('it-handshake');\n\nconst lp = require('it-length-prefixed');\n\nmodule.exports = (duplex, opts = {}) => {\n  const shake = Shake(duplex);\n  const lpReader = lp.decode.fromReader(shake.reader, opts);\n  let isDone = false;\n  const W = {\n    read: async bytes => {\n      // just read\n      const {\n        value,\n        done\n      } = await shake.reader.next(bytes);\n\n      if (done && value.length < bytes) {\n        throw new Error('Couldn\\'t read enough bytes');\n      }\n\n      isDone = done;\n\n      if (!value) {\n        throw new Error('Value is null');\n      }\n\n      return value;\n    },\n    readLP: async () => {\n      // read, decode\n      const {\n        value,\n        done\n      } = await lpReader.next();\n      isDone = done;\n\n      if (!value) {\n        throw new Error('Value is null');\n      }\n\n      return value;\n    },\n    readPB: async proto => {\n      // readLP, decode\n      const value = await W.readLP();\n\n      if (!value) {\n        throw new Error('Value is null');\n      } // Is this a buffer?\n\n\n      const buf = isBuffer(value) ? value : value.slice();\n      return proto.decode(buf);\n    },\n    write: data => {\n      // just write\n      shake.writer.push(data);\n    },\n    writeLP: data => {\n      // encode, write\n      W.write(lp.encode.single(data, opts));\n    },\n    writePB: (data, proto) => {\n      // encode, writeLP\n      W.writeLP(proto.encode(data));\n    },\n    pb: proto => {\n      return {\n        read: () => W.readPB(proto),\n        write: d => W.writePB(d, proto)\n      };\n    },\n    unwrap: () => {\n      // returns vanilla duplex again, terminates all reads/writes from this object\n      shake.rest();\n      return shake.stream;\n    }\n  };\n  return W;\n};","map":null,"metadata":{},"sourceType":"script"}