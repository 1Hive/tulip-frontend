{"ast":null,"code":"var _objectSpread = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _taggedTemplateLiteral = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4;\n\nvar ws = require('isomorphic-ws');\n\nvar _require = require('subscriptions-transport-ws'),\n    SubscriptionClient = _require.SubscriptionClient;\n\nvar _require2 = require('graphql-request'),\n    request = _require2.request,\n    gql = _require2.gql;\n\nvar _require3 = require(\"date-fns\"),\n    subWeeks = _require3.subWeeks,\n    getUnixTime = _require3.getUnixTime,\n    fromUnixTime = _require3.fromUnixTime;\n\nvar _require4 = require('./../../constants'),\n    graphAPIEndpoints = _require4.graphAPIEndpoints,\n    graphWSEndpoints = _require4.graphWSEndpoints;\n\nvar _require5 = require('./../../utils'),\n    timestampToBlock = _require5.timestampToBlock,\n    timestampsToBlocks = _require5.timestampsToBlocks;\n\nmodule.exports = {\n  ethPrice: function ethPrice() {\n    var _arguments = arguments;\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _ref, _ref$block, block, _ref$timestamp, timestamp, result;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _ref = _arguments.length > 0 && _arguments[0] !== undefined ? _arguments[0] : {}, _ref$block = _ref.block, block = _ref$block === void 0 ? undefined : _ref$block, _ref$timestamp = _ref.timestamp, timestamp = _ref$timestamp === void 0 ? undefined : _ref$timestamp;\n\n              if (!block) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.t0 = block;\n              _context.next = 13;\n              break;\n\n            case 5:\n              if (!timestamp) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 8;\n              return timestampToBlock(timestamp);\n\n            case 8:\n              _context.t1 = _context.sent;\n              _context.next = 12;\n              break;\n\n            case 11:\n              _context.t1 = undefined;\n\n            case 12:\n              _context.t0 = _context.t1;\n\n            case 13:\n              block = _context.t0;\n              block = block ? \"block: { number: \".concat(block, \" }\") : \"\";\n              _context.next = 17;\n              return request(graphAPIEndpoints.exchange, gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"{\\n                    bundle(id: 1, \", \") {\\n                        \", \"\\n                    }\\n                }\"])), block, _ethPrice.properties.toString()));\n\n            case 17:\n              result = _context.sent;\n              return _context.abrupt(\"return\", _ethPrice.callback(result.bundle));\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  ethPriceHourly: function ethPriceHourly() {\n    var _arguments2 = arguments;\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _ref2, _ref2$minTimestamp, minTimestamp, _ref2$maxTimestamp, maxTimestamp, _ref2$minBlock, minBlock, _ref2$maxBlock, maxBlock, endTime, time, timestamps, blocks, query, result;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _ref2 = _arguments2.length > 0 && _arguments2[0] !== undefined ? _arguments2[0] : {}, _ref2$minTimestamp = _ref2.minTimestamp, minTimestamp = _ref2$minTimestamp === void 0 ? undefined : _ref2$minTimestamp, _ref2$maxTimestamp = _ref2.maxTimestamp, maxTimestamp = _ref2$maxTimestamp === void 0 ? undefined : _ref2$maxTimestamp, _ref2$minBlock = _ref2.minBlock, minBlock = _ref2$minBlock === void 0 ? undefined : _ref2$minBlock, _ref2$maxBlock = _ref2.maxBlock, maxBlock = _ref2$maxBlock === void 0 ? undefined : _ref2$maxBlock;\n              minTimestamp = minBlock ? blockToTimestamp(minBlock) : minTimestamp;\n              maxTimestamp = maxBlock ? blockToTimestamp(maxBlock) : maxTimestamp;\n              endTime = maxTimestamp ? fromUnixTime(maxTimestamp) : new Date();\n              time = minTimestamp ? minTimestamp : getUnixTime(subWeeks(endTime, 1)); // create an array of hour start times until we reach current hour\n\n              timestamps = [];\n\n              while (time <= getUnixTime(endTime) - 3600) {\n                timestamps.push(time);\n                time += 3600;\n              }\n\n              _context2.next = 9;\n              return timestampsToBlocks(timestamps);\n\n            case 9:\n              blocks = _context2.sent;\n              query = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{\\n                \", \"\\n            }\"])), blocks.map(function (block, i) {\n                return gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n                    timestamp\", \": bundle(id: 1, block: {number: \", \"}) {\\n                        \", \"\\n                }\"])), timestamps[i], block, _ethPrice.properties.toString());\n              }));\n              _context2.next = 13;\n              return request(graphAPIEndpoints.exchange, query);\n\n            case 13:\n              result = _context2.sent;\n              result = Object.keys(result).map(function (key) {\n                return _objectSpread(_objectSpread({}, result[key]), {}, {\n                  timestamp: key.split(\"timestamp\")[1]\n                });\n              }).sort(function (a, b) {\n                return Number(a.timestamp) - b.timestamp;\n              });\n              return _context2.abrupt(\"return\", _ethPrice.callbackHourly(result));\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n  observeEthPrice: function observeEthPrice() {\n    var query = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n            subscription {\\n                bundle(id: 1) {\\n                    \", \"\\n                }\\n        }\"])), _ethPrice.properties.toString());\n    var client = new SubscriptionClient(graphWSEndpoints.exchange, {\n      reconnect: true\n    }, ws);\n    var observable = client.request({\n      query: query\n    });\n    return {\n      subscribe: function subscribe(_ref3) {\n        var _next = _ref3.next,\n            error = _ref3.error,\n            complete = _ref3.complete;\n        return observable.subscribe({\n          next: function next(results) {\n            _next(_ethPrice.callback(results.data.bundle));\n          },\n          error: error,\n          complete: complete\n        });\n      }\n    };\n  }\n};\nvar _ethPrice = {\n  properties: ['ethPrice'],\n  callback: function callback(results) {\n    return Number(results.ethPrice);\n  },\n  callbackHourly: function callbackHourly(results) {\n    return results.map(function (result) {\n      return {\n        timestamp: Number(result.timestamp),\n        priceUSD: Number(result.ethPrice)\n      };\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"script"}