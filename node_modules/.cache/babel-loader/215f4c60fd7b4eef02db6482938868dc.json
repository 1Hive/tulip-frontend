{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar withIs = require('class-is');\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar sortLinks = require('./sortLinks');\n\nvar DAGLink = require('../dag-link/dagLink');\n\nvar _require2 = require('../serialize.js'),\n    serializeDAGNode = _require2.serializeDAGNode;\n\nvar _toDAGLink = require('./toDagLink');\n\nvar _addLink = require('./addLink');\n\nvar _rmLink = require('./rmLink');\n\nvar DAGNode = /*#__PURE__*/function () {\n  function DAGNode(data) {\n    var links = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var serializedSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    _classCallCheck(this, DAGNode);\n\n    if (!data) {\n      data = Buffer.alloc(0);\n    }\n\n    if (typeof data === 'string') {\n      data = Buffer.from(data);\n    }\n\n    if (!Buffer.isBuffer(data)) {\n      throw new Error('Passed \\'data\\' is not a buffer or a string!');\n    }\n\n    if (serializedSize !== null && typeof serializedSize !== 'number') {\n      throw new Error('Passed \\'serializedSize\\' must be a number!');\n    }\n\n    links = links.map(function (link) {\n      return DAGLink.isDAGLink(link) ? link : DAGLink.util.createDagLinkFromB58EncodedHash(link);\n    });\n    links = sortLinks(links);\n    this._data = data;\n    this._links = links;\n    this._serializedSize = serializedSize;\n    this._size = null;\n  }\n\n  _createClass(DAGNode, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      if (!this._json) {\n        this._json = Object.freeze({\n          data: this.Data,\n          links: this._links.map(function (l) {\n            return l.toJSON();\n          }),\n          size: this.size\n        });\n      }\n\n      return Object.assign({}, this._json);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"DAGNode <data: \\\"\".concat(this.Data.toString('base64'), \"\\\", links: \").concat(this.Links.length, \", size: \").concat(this.size, \">\");\n    }\n  }, {\n    key: \"_invalidateCached\",\n    value: function _invalidateCached() {\n      this._serializedSize = null;\n      this._size = null;\n    }\n  }, {\n    key: \"addLink\",\n    value: function addLink(link) {\n      this._invalidateCached();\n\n      return _addLink(this, link);\n    }\n  }, {\n    key: \"rmLink\",\n    value: function rmLink(link) {\n      this._invalidateCached();\n\n      return _rmLink(this, link);\n    } // @returns {Promise.<DAGLink>}\n\n  }, {\n    key: \"toDAGLink\",\n    value: function toDAGLink(options) {\n      return _toDAGLink(this, options);\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      return serializeDAGNode({\n        Data: this._data,\n        Links: this._links\n      });\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      if (this._size === null) {\n        if (this._serializedSize === null) {\n          this._serializedSize = this.serialize().length;\n        }\n\n        this._size = this._links.reduce(function (sum, l) {\n          return sum + l.Tsize;\n        }, this._serializedSize);\n      }\n\n      return this._size;\n    },\n    set: function set(size) {\n      throw new Error(\"Can't set property: 'size' is immutable\");\n    } // Getters for backwards compatible path resolving\n\n  }, {\n    key: \"Data\",\n    get: function get() {\n      return this._data;\n    },\n    set: function set(_) {\n      throw new Error(\"Can't set property: 'Data' is immutable\");\n    }\n  }, {\n    key: \"Links\",\n    get: function get() {\n      return this._links.map(function (link) {\n        return {\n          Name: link.Name,\n          Tsize: link.Tsize,\n          Hash: link.Hash\n        };\n      });\n    },\n    set: function set(_) {\n      throw new Error(\"Can't set property: 'Links' is immutable\");\n    }\n  }]);\n\n  return DAGNode;\n}();\n\nexports = module.exports = withIs(DAGNode, {\n  className: 'DAGNode',\n  symbolName: '@ipld/js-ipld-dag-pb/dagnode'\n});","map":null,"metadata":{},"sourceType":"script"}