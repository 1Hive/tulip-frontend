{"ast":null,"code":"'use strict';\n\nconst crypto = require('libp2p-crypto');\n\nconst Buffer = require('safe-buffer/').Buffer;\n\nmodule.exports = {\n  verify: async (signature, publicKey, data) => {\n    if (!signature) {\n      throw new Error('No signature given');\n    }\n\n    if (!publicKey) {\n      throw new Error('Given publicKey was undefined');\n    }\n\n    if (!data) {\n      throw new Error('Given input data was undefined');\n    }\n\n    if (!Buffer.isBuffer(data)) {\n      data = Buffer.from(data);\n    }\n\n    const isValid = (key, msg, sig) => new Promise((resolve, reject) => {\n      key.verify(msg, sig, (err, valid) => {\n        if (!err) {\n          resolve(valid);\n        }\n\n        reject(valid);\n      });\n    });\n\n    let res = false;\n\n    try {\n      const pubKey = crypto.keys.supportedKeys.secp256k1.unmarshalSecp256k1PublicKey(Buffer.from(publicKey, 'hex'));\n      res = await isValid(pubKey, data, Buffer.from(signature, 'hex'));\n    } catch (e) {// Catch error: sig length wrong\n    }\n\n    return Promise.resolve(res);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}