{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar UnixFS = require('ipfs-unixfs');\n\nvar _require = require('ipld-dag-pb'),\n    DAGNode = _require.DAGNode;\n\nvar mc = require('multicodec');\n\nvar mh = require('multihashes');\n\nvar createNode = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context, type, options) {\n    var hashAlg, metadata, node, cid;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            hashAlg = mh.names[options.hashAlg];\n            metadata = new UnixFS({\n              type: type,\n              mode: options.mode,\n              mtime: options.mtime\n            });\n            node = new DAGNode(metadata.marshal());\n            _context.next = 5;\n            return context.ipld.put(node, mc.DAG_PB, {\n              cidVersion: options.cidVersion,\n              hashAlg: hashAlg,\n              onlyHash: !options.flush\n            });\n\n          case 5:\n            cid = _context.sent;\n            return _context.abrupt(\"return\", {\n              cid: cid,\n              node: node\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function createNode(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = createNode;","map":null,"metadata":{},"sourceType":"script"}