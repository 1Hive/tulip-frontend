{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst errCode = require('err-code');\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst {\n  withTimeoutOption\n} = require('../../utils');\n\nfunction normalizeMultihash(multihash, enc) {\n  if (typeof multihash === 'string') {\n    if (enc === 'base58' || !enc) {\n      return multihash;\n    }\n\n    return Buffer.from(multihash, enc);\n  } else if (Buffer.isBuffer(multihash)) {\n    return multihash;\n  } else if (CID.isCID(multihash)) {\n    return multihash.buffer;\n  }\n\n  throw new Error('unsupported multihash');\n}\n\nmodule.exports = ({\n  ipld,\n  preload\n}) => {\n  return withTimeoutOption(async function get(multihash, options) {\n    // eslint-disable-line require-await\n    options = options || {};\n    let mh, cid;\n\n    try {\n      mh = normalizeMultihash(multihash, options.enc);\n    } catch (err) {\n      throw errCode(err, 'ERR_INVALID_MULTIHASH');\n    }\n\n    try {\n      cid = new CID(mh);\n    } catch (err) {\n      throw errCode(err, 'ERR_INVALID_CID');\n    }\n\n    if (options.cidVersion === 1) {\n      cid = cid.toV1();\n    }\n\n    if (options.preload !== false) {\n      preload(cid);\n    }\n\n    return ipld.get(cid, {\n      signal: options.signal\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}