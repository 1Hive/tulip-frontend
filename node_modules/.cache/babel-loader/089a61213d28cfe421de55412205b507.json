{"ast":null,"code":"import { keccak256, soliditySha3 } from '../lib/web3-utils';\nimport { bigNum } from '../lib/math-utils';\nexport const OUTCOMES = {\n  Missing: 0,\n  Leaked: 1,\n  Refused: 2,\n  Against: 3,\n  InFavor: 4\n};\nconst VALID_OUTCOMES = [OUTCOMES.Refused, OUTCOMES.Against, OUTCOMES.InFavor];\nexport const VOTE_OPTION_REFUSE = OUTCOMES.Refused;\nexport const VOTE_OPTION_AGAINST = OUTCOMES.Against;\nexport const VOTE_OPTION_IN_FAVOR = OUTCOMES.InFavor;\nexport const NOBODY_APPEALED = 'Nobody appealed';\nexport const NOBODY_CONFIRMED = 'No confirmation';\nconst voteOptionStringMapping = {\n  [VOTE_OPTION_REFUSE]: 'REFUSE TO VOTE',\n  [VOTE_OPTION_AGAINST]: 'BLOCK ACTION',\n  [VOTE_OPTION_IN_FAVOR]: 'ALLOW ACTION'\n};\nexport function voteOptionToString(outcome) {\n  return voteOptionStringMapping[outcome];\n}\nconst appealOptionStringMapping = {\n  [VOTE_OPTION_REFUSE]: 'Refuse',\n  [VOTE_OPTION_AGAINST]: 'Block action',\n  [VOTE_OPTION_IN_FAVOR]: 'Allow action'\n};\nexport function appealOptionToString(outcome) {\n  return appealOptionStringMapping[outcome];\n}\nconst outcomeStringMapping = {\n  [OUTCOMES.Leaked]: 'Invalid ruling',\n  [OUTCOMES.Refused]: 'Refused to vote',\n  [OUTCOMES.Against]: 'Blocked action',\n  [OUTCOMES.InFavor]: 'Allowed action'\n};\nexport function juryOutcomeToString(outcome) {\n  if (!outcome) {\n    return outcomeStringMapping[OUTCOMES.Refused];\n  }\n\n  return outcomeStringMapping[outcome];\n}\nconst appealRulingStringMapping = {\n  [OUTCOMES.Leaked]: 'Invalid ruling',\n  [OUTCOMES.Refused]: 'Refused',\n  [OUTCOMES.Against]: 'Blocked action',\n  [OUTCOMES.InFavor]: 'Allowed action'\n};\nexport function appealRulingToString(outcome, confirm) {\n  if (!outcome) {\n    return confirm ? NOBODY_CONFIRMED : NOBODY_APPEALED;\n  }\n\n  return appealRulingStringMapping[outcome];\n}\nconst finalRulingStringMapping = {\n  [OUTCOMES.Leaked]: 'Invalid ruling',\n  [OUTCOMES.Refused]: 'Refused',\n  [OUTCOMES.Against]: 'Blocked action',\n  [OUTCOMES.InFavor]: 'Allowed action'\n};\nexport function finalRulingToString(outcome) {\n  if (!outcome) {\n    return finalRulingStringMapping[OUTCOMES.refused];\n  }\n\n  return finalRulingStringMapping[outcome];\n}\n/**\n *\n * @param {String} outcome String representation of the outcome\n * @returns {Number} corresponding outcome number\n */\n\nexport function getOutcomeNumber(outcome) {\n  return OUTCOMES[outcome];\n}\n/**\n *\n * @param {bytes} commitment vote commitment\n * @param {bytes} password password used to get the commitment\n * @returns {Number} outcome\n */\n\nexport function getOutcomeFromCommitment(commitment, password) {\n  return VALID_OUTCOMES.find(option => hashVote(option, password) === commitment);\n}\n/**\n * returns all possible appeal ruling options\n * @param {Number} currentOutcome current round outcome\n * @returns {Array} Array of appeal ruling options\n */\n\nexport function getAppealRulingOptions(currentOutcome = OUTCOMES.Refused) {\n  return VALID_OUTCOMES.filter(outcome => outcome !== currentOutcome).map(outcome => ({\n    outcome,\n    description: appealOptionToString(outcome)\n  }));\n}\nexport function filterByValidOutcome(totalValidOutcomes) {\n  return VALID_OUTCOMES.map(outcomeFilter => {\n    return {\n      outcomes: totalValidOutcomes.filter(({\n        outcome\n      }) => outcome === outcomeFilter),\n      outcome: outcomeFilter\n    };\n  });\n}\nexport function getVoteId(disputeId, roundId) {\n  return bigNum(2).pow(bigNum(128)).mul(bigNum(disputeId)).add(bigNum(roundId));\n}\nexport function hashPassword(password) {\n  return keccak256(password);\n}\nexport function hashVote(outcome, password) {\n  return soliditySha3(['uint8', 'bytes32'], [outcome, hashPassword(password)]);\n}\n/**\n *\n * @param {Number} outcome vote outcome\n * @returns {Boolean} True if outcome is valid\n */\n\nexport function isValidOutcome(outcome) {\n  return VALID_OUTCOMES[0] <= outcome && outcome <= VALID_OUTCOMES[VALID_OUTCOMES.length - 1];\n}\nexport function isvoteLeaked(outcome) {\n  if (!outcome) return false;\n  return outcome === OUTCOMES.Leaked;\n}\nexport function getTotalOutcomeWeight(outcomes) {\n  return outcomes.reduce((acc, {\n    weight\n  }) => acc + weight, 0);\n} // Local storage helper functions\n// One time codes\n\nexport function saveCodeInLocalStorage(connectedAccount, disputeId, oneTimeCode) {\n  localStorage.setItem(`oneTimeCode:${connectedAccount}:${disputeId}`, oneTimeCode);\n}\nexport function getCodeFromLocalStorage(connectedAccount, disputeId) {\n  return localStorage.getItem(`oneTimeCode:${connectedAccount}:${disputeId}`);\n}\nexport function removeCodeFromLocalStorage(connectedAccount, disputeId) {\n  localStorage.removeItem(`oneTimeCode:${connectedAccount}:${disputeId}`);\n}","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/utils/crvoting-utils.js"],"names":["keccak256","soliditySha3","bigNum","OUTCOMES","Missing","Leaked","Refused","Against","InFavor","VALID_OUTCOMES","VOTE_OPTION_REFUSE","VOTE_OPTION_AGAINST","VOTE_OPTION_IN_FAVOR","NOBODY_APPEALED","NOBODY_CONFIRMED","voteOptionStringMapping","voteOptionToString","outcome","appealOptionStringMapping","appealOptionToString","outcomeStringMapping","juryOutcomeToString","appealRulingStringMapping","appealRulingToString","confirm","finalRulingStringMapping","finalRulingToString","refused","getOutcomeNumber","getOutcomeFromCommitment","commitment","password","find","option","hashVote","getAppealRulingOptions","currentOutcome","filter","map","description","filterByValidOutcome","totalValidOutcomes","outcomeFilter","outcomes","getVoteId","disputeId","roundId","pow","mul","add","hashPassword","isValidOutcome","length","isvoteLeaked","getTotalOutcomeWeight","reduce","acc","weight","saveCodeInLocalStorage","connectedAccount","oneTimeCode","localStorage","setItem","getCodeFromLocalStorage","getItem","removeCodeFromLocalStorage","removeItem"],"mappings":"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","sourcesContent":["import { keccak256, soliditySha3 } from '../lib/web3-utils'\nimport { bigNum } from '../lib/math-utils'\n\nexport const OUTCOMES = {\n  Missing: 0,\n  Leaked: 1,\n  Refused: 2,\n  Against: 3,\n  InFavor: 4,\n}\n\nconst VALID_OUTCOMES = [OUTCOMES.Refused, OUTCOMES.Against, OUTCOMES.InFavor]\n\nexport const VOTE_OPTION_REFUSE = OUTCOMES.Refused\nexport const VOTE_OPTION_AGAINST = OUTCOMES.Against\nexport const VOTE_OPTION_IN_FAVOR = OUTCOMES.InFavor\nexport const NOBODY_APPEALED = 'Nobody appealed'\nexport const NOBODY_CONFIRMED = 'No confirmation'\n\nconst voteOptionStringMapping = {\n  [VOTE_OPTION_REFUSE]: 'REFUSE TO VOTE',\n  [VOTE_OPTION_AGAINST]: 'BLOCK ACTION',\n  [VOTE_OPTION_IN_FAVOR]: 'ALLOW ACTION',\n}\n\nexport function voteOptionToString(outcome) {\n  return voteOptionStringMapping[outcome]\n}\n\nconst appealOptionStringMapping = {\n  [VOTE_OPTION_REFUSE]: 'Refuse',\n  [VOTE_OPTION_AGAINST]: 'Block action',\n  [VOTE_OPTION_IN_FAVOR]: 'Allow action',\n}\n\nexport function appealOptionToString(outcome) {\n  return appealOptionStringMapping[outcome]\n}\n\nconst outcomeStringMapping = {\n  [OUTCOMES.Leaked]: 'Invalid ruling',\n  [OUTCOMES.Refused]: 'Refused to vote',\n  [OUTCOMES.Against]: 'Blocked action',\n  [OUTCOMES.InFavor]: 'Allowed action',\n}\n\nexport function juryOutcomeToString(outcome) {\n  if (!outcome) {\n    return outcomeStringMapping[OUTCOMES.Refused]\n  }\n  return outcomeStringMapping[outcome]\n}\n\nconst appealRulingStringMapping = {\n  [OUTCOMES.Leaked]: 'Invalid ruling',\n  [OUTCOMES.Refused]: 'Refused',\n  [OUTCOMES.Against]: 'Blocked action',\n  [OUTCOMES.InFavor]: 'Allowed action',\n}\n\nexport function appealRulingToString(outcome, confirm) {\n  if (!outcome) {\n    return confirm ? NOBODY_CONFIRMED : NOBODY_APPEALED\n  }\n  return appealRulingStringMapping[outcome]\n}\n\nconst finalRulingStringMapping = {\n  [OUTCOMES.Leaked]: 'Invalid ruling',\n  [OUTCOMES.Refused]: 'Refused',\n  [OUTCOMES.Against]: 'Blocked action',\n  [OUTCOMES.InFavor]: 'Allowed action',\n}\n\nexport function finalRulingToString(outcome) {\n  if (!outcome) {\n    return finalRulingStringMapping[OUTCOMES.refused]\n  }\n  return finalRulingStringMapping[outcome]\n}\n\n/**\n *\n * @param {String} outcome String representation of the outcome\n * @returns {Number} corresponding outcome number\n */\nexport function getOutcomeNumber(outcome) {\n  return OUTCOMES[outcome]\n}\n\n/**\n *\n * @param {bytes} commitment vote commitment\n * @param {bytes} password password used to get the commitment\n * @returns {Number} outcome\n */\nexport function getOutcomeFromCommitment(commitment, password) {\n  return VALID_OUTCOMES.find(\n    option => hashVote(option, password) === commitment\n  )\n}\n\n/**\n * returns all possible appeal ruling options\n * @param {Number} currentOutcome current round outcome\n * @returns {Array} Array of appeal ruling options\n */\nexport function getAppealRulingOptions(currentOutcome = OUTCOMES.Refused) {\n  return VALID_OUTCOMES.filter(\n    outcome => outcome !== currentOutcome\n  ).map(outcome => ({ outcome, description: appealOptionToString(outcome) }))\n}\n\nexport function filterByValidOutcome(totalValidOutcomes) {\n  return VALID_OUTCOMES.map(outcomeFilter => {\n    return {\n      outcomes: totalValidOutcomes.filter(\n        ({ outcome }) => outcome === outcomeFilter\n      ),\n      outcome: outcomeFilter,\n    }\n  })\n}\n\nexport function getVoteId(disputeId, roundId) {\n  return bigNum(2)\n    .pow(bigNum(128))\n    .mul(bigNum(disputeId))\n    .add(bigNum(roundId))\n}\n\nexport function hashPassword(password) {\n  return keccak256(password)\n}\n\nexport function hashVote(outcome, password) {\n  return soliditySha3(['uint8', 'bytes32'], [outcome, hashPassword(password)])\n}\n\n/**\n *\n * @param {Number} outcome vote outcome\n * @returns {Boolean} True if outcome is valid\n */\nexport function isValidOutcome(outcome) {\n  return (\n    VALID_OUTCOMES[0] <= outcome &&\n    outcome <= VALID_OUTCOMES[VALID_OUTCOMES.length - 1]\n  )\n}\n\nexport function isvoteLeaked(outcome) {\n  if (!outcome) return false\n\n  return outcome === OUTCOMES.Leaked\n}\n\nexport function getTotalOutcomeWeight(outcomes) {\n  return outcomes.reduce((acc, { weight }) => acc + weight, 0)\n}\n\n// Local storage helper functions\n\n// One time codes\nexport function saveCodeInLocalStorage(\n  connectedAccount,\n  disputeId,\n  oneTimeCode\n) {\n  localStorage.setItem(\n    `oneTimeCode:${connectedAccount}:${disputeId}`,\n    oneTimeCode\n  )\n}\n\nexport function getCodeFromLocalStorage(connectedAccount, disputeId) {\n  return localStorage.getItem(`oneTimeCode:${connectedAccount}:${disputeId}`)\n}\n\nexport function removeCodeFromLocalStorage(connectedAccount, disputeId) {\n  localStorage.removeItem(`oneTimeCode:${connectedAccount}:${disputeId}`)\n}\n"]},"metadata":{},"sourceType":"module"}