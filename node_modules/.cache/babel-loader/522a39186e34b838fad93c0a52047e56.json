{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Screenshots = void 0;\n\nconst core_1 = require(\"../core\");\n\nclass Screenshots extends core_1.CrowdinApi {\n  /**\n   * @param projectId project identifier\n   * @param limit maximum number of items to retrieve (default 25)\n   * @param offset starting offset in the collection (default 0)\n   */\n  listScreenshots(projectId, limit, offset) {\n    const url = `${this.url}/projects/${projectId}/screenshots`;\n    return this.getList(url, limit, offset);\n  }\n  /**\n   * @param projectId project identifier\n   * @param request request body\n   */\n\n\n  addScreenshot(projectId, request) {\n    const url = `${this.url}/projects/${projectId}/screenshots`;\n    return this.post(url, request, this.defaultConfig());\n  }\n  /**\n   * @param projectId project identifier\n   * @param screenshotId screenshot identifier\n   */\n\n\n  getScreenshot(projectId, screenshotId) {\n    const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}`;\n    return this.get(url, this.defaultConfig());\n  }\n  /**\n   * @param projectId project identifier\n   * @param screenshotId screenshot identifier\n   * @param request request body\n   */\n\n\n  updateScreenshot(projectId, screenshotId, request) {\n    const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}`;\n    return this.put(url, request, this.defaultConfig());\n  }\n  /**\n   * @param projectId project identifier\n   * @param screenshotId screenshot identifier\n   */\n\n\n  deleteScreenshot(projectId, screenshotId) {\n    const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}`;\n    return this.delete(url, this.defaultConfig());\n  }\n  /**\n   * @param projectId project identifier\n   * @param screenshotId screenshot identifier\n   * @param request request body\n   */\n\n\n  editScreenshot(projectId, screenshotId, request) {\n    const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}`;\n    return this.patch(url, request, this.defaultConfig());\n  }\n  /**\n   * @param projectId project identifier\n   * @param screenshotId screenshot identifier\n   * @param limit maximum number of items to retrieve (default 25)\n   * @param offset starting offset in the collection (default 0)\n   */\n\n\n  listScreenshotTags(projectId, screenshotId, limit, offset) {\n    const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}/tags`;\n    return this.getList(url, limit, offset);\n  }\n  /**\n   * @param projectId project identifier\n   * @param screenshotId screenshot identifier\n   * @param request request body\n   */\n\n\n  replaceTags(projectId, screenshotId, request) {\n    const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}/tags`;\n    return this.put(url, request, this.defaultConfig());\n  }\n  /**\n   * @param projectId project identifier\n   * @param screenshotId screenshot identifier\n   * @param request request body\n   */\n\n\n  addTag(projectId, screenshotId, request) {\n    const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}/tags`;\n    return this.post(url, request, this.defaultConfig());\n  }\n  /**\n   * @param projectId project identifier\n   * @param screenshotId screenshot identifier\n   */\n\n\n  clearTags(projectId, screenshotId) {\n    const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}/tags`;\n    return this.delete(url, this.defaultConfig());\n  }\n  /**\n   * @param projectId project identifier\n   * @param screenshotId screenshot identifier\n   * @param tagId tag identifier\n   */\n\n\n  getTag(projectId, screenshotId, tagId) {\n    const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}/tags/${tagId}`;\n    return this.get(url, this.defaultConfig());\n  }\n  /**\n   * @param projectId project identifier\n   * @param screenshotId screenshot identifier\n   * @param tagId tag identifier\n   */\n\n\n  deleteTag(projectId, screenshotId, tagId) {\n    const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}/tags/${tagId}`;\n    return this.delete(url, this.defaultConfig());\n  }\n  /**\n   * @param projectId project identifier\n   * @param screenshotId screenshot identifier\n   * @param tagId tag identifier\n   * @param request request body\n   */\n\n\n  updateTag(projectId, screenshotId, tagId, request) {\n    const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}/tags/${tagId}`;\n    return this.patch(url, request, this.defaultConfig());\n  }\n\n}\n\nexports.Screenshots = Screenshots;","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/node_modules/@crowdin/crowdin-api-client/out/screenshots/index.js"],"names":["Object","defineProperty","exports","value","Screenshots","core_1","require","CrowdinApi","listScreenshots","projectId","limit","offset","url","getList","addScreenshot","request","post","defaultConfig","getScreenshot","screenshotId","get","updateScreenshot","put","deleteScreenshot","delete","editScreenshot","patch","listScreenshotTags","replaceTags","addTag","clearTags","getTag","tagId","deleteTag","updateTag"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Screenshots = void 0;\nconst core_1 = require(\"../core\");\nclass Screenshots extends core_1.CrowdinApi {\n    /**\n     * @param projectId project identifier\n     * @param limit maximum number of items to retrieve (default 25)\n     * @param offset starting offset in the collection (default 0)\n     */\n    listScreenshots(projectId, limit, offset) {\n        const url = `${this.url}/projects/${projectId}/screenshots`;\n        return this.getList(url, limit, offset);\n    }\n    /**\n     * @param projectId project identifier\n     * @param request request body\n     */\n    addScreenshot(projectId, request) {\n        const url = `${this.url}/projects/${projectId}/screenshots`;\n        return this.post(url, request, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param screenshotId screenshot identifier\n     */\n    getScreenshot(projectId, screenshotId) {\n        const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}`;\n        return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param screenshotId screenshot identifier\n     * @param request request body\n     */\n    updateScreenshot(projectId, screenshotId, request) {\n        const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}`;\n        return this.put(url, request, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param screenshotId screenshot identifier\n     */\n    deleteScreenshot(projectId, screenshotId) {\n        const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}`;\n        return this.delete(url, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param screenshotId screenshot identifier\n     * @param request request body\n     */\n    editScreenshot(projectId, screenshotId, request) {\n        const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}`;\n        return this.patch(url, request, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param screenshotId screenshot identifier\n     * @param limit maximum number of items to retrieve (default 25)\n     * @param offset starting offset in the collection (default 0)\n     */\n    listScreenshotTags(projectId, screenshotId, limit, offset) {\n        const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}/tags`;\n        return this.getList(url, limit, offset);\n    }\n    /**\n     * @param projectId project identifier\n     * @param screenshotId screenshot identifier\n     * @param request request body\n     */\n    replaceTags(projectId, screenshotId, request) {\n        const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}/tags`;\n        return this.put(url, request, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param screenshotId screenshot identifier\n     * @param request request body\n     */\n    addTag(projectId, screenshotId, request) {\n        const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}/tags`;\n        return this.post(url, request, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param screenshotId screenshot identifier\n     */\n    clearTags(projectId, screenshotId) {\n        const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}/tags`;\n        return this.delete(url, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param screenshotId screenshot identifier\n     * @param tagId tag identifier\n     */\n    getTag(projectId, screenshotId, tagId) {\n        const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}/tags/${tagId}`;\n        return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param screenshotId screenshot identifier\n     * @param tagId tag identifier\n     */\n    deleteTag(projectId, screenshotId, tagId) {\n        const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}/tags/${tagId}`;\n        return this.delete(url, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param screenshotId screenshot identifier\n     * @param tagId tag identifier\n     * @param request request body\n     */\n    updateTag(projectId, screenshotId, tagId, request) {\n        const url = `${this.url}/projects/${projectId}/screenshots/${screenshotId}/tags/${tagId}`;\n        return this.patch(url, request, this.defaultConfig());\n    }\n}\nexports.Screenshots = Screenshots;\n"]},"metadata":{},"sourceType":"script"}