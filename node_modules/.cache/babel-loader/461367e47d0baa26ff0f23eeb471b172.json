{"ast":null,"code":"'use strict';\n\nconst multiaddr = require('multiaddr');\n\nconst errCode = require('err-code');\n\nconst {\n  Address4,\n  Address6\n} = require('ip-address');\n\nconst errors = {\n  ERR_INVALID_IP_PARAMETER: 'ERR_INVALID_IP_PARAMETER',\n  ERR_INVALID_PORT_PARAMETER: 'ERR_INVALID_PORT_PARAMETER',\n  ERR_INVALID_IP: 'ERR_INVALID_IP'\n};\n\nmodule.exports = (ip, port) => {\n  if (typeof ip !== 'string') {\n    throw errCode(new Error(`invalid ip provided: ${ip}`), errors.ERR_INVALID_IP_PARAMETER);\n  }\n\n  port = parseInt(port);\n\n  if (isNaN(port)) {\n    throw errCode(new Error(`invalid port provided: ${port}`), errors.ERR_INVALID_PORT_PARAMETER);\n  }\n\n  if (new Address4(ip).isValid()) {\n    return multiaddr(`/ip4/${ip}/tcp/${port}`);\n  }\n\n  const ip6 = new Address6(ip);\n\n  if (ip6.isValid()) {\n    return ip6.is4() ? multiaddr(`/ip4/${ip6.to4().correctForm()}/tcp/${port}`) : multiaddr(`/ip6/${ip}/tcp/${port}`);\n  }\n\n  throw errCode(new Error(`invalid ip:port for creating a multiaddr: ${ip}:${port}`), errors.ERR_INVALID_IP);\n};\n\nmodule.exports.Errors = errors;","map":null,"metadata":{},"sourceType":"script"}