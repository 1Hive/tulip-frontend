{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { IK } from \"./handshakes/ik\";\nimport { Buffer } from \"buffer\";\nimport { decode0, decode1, encode0, encode1 } from \"./encoder\";\nimport { decodePayload, getPeerIdFromPayload, verifySignedPayload } from \"./utils\";\nimport { FailedIKError } from \"./errors\";\nimport { logger, logLocalStaticKeys, logRemoteStaticKey, logLocalEphemeralKeys, logRemoteEphemeralKey, logCipherState } from \"./logger\";\nexport class IKHandshake {\n  constructor(isInitiator, payload, prologue, staticKeypair, connection, remoteStaticKey, remotePeer, handshake) {\n    _defineProperty(this, \"isInitiator\", void 0);\n\n    _defineProperty(this, \"session\", void 0);\n\n    _defineProperty(this, \"remotePeer\", void 0);\n\n    _defineProperty(this, \"remoteEarlyData\", void 0);\n\n    _defineProperty(this, \"payload\", void 0);\n\n    _defineProperty(this, \"prologue\", void 0);\n\n    _defineProperty(this, \"staticKeypair\", void 0);\n\n    _defineProperty(this, \"connection\", void 0);\n\n    _defineProperty(this, \"ik\", void 0);\n\n    this.isInitiator = isInitiator;\n    this.payload = Buffer.from(payload);\n    this.prologue = prologue;\n    this.staticKeypair = staticKeypair;\n    this.connection = connection;\n\n    if (remotePeer) {\n      this.remotePeer = remotePeer;\n    }\n\n    this.ik = handshake || new IK();\n    this.session = this.ik.initSession(this.isInitiator, this.prologue, this.staticKeypair, remoteStaticKey);\n    this.remoteEarlyData = Buffer.alloc(0);\n  }\n\n  async stage0() {\n    logLocalStaticKeys(this.session.hs.s);\n    logRemoteStaticKey(this.session.hs.rs);\n\n    if (this.isInitiator) {\n      logger(\"IK Stage 0 - Initiator sending message...\");\n      const messageBuffer = this.ik.sendMessage(this.session, this.payload);\n      this.connection.writeLP(encode1(messageBuffer));\n      logger(\"IK Stage 0 - Initiator sent message.\");\n      logLocalEphemeralKeys(this.session.hs.e);\n    } else {\n      logger(\"IK Stage 0 - Responder receiving message...\");\n      const receivedMsg = await this.connection.readLP();\n\n      try {\n        const receivedMessageBuffer = decode1(receivedMsg.slice());\n        const {\n          plaintext,\n          valid\n        } = this.ik.recvMessage(this.session, receivedMessageBuffer);\n\n        if (!valid) {\n          throw new Error(\"ik handshake stage 0 decryption validation fail\");\n        }\n\n        logger(\"IK Stage 0 - Responder got message, going to verify payload.\");\n        const decodedPayload = await decodePayload(plaintext);\n        this.remotePeer = this.remotePeer || (await getPeerIdFromPayload(decodedPayload));\n        await verifySignedPayload(this.session.hs.rs, decodedPayload, this.remotePeer);\n        this.setRemoteEarlyData(decodedPayload.data);\n        logger(\"IK Stage 0 - Responder successfully verified payload!\");\n        logRemoteEphemeralKey(this.session.hs.re);\n      } catch (e) {\n        logger(\"Responder breaking up with IK handshake in stage 0.\");\n        throw new FailedIKError(receivedMsg, \"Error occurred while verifying initiator's signed payload: \".concat(e.message));\n      }\n    }\n  }\n\n  async stage1() {\n    if (this.isInitiator) {\n      logger(\"IK Stage 1 - Initiator receiving message...\");\n      const receivedMsg = (await this.connection.readLP()).slice();\n      const receivedMessageBuffer = decode0(Buffer.from(receivedMsg));\n      const {\n        plaintext,\n        valid\n      } = this.ik.recvMessage(this.session, receivedMessageBuffer);\n      logger(\"IK Stage 1 - Initiator got message, going to verify payload.\");\n\n      try {\n        if (!valid) {\n          throw new Error(\"ik stage 1 decryption validation fail\");\n        }\n\n        const decodedPayload = await decodePayload(plaintext);\n        this.remotePeer = this.remotePeer || (await getPeerIdFromPayload(decodedPayload));\n        await verifySignedPayload(receivedMessageBuffer.ns.slice(0, 32), decodedPayload, this.remotePeer);\n        this.setRemoteEarlyData(decodedPayload.data);\n        logger(\"IK Stage 1 - Initiator successfully verified payload!\");\n        logRemoteEphemeralKey(this.session.hs.re);\n      } catch (e) {\n        logger(\"Initiator breaking up with IK handshake in stage 1.\");\n        throw new FailedIKError(receivedMsg, \"Error occurred while verifying responder's signed payload: \".concat(e.message));\n      }\n    } else {\n      logger(\"IK Stage 1 - Responder sending message...\");\n      const messageBuffer = this.ik.sendMessage(this.session, this.payload);\n      this.connection.writeLP(encode0(messageBuffer));\n      logger(\"IK Stage 1 - Responder sent message...\");\n      logLocalEphemeralKeys(this.session.hs.e);\n    }\n\n    logCipherState(this.session);\n  }\n\n  decrypt(ciphertext, session) {\n    const cs = this.getCS(session, false);\n    return this.ik.decryptWithAd(cs, Buffer.alloc(0), ciphertext);\n  }\n\n  encrypt(plaintext, session) {\n    const cs = this.getCS(session);\n    return this.ik.encryptWithAd(cs, Buffer.alloc(0), plaintext);\n  }\n\n  getLocalEphemeralKeys() {\n    if (!this.session.hs.e) {\n      throw new Error(\"Ephemeral keys do not exist.\");\n    }\n\n    return this.session.hs.e;\n  }\n\n  getCS(session, encryption = true) {\n    if (!session.cs1 || !session.cs2) {\n      throw new Error(\"Handshake not completed properly, cipher state does not exist.\");\n    }\n\n    if (this.isInitiator) {\n      return encryption ? session.cs1 : session.cs2;\n    } else {\n      return encryption ? session.cs2 : session.cs1;\n    }\n  }\n\n  setRemoteEarlyData(data) {\n    if (data) {\n      this.remoteEarlyData = Buffer.from(data.buffer, data.byteOffset, data.length);\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}