{"ast":null,"code":"var _jsxFileName = \"/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/views/Farms/Farms.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useCallback, useState } from 'react';\nimport { Route, useRouteMatch } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { Image, Heading } from '@pancakeswap-libs/uikit';\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config';\nimport FlexLayout from 'components/layout/Flex';\nimport Page from 'components/layout/Page';\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd, usePriceEthBusd } from 'state/hooks';\nimport useRefresh from 'hooks/useRefresh';\nimport { fetchFarmUserDataAsync } from 'state/actions';\nimport { QuoteToken } from 'config/constants/types';\nimport useI18n from 'hooks/useI18n';\nimport FarmCard from './components/FarmCard/FarmCard';\nimport FarmTabButtons from './components/FarmTabButtons';\nimport Divider from './components/Divider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Farms = () => {\n  _s();\n\n  const {\n    path\n  } = useRouteMatch();\n  const TranslateString = useI18n();\n  const farmsLP = useFarms();\n  const cakePrice = usePriceCakeBusd();\n  const bnbPrice = usePriceBnbBusd();\n  const {\n    account,\n    ethereum\n  } = useWallet();\n  const ethPriceUsd = usePriceEthBusd();\n  const dispatch = useDispatch();\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account));\n    }\n  }, [account, dispatch, fastRefresh]);\n  const [stackedOnly, setStackedOnly] = useState(false);\n  const activeFarms = farmsLP.filter(farm => farm.pid !== 0 && farm.multiplier !== '0X');\n  const inactiveFarms = farmsLP.filter(farm => farm.pid !== 0 && farm.multiplier === '0X');\n  const stackedOnlyFarms = activeFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0)); // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n\n  const farmsList = useCallback((farmsToDisplay, removed) => {\n    var _farmsLP$find;\n\n    const cakePriceVsBNB = new BigNumber(((_farmsLP$find = farmsLP.find(farm => farm.pid === CAKE_POOL_PID)) === null || _farmsLP$find === void 0 ? void 0 : _farmsLP$find.tokenPriceVsQuote) || 0);\n    const farmsToDisplayWithAPY = farmsToDisplay.map(farm => {\n      if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        return farm;\n      }\n\n      const cakeRewardPerBlock = CAKE_PER_BLOCK.times(farm.poolWeight);\n      const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR); // cakePriceInQuote * cakeRewardPerYear / lpTotalInQuoteToken\n\n      let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken);\n\n      if (farm.quoteTokenSymbol === QuoteToken.BUSD || farm.quoteTokenSymbol === QuoteToken.UST) {\n        apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice);\n      } else if (farm.quoteTokenSymbol === QuoteToken.ETH) {\n        apy = cakePrice.div(ethPriceUsd).times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken);\n      } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken);\n      } else if (farm.dual) {\n        const cakeApy = farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken);\n        const dualApy = farm.tokenPriceVsQuote && new BigNumber(farm.tokenPriceVsQuote).times(farm.dual.rewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken);\n        apy = cakeApy && dualApy && cakeApy.plus(dualApy);\n      }\n\n      return { ...farm,\n        apy\n      };\n    });\n    return farmsToDisplayWithAPY.map(farm => /*#__PURE__*/_jsxDEV(FarmCard, {\n      farm: farm,\n      removed: removed,\n      bnbPrice: bnbPrice,\n      cakePrice: cakePrice,\n      ethPrice: ethPriceUsd,\n      ethereum: ethereum,\n      account: account\n    }, farm.pid, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this));\n  }, [farmsLP, bnbPrice, ethPriceUsd, cakePrice, ethereum, account]);\n  return /*#__PURE__*/_jsxDEV(Page, {\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h1\",\n      size: \"lg\",\n      color: \"secondary\",\n      mb: \"50px\",\n      style: {\n        textAlign: 'center'\n      },\n      children: TranslateString(696, 'Stake LP tokens to earn CAKE')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FarmTabButtons, {\n      stackedOnly: stackedOnly,\n      setStackedOnly: setStackedOnly\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FlexLayout, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: `${path}`,\n          children: stackedOnly ? farmsList(stackedOnlyFarms, false) : farmsList(activeFarms, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: `${path}/history`,\n          children: farmsList(inactiveFarms, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Image, {\n      src: \"/images/cakecat.png\",\n      alt: \"Pancake illustration\",\n      width: 949,\n      height: 384,\n      responsive: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Farms, \"BzJj0tgIH0pnyC06UwRlE6j6LfI=\", false, function () {\n  return [useRouteMatch, useI18n, useFarms, usePriceCakeBusd, usePriceBnbBusd, useWallet, usePriceEthBusd, useDispatch, useRefresh];\n});\n\n_c = Farms;\nexport default Farms;\n\nvar _c;\n\n$RefreshReg$(_c, \"Farms\");","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/views/Farms/Farms.tsx"],"names":["React","useEffect","useCallback","useState","Route","useRouteMatch","useDispatch","BigNumber","useWallet","Image","Heading","BLOCKS_PER_YEAR","CAKE_PER_BLOCK","CAKE_POOL_PID","FlexLayout","Page","useFarms","usePriceBnbBusd","usePriceCakeBusd","usePriceEthBusd","useRefresh","fetchFarmUserDataAsync","QuoteToken","useI18n","FarmCard","FarmTabButtons","Divider","Farms","path","TranslateString","farmsLP","cakePrice","bnbPrice","account","ethereum","ethPriceUsd","dispatch","fastRefresh","stackedOnly","setStackedOnly","activeFarms","filter","farm","pid","multiplier","inactiveFarms","stackedOnlyFarms","userData","stakedBalance","isGreaterThan","farmsList","farmsToDisplay","removed","cakePriceVsBNB","find","tokenPriceVsQuote","farmsToDisplayWithAPY","map","tokenAmount","lpTotalInQuoteToken","cakeRewardPerBlock","times","poolWeight","cakeRewardPerYear","apy","div","quoteTokenSymbol","BUSD","UST","ETH","CAKE","dual","cakeApy","dualApy","rewardPerBlock","plus","textAlign"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd, usePriceEthBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const ethPriceUsd = usePriceEthBusd()\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stackedOnly, setStackedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X')\n  const stackedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n          return farm\n        }\n        const cakeRewardPerBlock = CAKE_PER_BLOCK.times(farm.poolWeight)\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        // cakePriceInQuote * cakeRewardPerYear / lpTotalInQuoteToken\n        let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BUSD || farm.quoteTokenSymbol === QuoteToken.UST) {\n          apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice)\n        } else if (farm.quoteTokenSymbol === QuoteToken.ETH) {\n          apy = cakePrice.div(ethPriceUsd).times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\n        } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n          apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken)\n        } else if (farm.dual) {\n          const cakeApy =\n            farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken)\n          const dualApy =\n            farm.tokenPriceVsQuote &&\n            new BigNumber(farm.tokenPriceVsQuote)\n              .times(farm.dual.rewardPerBlock)\n              .times(BLOCKS_PER_YEAR)\n              .div(farm.lpTotalInQuoteToken)\n\n          apy = cakeApy && dualApy && cakeApy.plus(dualApy)\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethPrice={ethPriceUsd}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [farmsLP, bnbPrice, ethPriceUsd, cakePrice, ethereum, account],\n  )\n\n  return (\n    <Page>\n      <Heading as=\"h1\" size=\"lg\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {TranslateString(696, 'Stake LP tokens to earn CAKE')}\n      </Heading>\n      <FarmTabButtons stackedOnly={stackedOnly} setStackedOnly={setStackedOnly} />\n      <div>\n        <Divider />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {stackedOnly ? farmsList(stackedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n      <Image src=\"/images/cakecat.png\" alt=\"Pancake illustration\" width={949} height={384} responsive />\n    </Page>\n  )\n}\n\nexport default Farms\n"]},"metadata":{},"sourceType":"module"}