{"ast":null,"code":"var _objectSpread = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _taggedTemplateLiteral = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4;\n\nvar pageResults = require('graph-results-pager');\n\nvar _require = require('graphql-request'),\n    request = _require.request,\n    gql = _require.gql;\n\nvar blocklytics = 'https://api.thegraph.com/subgraphs/name/blocklytics/ethereum-blocks';\n\nvar _require2 = require(\"date-fns\"),\n    getUnixTime = _require2.getUnixTime,\n    startOfHour = _require2.startOfHour,\n    startOfMinute = _require2.startOfMinute,\n    startOfSecond = _require2.startOfSecond,\n    subHours = _require2.subHours;\n\nfunction timestampToBlock(_x) {\n  return _timestampToBlock.apply(this, arguments);\n}\n\nfunction _timestampToBlock() {\n  _timestampToBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(timestamp) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            timestamp = String(timestamp).length > 10 ? Math.floor(timestamp / 1000) : timestamp;\n            _context.next = 3;\n            return request(blocklytics, gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"{\\n            blocks(first: 1, orderBy: timestamp, orderDirection: desc, where: { timestamp_lte: \", \" }) {\\n                number\\n            }\\n        }\"])), timestamp));\n\n          case 3:\n            result = _context.sent;\n            return _context.abrupt(\"return\", Number(result.blocks[0].number));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _timestampToBlock.apply(this, arguments);\n}\n\nfunction timestampsToBlocks(_x2) {\n  return _timestampsToBlocks.apply(this, arguments);\n}\n\nfunction _timestampsToBlocks() {\n  _timestampsToBlocks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(timestamps) {\n    var query, result;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            query = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{\\n            \", \"\\n        }\"])), timestamps.map(function (timestamp) {\n              return gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n                timestamp\", \": blocks(first:1, orderBy: timestamp, orderDirection: desc, where: { timestamp_lte: \", \"}) {\\n                    number\\n            }\"])), timestamp, timestamp);\n            }));\n            _context2.next = 3;\n            return request(blocklytics, query);\n\n          case 3:\n            result = _context2.sent;\n            result = Object.keys(result).map(function (key) {\n              return _objectSpread(_objectSpread({}, result[key]), {}, {\n                timestamp: key.split(\"timestamp\")[1]\n              });\n            }).sort(function (a, b) {\n              return Number(a.timestamp) - b.timestamp;\n            });\n            result.forEach(function (e) {\n              return delete e.timestamp;\n            });\n            return _context2.abrupt(\"return\", result = Object.values(result).map(function (e) {\n              return Number(e[0].number);\n            }));\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _timestampsToBlocks.apply(this, arguments);\n}\n\nfunction blockToTimestamp(_x3) {\n  return _blockToTimestamp.apply(this, arguments);\n}\n\nfunction _blockToTimestamp() {\n  _blockToTimestamp = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(block) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return request(blocklytics, gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"{\\n            blocks(first: 1, where: { number: \", \" }) {\\n                timestamp\\n            }\\n        }\"])), block));\n\n          case 2:\n            result = _context3.sent;\n            return _context3.abrupt(\"return\", Number(result.blocks[0].timestamp));\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _blockToTimestamp.apply(this, arguments);\n}\n\nfunction getAverageBlockTime() {\n  return _getAverageBlockTime.apply(this, arguments);\n}\n\nfunction _getAverageBlockTime() {\n  _getAverageBlockTime = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var _ref,\n        _ref$block,\n        block,\n        _ref$timestamp,\n        timestamp,\n        now,\n        start,\n        end,\n        blocks,\n        averageBlockTime,\n        _args4 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _ref = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {}, _ref$block = _ref.block, block = _ref$block === void 0 ? undefined : _ref$block, _ref$timestamp = _ref.timestamp, timestamp = _ref$timestamp === void 0 ? undefined : _ref$timestamp;\n            timestamp = timestamp ? String(timestamp).length > 10 ? Math.floor(timestamp / 1000) : timestamp : undefined;\n\n            if (!timestamp) {\n              _context4.next = 6;\n              break;\n            }\n\n            _context4.t0 = timestamp;\n            _context4.next = 14;\n            break;\n\n          case 6:\n            if (!block) {\n              _context4.next = 12;\n              break;\n            }\n\n            _context4.next = 9;\n            return blockToTimestamp(block);\n\n          case 9:\n            _context4.t1 = _context4.sent;\n            _context4.next = 13;\n            break;\n\n          case 12:\n            _context4.t1 = undefined;\n\n          case 13:\n            _context4.t0 = _context4.t1;\n\n          case 14:\n            timestamp = _context4.t0;\n            now = startOfSecond(startOfMinute(startOfHour(timestamp ? timestamp * 1000 : Date.now())));\n            start = getUnixTime(subHours(now, 6));\n            end = getUnixTime(now);\n            _context4.next = 20;\n            return pageResults({\n              api: blocklytics,\n              query: {\n                entity: 'blocks',\n                selection: {\n                  orderBy: \"number\",\n                  orderDirection: \"desc\",\n                  where: {\n                    timestamp_gte: start,\n                    timestamp_lte: end\n                  }\n                },\n                properties: ['timestamp']\n              }\n            });\n\n          case 20:\n            blocks = _context4.sent;\n            averageBlockTime = blocks.sort(function (a, b) {\n              return Number(b.timestamp) - Number(a.timestamp);\n            }).reduce(function (previousValue, currentValue, currentIndex) {\n              if (previousValue.timestamp) {\n                var difference = previousValue.timestamp - currentValue.timestamp;\n                previousValue.difference = previousValue.difference + difference;\n              }\n\n              previousValue.timestamp = currentValue.timestamp;\n\n              if (currentIndex === blocks.length - 1) {\n                return previousValue.difference / blocks.length;\n              }\n\n              return previousValue;\n            }, {\n              timestamp: null,\n              difference: 0\n            });\n            return _context4.abrupt(\"return\", averageBlockTime);\n\n          case 23:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getAverageBlockTime.apply(this, arguments);\n}\n\nmodule.exports = {\n  timestampToBlock: timestampToBlock,\n  timestampsToBlocks: timestampsToBlocks,\n  blockToTimestamp: blockToTimestamp,\n  getAverageBlockTime: getAverageBlockTime\n};","map":null,"metadata":{},"sourceType":"script"}