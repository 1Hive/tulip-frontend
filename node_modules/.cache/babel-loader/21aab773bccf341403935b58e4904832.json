{"ast":null,"code":"import _slicedToArray from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _createForOfIteratorHelper from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(_syncBatch),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(syncBuffer),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(_syncConcat),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(_syncTake),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(_syncTime);\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\nfunction __values(o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n}\n\nfunction __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []),\n      i,\n      q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i;\n\n  function verb(n) {\n    if (g[n]) i[n] = function (v) {\n      return new Promise(function (a, b) {\n        q.push([n, v, a, b]) > 1 || resume(n, v);\n      });\n    };\n  }\n\n  function resume(n, v) {\n    try {\n      step(g[n](v));\n    } catch (e) {\n      settle(q[0][3], e);\n    }\n  }\n\n  function step(r) {\n    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n  }\n\n  function fulfill(value) {\n    resume(\"next\", value);\n  }\n\n  function reject(value) {\n    resume(\"throw\", value);\n  }\n\n  function settle(f, v) {\n    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n  }\n}\n\nfunction __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) {\n    throw e;\n  }), verb(\"return\"), i[Symbol.iterator] = function () {\n    return this;\n  }, i;\n\n  function verb(n, f) {\n    i[n] = o[n] ? function (v) {\n      return (p = !p) ? {\n        value: __await(o[n](v)),\n        done: n === \"return\"\n      } : f ? f(v) : v;\n    } : f;\n  }\n}\n\nfunction __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n      i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n}\n\nfunction _batch(size, iterable) {\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime.mark(function _batch_1() {\n    var e_1, _a, dataBatch, iterable_1, iterable_1_1, data;\n\n    return _regeneratorRuntime.wrap(function _batch_1$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dataBatch = [];\n            _context.prev = 1;\n            iterable_1 = __asyncValues(iterable);\n\n          case 3:\n            _context.next = 5;\n            return __await(iterable_1.next());\n\n          case 5:\n            iterable_1_1 = _context.sent;\n\n            if (iterable_1_1.done) {\n              _context.next = 17;\n              break;\n            }\n\n            data = iterable_1_1.value;\n            dataBatch.push(data);\n\n            if (!(dataBatch.length === size)) {\n              _context.next = 15;\n              break;\n            }\n\n            _context.next = 12;\n            return __await(dataBatch);\n\n          case 12:\n            _context.next = 14;\n            return _context.sent;\n\n          case 14:\n            dataBatch = [];\n\n          case 15:\n            _context.next = 3;\n            break;\n\n          case 17:\n            _context.next = 22;\n            break;\n\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](1);\n            e_1 = {\n              error: _context.t0\n            };\n\n          case 22:\n            _context.prev = 22;\n            _context.prev = 23;\n\n            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))) {\n              _context.next = 27;\n              break;\n            }\n\n            _context.next = 27;\n            return __await(_a.call(iterable_1));\n\n          case 27:\n            _context.prev = 27;\n\n            if (!e_1) {\n              _context.next = 30;\n              break;\n            }\n\n            throw e_1.error;\n\n          case 30:\n            return _context.finish(27);\n\n          case 31:\n            return _context.finish(22);\n\n          case 32:\n            if (!(dataBatch.length > 0)) {\n              _context.next = 37;\n              break;\n            }\n\n            _context.next = 35;\n            return __await(dataBatch);\n\n          case 35:\n            _context.next = 37;\n            return _context.sent;\n\n          case 37:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _batch_1, null, [[1, 19, 22, 32], [23,, 27, 31]]);\n  }));\n}\n\nfunction _syncBatch(size, iterable) {\n  var dataBatch, _iterator, _step, data;\n\n  return _regeneratorRuntime.wrap(function _syncBatch$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          dataBatch = [];\n          _iterator = _createForOfIteratorHelper(iterable);\n          _context2.prev = 2;\n\n          _iterator.s();\n\n        case 4:\n          if ((_step = _iterator.n()).done) {\n            _context2.next = 13;\n            break;\n          }\n\n          data = _step.value;\n          dataBatch.push(data);\n\n          if (!(dataBatch.length === size)) {\n            _context2.next = 11;\n            break;\n          }\n\n          _context2.next = 10;\n          return dataBatch;\n\n        case 10:\n          dataBatch = [];\n\n        case 11:\n          _context2.next = 4;\n          break;\n\n        case 13:\n          _context2.next = 18;\n          break;\n\n        case 15:\n          _context2.prev = 15;\n          _context2.t0 = _context2[\"catch\"](2);\n\n          _iterator.e(_context2.t0);\n\n        case 18:\n          _context2.prev = 18;\n\n          _iterator.f();\n\n          return _context2.finish(18);\n\n        case 21:\n          if (!(dataBatch.length > 0)) {\n            _context2.next = 24;\n            break;\n          }\n\n          _context2.next = 24;\n          return dataBatch;\n\n        case 24:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked, null, [[2, 15, 18, 21]]);\n}\n\nfunction batch(size, iterable) {\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return batch(size, curriedIterable);\n    };\n  }\n\n  if (iterable[Symbol.asyncIterator]) {\n    return _batch(size, iterable);\n  }\n\n  return _syncBatch(size, iterable);\n}\n\nfunction getIterator(iterable) {\n  if (typeof iterable.next === 'function') {\n    return iterable;\n  }\n\n  if (typeof iterable[Symbol.iterator] === 'function') {\n    return iterable[Symbol.iterator]();\n  }\n\n  if (typeof iterable[Symbol.asyncIterator] === 'function') {\n    return iterable[Symbol.asyncIterator]();\n  }\n\n  throw new TypeError('\"values\" does not to conform to any of the iterator or iterable protocols');\n}\n\nfunction defer() {\n  var reject;\n  var resolve;\n  var promise = new Promise(function (resolveFunc, rejectFunc) {\n    resolve = resolveFunc;\n    reject = rejectFunc;\n  });\n  return {\n    promise: promise,\n    reject: reject,\n    resolve: resolve\n  };\n} /// <reference lib=\"esnext.asynciterable\" />\n\n\nfunction _buffer(size, iterable) {\n  var iterator = getIterator(iterable);\n  var resultQueue = [];\n  var readQueue = [];\n  var reading = false;\n  var ended = false;\n\n  function fulfillReadQueue() {\n    while (readQueue.length > 0 && resultQueue.length > 0) {\n      var readDeferred = readQueue.shift();\n\n      var _resultQueue$shift = resultQueue.shift(),\n          error = _resultQueue$shift.error,\n          value = _resultQueue$shift.value;\n\n      if (error) {\n        readDeferred.reject(error);\n      } else {\n        readDeferred.resolve({\n          done: false,\n          value: value\n        });\n      }\n    }\n\n    while (readQueue.length > 0 && ended) {\n      var _readQueue$shift = readQueue.shift(),\n          resolve = _readQueue$shift.resolve;\n\n      resolve({\n        done: true,\n        value: undefined\n      });\n    }\n  }\n\n  function fillQueue() {\n    return _fillQueue.apply(this, arguments);\n  }\n\n  function _fillQueue() {\n    _fillQueue = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$iterator$next, done, value;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!ended) {\n                _context3.next = 2;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 2:\n              if (!reading) {\n                _context3.next = 4;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 4:\n              if (!(resultQueue.length >= size)) {\n                _context3.next = 6;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 6:\n              reading = true;\n              _context3.prev = 7;\n              _context3.next = 10;\n              return iterator.next();\n\n            case 10:\n              _yield$iterator$next = _context3.sent;\n              done = _yield$iterator$next.done;\n              value = _yield$iterator$next.value;\n\n              if (done) {\n                ended = true;\n              } else {\n                resultQueue.push({\n                  value: value\n                });\n              }\n\n              _context3.next = 20;\n              break;\n\n            case 16:\n              _context3.prev = 16;\n              _context3.t0 = _context3[\"catch\"](7);\n              ended = true;\n              resultQueue.push({\n                error: _context3.t0\n              });\n\n            case 20:\n              fulfillReadQueue();\n              reading = false;\n              fillQueue();\n\n            case 23:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee, null, [[7, 16]]);\n    }));\n    return _fillQueue.apply(this, arguments);\n  }\n\n  function next() {\n    return _next.apply(this, arguments);\n  }\n\n  function _next() {\n    _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _resultQueue$shift2, error, value, deferred;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(resultQueue.length > 0)) {\n                _context4.next = 6;\n                break;\n              }\n\n              _resultQueue$shift2 = resultQueue.shift(), error = _resultQueue$shift2.error, value = _resultQueue$shift2.value;\n\n              if (!error) {\n                _context4.next = 4;\n                break;\n              }\n\n              throw error;\n\n            case 4:\n              fillQueue();\n              return _context4.abrupt(\"return\", {\n                done: false,\n                value: value\n              });\n\n            case 6:\n              if (!ended) {\n                _context4.next = 8;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", {\n                done: true,\n                value: undefined\n              });\n\n            case 8:\n              deferred = defer();\n              readQueue.push(deferred);\n              fillQueue();\n              return _context4.abrupt(\"return\", deferred.promise);\n\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _next.apply(this, arguments);\n  }\n\n  var asyncIterableIterator = _defineProperty({\n    next: next\n  }, Symbol.asyncIterator, function () {\n    return asyncIterableIterator;\n  });\n\n  return asyncIterableIterator;\n}\n\nfunction syncBuffer(size, iterable) {\n  var valueQueue, e, _iterator2, _step2, value, _i, _valueQueue, _value;\n\n  return _regeneratorRuntime.wrap(function syncBuffer$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          valueQueue = [];\n          _context5.prev = 1;\n          _iterator2 = _createForOfIteratorHelper(iterable);\n          _context5.prev = 3;\n\n          _iterator2.s();\n\n        case 5:\n          if ((_step2 = _iterator2.n()).done) {\n            _context5.next = 14;\n            break;\n          }\n\n          value = _step2.value;\n          valueQueue.push(value);\n\n          if (!(valueQueue.length <= size)) {\n            _context5.next = 10;\n            break;\n          }\n\n          return _context5.abrupt(\"continue\", 12);\n\n        case 10:\n          _context5.next = 12;\n          return valueQueue.shift();\n\n        case 12:\n          _context5.next = 5;\n          break;\n\n        case 14:\n          _context5.next = 19;\n          break;\n\n        case 16:\n          _context5.prev = 16;\n          _context5.t0 = _context5[\"catch\"](3);\n\n          _iterator2.e(_context5.t0);\n\n        case 19:\n          _context5.prev = 19;\n\n          _iterator2.f();\n\n          return _context5.finish(19);\n\n        case 22:\n          _context5.next = 27;\n          break;\n\n        case 24:\n          _context5.prev = 24;\n          _context5.t1 = _context5[\"catch\"](1);\n          e = _context5.t1;\n\n        case 27:\n          _i = 0, _valueQueue = valueQueue;\n\n        case 28:\n          if (!(_i < _valueQueue.length)) {\n            _context5.next = 35;\n            break;\n          }\n\n          _value = _valueQueue[_i];\n          _context5.next = 32;\n          return _value;\n\n        case 32:\n          _i++;\n          _context5.next = 28;\n          break;\n\n        case 35:\n          if (!e) {\n            _context5.next = 37;\n            break;\n          }\n\n          throw e;\n\n        case 37:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked2, null, [[1, 24], [3, 16, 19, 22]]);\n}\n\nfunction buffer(size, iterable) {\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return buffer(size, curriedIterable);\n    };\n  }\n\n  if (iterable[Symbol.asyncIterator]) {\n    return _buffer(size, iterable);\n  }\n\n  return syncBuffer(size, iterable);\n}\n\nfunction _collect(_x) {\n  return _collect2.apply(this, arguments);\n}\n\nfunction _collect2() {\n  _collect2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(iterable) {\n    var e_1, _a, values, iterable_1, iterable_1_1, value;\n\n    return _regeneratorRuntime.wrap(function _callee11$(_context28) {\n      while (1) {\n        switch (_context28.prev = _context28.next) {\n          case 0:\n            values = [];\n            _context28.prev = 1;\n            iterable_1 = __asyncValues(iterable);\n\n          case 3:\n            _context28.next = 5;\n            return iterable_1.next();\n\n          case 5:\n            iterable_1_1 = _context28.sent;\n\n            if (iterable_1_1.done) {\n              _context28.next = 11;\n              break;\n            }\n\n            value = iterable_1_1.value;\n            values.push(value);\n\n          case 9:\n            _context28.next = 3;\n            break;\n\n          case 11:\n            _context28.next = 16;\n            break;\n\n          case 13:\n            _context28.prev = 13;\n            _context28.t0 = _context28[\"catch\"](1);\n            e_1 = {\n              error: _context28.t0\n            };\n\n          case 16:\n            _context28.prev = 16;\n            _context28.prev = 17;\n\n            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))) {\n              _context28.next = 21;\n              break;\n            }\n\n            _context28.next = 21;\n            return _a.call(iterable_1);\n\n          case 21:\n            _context28.prev = 21;\n\n            if (!e_1) {\n              _context28.next = 24;\n              break;\n            }\n\n            throw e_1.error;\n\n          case 24:\n            return _context28.finish(21);\n\n          case 25:\n            return _context28.finish(16);\n\n          case 26:\n            return _context28.abrupt(\"return\", values);\n\n          case 27:\n          case \"end\":\n            return _context28.stop();\n        }\n      }\n    }, _callee11, null, [[1, 13, 16, 26], [17,, 21, 25]]);\n  }));\n  return _collect2.apply(this, arguments);\n}\n\nfunction collect(iterable) {\n  if (iterable[Symbol.asyncIterator]) {\n    return _collect(iterable);\n  }\n\n  return Array.from(iterable);\n}\n\nfunction _concat(iterables) {\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime.mark(function _concat_1() {\n    var e_1, _a, iterables_1, iterables_1_1, iterable;\n\n    return _regeneratorRuntime.wrap(function _concat_1$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            iterables_1 = __asyncValues(iterables);\n\n          case 2:\n            _context6.next = 4;\n            return __await(iterables_1.next());\n\n          case 4:\n            iterables_1_1 = _context6.sent;\n\n            if (iterables_1_1.done) {\n              _context6.next = 14;\n              break;\n            }\n\n            iterable = iterables_1_1.value;\n            _context6.t0 = __await;\n            return _context6.delegateYield(__asyncDelegator(__asyncValues(iterable)), \"t1\", 9);\n\n          case 9:\n            _context6.t2 = _context6.t1;\n            _context6.next = 12;\n            return (0, _context6.t0)(_context6.t2);\n\n          case 12:\n            _context6.next = 2;\n            break;\n\n          case 14:\n            _context6.next = 19;\n            break;\n\n          case 16:\n            _context6.prev = 16;\n            _context6.t3 = _context6[\"catch\"](0);\n            e_1 = {\n              error: _context6.t3\n            };\n\n          case 19:\n            _context6.prev = 19;\n            _context6.prev = 20;\n\n            if (!(iterables_1_1 && !iterables_1_1.done && (_a = iterables_1.return))) {\n              _context6.next = 24;\n              break;\n            }\n\n            _context6.next = 24;\n            return __await(_a.call(iterables_1));\n\n          case 24:\n            _context6.prev = 24;\n\n            if (!e_1) {\n              _context6.next = 27;\n              break;\n            }\n\n            throw e_1.error;\n\n          case 27:\n            return _context6.finish(24);\n\n          case 28:\n            return _context6.finish(19);\n\n          case 29:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _concat_1, null, [[0, 16, 19, 29], [20,, 24, 28]]);\n  }));\n}\n\nfunction _syncConcat(iterables) {\n  var _iterator3, _step3, iterable;\n\n  return _regeneratorRuntime.wrap(function _syncConcat$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _iterator3 = _createForOfIteratorHelper(iterables);\n          _context7.prev = 1;\n\n          _iterator3.s();\n\n        case 3:\n          if ((_step3 = _iterator3.n()).done) {\n            _context7.next = 8;\n            break;\n          }\n\n          iterable = _step3.value;\n          return _context7.delegateYield(iterable, \"t0\", 6);\n\n        case 6:\n          _context7.next = 3;\n          break;\n\n        case 8:\n          _context7.next = 13;\n          break;\n\n        case 10:\n          _context7.prev = 10;\n          _context7.t1 = _context7[\"catch\"](1);\n\n          _iterator3.e(_context7.t1);\n\n        case 13:\n          _context7.prev = 13;\n\n          _iterator3.f();\n\n          return _context7.finish(13);\n\n        case 16:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked3, null, [[1, 10, 13, 16]]);\n}\n\nfunction concat() {\n  for (var _len = arguments.length, iterables = new Array(_len), _key = 0; _key < _len; _key++) {\n    iterables[_key] = arguments[_key];\n  }\n\n  var hasAnyAsync = iterables.find(function (itr) {\n    return itr[Symbol.asyncIterator] !== undefined;\n  });\n\n  if (hasAnyAsync) {\n    return _concat(iterables);\n  } else {\n    return _syncConcat(iterables);\n  }\n}\n\nfunction _consume(_x2) {\n  return _consume2.apply(this, arguments);\n}\n\nfunction _consume2() {\n  _consume2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(iterable) {\n    var e_1, _a, iterable_1, iterable_1_1, val;\n\n    return _regeneratorRuntime.wrap(function _callee12$(_context29) {\n      while (1) {\n        switch (_context29.prev = _context29.next) {\n          case 0:\n            _context29.prev = 0;\n            iterable_1 = __asyncValues(iterable);\n\n          case 2:\n            _context29.next = 4;\n            return iterable_1.next();\n\n          case 4:\n            iterable_1_1 = _context29.sent;\n\n            if (iterable_1_1.done) {\n              _context29.next = 9;\n              break;\n            }\n\n            val = iterable_1_1.value;\n\n          case 7:\n            _context29.next = 2;\n            break;\n\n          case 9:\n            _context29.next = 14;\n            break;\n\n          case 11:\n            _context29.prev = 11;\n            _context29.t0 = _context29[\"catch\"](0);\n            e_1 = {\n              error: _context29.t0\n            };\n\n          case 14:\n            _context29.prev = 14;\n            _context29.prev = 15;\n\n            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))) {\n              _context29.next = 19;\n              break;\n            }\n\n            _context29.next = 19;\n            return _a.call(iterable_1);\n\n          case 19:\n            _context29.prev = 19;\n\n            if (!e_1) {\n              _context29.next = 22;\n              break;\n            }\n\n            throw e_1.error;\n\n          case 22:\n            return _context29.finish(19);\n\n          case 23:\n            return _context29.finish(14);\n\n          case 24:\n          case \"end\":\n            return _context29.stop();\n        }\n      }\n    }, _callee12, null, [[0, 11, 14, 24], [15,, 19, 23]]);\n  }));\n  return _consume2.apply(this, arguments);\n}\n\nfunction consume(iterable) {\n  if (iterable[Symbol.asyncIterator]) {\n    return _consume(iterable);\n  }\n}\n\nfunction _filter(filterFunc, iterable) {\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime.mark(function _filter_1() {\n    var e_1, _a, iterable_1, iterable_1_1, data;\n\n    return _regeneratorRuntime.wrap(function _filter_1$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.prev = 0;\n            iterable_1 = __asyncValues(iterable);\n\n          case 2:\n            _context8.next = 4;\n            return __await(iterable_1.next());\n\n          case 4:\n            iterable_1_1 = _context8.sent;\n\n            if (iterable_1_1.done) {\n              _context8.next = 16;\n              break;\n            }\n\n            data = iterable_1_1.value;\n            _context8.next = 9;\n            return __await(filterFunc(data));\n\n          case 9:\n            if (!_context8.sent) {\n              _context8.next = 14;\n              break;\n            }\n\n            _context8.next = 12;\n            return __await(data);\n\n          case 12:\n            _context8.next = 14;\n            return _context8.sent;\n\n          case 14:\n            _context8.next = 2;\n            break;\n\n          case 16:\n            _context8.next = 21;\n            break;\n\n          case 18:\n            _context8.prev = 18;\n            _context8.t0 = _context8[\"catch\"](0);\n            e_1 = {\n              error: _context8.t0\n            };\n\n          case 21:\n            _context8.prev = 21;\n            _context8.prev = 22;\n\n            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))) {\n              _context8.next = 26;\n              break;\n            }\n\n            _context8.next = 26;\n            return __await(_a.call(iterable_1));\n\n          case 26:\n            _context8.prev = 26;\n\n            if (!e_1) {\n              _context8.next = 29;\n              break;\n            }\n\n            throw e_1.error;\n\n          case 29:\n            return _context8.finish(26);\n\n          case 30:\n            return _context8.finish(21);\n\n          case 31:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _filter_1, null, [[0, 18, 21, 31], [22,, 26, 30]]);\n  }));\n}\n\nfunction filter(filterFunc, iterable) {\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return _filter(filterFunc, curriedIterable);\n    };\n  }\n\n  return _filter(filterFunc, iterable);\n}\n\nfunction flatten(iterable) {\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime.mark(function flatten_1() {\n    var e_1, _a, iterable_1, iterable_1_1, maybeItr;\n\n    return _regeneratorRuntime.wrap(function flatten_1$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.prev = 0;\n            iterable_1 = __asyncValues(iterable);\n\n          case 2:\n            _context9.next = 4;\n            return __await(iterable_1.next());\n\n          case 4:\n            iterable_1_1 = _context9.sent;\n\n            if (iterable_1_1.done) {\n              _context9.next = 21;\n              break;\n            }\n\n            maybeItr = iterable_1_1.value;\n\n            if (!(maybeItr && typeof maybeItr !== 'string' && (maybeItr[Symbol.iterator] || maybeItr[Symbol.asyncIterator]))) {\n              _context9.next = 15;\n              break;\n            }\n\n            _context9.t0 = __await;\n            return _context9.delegateYield(__asyncDelegator(__asyncValues(flatten(maybeItr))), \"t1\", 10);\n\n          case 10:\n            _context9.t2 = _context9.t1;\n            _context9.next = 13;\n            return (0, _context9.t0)(_context9.t2);\n\n          case 13:\n            _context9.next = 19;\n            break;\n\n          case 15:\n            _context9.next = 17;\n            return __await(maybeItr);\n\n          case 17:\n            _context9.next = 19;\n            return _context9.sent;\n\n          case 19:\n            _context9.next = 2;\n            break;\n\n          case 21:\n            _context9.next = 26;\n            break;\n\n          case 23:\n            _context9.prev = 23;\n            _context9.t3 = _context9[\"catch\"](0);\n            e_1 = {\n              error: _context9.t3\n            };\n\n          case 26:\n            _context9.prev = 26;\n            _context9.prev = 27;\n\n            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))) {\n              _context9.next = 31;\n              break;\n            }\n\n            _context9.next = 31;\n            return __await(_a.call(iterable_1));\n\n          case 31:\n            _context9.prev = 31;\n\n            if (!e_1) {\n              _context9.next = 34;\n              break;\n            }\n\n            throw e_1.error;\n\n          case 34:\n            return _context9.finish(31);\n\n          case 35:\n            return _context9.finish(26);\n\n          case 36:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, flatten_1, null, [[0, 23, 26, 36], [27,, 31, 35]]);\n  }));\n}\n\nfunction _map(func, iterable) {\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime.mark(function _map_1() {\n    var e_1, _a, iterable_1, iterable_1_1, val;\n\n    return _regeneratorRuntime.wrap(function _map_1$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.prev = 0;\n            iterable_1 = __asyncValues(iterable);\n\n          case 2:\n            _context10.next = 4;\n            return __await(iterable_1.next());\n\n          case 4:\n            iterable_1_1 = _context10.sent;\n\n            if (iterable_1_1.done) {\n              _context10.next = 17;\n              break;\n            }\n\n            val = iterable_1_1.value;\n            _context10.t0 = __await;\n            _context10.next = 10;\n            return __await(func(val));\n\n          case 10:\n            _context10.t1 = _context10.sent;\n            _context10.next = 13;\n            return (0, _context10.t0)(_context10.t1);\n\n          case 13:\n            _context10.next = 15;\n            return _context10.sent;\n\n          case 15:\n            _context10.next = 2;\n            break;\n\n          case 17:\n            _context10.next = 22;\n            break;\n\n          case 19:\n            _context10.prev = 19;\n            _context10.t2 = _context10[\"catch\"](0);\n            e_1 = {\n              error: _context10.t2\n            };\n\n          case 22:\n            _context10.prev = 22;\n            _context10.prev = 23;\n\n            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))) {\n              _context10.next = 27;\n              break;\n            }\n\n            _context10.next = 27;\n            return __await(_a.call(iterable_1));\n\n          case 27:\n            _context10.prev = 27;\n\n            if (!e_1) {\n              _context10.next = 30;\n              break;\n            }\n\n            throw e_1.error;\n\n          case 30:\n            return _context10.finish(27);\n\n          case 31:\n            return _context10.finish(22);\n\n          case 32:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _map_1, null, [[0, 19, 22, 32], [23,, 27, 31]]);\n  }));\n}\n\nfunction map(func, iterable) {\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return _map(func, curriedIterable);\n    };\n  }\n\n  return _map(func, iterable);\n}\n\nfunction flatMap(func, iterable) {\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return flatMap(func, curriedIterable);\n    };\n  }\n\n  return filter(function (i) {\n    return i !== undefined && i !== null;\n  }, flatten(map(func, iterable)));\n}\n\nfunction _flatTransform(concurrency, func, iterable) {\n  var iterator = getIterator(iterable);\n  var resultQueue = [];\n  var readQueue = [];\n  var ended = false;\n  var reading = false;\n  var inflightCount = 0;\n  var lastError = null;\n\n  function fulfillReadQueue() {\n    while (readQueue.length > 0 && resultQueue.length > 0) {\n      var _readQueue$shift2 = readQueue.shift(),\n          resolve = _readQueue$shift2.resolve;\n\n      var value = resultQueue.shift();\n      resolve({\n        done: false,\n        value: value\n      });\n    }\n\n    while (readQueue.length > 0 && inflightCount === 0 && ended) {\n      var _readQueue$shift3 = readQueue.shift(),\n          _resolve = _readQueue$shift3.resolve,\n          reject = _readQueue$shift3.reject;\n\n      if (lastError) {\n        reject(lastError);\n        lastError = null;\n      } else {\n        _resolve({\n          done: true,\n          value: undefined\n        });\n      }\n    }\n  }\n\n  function fillQueue() {\n    return _fillQueue2.apply(this, arguments);\n  }\n\n  function _fillQueue2() {\n    _fillQueue2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var _yield$iterator$next2, done, value;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              if (!ended) {\n                _context11.next = 3;\n                break;\n              }\n\n              fulfillReadQueue();\n              return _context11.abrupt(\"return\");\n\n            case 3:\n              if (!reading) {\n                _context11.next = 5;\n                break;\n              }\n\n              return _context11.abrupt(\"return\");\n\n            case 5:\n              if (!(inflightCount + resultQueue.length >= concurrency)) {\n                _context11.next = 7;\n                break;\n              }\n\n              return _context11.abrupt(\"return\");\n\n            case 7:\n              reading = true;\n              inflightCount++;\n              _context11.prev = 9;\n              _context11.next = 12;\n              return iterator.next();\n\n            case 12:\n              _yield$iterator$next2 = _context11.sent;\n              done = _yield$iterator$next2.done;\n              value = _yield$iterator$next2.value;\n\n              if (done) {\n                ended = true;\n                inflightCount--;\n                fulfillReadQueue();\n              } else {\n                mapAndQueue(value);\n              }\n\n              _context11.next = 24;\n              break;\n\n            case 18:\n              _context11.prev = 18;\n              _context11.t0 = _context11[\"catch\"](9);\n              ended = true;\n              inflightCount--;\n              lastError = _context11.t0;\n              fulfillReadQueue();\n\n            case 24:\n              reading = false;\n              fillQueue();\n\n            case 26:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee3, null, [[9, 18]]);\n    }));\n    return _fillQueue2.apply(this, arguments);\n  }\n\n  function mapAndQueue(_x3) {\n    return _mapAndQueue.apply(this, arguments);\n  }\n\n  function _mapAndQueue() {\n    _mapAndQueue = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(itrValue) {\n      var e_1, _a, value, _b, _c, asyncVal;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.prev = 0;\n              _context12.next = 3;\n              return func(itrValue);\n\n            case 3:\n              value = _context12.sent;\n\n              if (!(value && value[Symbol.asyncIterator])) {\n                _context12.next = 32;\n                break;\n              }\n\n              _context12.prev = 5;\n              _b = __asyncValues(value);\n\n            case 7:\n              _context12.next = 9;\n              return _b.next();\n\n            case 9:\n              _c = _context12.sent;\n\n              if (_c.done) {\n                _context12.next = 15;\n                break;\n              }\n\n              asyncVal = _c.value;\n              resultQueue.push(asyncVal);\n\n            case 13:\n              _context12.next = 7;\n              break;\n\n            case 15:\n              _context12.next = 20;\n              break;\n\n            case 17:\n              _context12.prev = 17;\n              _context12.t0 = _context12[\"catch\"](5);\n              e_1 = {\n                error: _context12.t0\n              };\n\n            case 20:\n              _context12.prev = 20;\n              _context12.prev = 21;\n\n              if (!(_c && !_c.done && (_a = _b.return))) {\n                _context12.next = 25;\n                break;\n              }\n\n              _context12.next = 25;\n              return _a.call(_b);\n\n            case 25:\n              _context12.prev = 25;\n\n              if (!e_1) {\n                _context12.next = 28;\n                break;\n              }\n\n              throw e_1.error;\n\n            case 28:\n              return _context12.finish(25);\n\n            case 29:\n              return _context12.finish(20);\n\n            case 30:\n              _context12.next = 33;\n              break;\n\n            case 32:\n              resultQueue.push(value);\n\n            case 33:\n              _context12.next = 39;\n              break;\n\n            case 35:\n              _context12.prev = 35;\n              _context12.t1 = _context12[\"catch\"](0);\n              ended = true;\n              lastError = _context12.t1;\n\n            case 39:\n              inflightCount--;\n              fulfillReadQueue();\n              fillQueue();\n\n            case 42:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee4, null, [[0, 35], [5, 17, 20, 30], [21,, 25, 29]]);\n    }));\n    return _mapAndQueue.apply(this, arguments);\n  }\n\n  function next() {\n    return _next2.apply(this, arguments);\n  }\n\n  function _next2() {\n    _next2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var deferred, value;\n      return _regeneratorRuntime.wrap(function _callee5$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              if (!(resultQueue.length === 0)) {\n                _context13.next = 5;\n                break;\n              }\n\n              deferred = defer();\n              readQueue.push(deferred);\n              fillQueue();\n              return _context13.abrupt(\"return\", deferred.promise);\n\n            case 5:\n              value = resultQueue.shift();\n              fillQueue();\n              return _context13.abrupt(\"return\", {\n                done: false,\n                value: value\n              });\n\n            case 8:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _next2.apply(this, arguments);\n  }\n\n  var asyncIterableIterator = _defineProperty({\n    next: next\n  }, Symbol.asyncIterator, function () {\n    return asyncIterableIterator;\n  });\n\n  return asyncIterableIterator;\n}\n\nfunction flatTransform(concurrency, func, iterable) {\n  if (func === undefined) {\n    return function (curriedFunc, curriedIterable) {\n      return curriedIterable ? flatTransform(concurrency, curriedFunc, curriedIterable) : flatTransform(concurrency, curriedFunc);\n    };\n  }\n\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return flatTransform(concurrency, func, curriedIterable);\n    };\n  }\n\n  return filter(function (i) {\n    return i !== undefined && i !== null;\n  }, flatten(_flatTransform(concurrency, func, iterable)));\n}\n\nfunction onceReadable(_x4) {\n  return _onceReadable.apply(this, arguments);\n}\n\nfunction _onceReadable() {\n  _onceReadable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(stream) {\n    return _regeneratorRuntime.wrap(function _callee13$(_context30) {\n      while (1) {\n        switch (_context30.prev = _context30.next) {\n          case 0:\n            return _context30.abrupt(\"return\", new Promise(function (resolve) {\n              stream.once('readable', function () {\n                resolve();\n              });\n            }));\n\n          case 1:\n          case \"end\":\n            return _context30.stop();\n        }\n      }\n    }, _callee13);\n  }));\n  return _onceReadable.apply(this, arguments);\n}\n\nfunction _fromStream(stream) {\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime.mark(function _fromStream_1() {\n    var data;\n    return _regeneratorRuntime.wrap(function _fromStream_1$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            if (!true) {\n              _context14.next = 16;\n              break;\n            }\n\n            data = stream.read();\n\n            if (!(data !== null)) {\n              _context14.next = 8;\n              break;\n            }\n\n            _context14.next = 5;\n            return __await(data);\n\n          case 5:\n            _context14.next = 7;\n            return _context14.sent;\n\n          case 7:\n            return _context14.abrupt(\"continue\", 0);\n\n          case 8:\n            if (!stream._readableState.ended) {\n              _context14.next = 12;\n              break;\n            }\n\n            _context14.next = 11;\n            return __await(void 0);\n\n          case 11:\n            return _context14.abrupt(\"return\", _context14.sent);\n\n          case 12:\n            _context14.next = 14;\n            return __await(onceReadable(stream));\n\n          case 14:\n            _context14.next = 0;\n            break;\n\n          case 16:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, _fromStream_1);\n  }));\n}\n\nfunction fromStream(stream) {\n  if (typeof stream[Symbol.asyncIterator] === 'function') {\n    return stream;\n  }\n\n  return _fromStream(stream);\n}\n\nfunction merge() {\n  for (var _len2 = arguments.length, iterables = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    iterables[_key2] = arguments[_key2];\n  }\n\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime.mark(function merge_1() {\n    var sources, _iterator4, _step4, iterator, nextVal;\n\n    return _regeneratorRuntime.wrap(function merge_1$(_context15) {\n      while (1) {\n        switch (_context15.prev = _context15.next) {\n          case 0:\n            sources = new Set(iterables.map(getIterator));\n\n          case 1:\n            if (!(sources.size > 0)) {\n              _context15.next = 30;\n              break;\n            }\n\n            _iterator4 = _createForOfIteratorHelper(sources);\n            _context15.prev = 3;\n\n            _iterator4.s();\n\n          case 5:\n            if ((_step4 = _iterator4.n()).done) {\n              _context15.next = 20;\n              break;\n            }\n\n            iterator = _step4.value;\n            _context15.next = 9;\n            return __await(iterator.next());\n\n          case 9:\n            nextVal = _context15.sent;\n\n            if (!nextVal.done) {\n              _context15.next = 14;\n              break;\n            }\n\n            sources.delete(iterator);\n            _context15.next = 18;\n            break;\n\n          case 14:\n            _context15.next = 16;\n            return __await(nextVal.value);\n\n          case 16:\n            _context15.next = 18;\n            return _context15.sent;\n\n          case 18:\n            _context15.next = 5;\n            break;\n\n          case 20:\n            _context15.next = 25;\n            break;\n\n          case 22:\n            _context15.prev = 22;\n            _context15.t0 = _context15[\"catch\"](3);\n\n            _iterator4.e(_context15.t0);\n\n          case 25:\n            _context15.prev = 25;\n\n            _iterator4.f();\n\n            return _context15.finish(25);\n\n          case 28:\n            _context15.next = 1;\n            break;\n\n          case 30:\n          case \"end\":\n            return _context15.stop();\n        }\n      }\n    }, merge_1, null, [[3, 22, 25, 28]]);\n  }));\n}\n\nfunction pipeline(firstFn) {\n  var previousFn = firstFn();\n\n  for (var _len3 = arguments.length, fns = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    fns[_key3 - 1] = arguments[_key3];\n  }\n\n  for (var _i2 = 0, _fns = fns; _i2 < _fns.length; _i2++) {\n    var func = _fns[_i2];\n    previousFn = func(previousFn);\n  }\n\n  return previousFn;\n}\n\nfunction _parallelMap(concurrency, func, iterable) {\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime.mark(function _parallelMap_1() {\n    var transformError, wrapFunc, stopOnError, output, itr, _yield$__await, value, done, val;\n\n    return _regeneratorRuntime.wrap(function _parallelMap_1$(_context17) {\n      while (1) {\n        switch (_context17.prev = _context17.next) {\n          case 0:\n            transformError = null;\n\n            wrapFunc = function wrapFunc(value) {\n              return {\n                value: func(value)\n              };\n            };\n\n            stopOnError = function stopOnError(source) {\n              return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n                var e_1, _a, source_1, source_1_1, value;\n\n                return _regeneratorRuntime.wrap(function _callee6$(_context16) {\n                  while (1) {\n                    switch (_context16.prev = _context16.next) {\n                      case 0:\n                        _context16.prev = 0;\n                        source_1 = __asyncValues(source);\n\n                      case 2:\n                        _context16.next = 4;\n                        return __await(source_1.next());\n\n                      case 4:\n                        source_1_1 = _context16.sent;\n\n                        if (source_1_1.done) {\n                          _context16.next = 17;\n                          break;\n                        }\n\n                        value = source_1_1.value;\n\n                        if (!transformError) {\n                          _context16.next = 11;\n                          break;\n                        }\n\n                        _context16.next = 10;\n                        return __await(void 0);\n\n                      case 10:\n                        return _context16.abrupt(\"return\", _context16.sent);\n\n                      case 11:\n                        _context16.next = 13;\n                        return __await(value);\n\n                      case 13:\n                        _context16.next = 15;\n                        return _context16.sent;\n\n                      case 15:\n                        _context16.next = 2;\n                        break;\n\n                      case 17:\n                        _context16.next = 22;\n                        break;\n\n                      case 19:\n                        _context16.prev = 19;\n                        _context16.t0 = _context16[\"catch\"](0);\n                        e_1 = {\n                          error: _context16.t0\n                        };\n\n                      case 22:\n                        _context16.prev = 22;\n                        _context16.prev = 23;\n\n                        if (!(source_1_1 && !source_1_1.done && (_a = source_1.return))) {\n                          _context16.next = 27;\n                          break;\n                        }\n\n                        _context16.next = 27;\n                        return __await(_a.call(source_1));\n\n                      case 27:\n                        _context16.prev = 27;\n\n                        if (!e_1) {\n                          _context16.next = 30;\n                          break;\n                        }\n\n                        throw e_1.error;\n\n                      case 30:\n                        return _context16.finish(27);\n\n                      case 31:\n                        return _context16.finish(22);\n\n                      case 32:\n                      case \"end\":\n                        return _context16.stop();\n                    }\n                  }\n                }, _callee6, null, [[0, 19, 22, 32], [23,, 27, 31]]);\n              }));\n            };\n\n            output = pipeline(function () {\n              return iterable;\n            }, buffer(1), stopOnError, map(wrapFunc), buffer(concurrency));\n            itr = getIterator(output);\n\n          case 5:\n            if (!true) {\n              _context17.next = 29;\n              break;\n            }\n\n            _context17.next = 8;\n            return __await(itr.next());\n\n          case 8:\n            _yield$__await = _context17.sent;\n            value = _yield$__await.value;\n            done = _yield$__await.done;\n\n            if (!done) {\n              _context17.next = 13;\n              break;\n            }\n\n            return _context17.abrupt(\"break\", 29);\n\n          case 13:\n            _context17.prev = 13;\n            _context17.next = 16;\n            return __await(value.value);\n\n          case 16:\n            val = _context17.sent;\n\n            if (transformError) {\n              _context17.next = 22;\n              break;\n            }\n\n            _context17.next = 20;\n            return __await(val);\n\n          case 20:\n            _context17.next = 22;\n            return _context17.sent;\n\n          case 22:\n            _context17.next = 27;\n            break;\n\n          case 24:\n            _context17.prev = 24;\n            _context17.t0 = _context17[\"catch\"](13);\n            transformError = _context17.t0;\n\n          case 27:\n            _context17.next = 5;\n            break;\n\n          case 29:\n            if (!transformError) {\n              _context17.next = 31;\n              break;\n            }\n\n            throw transformError;\n\n          case 31:\n          case \"end\":\n            return _context17.stop();\n        }\n      }\n    }, _parallelMap_1, null, [[13, 24]]);\n  }));\n}\n\nfunction parallelMap(concurrency, func, iterable) {\n  if (func === undefined) {\n    return function (curriedFunc, curriedIterable) {\n      return parallelMap(concurrency, curriedFunc, curriedIterable);\n    };\n  }\n\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return parallelMap(concurrency, func, curriedIterable);\n    };\n  }\n\n  return _parallelMap(concurrency, func, iterable);\n}\n\nfunction parallelFlatMap(concurrency, func, iterable) {\n  if (func === undefined) {\n    return function (curriedFunc, curriedIterable) {\n      return curriedIterable ? parallelFlatMap(concurrency, curriedFunc, curriedIterable) : parallelFlatMap(concurrency, curriedFunc);\n    };\n  }\n\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return parallelFlatMap(concurrency, func, curriedIterable);\n    };\n  }\n\n  return filter(function (i) {\n    return i !== undefined && i !== null;\n  }, flatten(parallelMap(concurrency, func, iterable)));\n}\n\nfunction parallelMerge() {\n  for (var _len4 = arguments.length, iterables = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    iterables[_key4] = arguments[_key4];\n  }\n\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime.mark(function parallelMerge_1() {\n    var inputs, concurrentWork, values, lastError, errCb, valueCb, notifyError, notifyDone, waitForQueue, queueNext, _iterator5, _step5, _input, _iterator6, _step6, _step6$value, input, value;\n\n    return _regeneratorRuntime.wrap(function parallelMerge_1$(_context19) {\n      while (1) {\n        switch (_context19.prev = _context19.next) {\n          case 0:\n            inputs = iterables.map(getIterator);\n            concurrentWork = new Set();\n            values = new Map();\n            lastError = null;\n            errCb = null;\n            valueCb = null;\n\n            notifyError = function notifyError(err) {\n              lastError = err;\n\n              if (errCb) {\n                errCb(err);\n              }\n            };\n\n            notifyDone = function notifyDone(value) {\n              if (valueCb) {\n                valueCb(value);\n              }\n            };\n\n            waitForQueue = function waitForQueue() {\n              return new Promise(function (resolve, reject) {\n                if (lastError) {\n                  reject(lastError);\n                }\n\n                if (values.size > 0) {\n                  return resolve();\n                }\n\n                valueCb = resolve;\n                errCb = reject;\n              });\n            };\n\n            queueNext = function queueNext(input) {\n              var nextVal = Promise.resolve(input.next()).then( /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(_ref) {\n                  var done, value;\n                  return _regeneratorRuntime.wrap(function _callee7$(_context18) {\n                    while (1) {\n                      switch (_context18.prev = _context18.next) {\n                        case 0:\n                          done = _ref.done, value = _ref.value;\n\n                          if (!done) {\n                            values.set(input, value);\n                          }\n\n                          concurrentWork.delete(nextVal);\n\n                        case 3:\n                        case \"end\":\n                          return _context18.stop();\n                      }\n                    }\n                  }, _callee7);\n                }));\n\n                return function (_x5) {\n                  return _ref2.apply(this, arguments);\n                };\n              }());\n              concurrentWork.add(nextVal);\n              nextVal.then(notifyDone, notifyError);\n            };\n\n            _iterator5 = _createForOfIteratorHelper(inputs);\n\n            try {\n              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                _input = _step5.value;\n                queueNext(_input);\n              }\n            } catch (err) {\n              _iterator5.e(err);\n            } finally {\n              _iterator5.f();\n            }\n\n          case 12:\n            if (!true) {\n              _context19.next = 42;\n              break;\n            }\n\n            if (!(concurrentWork.size === 0 && values.size === 0)) {\n              _context19.next = 17;\n              break;\n            }\n\n            _context19.next = 16;\n            return __await(void 0);\n\n          case 16:\n            return _context19.abrupt(\"return\", _context19.sent);\n\n          case 17:\n            _context19.next = 19;\n            return __await(waitForQueue());\n\n          case 19:\n            _iterator6 = _createForOfIteratorHelper(values);\n            _context19.prev = 20;\n\n            _iterator6.s();\n\n          case 22:\n            if ((_step6 = _iterator6.n()).done) {\n              _context19.next = 32;\n              break;\n            }\n\n            _step6$value = _slicedToArray(_step6.value, 2), input = _step6$value[0], value = _step6$value[1];\n            values.delete(input);\n            _context19.next = 27;\n            return __await(value);\n\n          case 27:\n            _context19.next = 29;\n            return _context19.sent;\n\n          case 29:\n            queueNext(input);\n\n          case 30:\n            _context19.next = 22;\n            break;\n\n          case 32:\n            _context19.next = 37;\n            break;\n\n          case 34:\n            _context19.prev = 34;\n            _context19.t0 = _context19[\"catch\"](20);\n\n            _iterator6.e(_context19.t0);\n\n          case 37:\n            _context19.prev = 37;\n\n            _iterator6.f();\n\n            return _context19.finish(37);\n\n          case 40:\n            _context19.next = 12;\n            break;\n\n          case 42:\n          case \"end\":\n            return _context19.stop();\n        }\n      }\n    }, parallelMerge_1, null, [[20, 34, 37, 40]]);\n  }));\n}\n\nfunction _reduce(_x6, _x7, _x8) {\n  return _reduce2.apply(this, arguments);\n}\n\nfunction _reduce2() {\n  _reduce2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(func, start, iterable) {\n    var e_1, _a, value, iterable_1, iterable_1_1, nextItem;\n\n    return _regeneratorRuntime.wrap(function _callee14$(_context31) {\n      while (1) {\n        switch (_context31.prev = _context31.next) {\n          case 0:\n            value = start;\n            _context31.prev = 1;\n            iterable_1 = __asyncValues(iterable);\n\n          case 3:\n            _context31.next = 5;\n            return iterable_1.next();\n\n          case 5:\n            iterable_1_1 = _context31.sent;\n\n            if (iterable_1_1.done) {\n              _context31.next = 13;\n              break;\n            }\n\n            nextItem = iterable_1_1.value;\n            _context31.next = 10;\n            return func(value, nextItem);\n\n          case 10:\n            value = _context31.sent;\n\n          case 11:\n            _context31.next = 3;\n            break;\n\n          case 13:\n            _context31.next = 18;\n            break;\n\n          case 15:\n            _context31.prev = 15;\n            _context31.t0 = _context31[\"catch\"](1);\n            e_1 = {\n              error: _context31.t0\n            };\n\n          case 18:\n            _context31.prev = 18;\n            _context31.prev = 19;\n\n            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))) {\n              _context31.next = 23;\n              break;\n            }\n\n            _context31.next = 23;\n            return _a.call(iterable_1);\n\n          case 23:\n            _context31.prev = 23;\n\n            if (!e_1) {\n              _context31.next = 26;\n              break;\n            }\n\n            throw e_1.error;\n\n          case 26:\n            return _context31.finish(23);\n\n          case 27:\n            return _context31.finish(18);\n\n          case 28:\n            return _context31.abrupt(\"return\", value);\n\n          case 29:\n          case \"end\":\n            return _context31.stop();\n        }\n      }\n    }, _callee14, null, [[1, 15, 18, 28], [19,, 23, 27]]);\n  }));\n  return _reduce2.apply(this, arguments);\n}\n\nfunction reduce(func, start, iterable) {\n  if (start === undefined) {\n    return function (curriedStart, curriedIterable) {\n      return curriedIterable ? reduce(func, curriedStart, curriedIterable) : reduce(func, curriedStart);\n    };\n  }\n\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return reduce(func, start, curriedIterable);\n    };\n  }\n\n  return _reduce(func, start, iterable);\n}\n\nfunction _take(count, iterable) {\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime.mark(function _take_1() {\n    var e_1, _a, taken, iterable_1, iterable_1_1, val;\n\n    return _regeneratorRuntime.wrap(function _take_1$(_context20) {\n      while (1) {\n        switch (_context20.prev = _context20.next) {\n          case 0:\n            taken = 0;\n            _context20.prev = 1;\n            iterable_1 = __asyncValues(iterable);\n\n          case 3:\n            _context20.next = 5;\n            return __await(iterable_1.next());\n\n          case 5:\n            iterable_1_1 = _context20.sent;\n\n            if (iterable_1_1.done) {\n              _context20.next = 23;\n              break;\n            }\n\n            val = iterable_1_1.value;\n            _context20.t0 = __await;\n            _context20.next = 11;\n            return __await(val);\n\n          case 11:\n            _context20.t1 = _context20.sent;\n            _context20.next = 14;\n            return (0, _context20.t0)(_context20.t1);\n\n          case 14:\n            _context20.next = 16;\n            return _context20.sent;\n\n          case 16:\n            taken++;\n\n            if (!(taken >= count)) {\n              _context20.next = 21;\n              break;\n            }\n\n            _context20.next = 20;\n            return __await(void 0);\n\n          case 20:\n            return _context20.abrupt(\"return\", _context20.sent);\n\n          case 21:\n            _context20.next = 3;\n            break;\n\n          case 23:\n            _context20.next = 28;\n            break;\n\n          case 25:\n            _context20.prev = 25;\n            _context20.t2 = _context20[\"catch\"](1);\n            e_1 = {\n              error: _context20.t2\n            };\n\n          case 28:\n            _context20.prev = 28;\n            _context20.prev = 29;\n\n            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))) {\n              _context20.next = 33;\n              break;\n            }\n\n            _context20.next = 33;\n            return __await(_a.call(iterable_1));\n\n          case 33:\n            _context20.prev = 33;\n\n            if (!e_1) {\n              _context20.next = 36;\n              break;\n            }\n\n            throw e_1.error;\n\n          case 36:\n            return _context20.finish(33);\n\n          case 37:\n            return _context20.finish(28);\n\n          case 38:\n          case \"end\":\n            return _context20.stop();\n        }\n      }\n    }, _take_1, null, [[1, 25, 28, 38], [29,, 33, 37]]);\n  }));\n}\n\nfunction _syncTake(count, iterable) {\n  var taken, _iterator7, _step7, val;\n\n  return _regeneratorRuntime.wrap(function _syncTake$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          taken = 0;\n          _iterator7 = _createForOfIteratorHelper(iterable);\n          _context21.prev = 2;\n\n          _iterator7.s();\n\n        case 4:\n          if ((_step7 = _iterator7.n()).done) {\n            _context21.next = 13;\n            break;\n          }\n\n          val = _step7.value;\n          _context21.next = 8;\n          return val;\n\n        case 8:\n          taken++;\n\n          if (!(taken >= count)) {\n            _context21.next = 11;\n            break;\n          }\n\n          return _context21.abrupt(\"return\");\n\n        case 11:\n          _context21.next = 4;\n          break;\n\n        case 13:\n          _context21.next = 18;\n          break;\n\n        case 15:\n          _context21.prev = 15;\n          _context21.t0 = _context21[\"catch\"](2);\n\n          _iterator7.e(_context21.t0);\n\n        case 18:\n          _context21.prev = 18;\n\n          _iterator7.f();\n\n          return _context21.finish(18);\n\n        case 21:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked4, null, [[2, 15, 18, 21]]);\n}\n\nfunction take(count, iterable) {\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return take(count, curriedIterable);\n    };\n  }\n\n  if (iterable[Symbol.asyncIterator]) {\n    return _take(count, iterable);\n  }\n\n  return _syncTake(count, iterable);\n}\n\nfunction _asyncTap(func, iterable) {\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime.mark(function _asyncTap_1() {\n    var e_1, _a, iterable_1, iterable_1_1, val;\n\n    return _regeneratorRuntime.wrap(function _asyncTap_1$(_context22) {\n      while (1) {\n        switch (_context22.prev = _context22.next) {\n          case 0:\n            _context22.prev = 0;\n            iterable_1 = __asyncValues(iterable);\n\n          case 2:\n            _context22.next = 4;\n            return __await(iterable_1.next());\n\n          case 4:\n            iterable_1_1 = _context22.sent;\n\n            if (iterable_1_1.done) {\n              _context22.next = 15;\n              break;\n            }\n\n            val = iterable_1_1.value;\n            _context22.next = 9;\n            return __await(func(val));\n\n          case 9:\n            _context22.next = 11;\n            return __await(val);\n\n          case 11:\n            _context22.next = 13;\n            return _context22.sent;\n\n          case 13:\n            _context22.next = 2;\n            break;\n\n          case 15:\n            _context22.next = 20;\n            break;\n\n          case 17:\n            _context22.prev = 17;\n            _context22.t0 = _context22[\"catch\"](0);\n            e_1 = {\n              error: _context22.t0\n            };\n\n          case 20:\n            _context22.prev = 20;\n            _context22.prev = 21;\n\n            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))) {\n              _context22.next = 25;\n              break;\n            }\n\n            _context22.next = 25;\n            return __await(_a.call(iterable_1));\n\n          case 25:\n            _context22.prev = 25;\n\n            if (!e_1) {\n              _context22.next = 28;\n              break;\n            }\n\n            throw e_1.error;\n\n          case 28:\n            return _context22.finish(25);\n\n          case 29:\n            return _context22.finish(20);\n\n          case 30:\n          case \"end\":\n            return _context22.stop();\n        }\n      }\n    }, _asyncTap_1, null, [[0, 17, 20, 30], [21,, 25, 29]]);\n  }));\n}\n\nfunction tap(func, iterable) {\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return _asyncTap(func, curriedIterable);\n    };\n  }\n\n  return _asyncTap(func, iterable);\n}\n\nfunction addTime(a, b) {\n  var seconds = a[0] + b[0];\n  var nanoseconds = a[1] + b[1];\n\n  if (nanoseconds >= 1000000000) {\n    var remainder = nanoseconds % 1000000000;\n    seconds += (nanoseconds - remainder) / 1000000000;\n    nanoseconds = remainder;\n  }\n\n  return [seconds, nanoseconds];\n}\n\nfunction _asyncTime(config, iterable) {\n  return __asyncGenerator(this, arguments, /*#__PURE__*/_regeneratorRuntime.mark(function _asyncTime_1() {\n    var itr, total, start, _yield$__await2, value, done, delta;\n\n    return _regeneratorRuntime.wrap(function _asyncTime_1$(_context23) {\n      while (1) {\n        switch (_context23.prev = _context23.next) {\n          case 0:\n            itr = iterable[Symbol.asyncIterator]();\n            total = [0, 0];\n\n          case 2:\n            if (!true) {\n              _context23.next = 23;\n              break;\n            }\n\n            start = process.hrtime();\n            _context23.next = 6;\n            return __await(itr.next());\n\n          case 6:\n            _yield$__await2 = _context23.sent;\n            value = _yield$__await2.value;\n            done = _yield$__await2.done;\n            delta = process.hrtime(start);\n            total = addTime(total, delta);\n\n            if (config.progress) {\n              config.progress(delta, total);\n            }\n\n            if (!done) {\n              _context23.next = 17;\n              break;\n            }\n\n            if (config.total) {\n              config.total(total);\n            }\n\n            _context23.next = 16;\n            return __await(value);\n\n          case 16:\n            return _context23.abrupt(\"return\", _context23.sent);\n\n          case 17:\n            _context23.next = 19;\n            return __await(value);\n\n          case 19:\n            _context23.next = 21;\n            return _context23.sent;\n\n          case 21:\n            _context23.next = 2;\n            break;\n\n          case 23:\n          case \"end\":\n            return _context23.stop();\n        }\n      }\n    }, _asyncTime_1);\n  }));\n}\n\nfunction _syncTime(config, iterable) {\n  var itr, total, start, _itr$next, value, done, delta;\n\n  return _regeneratorRuntime.wrap(function _syncTime$(_context24) {\n    while (1) {\n      switch (_context24.prev = _context24.next) {\n        case 0:\n          itr = iterable[Symbol.iterator]();\n          total = [0, 0];\n\n        case 2:\n          if (!true) {\n            _context24.next = 15;\n            break;\n          }\n\n          start = process.hrtime();\n          _itr$next = itr.next(), value = _itr$next.value, done = _itr$next.done;\n          delta = process.hrtime(start);\n          total = addTime(total, delta);\n\n          if (config.progress) {\n            config.progress(delta, total);\n          }\n\n          if (!done) {\n            _context24.next = 11;\n            break;\n          }\n\n          if (config.total) {\n            config.total(total);\n          }\n\n          return _context24.abrupt(\"return\", value);\n\n        case 11:\n          _context24.next = 13;\n          return value;\n\n        case 13:\n          _context24.next = 2;\n          break;\n\n        case 15:\n        case \"end\":\n          return _context24.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction time() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var iterable = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return time(config, curriedIterable);\n    };\n  }\n\n  if (iterable[Symbol.asyncIterator] !== undefined) {\n    return _asyncTime(config, iterable);\n  } else {\n    return _syncTime(config, iterable);\n  }\n}\n\nfunction _transform(concurrency, func, iterable) {\n  var iterator = getIterator(iterable);\n  var resultQueue = [];\n  var readQueue = [];\n  var ended = false;\n  var reading = false;\n  var inflightCount = 0;\n  var lastError = null;\n\n  function fulfillReadQueue() {\n    while (readQueue.length > 0 && resultQueue.length > 0) {\n      var _readQueue$shift4 = readQueue.shift(),\n          resolve = _readQueue$shift4.resolve;\n\n      var value = resultQueue.shift();\n      resolve({\n        done: false,\n        value: value\n      });\n    }\n\n    while (readQueue.length > 0 && inflightCount === 0 && ended) {\n      var _readQueue$shift5 = readQueue.shift(),\n          _resolve2 = _readQueue$shift5.resolve,\n          reject = _readQueue$shift5.reject;\n\n      if (lastError) {\n        reject(lastError);\n        lastError = null;\n      } else {\n        _resolve2({\n          done: true,\n          value: undefined\n        });\n      }\n    }\n  }\n\n  function fillQueue() {\n    return _fillQueue3.apply(this, arguments);\n  }\n\n  function _fillQueue3() {\n    _fillQueue3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n      var _yield$iterator$next3, done, value;\n\n      return _regeneratorRuntime.wrap(function _callee8$(_context25) {\n        while (1) {\n          switch (_context25.prev = _context25.next) {\n            case 0:\n              if (!ended) {\n                _context25.next = 3;\n                break;\n              }\n\n              fulfillReadQueue();\n              return _context25.abrupt(\"return\");\n\n            case 3:\n              if (!reading) {\n                _context25.next = 5;\n                break;\n              }\n\n              return _context25.abrupt(\"return\");\n\n            case 5:\n              if (!(inflightCount + resultQueue.length >= concurrency)) {\n                _context25.next = 7;\n                break;\n              }\n\n              return _context25.abrupt(\"return\");\n\n            case 7:\n              reading = true;\n              inflightCount++;\n              _context25.prev = 9;\n              _context25.next = 12;\n              return iterator.next();\n\n            case 12:\n              _yield$iterator$next3 = _context25.sent;\n              done = _yield$iterator$next3.done;\n              value = _yield$iterator$next3.value;\n\n              if (done) {\n                ended = true;\n                inflightCount--;\n                fulfillReadQueue();\n              } else {\n                mapAndQueue(value);\n              }\n\n              _context25.next = 24;\n              break;\n\n            case 18:\n              _context25.prev = 18;\n              _context25.t0 = _context25[\"catch\"](9);\n              ended = true;\n              inflightCount--;\n              lastError = _context25.t0;\n              fulfillReadQueue();\n\n            case 24:\n              reading = false;\n              fillQueue();\n\n            case 26:\n            case \"end\":\n              return _context25.stop();\n          }\n        }\n      }, _callee8, null, [[9, 18]]);\n    }));\n    return _fillQueue3.apply(this, arguments);\n  }\n\n  function mapAndQueue(_x9) {\n    return _mapAndQueue2.apply(this, arguments);\n  }\n\n  function _mapAndQueue2() {\n    _mapAndQueue2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(itrValue) {\n      var value;\n      return _regeneratorRuntime.wrap(function _callee9$(_context26) {\n        while (1) {\n          switch (_context26.prev = _context26.next) {\n            case 0:\n              _context26.prev = 0;\n              _context26.next = 3;\n              return func(itrValue);\n\n            case 3:\n              value = _context26.sent;\n              resultQueue.push(value);\n              _context26.next = 11;\n              break;\n\n            case 7:\n              _context26.prev = 7;\n              _context26.t0 = _context26[\"catch\"](0);\n              ended = true;\n              lastError = _context26.t0;\n\n            case 11:\n              inflightCount--;\n              fulfillReadQueue();\n              fillQueue();\n\n            case 14:\n            case \"end\":\n              return _context26.stop();\n          }\n        }\n      }, _callee9, null, [[0, 7]]);\n    }));\n    return _mapAndQueue2.apply(this, arguments);\n  }\n\n  function next() {\n    return _next3.apply(this, arguments);\n  }\n\n  function _next3() {\n    _next3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n      var deferred, value;\n      return _regeneratorRuntime.wrap(function _callee10$(_context27) {\n        while (1) {\n          switch (_context27.prev = _context27.next) {\n            case 0:\n              if (!(resultQueue.length === 0)) {\n                _context27.next = 5;\n                break;\n              }\n\n              deferred = defer();\n              readQueue.push(deferred);\n              fillQueue();\n              return _context27.abrupt(\"return\", deferred.promise);\n\n            case 5:\n              value = resultQueue.shift();\n              fillQueue();\n              return _context27.abrupt(\"return\", {\n                done: false,\n                value: value\n              });\n\n            case 8:\n            case \"end\":\n              return _context27.stop();\n          }\n        }\n      }, _callee10);\n    }));\n    return _next3.apply(this, arguments);\n  }\n\n  var asyncIterableIterator = _defineProperty({\n    next: next\n  }, Symbol.asyncIterator, function () {\n    return asyncIterableIterator;\n  });\n\n  return asyncIterableIterator;\n}\n\nfunction transform(concurrency, func, iterable) {\n  if (func === undefined) {\n    return function (curriedFunc, curriedIterable) {\n      return curriedIterable ? transform(concurrency, curriedFunc, curriedIterable) : transform(concurrency, curriedFunc);\n    };\n  }\n\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return transform(concurrency, func, curriedIterable);\n    };\n  }\n\n  return _transform(concurrency, func, iterable);\n}\n\nfunction _writeToStream(_x10, _x11) {\n  return _writeToStream2.apply(this, arguments);\n}\n\nfunction _writeToStream2() {\n  _writeToStream2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(stream, iterable) {\n    var e_1, _a, lastError, errCb, drainCb, notifyError, notifyDrain, cleanup, waitForDrain, iterable_1, iterable_1_1, value;\n\n    return _regeneratorRuntime.wrap(function _callee15$(_context32) {\n      while (1) {\n        switch (_context32.prev = _context32.next) {\n          case 0:\n            lastError = null;\n            errCb = null;\n            drainCb = null;\n\n            notifyError = function notifyError(err) {\n              lastError = err;\n\n              if (errCb) {\n                errCb(err);\n              }\n            };\n\n            notifyDrain = function notifyDrain() {\n              if (drainCb) {\n                drainCb();\n              }\n            };\n\n            cleanup = function cleanup() {\n              stream.removeListener('error', notifyError);\n              stream.removeListener('drain', notifyDrain);\n            };\n\n            stream.once('error', notifyError);\n\n            waitForDrain = function waitForDrain() {\n              return new Promise(function (resolve, reject) {\n                if (lastError) {\n                  return reject(lastError);\n                }\n\n                stream.once('drain', notifyDrain);\n                drainCb = resolve;\n                errCb = reject;\n              });\n            };\n\n            _context32.prev = 8;\n            iterable_1 = __asyncValues(iterable);\n\n          case 10:\n            _context32.next = 12;\n            return iterable_1.next();\n\n          case 12:\n            iterable_1_1 = _context32.sent;\n\n            if (iterable_1_1.done) {\n              _context32.next = 22;\n              break;\n            }\n\n            value = iterable_1_1.value;\n\n            if (!(stream.write(value) === false)) {\n              _context32.next = 18;\n              break;\n            }\n\n            _context32.next = 18;\n            return waitForDrain();\n\n          case 18:\n            if (!lastError) {\n              _context32.next = 20;\n              break;\n            }\n\n            return _context32.abrupt(\"break\", 22);\n\n          case 20:\n            _context32.next = 10;\n            break;\n\n          case 22:\n            _context32.next = 27;\n            break;\n\n          case 24:\n            _context32.prev = 24;\n            _context32.t0 = _context32[\"catch\"](8);\n            e_1 = {\n              error: _context32.t0\n            };\n\n          case 27:\n            _context32.prev = 27;\n            _context32.prev = 28;\n\n            if (!(iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))) {\n              _context32.next = 32;\n              break;\n            }\n\n            _context32.next = 32;\n            return _a.call(iterable_1);\n\n          case 32:\n            _context32.prev = 32;\n\n            if (!e_1) {\n              _context32.next = 35;\n              break;\n            }\n\n            throw e_1.error;\n\n          case 35:\n            return _context32.finish(32);\n\n          case 36:\n            return _context32.finish(27);\n\n          case 37:\n            cleanup();\n\n            if (!lastError) {\n              _context32.next = 40;\n              break;\n            }\n\n            throw lastError;\n\n          case 40:\n          case \"end\":\n            return _context32.stop();\n        }\n      }\n    }, _callee15, null, [[8, 24, 27, 37], [28,, 32, 36]]);\n  }));\n  return _writeToStream2.apply(this, arguments);\n}\n\nfunction writeToStream(stream, iterable) {\n  if (iterable === undefined) {\n    return function (curriedIterable) {\n      return _writeToStream(stream, curriedIterable);\n    };\n  }\n\n  return _writeToStream(stream, iterable);\n} /// <reference lib=\"esnext.asynciterable\" />\n\n\nif (Symbol.asyncIterator === undefined) {\n  Symbol.asyncIterator = Symbol.for('asyncIterator');\n}\n\nexport { batch, buffer, collect, concat, consume, filter, flatMap, flatten, flatTransform, fromStream, getIterator, map, merge, parallelFlatMap, parallelMap, parallelMerge, pipeline, reduce, take, tap, time, transform, writeToStream };","map":null,"metadata":{},"sourceType":"module"}