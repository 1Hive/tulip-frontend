{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar mh = require('multihashes');\n\nvar utils = require('../utils');\n\nvar Run = require('./run');\n/**\n * Divide peers up into disjoint paths (subqueries). Any peer can only be used once over all paths.\n * Within each path, query peers from closest to farthest away.\n */\n\n\nvar Query = /*#__PURE__*/function () {\n  /**\n   * User-supplied function to set up an individual disjoint path. Per-path\n   * query state should be held in this function's closure.\n   * @typedef {makePath} function\n   * @param {number} pathNum - Numeric index from zero to numPaths - 1\n   * @returns {queryFunc} - Function to call on each peer in the query\n   */\n\n  /**\n   * Query function.\n   * @typedef {queryFunc} function\n   * @param {PeerId} next - Peer to query\n   * @param {function(Error, Object)} callback - Query result callback\n   */\n\n  /**\n   * Create a new query. The makePath function is called once per disjoint path, so that per-path\n   * variables can be created in that scope. makePath then returns the actual query function (queryFunc) to\n   * use when on that path.\n   *\n   * @param {DHT} dht - DHT instance\n   * @param {Buffer} key\n   * @param {makePath} makePath - Called to set up each disjoint path. Must return the query function.\n   */\n  function Query(dht, key, makePath) {\n    _classCallCheck(this, Query);\n\n    this.dht = dht;\n    this.key = key;\n    this.makePath = makePath;\n    this._log = utils.logger(this.dht.peerInfo.id, 'query:' + mh.toB58String(key));\n    this.running = false;\n    this._onStart = this._onStart.bind(this);\n    this._onComplete = this._onComplete.bind(this);\n  }\n  /**\n   * Run this query, start with the given list of peers first.\n   *\n   * @param {Array<PeerId>} peers\n   * @returns {Promise}\n   */\n\n\n  _createClass(Query, [{\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(peers) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.dht._queryManager.running) {\n                  _context.next = 3;\n                  break;\n                }\n\n                this._log.error('Attempt to run query after shutdown');\n\n                return _context.abrupt(\"return\", {\n                  finalSet: new Set(),\n                  paths: []\n                });\n\n              case 3:\n                if (!(peers.length === 0)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                this._log.error('Running query with no peers');\n\n                return _context.abrupt(\"return\", {\n                  finalSet: new Set(),\n                  paths: []\n                });\n\n              case 6:\n                this._run = new Run(this);\n\n                this._log(\"query running with K=\".concat(this.dht.kBucketSize, \", A=\").concat(this.dht.concurrency, \", D=\").concat(Math.min(this.dht.disjointPaths, peers.length)));\n\n                this._run.once('start', this._onStart);\n\n                this._run.once('complete', this._onComplete);\n\n                return _context.abrupt(\"return\", this._run.execute(peers));\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function run(_x) {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n    /**\n     * Called when the run starts.\n     */\n\n  }, {\n    key: \"_onStart\",\n    value: function _onStart() {\n      this.running = true;\n      this._startTime = Date.now();\n\n      this._log('query:start'); // Register this query so we can stop it if the DHT stops\n\n\n      this.dht._queryManager.queryStarted(this);\n    }\n    /**\n     * Called when the run completes (even if there's an error).\n     */\n\n  }, {\n    key: \"_onComplete\",\n    value: function _onComplete() {\n      // Ensure worker queues for all paths are stopped at the end of the query\n      this.stop();\n    }\n    /**\n     * Stop the query.\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this._log(\"query:done in \".concat(Date.now() - this._startTime, \"ms\"));\n\n      if (this._run) {\n        this._log(\"\".concat(this._run.errors.length, \" of \").concat(this._run.peersSeen.size, \" peers errored (\").concat(this._run.errors.length / this._run.peersSeen.size * 100, \"% fail rate)\"));\n      }\n\n      if (!this.running) {\n        return;\n      }\n\n      this._run.removeListener('start', this._onStart);\n\n      this._run.removeListener('complete', this._onComplete);\n\n      this.running = false;\n      this._run && this._run.stop();\n\n      this.dht._queryManager.queryCompleted(this);\n    }\n  }]);\n\n  return Query;\n}();\n\nmodule.exports = Query;","map":null,"metadata":{},"sourceType":"script"}