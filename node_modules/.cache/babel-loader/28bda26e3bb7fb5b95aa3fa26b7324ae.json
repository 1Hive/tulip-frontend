{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar log = require('debug')('ipfs:mfs:utils:update-tree');\n\nvar addLink = require('./add-link');\n\nvar defaultOptions = {\n  shardSplitThreshold: 1000\n}; // loop backwards through the trail, replacing links of all components to update CIDs\n\nvar updateTree = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context, trail, options) {\n    var index, child, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, node, cid, name, result;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = Object.assign({}, defaultOptions, options);\n            log('Trail', trail);\n            trail = trail.slice().reverse();\n            index = 0;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 6;\n            _iterator = _asyncIterator(context.ipld.getMany(trail.map(function (node) {\n              return node.cid;\n            })));\n\n          case 8:\n            _context.next = 10;\n            return _iterator.next();\n\n          case 10:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 14;\n            return _step.value;\n\n          case 14:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 30;\n              break;\n            }\n\n            node = _value;\n            cid = trail[index].cid;\n            name = trail[index].name;\n            index++;\n\n            if (child) {\n              _context.next = 23;\n              break;\n            }\n\n            child = {\n              cid: cid,\n              name: name,\n              size: node.size\n            };\n            return _context.abrupt(\"continue\", 27);\n\n          case 23:\n            _context.next = 25;\n            return addLink(context, {\n              parent: node,\n              name: child.name,\n              cid: child.cid,\n              size: child.size,\n              flush: options.flush,\n              shardSplitThreshold: options.shardSplitThreshold,\n              hashAlg: options.hashAlg,\n              cidVersion: options.cidVersion\n            });\n\n          case 25:\n            result = _context.sent;\n            // new child for next loop\n            child = {\n              cid: result.cid,\n              name: name,\n              size: result.size\n            };\n\n          case 27:\n            _iteratorNormalCompletion = true;\n            _context.next = 8;\n            break;\n\n          case 30:\n            _context.next = 36;\n            break;\n\n          case 32:\n            _context.prev = 32;\n            _context.t0 = _context[\"catch\"](6);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 36:\n            _context.prev = 36;\n            _context.prev = 37;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 41;\n              break;\n            }\n\n            _context.next = 41;\n            return _iterator.return();\n\n          case 41:\n            _context.prev = 41;\n\n            if (!_didIteratorError) {\n              _context.next = 44;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 44:\n            return _context.finish(41);\n\n          case 45:\n            return _context.finish(36);\n\n          case 46:\n            log(\"Final CID \".concat(child.cid));\n            return _context.abrupt(\"return\", child.cid);\n\n          case 48:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[6, 32, 36, 46], [37,, 41, 45]]);\n  }));\n\n  return function updateTree(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = updateTree;","map":null,"metadata":{},"sourceType":"script"}