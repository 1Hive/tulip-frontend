{"ast":null,"code":"/*!\n * hmac.js - hmac for bcrypto\n * Copyright (c) 2016-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n *\n * Parts of this software are based on indutny/hash.js:\n *   Copyright (c) 2014, Fedor Indutny (MIT License).\n *   https://github.com/indutny/hash.js\n *\n * Resources:\n *   https://en.wikipedia.org/wiki/HMAC\n *   https://tools.ietf.org/html/rfc2104\n *   https://github.com/indutny/hash.js/blob/master/lib/hash/hmac.js\n */\n'use strict';\n\nvar _toConsumableArray = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar assert = require('../internal/assert');\n/**\n * HMAC\n */\n\n\nvar HMAC = /*#__PURE__*/function () {\n  /**\n   * Create an HMAC.\n   * @param {Function} Hash\n   * @param {Number} size\n   * @param {Array} [x=[]]\n   * @param {Array} [y=[]]\n   */\n  function HMAC(Hash, size) {\n    var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n    _classCallCheck(this, HMAC);\n\n    assert(typeof Hash === 'function');\n    assert(size >>> 0 === size);\n    assert(Array.isArray(x));\n    assert(Array.isArray(y));\n    this.hash = Hash;\n    this.size = size;\n    this.x = x;\n    this.y = y;\n    this.inner = new Hash();\n    this.outer = new Hash();\n  }\n  /**\n   * Initialize HMAC context.\n   * @param {Buffer} data\n   */\n\n\n  _createClass(HMAC, [{\n    key: \"init\",\n    value: function init(key) {\n      var _this$inner, _this$outer;\n\n      assert(Buffer.isBuffer(key)); // Shorten key\n\n      if (key.length > this.size) {\n        var Hash = this.hash;\n        var h = new Hash();\n        h.init.apply(h, _toConsumableArray(this.x));\n        h.update(key);\n        key = h.final.apply(h, _toConsumableArray(this.y));\n        assert(key.length <= this.size);\n      } // Pad key\n\n\n      var pad = Buffer.allocUnsafe(this.size);\n\n      for (var i = 0; i < key.length; i++) {\n        pad[i] = key[i] ^ 0x36;\n      }\n\n      for (var _i = key.length; _i < pad.length; _i++) {\n        pad[_i] = 0x36;\n      }\n\n      (_this$inner = this.inner).init.apply(_this$inner, _toConsumableArray(this.x));\n\n      this.inner.update(pad);\n\n      for (var _i2 = 0; _i2 < key.length; _i2++) {\n        pad[_i2] = key[_i2] ^ 0x5c;\n      }\n\n      for (var _i3 = key.length; _i3 < pad.length; _i3++) {\n        pad[_i3] = 0x5c;\n      }\n\n      (_this$outer = this.outer).init.apply(_this$outer, _toConsumableArray(this.x));\n\n      this.outer.update(pad);\n      return this;\n    }\n    /**\n     * Update HMAC context.\n     * @param {Buffer} data\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(data) {\n      this.inner.update(data);\n      return this;\n    }\n    /**\n     * Finalize HMAC context.\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: \"final\",\n    value: function final() {\n      var _this$inner2, _this$outer2;\n\n      this.outer.update((_this$inner2 = this.inner).final.apply(_this$inner2, _toConsumableArray(this.y)));\n      return (_this$outer2 = this.outer).final.apply(_this$outer2, _toConsumableArray(this.y));\n    }\n  }]);\n\n  return HMAC;\n}();\n/*\n * Expose\n */\n\n\nmodule.exports = HMAC;","map":null,"metadata":{},"sourceType":"script"}