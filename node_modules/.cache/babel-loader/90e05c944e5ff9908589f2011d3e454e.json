{"ast":null,"code":"/*!\n * util.js - encoding utils for javascript\n * Copyright (c) 2018-2019, Christopher Jeffrey (MIT License).\n * https://github.com/bcoin-org/bcrypto\n */\n'use strict';\n\nvar assert = require('../internal/assert');\n/*\n * Util\n */\n\n\nfunction countLeft(data) {\n  assert(Buffer.isBuffer(data));\n  var i = 0;\n\n  while (i < data.length && data[i] === 0x00) {\n    i += 1;\n  }\n\n  var bits = (data.length - i) * 8;\n  if (bits === 0) return 0;\n  bits -= 8;\n  var oct = data[i];\n\n  while (oct) {\n    bits += 1;\n    oct >>>= 1;\n  }\n\n  return bits;\n}\n\nfunction countRight(data) {\n  assert(Buffer.isBuffer(data));\n  var i = data.length;\n\n  while (i > 0 && data[i - 1] === 0x00) {\n    i -= 1;\n  }\n\n  var bits = i * 8;\n  if (bits === 0) return 0;\n  bits -= 8;\n  var oct = data[i - 1];\n\n  while (oct) {\n    bits += 1;\n    oct >>>= 1;\n  }\n\n  return bits;\n}\n\nfunction compareLeft(x, y) {\n  assert(Buffer.isBuffer(x));\n  assert(Buffer.isBuffer(y));\n  var xpos = 0;\n  var xlen = x.length;\n  var ypos = 0;\n  var ylen = y.length;\n\n  while (xlen > 0 && x[xpos] === 0x00) {\n    xpos += 1;\n    xlen -= 1;\n  }\n\n  while (ylen > 0 && y[ypos] === 0x00) {\n    ypos += 1;\n    ylen -= 1;\n  }\n\n  if (xlen < ylen) return -1;\n  if (xlen > ylen) return 1;\n\n  for (var i = 0; i < xlen; i++) {\n    if (x[xpos + i] < y[ypos + i]) return -1;\n    if (x[xpos + i] > y[ypos + i]) return 1;\n  }\n\n  return 0;\n}\n\nfunction compareRight(x, y) {\n  assert(Buffer.isBuffer(x));\n  assert(Buffer.isBuffer(y));\n  var xlen = x.length;\n  var ylen = y.length;\n\n  while (xlen > 0 && x[xlen - 1] === 0x00) {\n    xlen -= 1;\n  }\n\n  while (ylen > 0 && y[ylen - 1] === 0x00) {\n    ylen -= 1;\n  }\n\n  if (xlen < ylen) return -1;\n  if (xlen > ylen) return 1;\n\n  for (var i = xlen - 1; i >= 0; i--) {\n    if (x[i] < y[i]) return -1;\n    if (x[i] > y[i]) return 1;\n  }\n\n  return 0;\n}\n\nfunction trimLeft(data) {\n  assert(Buffer.isBuffer(data));\n  var i = 0;\n\n  while (i < data.length && data[i] === 0x00) {\n    i += 1;\n  }\n\n  return data.slice(i);\n}\n\nfunction trimRight(data) {\n  assert(Buffer.isBuffer(data));\n  var i = data.length;\n\n  while (i > 0 && data[i - 1] === 0x00) {\n    i -= 1;\n  }\n\n  return data.slice(0, i);\n}\n\nfunction padLeft(data, size) {\n  assert(Buffer.isBuffer(data));\n  assert(size >>> 0 === size);\n  if (data.length > size) data = trimLeft(data);\n  if (data.length > size) throw new RangeError(\"Buffer expected to be \".concat(size, \" bytes in size.\"));\n  var out = Buffer.allocUnsafe(size);\n  var left = size - data.length;\n  out.fill(0x00, 0, left);\n  data.copy(out, left);\n  return out;\n}\n\nfunction padRight(data, size) {\n  assert(Buffer.isBuffer(data));\n  assert(size >>> 0 === size);\n  if (data.length > size) data = trimRight(data);\n  if (data.length > size) throw new RangeError(\"Buffer expected to be \".concat(size, \" bytes in size.\"));\n  var out = Buffer.allocUnsafe(size);\n  data.copy(out, 0);\n  out.fill(0x00, data.length, size);\n  return out;\n}\n/*\n * Expose\n */\n\n\nexports.countLeft = countLeft;\nexports.countRight = countRight;\nexports.compareLeft = compareLeft;\nexports.compareRight = compareRight;\nexports.trimLeft = trimLeft;\nexports.trimRight = trimRight;\nexports.padLeft = padLeft;\nexports.padRight = padRight;","map":null,"metadata":{},"sourceType":"script"}