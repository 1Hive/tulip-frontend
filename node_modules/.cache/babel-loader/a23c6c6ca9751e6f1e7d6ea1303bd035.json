{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('./constants.js'),\n    rpcEndpoints = _require.rpcEndpoints,\n    ERC20Abi = _require.ERC20Abi;\n\nvar _require2 = require('web3-utils'),\n    toBN = _require2.toBN,\n    fromWei = _require2.fromWei;\n\nvar Web3 = require('web3');\n\nvar web3 = new Web3(new Web3.providers.HttpProvider(rpcEndpoints.xdai));\nweb3.eth.net.isListening().then(function () {\n  return console.log('tulip-data is connected');\n}).catch(function (e) {\n  return console.log('Wow. Something went wrong: ' + e);\n});\n\nvar generateContractFunctionList = function generateContractFunctionList(_ref) {\n  var tokens = _ref.tokens,\n      blockNumber = _ref.blockNumber,\n      user_address = _ref.user_address;\n  var batch = new web3.BatchRequest();\n  tokens.map( /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n      var tokenAddress, symbol, decimals, contract;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              tokenAddress = _ref2.address, symbol = _ref2.symbol, decimals = _ref2.decimals;\n              contract = new web3.eth.Contract(ERC20Abi);\n              contract.options.address = tokenAddress;\n              batch.add(contract.methods.balanceOf(user_address).call.request({}, blockNumber));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n  return batch;\n};\n\nvar convertToNumber = function convertToNumber(hex, decimals) {\n  var balance = toBN(hex);\n  return fromWei(balance);\n};\n\nmodule.exports = {\n  generateContractFunctionList: generateContractFunctionList,\n  convertToNumber: convertToNumber\n};","map":null,"metadata":{},"sourceType":"script"}