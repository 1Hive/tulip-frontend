{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _require = require('./utils'),\n    io = _require.io;\n\nvar AccessController = require('./access-controller-interface');\n\nvar type = 'ipfs';\n\nvar IPFSAccessController = /*#__PURE__*/function (_AccessController) {\n  _inherits(IPFSAccessController, _AccessController);\n\n  var _super = _createSuper(IPFSAccessController);\n\n  function IPFSAccessController(ipfs, options) {\n    var _this;\n\n    _classCallCheck(this, IPFSAccessController);\n\n    _this = _super.call(this);\n    _this._ipfs = ipfs;\n    _this._write = Array.from(options.write || []);\n    return _this;\n  } // Returns the type of the access controller\n\n\n  _createClass(IPFSAccessController, [{\n    key: \"write\",\n    get: // Return a Set of keys that have `access` capability\n    function get() {\n      return this._write;\n    }\n  }, {\n    key: \"canAppend\",\n    value: function () {\n      var _canAppend = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(entry, identityProvider) {\n        var key;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Allow if access list contain the writer's publicKey or is '*'\n                key = entry.identity.id;\n\n                if (!(this.write.includes(key) || this.write.includes('*'))) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", identityProvider.verifyIdentity(entry.identity));\n\n              case 3:\n                return _context.abrupt(\"return\", false);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function canAppend(_x, _x2) {\n        return _canAppend.apply(this, arguments);\n      }\n\n      return canAppend;\n    }()\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(address) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // Transform '/ipfs/QmPFtHi3cmfZerxtH9ySLdzpg1yFhocYDZgEZywdUXHxFU'\n                // to 'QmPFtHi3cmfZerxtH9ySLdzpg1yFhocYDZgEZywdUXHxFU'\n                if (address.indexOf('/ipfs') === 0) {\n                  address = address.split('/')[2];\n                }\n\n                _context2.prev = 1;\n                _context2.next = 4;\n                return io.read(this._ipfs, address);\n\n              case 4:\n                this._write = _context2.sent;\n                _context2.next = 10;\n                break;\n\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](1);\n                console.log('IPFSAccessController.load ERROR:', _context2.t0);\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 7]]);\n      }));\n\n      function load(_x3) {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }, {\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var cid;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return io.write(this._ipfs, 'dag-cbor', {\n                  write: JSON.stringify(this.write, null, 2)\n                });\n\n              case 3:\n                cid = _context3.sent;\n                _context3.next = 9;\n                break;\n\n              case 6:\n                _context3.prev = 6;\n                _context3.t0 = _context3[\"catch\"](0);\n                console.log('IPFSAccessController.save ERROR:', _context3.t0);\n\n              case 9:\n                return _context3.abrupt(\"return\", {\n                  address: cid\n                });\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 6]]);\n      }));\n\n      function save() {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }()\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return type;\n    }\n  }, {\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(orbitdb) {\n        var options,\n            _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n                options = _objectSpread(_objectSpread({}, options), {\n                  write: options.write || [orbitdb.identity.id]\n                });\n                return _context4.abrupt(\"return\", new IPFSAccessController(orbitdb._ipfs, options));\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function create(_x4) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }]);\n\n  return IPFSAccessController;\n}(AccessController);\n\nmodule.exports = IPFSAccessController;","map":null,"metadata":{},"sourceType":"script"}