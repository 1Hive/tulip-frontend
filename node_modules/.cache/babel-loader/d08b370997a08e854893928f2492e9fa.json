{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n/**\n *  AbstractAuthProvider defines the interface your custom authProvider must\n *  must implement. The properties network, id, name, image are all required.\n *  The authenticate function is required. Implement your class to extend this.\n */\n\n\nvar AbstractAuthProvider = /*#__PURE__*/function () {\n  /**\n    *  Creates AuthProvider instance. Must be instantiated with properties network,\n    *  id, name, image described below. Can pass any args in constructor when adding\n    *  to auth provider list.\n    *\n    * @param     {String}    network   represents network, ie ethereum, bitcoin, polkadot etc.\n    */\n  function AbstractAuthProvider() {\n    (0, _classCallCheck2[\"default\"])(this, AbstractAuthProvider); // TODO could network be any use still\n\n    this.network = null;\n    this.isAuthProvider = true;\n  }\n  /**\n    *  (Required) Authenticate function consumes both a message (human readable string) and\n    *  accountId (often a hex address). It is strictly required that for any\n    *  given set of {message, accountId} this function deterministically returns\n    *  a unique 32 - 64 byte hex string of entropy. This will allow this external account\n    *  to continue to access 3ID in the future and for it be added as an auth method.\n    *\n    *  For most implementations this will be signing the message with an\n    *  account/wallet from your blockchain account provider and returning a fixed length\n    *  string of the signature by hashing it. This function does not need to consume\n    *  accountId/address if your provider knows that value at later point of the interaction.\n    *  But should still map to a unique output for any given message and accountId pair.\n    *\n    *  For your given network/blockchain you should be able to find an authenticate\n    *  function in https://github.com/ceramicnetwork/js-3id-blockchain-utils, if you\n    *  are using the standard account signing interface in your network/blockchain.\n    *  If you are using a standard interface and it doesn't exist in js-3id-blockchain-utils,\n    *  please open an issue there, so we can add shared support for your network.\n    *\n    * @param     {String}    message            A human readable string\n    * @param     {String}    accountId          Id of account used with provider, most often hex address\n    * @return    {String}                       A 32-64 bytes hex string\n  */\n\n\n  (0, _createClass2[\"default\"])(AbstractAuthProvider, [{\n    key: \"authenticate\",\n    value: function () {\n      var _authenticate = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(message, accountId) {\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                throw new Error('AuthProvider must implement authenticat method');\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function authenticate(_x, _x2) {\n        return _authenticate.apply(this, arguments);\n      }\n\n      return authenticate;\n    }()\n    /**\n      *  (Required) createLink will publish a public verifiable link between account\n      *  used to authenticate and the users 3ID. To implement this you need to import\n      *  createLink from https://github.com/ceramicnetwork/js-3id-blockchain-utils and\n      *  pass the link type. You must have support for your blockchain in\n      *  js-3id-blockchain-utils to add here. As other libraries need to be able to\n      *  verify and consume these links.\n      *\n      * @param     {String}    did           A human readable string\n      * @param     {String}    accountId     Id of account used with provider, most often hex address\n      * @return                              Returns on success\n    */\n\n  }, {\n    key: \"createLink\",\n    value: function () {\n      var _createLink = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2(did, accountId) {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", null);\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function createLink(_x3, _x4) {\n        return _createLink.apply(this, arguments);\n      }\n\n      return createLink;\n    }()\n  }]);\n  return AbstractAuthProvider;\n}();\n\nvar _default = AbstractAuthProvider;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}