{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar BufferList = require('bl/BufferList');\n\nvar _require = require('rabin-wasm'),\n    create = _require.create;\n\nvar errcode = require('err-code');\n\nmodule.exports = /*#__PURE__*/function () {\n  var _rabinChunker = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source, options) {\n    var rabin, min, max, avg, sizepow, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            rabin = jsRabin();\n\n            if (!(options.minChunkSize && options.maxChunkSize && options.avgChunkSize)) {\n              _context.next = 7;\n              break;\n            }\n\n            avg = options.avgChunkSize;\n            min = options.minChunkSize;\n            max = options.maxChunkSize;\n            _context.next = 14;\n            break;\n\n          case 7:\n            if (options.avgChunkSize) {\n              _context.next = 11;\n              break;\n            }\n\n            throw errcode(new Error('please specify an average chunk size'), 'ERR_INVALID_AVG_CHUNK_SIZE');\n\n          case 11:\n            avg = options.avgChunkSize;\n            min = avg / 3;\n            max = avg + avg / 2;\n\n          case 14:\n            if (!(min < 16)) {\n              _context.next = 16;\n              break;\n            }\n\n            throw errcode(new Error('rabin min must be greater than 16'), 'ERR_INVALID_MIN_CHUNK_SIZE');\n\n          case 16:\n            if (max < min) {\n              max = min;\n            }\n\n            if (avg < min) {\n              avg = min;\n            }\n\n            sizepow = Math.floor(Math.log2(avg));\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 21;\n            _iterator = _asyncIterator(rabin(source, {\n              min: min,\n              max: max,\n              bits: sizepow,\n              window: options.window,\n              polynomial: options.polynomial\n            }));\n\n          case 23:\n            _context.next = 25;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 25:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 29;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 29:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 37;\n              break;\n            }\n\n            chunk = _value;\n            _context.next = 34;\n            return chunk;\n\n          case 34:\n            _iteratorNormalCompletion = true;\n            _context.next = 23;\n            break;\n\n          case 37:\n            _context.next = 43;\n            break;\n\n          case 39:\n            _context.prev = 39;\n            _context.t0 = _context[\"catch\"](21);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 43:\n            _context.prev = 43;\n            _context.prev = 44;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 48;\n              break;\n            }\n\n            _context.next = 48;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 48:\n            _context.prev = 48;\n\n            if (!_didIteratorError) {\n              _context.next = 51;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 51:\n            return _context.finish(48);\n\n          case 52:\n            return _context.finish(43);\n\n          case 53:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[21, 39, 43, 53], [44,, 48, 52]]);\n  }));\n\n  function rabinChunker(_x, _x2) {\n    return _rabinChunker.apply(this, arguments);\n  }\n\n  return rabinChunker;\n}();\n\nvar jsRabin = function jsRabin() {\n  return /*#__PURE__*/function () {\n    var _ref = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(source, options) {\n      var r, buffers, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, chunk, sizes, i, size, buf;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _awaitAsyncGenerator(create(options.bits, options.min, options.max, options.window));\n\n            case 2:\n              r = _context2.sent;\n              buffers = new BufferList();\n              _iteratorNormalCompletion2 = true;\n              _didIteratorError2 = false;\n              _context2.prev = 6;\n              _iterator2 = _asyncIterator(source);\n\n            case 8:\n              _context2.next = 10;\n              return _awaitAsyncGenerator(_iterator2.next());\n\n            case 10:\n              _step2 = _context2.sent;\n              _iteratorNormalCompletion2 = _step2.done;\n              _context2.next = 14;\n              return _awaitAsyncGenerator(_step2.value);\n\n            case 14:\n              _value2 = _context2.sent;\n\n              if (_iteratorNormalCompletion2) {\n                _context2.next = 32;\n                break;\n              }\n\n              chunk = _value2;\n              buffers.append(chunk);\n              sizes = r.fingerprint(chunk);\n              i = 0;\n\n            case 20:\n              if (!(i < sizes.length)) {\n                _context2.next = 29;\n                break;\n              }\n\n              size = sizes[i];\n              buf = buffers.slice(0, size);\n              buffers.consume(size);\n              _context2.next = 26;\n              return buf;\n\n            case 26:\n              i++;\n              _context2.next = 20;\n              break;\n\n            case 29:\n              _iteratorNormalCompletion2 = true;\n              _context2.next = 8;\n              break;\n\n            case 32:\n              _context2.next = 38;\n              break;\n\n            case 34:\n              _context2.prev = 34;\n              _context2.t0 = _context2[\"catch\"](6);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context2.t0;\n\n            case 38:\n              _context2.prev = 38;\n              _context2.prev = 39;\n\n              if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n                _context2.next = 43;\n                break;\n              }\n\n              _context2.next = 43;\n              return _awaitAsyncGenerator(_iterator2.return());\n\n            case 43:\n              _context2.prev = 43;\n\n              if (!_didIteratorError2) {\n                _context2.next = 46;\n                break;\n              }\n\n              throw _iteratorError2;\n\n            case 46:\n              return _context2.finish(43);\n\n            case 47:\n              return _context2.finish(38);\n\n            case 48:\n              if (!buffers.length) {\n                _context2.next = 51;\n                break;\n              }\n\n              _context2.next = 51;\n              return buffers.slice(0);\n\n            case 51:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[6, 34, 38, 48], [39,, 43, 47]]);\n    }));\n\n    return function (_x3, _x4) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":null,"metadata":{},"sourceType":"script"}