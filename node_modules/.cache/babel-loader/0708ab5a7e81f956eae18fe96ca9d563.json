{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _asyncGeneratorDelegate = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\");\n\nvar exporter = require('ipfs-unixfs-exporter');\n\nvar _require = require('../utils'),\n    normalizeCidPath = _require.normalizeCidPath,\n    withTimeoutOption = _require.withTimeoutOption;\n\nmodule.exports = function (_ref) {\n  var ipld = _ref.ipld,\n      preload = _ref.preload;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _cat = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ipfsPath, options) {\n      var pathComponents, file;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = options || {};\n              ipfsPath = normalizeCidPath(ipfsPath);\n\n              if (options.preload !== false) {\n                pathComponents = ipfsPath.split('/');\n                preload(pathComponents[0]);\n              }\n\n              _context.next = 5;\n              return _awaitAsyncGenerator(exporter(ipfsPath, ipld, options));\n\n            case 5:\n              file = _context.sent;\n\n              if (!(file.unixfs && file.unixfs.type.includes('dir'))) {\n                _context.next = 8;\n                break;\n              }\n\n              throw new Error('this dag node is a directory');\n\n            case 8:\n              if (file.content) {\n                _context.next = 10;\n                break;\n              }\n\n              throw new Error('this dag node has no content');\n\n            case 10:\n              return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(file.content(options)), _awaitAsyncGenerator), \"t0\", 11);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function cat(_x, _x2) {\n      return _cat.apply(this, arguments);\n    }\n\n    return cat;\n  }());\n};","map":null,"metadata":{},"sourceType":"script"}