{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar EventEmitter = require('events');\n\nvar Big = require('bignumber.js');\n\nvar MovingAverage = require('moving-average');\n\nvar Stats = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Stats, _EventEmitter);\n\n  var _super = _createSuper(Stats);\n\n  function Stats(initialCounters, options) {\n    var _this;\n\n    _classCallCheck(this, Stats);\n\n    _this = _super.call(this);\n    _this._options = options;\n    _this._queue = [];\n    _this._stats = {};\n    _this._frequencyLastTime = Date.now();\n    _this._frequencyAccumulators = {};\n    _this._movingAverages = {};\n    _this._update = _this._update.bind(_assertThisInitialized(_this));\n    initialCounters.forEach(function (key) {\n      _this._stats[key] = Big(0);\n      _this._movingAverages[key] = {};\n\n      _this._options.movingAverageIntervals.forEach(function (interval) {\n        var ma = _this._movingAverages[key][interval] = MovingAverage(interval);\n        ma.push(_this._frequencyLastTime, 0);\n      });\n    });\n    _this._enabled = _this._options.enabled;\n    return _this;\n  }\n\n  _createClass(Stats, [{\n    key: \"enable\",\n    value: function enable() {\n      this._enabled = true;\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this._disabled = true;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this._timeout) {\n        clearTimeout(this._timeout);\n      }\n    }\n  }, {\n    key: \"snapshot\",\n    get: function get() {\n      return Object.assign({}, this._stats);\n    }\n  }, {\n    key: \"movingAverages\",\n    get: function get() {\n      return Object.assign({}, this._movingAverages);\n    }\n  }, {\n    key: \"push\",\n    value: function push(counter, inc) {\n      if (this._enabled) {\n        this._queue.push([counter, inc, Date.now()]);\n\n        this._resetComputeTimeout();\n      }\n    }\n  }, {\n    key: \"_resetComputeTimeout\",\n    value: function _resetComputeTimeout() {\n      if (this._timeout) {\n        clearTimeout(this._timeout);\n      }\n\n      this._timeout = setTimeout(this._update, this._nextTimeout());\n    }\n  }, {\n    key: \"_nextTimeout\",\n    value: function _nextTimeout() {\n      // calculate the need for an update, depending on the queue length\n      var urgency = this._queue.length / this._options.computeThrottleMaxQueueSize;\n      return Math.max(this._options.computeThrottleTimeout * (1 - urgency), 0);\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      this._timeout = null;\n\n      if (this._queue.length) {\n        var last;\n\n        while (this._queue.length) {\n          var op = last = this._queue.shift();\n\n          this._applyOp(op);\n        }\n\n        this._updateFrequency(last[2]); // contains timestamp of last op\n\n\n        this.emit('update', this._stats);\n      }\n    }\n  }, {\n    key: \"_updateFrequency\",\n    value: function _updateFrequency(latestTime) {\n      var _this2 = this;\n\n      var timeDiff = latestTime - this._frequencyLastTime;\n      Object.keys(this._stats).forEach(function (key) {\n        _this2._updateFrequencyFor(key, timeDiff, latestTime);\n      });\n      this._frequencyLastTime = latestTime;\n    }\n  }, {\n    key: \"_updateFrequencyFor\",\n    value: function _updateFrequencyFor(key, timeDiffMS, latestTime) {\n      var count = this._frequencyAccumulators[key] || 0;\n      this._frequencyAccumulators[key] = 0;\n      var hz = count / timeDiffMS * 1000;\n      var movingAverages = this._movingAverages[key];\n\n      if (!movingAverages) {\n        movingAverages = this._movingAverages[key] = {};\n      }\n\n      this._options.movingAverageIntervals.forEach(function (movingAverageInterval) {\n        var movingAverage = movingAverages[movingAverageInterval];\n\n        if (!movingAverage) {\n          movingAverage = movingAverages[movingAverageInterval] = MovingAverage(movingAverageInterval);\n        }\n\n        movingAverage.push(latestTime, hz);\n      });\n    }\n  }, {\n    key: \"_applyOp\",\n    value: function _applyOp(op) {\n      var key = op[0];\n      var inc = op[1];\n\n      if (typeof inc !== 'number') {\n        throw new Error('invalid increment number:', inc);\n      }\n\n      var n;\n\n      if (!Object.prototype.hasOwnProperty.call(this._stats, key)) {\n        n = this._stats[key] = Big(0);\n      } else {\n        n = this._stats[key];\n      }\n\n      this._stats[key] = n.plus(inc);\n\n      if (!this._frequencyAccumulators[key]) {\n        this._frequencyAccumulators[key] = 0;\n      }\n\n      this._frequencyAccumulators[key] += inc;\n    }\n  }]);\n\n  return Stats;\n}(EventEmitter);\n\nmodule.exports = Stats;","map":null,"metadata":{},"sourceType":"script"}