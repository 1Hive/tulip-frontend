{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _slicedToArray = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar fetch = require('node-fetch');\n\nvar MAX_PAGE_SIZE = 1000; // The Graph max page size\n\n/**\n * Page results from The Graph protocol\n *\n * @param {string} api - The API address\n * @param {Object} query - The Query object\n * @param {string} query.entity - The entity name\n * @param {Object} query.selection - The selection mapping object for GraphQL filters and sorts\n * @param {Object} query.properties - The list of fields to include in the output\n * @param {number} timeout - Number of ms timeout for any single graph paging result (default: 10seconds)\n * @param {number} max - Maximum number of results to return (default: Infinity)\n */\n\nvar pageResults = function pageResults(_ref) {\n  var api = _ref.api,\n      _ref$query = _ref.query,\n      entity = _ref$query.entity,\n      _ref$query$selection = _ref$query.selection,\n      selection = _ref$query$selection === void 0 ? {} : _ref$query$selection,\n      _ref$query$properties = _ref$query.properties,\n      properties = _ref$query$properties === void 0 ? [] : _ref$query$properties,\n      _ref$timeout = _ref.timeout,\n      timeout = _ref$timeout === void 0 ? 10e3 : _ref$timeout,\n      _ref$max = _ref.max,\n      max = _ref$max === void 0 ? Infinity : _ref$max;\n  max = Number(max);\n  var pageSize = MAX_PAGE_SIZE; // Note: this approach will call each page in linear order, ensuring it stops as soon as all results\n  // are fetched. This could be sped up with a number of requests done in parallel, stopping as soon as any return\n  // empty. - JJM\n\n  var runner = function runner(_ref2) {\n    var lastId = _ref2.lastId;\n\n    var propToString = function propToString(obj) {\n      return Object.entries(obj).filter(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            value = _ref4[1];\n\n        return typeof value !== 'undefined';\n      }).map(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            key = _ref6[0],\n            value = _ref6[1];\n\n        return \"\".concat(key, \":\").concat(typeof value === 'object' ? '{' + propToString(value) + '}' : value);\n      }).join(',');\n    };\n\n    var first = MAX_PAGE_SIZE;\n\n    if (!properties.includes('id')) {\n      properties.push('id');\n    }\n\n    ; // mix the page size and skip fields into the selection object\n\n    var selectionObj = Object.assign({}, selection, {\n      first: first,\n      orderBy: 'id',\n      where: _objectSpread(_objectSpread({}, selection.where), lastId ? {\n        id_gt: \"\\\\\\\"\".concat(lastId, \"\\\\\\\"\")\n      } : {})\n    });\n    var body = \"{\\\"query\\\":\\\"{\".concat(entity, \"(\").concat(propToString(selectionObj), \"){\").concat(properties.join(','), \"}}\\\", \\\"variables\\\": null}\"); // support query logging in nodejs\n\n    if (typeof process === 'object' && process.env.DEBUG === 'true') {\n      console.log(body);\n    }\n\n    ;\n    return fetch(api, {\n      method: 'POST',\n      body: body,\n      timeout: timeout\n    }).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      if (json.errors) {\n        throw Error(JSON.stringify(json.errors));\n      }\n\n      var results = json.data[entity]; // stop if we are on the last page\n\n      if (results.length < pageSize || results.length >= max) {\n        if (results.length >= max) {\n          return results.slice(0, max);\n        }\n\n        return results;\n      }\n\n      return runner({\n        lastId: results[results.length - 1].id\n      }).then(function (newResults) {\n        return results.concat(newResults);\n      });\n    });\n  };\n\n  return runner({\n    lastId: undefined\n  });\n};\n\nmodule.exports = pageResults;","map":null,"metadata":{},"sourceType":"script"}