{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar multibase = require('multibase');\n\nvar ciphers = require('../ciphers/aes-gcm');\n\nmodule.exports = {\n  /**\n   * Exports the given PrivateKey as a base64 encoded string.\n   * The PrivateKey is encrypted via a password derived PBKDF2 key\n   * leveraging the aes-gcm cipher algorithm.\n   *\n   * @param {Buffer} privateKey The PrivateKey protobuf buffer\n   * @param {string} password\n   * @returns {Promise<string>} A base64 encoded string\n   */\n  export: function () {\n    var _export2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(privateKey, password) {\n      var cipher, encryptedKey, base64;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              cipher = ciphers.create();\n              _context.next = 3;\n              return cipher.encrypt(privateKey, password);\n\n            case 3:\n              encryptedKey = _context.sent;\n              base64 = multibase.names.base64;\n              return _context.abrupt(\"return\", base64.encode(encryptedKey));\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function _export(_x, _x2) {\n      return _export2.apply(this, arguments);\n    }\n\n    return _export;\n  }()\n};","map":null,"metadata":{},"sourceType":"script"}