{"ast":null,"code":"'use strict';\n\nconst {\n  Record\n} = require('libp2p-record');\n\nconst errcode = require('err-code');\n\nconst Message = require('../../message');\n\nconst utils = require('../../utils');\n\nmodule.exports = dht => {\n  const log = utils.logger(dht.peerInfo.id, 'rpc:get-value');\n  /**\n   * Process `GetValue` DHT messages.\n   *\n   * @param {PeerInfo} peer\n   * @param {Message} msg\n   * @returns {Promise<Message>}\n   */\n\n  return async function getValue(peer, msg) {\n    const key = msg.key;\n    log('key: %b', key);\n\n    if (!key || key.length === 0) {\n      throw errcode(new Error('Invalid key'), 'ERR_INVALID_KEY');\n    }\n\n    const response = new Message(Message.TYPES.GET_VALUE, key, msg.clusterLevel);\n\n    if (utils.isPublicKeyKey(key)) {\n      log('is public key');\n      const id = utils.fromPublicKeyKey(key);\n      let info;\n\n      if (dht._isSelf(id)) {\n        info = dht.peerInfo;\n      } else if (dht.peerStore.has(id)) {\n        info = dht.peerStore.get(id);\n      }\n\n      if (info && info.id.pubKey) {\n        log('returning found public key');\n        response.record = new Record(key, info.id.pubKey.bytes);\n        return response;\n      }\n    }\n\n    const [record, closer] = await Promise.all([dht._checkLocalDatastore(key), dht._betterPeersToQuery(msg, peer)]);\n\n    if (record) {\n      log('got record');\n      response.record = record;\n    }\n\n    if (closer.length > 0) {\n      log('got closer %s', closer.length);\n      response.closerPeers = closer;\n    }\n\n    return response;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}