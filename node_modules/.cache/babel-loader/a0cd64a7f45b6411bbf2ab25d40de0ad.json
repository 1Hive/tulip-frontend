{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar debug = require('debug');\n\nvar log = debug('libp2p-ping');\nlog.error = debug('libp2p-ping:error');\n\nvar errCode = require('err-code');\n\nvar crypto = require('libp2p-crypto');\n\nvar pipe = require('it-pipe');\n\nvar _require = require('it-buffer'),\n    toBuffer = _require.toBuffer;\n\nvar _require2 = require('streaming-iterables'),\n    collect = _require2.collect,\n    take = _require2.take;\n\nvar _require3 = require('./constants'),\n    PROTOCOL = _require3.PROTOCOL,\n    PING_LENGTH = _require3.PING_LENGTH;\n/**\n * Ping a given peer and wait for its response, getting the operation latency.\n * @param {Libp2p} node\n * @param {PeerInfo} peer\n * @returns {Promise<Number>}\n */\n\n\nfunction ping(_x, _x2) {\n  return _ping.apply(this, arguments);\n}\n/**\n * Subscribe ping protocol handler.\n * @param {Libp2p} node\n */\n\n\nfunction _ping() {\n  _ping = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(node, peer) {\n    var _yield$node$dialProto, stream, start, data, _yield$pipe, _yield$pipe2, result, end;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            log('dialing %s to %s', PROTOCOL, peer.id.toB58String());\n            _context.next = 3;\n            return node.dialProtocol(peer, PROTOCOL);\n\n          case 3:\n            _yield$node$dialProto = _context.sent;\n            stream = _yield$node$dialProto.stream;\n            start = new Date();\n            data = crypto.randomBytes(PING_LENGTH);\n            _context.next = 9;\n            return pipe([data], stream, function (stream) {\n              return take(1, stream);\n            }, toBuffer, collect);\n\n          case 9:\n            _yield$pipe = _context.sent;\n            _yield$pipe2 = _slicedToArray(_yield$pipe, 1);\n            result = _yield$pipe2[0];\n            end = Date.now();\n\n            if (data.equals(result)) {\n              _context.next = 15;\n              break;\n            }\n\n            throw errCode(new Error('Received wrong ping ack'), 'ERR_WRONG_PING_ACK');\n\n          case 15:\n            return _context.abrupt(\"return\", end - start);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _ping.apply(this, arguments);\n}\n\nfunction mount(node) {\n  node.handle(PROTOCOL, function (_ref) {\n    var stream = _ref.stream;\n    return pipe(stream, stream);\n  });\n}\n/**\n * Unsubscribe ping protocol handler.\n * @param {Libp2p} node\n */\n\n\nfunction unmount(node) {\n  node.unhandle(PROTOCOL);\n}\n\nexports = module.exports = ping;\nexports.mount = mount;\nexports.unmount = unmount;","map":null,"metadata":{},"sourceType":"script"}