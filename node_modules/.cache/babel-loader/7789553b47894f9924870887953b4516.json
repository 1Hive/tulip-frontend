{"ast":null,"code":"'use strict';\n\nconst protons = require('protons');\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst pb = protons(require('./record.proto')).Record;\n\nconst utils = require('./utils');\n\nclass Record {\n  /**\n   * @param {Buffer} [key]\n   * @param {Buffer} [value]\n   * @param {Date} [recvtime]\n   */\n  constructor(key, value, recvtime) {\n    if (key && !Buffer.isBuffer(key)) {\n      throw new Error('key must be a Buffer');\n    }\n\n    if (value && !Buffer.isBuffer(value)) {\n      throw new Error('value must be a buffer');\n    }\n\n    this.key = key;\n    this.value = value;\n    this.timeReceived = recvtime;\n  }\n  /**\n   * @returns {Buffer}\n   */\n\n\n  serialize() {\n    return pb.encode(this.prepareSerialize());\n  }\n  /**\n   * Return the object format ready to be given to the protobuf library.\n   *\n   * @returns {Object}\n   */\n\n\n  prepareSerialize() {\n    return {\n      key: this.key,\n      value: this.value,\n      timeReceived: this.timeReceived && utils.toRFC3339(this.timeReceived)\n    };\n  }\n  /**\n   * Decode a protobuf encoded record.\n   *\n   * @param {Buffer} raw\n   * @returns {Record}\n   */\n\n\n  static deserialize(raw) {\n    const dec = pb.decode(raw);\n    return Record.fromDeserialized(dec);\n  }\n  /**\n   * Create a record from the raw object returned from the protobuf library.\n   *\n   * @param {Object} obj\n   * @returns {Record}\n   */\n\n\n  static fromDeserialized(obj) {\n    let recvtime;\n\n    if (obj.timeReceived) {\n      recvtime = utils.parseRFC3339(obj.timeReceived);\n    }\n\n    const rec = new Record(obj.key, obj.value, recvtime);\n    return rec;\n  }\n\n}\n\nmodule.exports = Record;","map":null,"metadata":{},"sourceType":"script"}