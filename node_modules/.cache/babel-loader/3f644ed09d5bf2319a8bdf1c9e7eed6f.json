{"ast":null,"code":"var _jsxFileName = \"/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/views/Profile/ProfileCreation/Mint.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport useI18n from 'hooks/useI18n';\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction';\nimport { useCake, useBunnyFactory } from 'hooks/useContract';\nimport useHasCakeBalance from 'hooks/useHasCakeBalance';\nimport nftList from 'config/constants/nfts';\nimport SelectionCard from '../components/SelectionCard';\nimport NextStepButton from '../components/NextStepButton';\nimport ApproveConfirmButtons from '../components/ApproveConfirmButtons';\nimport useProfileCreation from './contexts/hook';\nimport { MINT_COST, STARTER_BUNNY_IDS } from './config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst nfts = nftList.filter(nft => STARTER_BUNNY_IDS.includes(nft.bunnyId));\nconst minimumCakeBalanceToMint = new BigNumber(MINT_COST).multipliedBy(new BigNumber(10).pow(18));\n\nconst Mint = () => {\n  _s();\n\n  const [bunnyId, setBunnyId] = useState(null);\n  const {\n    actions,\n    minimumCakeRequired,\n    allowance\n  } = useProfileCreation();\n  const {\n    account\n  } = useWallet();\n  const cakeContract = useCake();\n  const bunnyFactoryContract = useBunnyFactory();\n  const TranslateString = useI18n();\n  const hasMinimumCakeRequired = useHasCakeBalance(minimumCakeBalanceToMint);\n  const {\n    isApproving,\n    isApproved,\n    isConfirmed,\n    isConfirming,\n    handleApprove,\n    handleConfirm\n  } = useApproveConfirmTransaction({\n    onRequiresApproval: async () => {\n      // TODO: Move this to a helper, this check will be probably be used many times\n      try {\n        const response = await cakeContract.methods.allowance(account, bunnyFactoryContract.options.address).call();\n        const currentAllowance = new BigNumber(response);\n        return currentAllowance.gte(minimumCakeRequired);\n      } catch (error) {\n        return false;\n      }\n    },\n    onApprove: () => {\n      return cakeContract.methods.approve(bunnyFactoryContract.options.address, allowance.toJSON()).send({\n        from: account\n      });\n    },\n    onConfirm: () => {\n      return bunnyFactoryContract.methods.mintNFT(bunnyId).send({\n        from: account\n      });\n    },\n    onSuccess: () => actions.nextStep()\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      fontSize: \"20px\",\n      color: \"textSubtle\",\n      bold: true,\n      children: TranslateString(999, `Step ${1}`)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h3\",\n      size: \"xl\",\n      mb: \"24px\",\n      children: TranslateString(776, 'Get Starter Collectible')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      as: \"p\",\n      children: TranslateString(786, 'Every profile starts by making a “starter” collectible (NFT).')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      as: \"p\",\n      children: TranslateString(788, 'This starter will also become your first profile picture.')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      as: \"p\",\n      mb: \"24px\",\n      children: TranslateString(790, 'You can change your profile pic later if you get another approved Pancake Collectible.')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      mb: \"24px\",\n      children: /*#__PURE__*/_jsxDEV(CardBody, {\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          as: \"h4\",\n          size: \"lg\",\n          mb: \"8px\",\n          children: TranslateString(792, 'Choose your Starter!')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          as: \"p\",\n          color: \"textSubtle\",\n          children: TranslateString(794, 'Choose wisely: you can only ever make one starter collectible!')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          as: \"p\",\n          mb: \"24px\",\n          color: \"textSubtle\",\n          children: TranslateString(999, `Cost: ${MINT_COST} CAKE`, {\n            num: MINT_COST\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), nfts.map(nft => {\n          const handleChange = value => setBunnyId(parseInt(value, 10));\n\n          return /*#__PURE__*/_jsxDEV(SelectionCard, {\n            name: \"mintStarter\",\n            value: nft.bunnyId,\n            image: `/images/nfts/${nft.images.md}`,\n            isChecked: bunnyId === nft.bunnyId,\n            onChange: handleChange,\n            disabled: isApproving || isConfirming || isConfirmed || !hasMinimumCakeRequired,\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              bold: true,\n              children: nft.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 17\n            }, this)\n          }, nft.bunnyId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this);\n        }), !hasMinimumCakeRequired && /*#__PURE__*/_jsxDEV(Text, {\n          color: \"failure\",\n          mb: \"16px\",\n          children: TranslateString(1098, `A minimum of ${MINT_COST} CAKE is required`)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ApproveConfirmButtons, {\n          isApproveDisabled: bunnyId === null || isConfirmed || isConfirming || isApproved,\n          isApproving: isApproving,\n          isConfirmDisabled: !isApproved || isConfirmed || !hasMinimumCakeRequired,\n          isConfirming: isConfirming,\n          onApprove: handleApprove,\n          onConfirm: handleConfirm\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NextStepButton, {\n      onClick: actions.nextStep,\n      disabled: !isConfirmed,\n      children: TranslateString(798, 'Next Step')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Mint, \"UYXMe1uUD6BPxAS7annCG9aC7Xc=\", false, function () {\n  return [useProfileCreation, useWallet, useCake, useBunnyFactory, useI18n, useHasCakeBalance, useApproveConfirmTransaction];\n});\n\n_c = Mint;\nexport default Mint;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mint\");","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/views/Profile/ProfileCreation/Mint.tsx"],"names":["React","useState","BigNumber","Card","CardBody","Heading","Text","useWallet","useI18n","useApproveConfirmTransaction","useCake","useBunnyFactory","useHasCakeBalance","nftList","SelectionCard","NextStepButton","ApproveConfirmButtons","useProfileCreation","MINT_COST","STARTER_BUNNY_IDS","nfts","filter","nft","includes","bunnyId","minimumCakeBalanceToMint","multipliedBy","pow","Mint","setBunnyId","actions","minimumCakeRequired","allowance","account","cakeContract","bunnyFactoryContract","TranslateString","hasMinimumCakeRequired","isApproving","isApproved","isConfirmed","isConfirming","handleApprove","handleConfirm","onRequiresApproval","response","methods","options","address","call","currentAllowance","gte","error","onApprove","approve","toJSON","send","from","onConfirm","mintNFT","onSuccess","nextStep","num","map","handleChange","value","parseInt","images","md","name"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useCake, useBunnyFactory } from 'hooks/useContract'\nimport useHasCakeBalance from 'hooks/useHasCakeBalance'\nimport nftList from 'config/constants/nfts'\nimport SelectionCard from '../components/SelectionCard'\nimport NextStepButton from '../components/NextStepButton'\nimport ApproveConfirmButtons from '../components/ApproveConfirmButtons'\nimport useProfileCreation from './contexts/hook'\nimport { MINT_COST, STARTER_BUNNY_IDS } from './config'\n\nconst nfts = nftList.filter((nft) => STARTER_BUNNY_IDS.includes(nft.bunnyId))\nconst minimumCakeBalanceToMint = new BigNumber(MINT_COST).multipliedBy(new BigNumber(10).pow(18))\n\nconst Mint: React.FC = () => {\n  const [bunnyId, setBunnyId] = useState(null)\n  const { actions, minimumCakeRequired, allowance } = useProfileCreation()\n\n  const { account } = useWallet()\n  const cakeContract = useCake()\n  const bunnyFactoryContract = useBunnyFactory()\n  const TranslateString = useI18n()\n  const hasMinimumCakeRequired = useHasCakeBalance(minimumCakeBalanceToMint)\n  const {\n    isApproving,\n    isApproved,\n    isConfirmed,\n    isConfirming,\n    handleApprove,\n    handleConfirm,\n  } = useApproveConfirmTransaction({\n    onRequiresApproval: async () => {\n      // TODO: Move this to a helper, this check will be probably be used many times\n      try {\n        const response = await cakeContract.methods.allowance(account, bunnyFactoryContract.options.address).call()\n        const currentAllowance = new BigNumber(response)\n        return currentAllowance.gte(minimumCakeRequired)\n      } catch (error) {\n        return false\n      }\n    },\n    onApprove: () => {\n      return cakeContract.methods\n        .approve(bunnyFactoryContract.options.address, allowance.toJSON())\n        .send({ from: account })\n    },\n    onConfirm: () => {\n      return bunnyFactoryContract.methods.mintNFT(bunnyId).send({ from: account })\n    },\n    onSuccess: () => actions.nextStep(),\n  })\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {TranslateString(999, `Step ${1}`)}\n      </Text>\n      <Heading as=\"h3\" size=\"xl\" mb=\"24px\">\n        {TranslateString(776, 'Get Starter Collectible')}\n      </Heading>\n      <Text as=\"p\">{TranslateString(786, 'Every profile starts by making a “starter” collectible (NFT).')}</Text>\n      <Text as=\"p\">{TranslateString(788, 'This starter will also become your first profile picture.')}</Text>\n      <Text as=\"p\" mb=\"24px\">\n        {TranslateString(790, 'You can change your profile pic later if you get another approved Pancake Collectible.')}\n      </Text>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" size=\"lg\" mb=\"8px\">\n            {TranslateString(792, 'Choose your Starter!')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\">\n            {TranslateString(794, 'Choose wisely: you can only ever make one starter collectible!')}\n          </Text>\n          <Text as=\"p\" mb=\"24px\" color=\"textSubtle\">\n            {TranslateString(999, `Cost: ${MINT_COST} CAKE`, { num: MINT_COST })}\n          </Text>\n          {nfts.map((nft) => {\n            const handleChange = (value: string) => setBunnyId(parseInt(value, 10))\n\n            return (\n              <SelectionCard\n                key={nft.bunnyId}\n                name=\"mintStarter\"\n                value={nft.bunnyId}\n                image={`/images/nfts/${nft.images.md}`}\n                isChecked={bunnyId === nft.bunnyId}\n                onChange={handleChange}\n                disabled={isApproving || isConfirming || isConfirmed || !hasMinimumCakeRequired}\n              >\n                <Text bold>{nft.name}</Text>\n              </SelectionCard>\n            )\n          })}\n          {!hasMinimumCakeRequired && (\n            <Text color=\"failure\" mb=\"16px\">\n              {TranslateString(1098, `A minimum of ${MINT_COST} CAKE is required`)}\n            </Text>\n          )}\n          <ApproveConfirmButtons\n            isApproveDisabled={bunnyId === null || isConfirmed || isConfirming || isApproved}\n            isApproving={isApproving}\n            isConfirmDisabled={!isApproved || isConfirmed || !hasMinimumCakeRequired}\n            isConfirming={isConfirming}\n            onApprove={handleApprove}\n            onConfirm={handleConfirm}\n          />\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={!isConfirmed}>\n        {TranslateString(798, 'Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default Mint\n"]},"metadata":{},"sourceType":"module"}