{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _toConsumableArray = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar Channel = require('ipfs-pubsub-1on1');\n\nvar Logger = require('logplease');\n\nvar logger = Logger.create('exchange-heads', {\n  color: Logger.Colors.Yellow\n});\nLogger.setLogLevel('ERROR');\n\nvar getHeadsForDatabase = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(store) {\n    var localHeads, remoteHeads;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (store && store._cache) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", []);\n\n          case 2:\n            _context.next = 4;\n            return store._cache.get(store.localHeadsPath);\n\n          case 4:\n            _context.t0 = _context.sent;\n\n            if (_context.t0) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.t0 = [];\n\n          case 7:\n            localHeads = _context.t0;\n            _context.next = 10;\n            return store._cache.get(store.remoteHeadsPath);\n\n          case 10:\n            _context.t1 = _context.sent;\n\n            if (_context.t1) {\n              _context.next = 13;\n              break;\n            }\n\n            _context.t1 = [];\n\n          case 13:\n            remoteHeads = _context.t1;\n            return _context.abrupt(\"return\", [].concat(_toConsumableArray(localHeads), _toConsumableArray(remoteHeads)));\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getHeadsForDatabase(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar exchangeHeads = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ipfs, address, peer, getStore, getDirectConnection, onMessage, onChannelCreated) {\n    var _handleMessage, channel, heads;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _handleMessage = function _handleMessage(message) {\n              var msg = JSON.parse(message.data);\n              var address = msg.address,\n                  heads = msg.heads;\n              onMessage(address, heads);\n            };\n\n            channel = getDirectConnection(peer);\n\n            if (channel) {\n              _context2.next = 16;\n              break;\n            }\n\n            _context2.prev = 3;\n            logger.debug(\"Create a channel to \".concat(peer));\n            _context2.next = 7;\n            return Channel.open(ipfs, peer);\n\n          case 7:\n            channel = _context2.sent;\n            channel.on('message', _handleMessage);\n            logger.debug(\"Channel created to \".concat(peer));\n            onChannelCreated(channel);\n            _context2.next = 16;\n            break;\n\n          case 13:\n            _context2.prev = 13;\n            _context2.t0 = _context2[\"catch\"](3);\n            logger.error(_context2.t0);\n\n          case 16:\n            _context2.next = 18;\n            return channel.connect();\n\n          case 18:\n            logger.debug(\"Connected to \".concat(peer)); // Send the heads if we have any\n\n            _context2.next = 21;\n            return getHeadsForDatabase(getStore(address));\n\n          case 21:\n            heads = _context2.sent;\n            logger.debug(\"Send latest heads of '\".concat(address, \"':\\n\"), JSON.stringify(heads.map(function (e) {\n              return e.hash;\n            }), null, 2));\n\n            if (!heads) {\n              _context2.next = 26;\n              break;\n            }\n\n            _context2.next = 26;\n            return channel.send(JSON.stringify({\n              address: address,\n              heads: heads\n            }));\n\n          case 26:\n            return _context2.abrupt(\"return\", channel);\n\n          case 27:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[3, 13]]);\n  }));\n\n  return function exchangeHeads(_x2, _x3, _x4, _x5, _x6, _x7, _x8) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nmodule.exports = exchangeHeads;","map":null,"metadata":{},"sourceType":"script"}