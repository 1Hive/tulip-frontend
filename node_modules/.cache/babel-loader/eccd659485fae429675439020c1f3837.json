{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nrequire('node-forge/lib/pkcs7');\n\nrequire('node-forge/lib/pbe');\n\nvar forge = require('node-forge/lib/forge');\n\nvar _require = require('./util'),\n    certificateForKey = _require.certificateForKey,\n    findAsync = _require.findAsync;\n\nvar errcode = require('err-code');\n/**\n * Cryptographic Message Syntax (aka PKCS #7)\n *\n * CMS describes an encapsulation syntax for data protection. It\n * is used to digitally sign, digest, authenticate, or encrypt\n * arbitrary message content.\n *\n * See RFC 5652 for all the details.\n */\n\n\nvar CMS = /*#__PURE__*/function () {\n  /**\n   * Creates a new instance with a keychain\n   *\n   * @param {Keychain} keychain - the available keys\n   */\n  function CMS(keychain) {\n    _classCallCheck(this, CMS);\n\n    if (!keychain) {\n      throw errcode(new Error('keychain is required'), 'ERR_KEYCHAIN_REQUIRED');\n    }\n\n    this.keychain = keychain;\n  }\n  /**\n   * Creates some protected data.\n   *\n   * The output Buffer contains the PKCS #7 message in DER.\n   *\n   * @param {string} name - The local key name.\n   * @param {Buffer} plain - The data to encrypt.\n   * @returns {undefined}\n   */\n\n\n  _createClass(CMS, [{\n    key: \"encrypt\",\n    value: function () {\n      var _encrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(name, plain) {\n        var key, pem, privateKey, certificate, p7, der;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (Buffer.isBuffer(plain)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw errcode(new Error('Plain data must be a Buffer'), 'ERR_INVALID_PARAMS');\n\n              case 2:\n                _context.next = 4;\n                return this.keychain.findKeyByName(name);\n\n              case 4:\n                key = _context.sent;\n                _context.next = 7;\n                return this.keychain._getPrivateKey(name);\n\n              case 7:\n                pem = _context.sent;\n                privateKey = forge.pki.decryptRsaPrivateKey(pem, this.keychain._());\n                _context.next = 11;\n                return certificateForKey(key, privateKey);\n\n              case 11:\n                certificate = _context.sent;\n                // create a p7 enveloped message\n                p7 = forge.pkcs7.createEnvelopedData();\n                p7.addRecipient(certificate);\n                p7.content = forge.util.createBuffer(plain);\n                p7.encrypt(); // convert message to DER\n\n                der = forge.asn1.toDer(p7.toAsn1()).getBytes();\n                return _context.abrupt(\"return\", Buffer.from(der, 'binary'));\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function encrypt(_x, _x2) {\n        return _encrypt.apply(this, arguments);\n      }\n\n      return encrypt;\n    }()\n    /**\n     * Reads some protected data.\n     *\n     * The keychain must contain one of the keys used to encrypt the data.  If none of the keys\n     * exists, an Error is returned with the property 'missingKeys'.  It is array of key ids.\n     *\n     * @param {Buffer} cmsData - The CMS encrypted data to decrypt.\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"decrypt\",\n    value: function () {\n      var _decrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(cmsData) {\n        var _this = this;\n\n        var cms, buf, obj, recipients, r, missingKeys, key, pem, privateKey;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (Buffer.isBuffer(cmsData)) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw errcode(new Error('CMS data is required'), 'ERR_INVALID_PARAMS');\n\n              case 2:\n                _context3.prev = 2;\n                buf = forge.util.createBuffer(cmsData.toString('binary'));\n                obj = forge.asn1.fromDer(buf);\n                cms = forge.pkcs7.messageFromAsn1(obj);\n                _context3.next = 11;\n                break;\n\n              case 8:\n                _context3.prev = 8;\n                _context3.t0 = _context3[\"catch\"](2);\n                throw errcode(new Error('Invalid CMS: ' + _context3.t0.message), 'ERR_INVALID_CMS');\n\n              case 11:\n                // Find a recipient whose key we hold. We only deal with recipient certs\n                // issued by ipfs (O=ipfs).\n                recipients = cms.recipients.filter(function (r) {\n                  return r.issuer.find(function (a) {\n                    return a.shortName === 'O' && a.value === 'ipfs';\n                  });\n                }).filter(function (r) {\n                  return r.issuer.find(function (a) {\n                    return a.shortName === 'CN';\n                  });\n                }).map(function (r) {\n                  return {\n                    recipient: r,\n                    keyId: r.issuer.find(function (a) {\n                      return a.shortName === 'CN';\n                    }).value\n                  };\n                });\n                _context3.next = 14;\n                return findAsync(recipients, /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(recipient) {\n                    var _key;\n\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.prev = 0;\n                            _context2.next = 3;\n                            return _this.keychain.findKeyById(recipient.keyId);\n\n                          case 3:\n                            _key = _context2.sent;\n\n                            if (!_key) {\n                              _context2.next = 6;\n                              break;\n                            }\n\n                            return _context2.abrupt(\"return\", true);\n\n                          case 6:\n                            _context2.next = 11;\n                            break;\n\n                          case 8:\n                            _context2.prev = 8;\n                            _context2.t0 = _context2[\"catch\"](0);\n                            return _context2.abrupt(\"return\", false);\n\n                          case 11:\n                            return _context2.abrupt(\"return\", false);\n\n                          case 12:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, null, [[0, 8]]);\n                  }));\n\n                  return function (_x4) {\n                    return _ref.apply(this, arguments);\n                  };\n                }());\n\n              case 14:\n                r = _context3.sent;\n\n                if (r) {\n                  _context3.next = 18;\n                  break;\n                }\n\n                missingKeys = recipients.map(function (r) {\n                  return r.keyId;\n                });\n                throw errcode(new Error('Decryption needs one of the key(s): ' + missingKeys.join(', ')), 'ERR_MISSING_KEYS', {\n                  missingKeys: missingKeys\n                });\n\n              case 18:\n                _context3.next = 20;\n                return this.keychain.findKeyById(r.keyId);\n\n              case 20:\n                key = _context3.sent;\n                _context3.next = 23;\n                return this.keychain._getPrivateKey(key.name);\n\n              case 23:\n                pem = _context3.sent;\n                privateKey = forge.pki.decryptRsaPrivateKey(pem, this.keychain._());\n                cms.decrypt(r.recipient, privateKey);\n                return _context3.abrupt(\"return\", Buffer.from(cms.content.getBytes(), 'binary'));\n\n              case 27:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2, 8]]);\n      }));\n\n      function decrypt(_x3) {\n        return _decrypt.apply(this, arguments);\n      }\n\n      return decrypt;\n    }()\n  }]);\n\n  return CMS;\n}();\n\nmodule.exports = CMS;","map":null,"metadata":{},"sourceType":"script"}