{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar pageResults = require('graph-results-pager');\n\nvar ws = require('isomorphic-ws');\n\nvar _require = require('subscriptions-transport-ws'),\n    SubscriptionClient = _require.SubscriptionClient;\n\nvar _require2 = require('graphql-request'),\n    request = _require2.request,\n    gql = _require2.gql;\n\nvar _require3 = require('./../constants'),\n    graphAPIEndpoints = _require3.graphAPIEndpoints,\n    graphWSEndpoints = _require3.graphWSEndpoints;\n\nvar _require4 = require('./../utils'),\n    timestampToBlock = _require4.timestampToBlock;\n\nmodule.exports = {\n  user: function user() {\n    var _arguments = arguments;\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _ref, _ref$block, block, _ref$timestamp, timestamp, _ref$user_address, user_address;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _ref = _arguments.length > 0 && _arguments[0] !== undefined ? _arguments[0] : {}, _ref$block = _ref.block, block = _ref$block === void 0 ? undefined : _ref$block, _ref$timestamp = _ref.timestamp, timestamp = _ref$timestamp === void 0 ? undefined : _ref$timestamp, _ref$user_address = _ref.user_address, user_address = _ref$user_address === void 0 ? undefined : _ref$user_address;\n              _context.t0 = pageResults;\n              _context.t1 = graphAPIEndpoints.lockup;\n              _context.t2 = {\n                where: {\n                  address: \"\\\\\\\"\".concat(user_address.toLowerCase(), \"\\\\\\\"\")\n                }\n              };\n\n              if (!block) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.t3 = {\n                number: block\n              };\n              _context.next = 17;\n              break;\n\n            case 8:\n              if (!timestamp) {\n                _context.next = 15;\n                break;\n              }\n\n              _context.next = 11;\n              return timestampToBlock(timestamp);\n\n            case 11:\n              _context.t5 = _context.sent;\n              _context.t4 = {\n                number: _context.t5\n              };\n              _context.next = 16;\n              break;\n\n            case 15:\n              _context.t4 = undefined;\n\n            case 16:\n              _context.t3 = _context.t4;\n\n            case 17:\n              _context.t6 = _context.t3;\n              _context.t7 = _user.properties;\n              _context.t8 = {\n                entity: 'users',\n                selection: _context.t2,\n                block: _context.t6,\n                properties: _context.t7\n              };\n              _context.t9 = {\n                api: _context.t1,\n                query: _context.t8\n              };\n              return _context.abrupt(\"return\", (0, _context.t0)(_context.t9).then(function (results) {\n                return _user.callback(results);\n              }).catch(function (err) {\n                return console.log(err);\n              }));\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }\n};\nvar _user = {\n  properties: ['id', 'address', 'amount', 'rewardDebt', 'pool { id, balance, accSushiPerShare }', 'sushiAtLockup', 'sushiHarvestedSinceLockup', 'sushiLocked'],\n  callback: function callback(results) {\n    return results.map(function (entry) {\n      return {\n        id: entry.id,\n        address: entry.address,\n        amount: Number(entry.amount),\n        rewardDebt: BigInt(entry.rewardDebt),\n        pool: {\n          id: entry.pool.id,\n          balance: Number(entry.pool.balance),\n          accSushiPerShare: BigInt(accSushiPerShare)\n        },\n        sushiAtLockup: Number(entry.sushiAtLockup),\n        sushiHarvestedSinceLockup: Number(entry.sushiHarvestedSinceLockup),\n        sushiLocked: Number(entry.sushiLocked)\n      };\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"script"}