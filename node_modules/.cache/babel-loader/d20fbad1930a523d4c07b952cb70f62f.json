{"ast":null,"code":"import './unsupportedIterableToArray-aef68344.js';\nimport { c as createCommonjsModule } from './_commonjsHelpers-97e6d7b1.js';\nimport { _ as _toConsumableArray } from './toConsumableArray-07f01111.js';\nimport { s as setPrototypeOf, g as _getPrototypeOf, _ as _inherits, a as _createClass, b as _classCallCheck, d as _possibleConstructorReturn } from './getPrototypeOf-97db713a.js';\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nvar isNativeFunction = _isNativeFunction;\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar isNativeReflectConstruct = _isNativeReflectConstruct;\nvar construct = createCommonjsModule(function (module) {\n  function _construct(Parent, args, Class) {\n    if (isNativeReflectConstruct()) {\n      module.exports = _construct = Reflect.construct;\n    } else {\n      module.exports = _construct = function _construct(Parent, args, Class) {\n        var a = [null];\n        a.push.apply(a, args);\n        var Constructor = Function.bind.apply(Parent, a);\n        var instance = new Constructor();\n        if (Class) setPrototypeOf(instance, Class.prototype);\n        return instance;\n      };\n    }\n\n    return _construct.apply(null, arguments);\n  }\n\n  module.exports = _construct;\n});\nvar wrapNativeSuper = createCommonjsModule(function (module) {\n  function _wrapNativeSuper(Class) {\n    var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n    module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {\n      if (Class === null || !isNativeFunction(Class)) return Class;\n\n      if (typeof Class !== \"function\") {\n        throw new TypeError(\"Super expression must either be null or a function\");\n      }\n\n      if (typeof _cache !== \"undefined\") {\n        if (_cache.has(Class)) return _cache.get(Class);\n\n        _cache.set(Class, Wrapper);\n      }\n\n      function Wrapper() {\n        return construct(Class, arguments, _getPrototypeOf(this).constructor);\n      }\n\n      Wrapper.prototype = Object.create(Class.prototype, {\n        constructor: {\n          value: Wrapper,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n      return setPrototypeOf(Wrapper, Class);\n    };\n\n    return _wrapNativeSuper(Class);\n  }\n\n  module.exports = _wrapNativeSuper;\n});\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct$1()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct$1() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nvar RGB_HEX_RE = /^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;\n\nfunction rgbFromRgbInt(rgbInt) {\n  return {\n    r: Math.floor(rgbInt / Math.pow(256, 2)),\n    g: Math.floor(rgbInt / 256 % 256),\n    b: Math.floor(rgbInt % 256)\n  };\n}\n\nfunction normalizeHexColor(value) {\n  var matches = value ? String(value).match(RGB_HEX_RE) : null;\n\n  if (matches === null) {\n    throw new Error(\"color(): the value must be a valid CSS hexadecimal color. Received: \".concat(value));\n  }\n\n  var hexColor = matches[1].toUpperCase();\n\n  if (hexColor.length === 3) {\n    return _toConsumableArray(hexColor).map(function (c) {\n      return c + c;\n    }).join('');\n  }\n\n  return hexColor;\n}\n\nvar Color = /*#__PURE__*/function (_String) {\n  _inherits(Color, _String);\n\n  var _super = _createSuper(Color);\n\n  function Color(value) {\n    var _this;\n\n    _classCallCheck(this, Color);\n\n    _this = _super.call(this, value);\n    var hexColor = normalizeHexColor(value);\n\n    var _rgbFromRgbInt = rgbFromRgbInt(parseInt(hexColor, 16)),\n        r = _rgbFromRgbInt.r,\n        g = _rgbFromRgbInt.g,\n        b = _rgbFromRgbInt.b;\n\n    _this.r = r;\n    _this.g = g;\n    _this.b = b;\n    _this.hexColor = hexColor;\n    return _this;\n  }\n\n  _createClass(Color, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.toCssRgb();\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this.toCssRgb();\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return [this.r, this.g, this.b];\n    }\n  }, {\n    key: \"toObject\",\n    value: function toObject() {\n      var r = this.r,\n          g = this.g,\n          b = this.b;\n      return {\n        r: r,\n        g: g,\n        b: b\n      };\n    }\n  }, {\n    key: \"alpha\",\n    value: function alpha(_alpha) {\n      return this.toCssRgb({\n        alpha: _alpha\n      });\n    }\n  }, {\n    key: \"toCssRgb\",\n    value: function toCssRgb() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$alpha = _ref.alpha,\n          alpha = _ref$alpha === void 0 ? 1 : _ref$alpha;\n\n      if (alpha === 1) {\n        return \"#\".concat(this.hexColor);\n      }\n\n      alpha = Math.max(0, Math.min(1, alpha));\n      return \"rgba(\".concat(this.r, \", \").concat(this.g, \", \").concat(this.b, \", \").concat(alpha, \")\");\n    }\n  }]);\n\n  return Color;\n}( /*#__PURE__*/wrapNativeSuper(String));\n\nfunction color(value) {\n  return new Color(value);\n}\n\nexport default color;","map":null,"metadata":{},"sourceType":"module"}