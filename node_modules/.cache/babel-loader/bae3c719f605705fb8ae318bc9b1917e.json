{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _asyncGeneratorDelegate = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\");\n\nvar Reader = require('it-reader');\n\nvar Writer = require('it-pushable');\n\nvar defer = require('p-defer'); // Convert a duplex stream into a reader and writer and rest stream\n\n\nmodule.exports = function (stream) {\n  var writer = Writer(); // Write bytes on demand to the sink\n\n  var reader = Reader(stream.source); // Read bytes on demand from the source\n  // Waits for a source to be passed to the rest stream's sink\n\n  var sourcePromise = defer();\n  var sinkErr;\n  var sinkPromise = stream.sink(_wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var source;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(writer), _awaitAsyncGenerator), \"t0\", 1);\n\n          case 1:\n            _context.next = 3;\n            return _awaitAsyncGenerator(sourcePromise.promise);\n\n          case 3:\n            source = _context.sent;\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(source), _awaitAsyncGenerator), \"t1\", 5);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }))());\n  sinkPromise.catch(function (err) {\n    sinkErr = err;\n  });\n  var rest = {\n    sink: function sink(source) {\n      if (sinkErr) {\n        return Promise.reject(sinkErr);\n      }\n\n      sourcePromise.resolve(source);\n      return sinkPromise;\n    },\n    source: reader\n  };\n  return {\n    reader: reader,\n    writer: writer,\n    stream: rest,\n    rest: function rest() {\n      return writer.end();\n    },\n    write: writer.push,\n    read: function () {\n      var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return reader.next();\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent.value);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function read() {\n        return _read.apply(this, arguments);\n      }\n\n      return read;\n    }()\n  };\n};","map":null,"metadata":{},"sourceType":"script"}