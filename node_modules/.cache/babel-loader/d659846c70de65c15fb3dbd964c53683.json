{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nexport let Views;\n\n(function (Views) {\n  Views[\"START\"] = \"start\";\n  Views[\"CHANGE\"] = \"change\";\n  Views[\"REMOVE\"] = \"remove\";\n  Views[\"APPROVE\"] = \"approve\";\n})(Views || (Views = {}));\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'set_view':\n      return { ...state,\n        currentView: action.view,\n        previousView: state.currentView\n      };\n\n    case 'go_previous':\n      return { ...state,\n        currentView: state.previousView,\n        previousView: state.currentView\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst useEditProfile = () => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, {\n    currentView: Views.START,\n    previousView: null\n  });\n\n  const goToStart = () => dispatch({\n    type: 'set_view',\n    view: Views.START\n  });\n\n  const goToChange = () => dispatch({\n    type: 'set_view',\n    view: Views.CHANGE\n  });\n\n  const goToRemove = () => dispatch({\n    type: 'set_view',\n    view: Views.REMOVE\n  });\n\n  const goToApprove = () => dispatch({\n    type: 'set_view',\n    view: Views.APPROVE\n  });\n\n  const goPrevious = () => dispatch({\n    type: 'go_previous'\n  });\n\n  return { ...state,\n    goToStart,\n    goToChange,\n    goToRemove,\n    goToApprove,\n    goPrevious\n  };\n};\n\n_s(useEditProfile, \"UDBE2uY7rSE2OGaVHB1+JaO1484=\");\n\nexport default useEditProfile;","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/views/Profile/components/EditProfileModal/reducer.ts"],"names":["useReducer","Views","reducer","state","action","type","currentView","view","previousView","useEditProfile","dispatch","START","goToStart","goToChange","CHANGE","goToRemove","REMOVE","goToApprove","APPROVE","goPrevious"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,WAAYC,KAAZ;;WAAYA,K;AAAAA,EAAAA,K;AAAAA,EAAAA,K;AAAAA,EAAAA,K;AAAAA,EAAAA,K;GAAAA,K,KAAAA,K;;AAqBZ,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAeC,MAAf,KAA0C;AACxD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELG,QAAAA,WAAW,EAAEF,MAAM,CAACG,IAFf;AAGLC,QAAAA,YAAY,EAAEL,KAAK,CAACG;AAHf,OAAP;;AAKF,SAAK,aAAL;AACE,aAAO,EACL,GAAGH,KADE;AAELG,QAAAA,WAAW,EAAEH,KAAK,CAACK,YAFd;AAGLA,QAAAA,YAAY,EAAEL,KAAK,CAACG;AAHf,OAAP;;AAKF;AACE,aAAOH,KAAP;AAdJ;AAgBD,CAjBD;;AA2BA,MAAMM,cAAc,GAAG,MAA8B;AAAA;;AACnD,QAAM,CAACN,KAAD,EAAQO,QAAR,IAAoBV,UAAU,CAACE,OAAD,EAAU;AAC5CI,IAAAA,WAAW,EAAEL,KAAK,CAACU,KADyB;AAE5CH,IAAAA,YAAY,EAAE;AAF8B,GAAV,CAApC;;AAKA,QAAMI,SAAS,GAAG,MAAMF,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAE,UAAR;AAAoBE,IAAAA,IAAI,EAAEN,KAAK,CAACU;AAAhC,GAAD,CAAhC;;AACA,QAAME,UAAU,GAAG,MAAMH,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAE,UAAR;AAAoBE,IAAAA,IAAI,EAAEN,KAAK,CAACa;AAAhC,GAAD,CAAjC;;AACA,QAAMC,UAAU,GAAG,MAAML,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAE,UAAR;AAAoBE,IAAAA,IAAI,EAAEN,KAAK,CAACe;AAAhC,GAAD,CAAjC;;AACA,QAAMC,WAAW,GAAG,MAAMP,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAE,UAAR;AAAoBE,IAAAA,IAAI,EAAEN,KAAK,CAACiB;AAAhC,GAAD,CAAlC;;AACA,QAAMC,UAAU,GAAG,MAAMT,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAjC;;AAEA,SAAO,EAAE,GAAGF,KAAL;AAAYS,IAAAA,SAAZ;AAAuBC,IAAAA,UAAvB;AAAmCE,IAAAA,UAAnC;AAA+CE,IAAAA,WAA/C;AAA4DE,IAAAA;AAA5D,GAAP;AACD,CAbD;;GAAMV,c;;AAeN,eAAeA,cAAf","sourcesContent":["import { useReducer } from 'react'\n\nexport enum Views {\n  START = 'start',\n  CHANGE = 'change',\n  REMOVE = 'remove',\n  APPROVE = 'approve',\n}\n\nexport type Actions =\n  | {\n      type: 'set_view'\n      view: Views\n    }\n  | {\n      type: 'go_previous'\n    }\n\nexport interface State {\n  currentView: Views\n  previousView: Views | null\n}\n\nconst reducer = (state: State, action: Actions): State => {\n  switch (action.type) {\n    case 'set_view':\n      return {\n        ...state,\n        currentView: action.view,\n        previousView: state.currentView,\n      }\n    case 'go_previous':\n      return {\n        ...state,\n        currentView: state.previousView,\n        previousView: state.currentView,\n      }\n    default:\n      return state\n  }\n}\n\nexport interface UseEditProfileResponse extends State {\n  goToStart: () => void\n  goToChange: () => void\n  goToApprove: () => void\n  goToRemove: () => void\n  goPrevious: () => void\n}\n\nconst useEditProfile = (): UseEditProfileResponse => {\n  const [state, dispatch] = useReducer(reducer, {\n    currentView: Views.START,\n    previousView: null,\n  })\n\n  const goToStart = () => dispatch({ type: 'set_view', view: Views.START })\n  const goToChange = () => dispatch({ type: 'set_view', view: Views.CHANGE })\n  const goToRemove = () => dispatch({ type: 'set_view', view: Views.REMOVE })\n  const goToApprove = () => dispatch({ type: 'set_view', view: Views.APPROVE })\n  const goPrevious = () => dispatch({ type: 'go_previous' })\n\n  return { ...state, goToStart, goToChange, goToRemove, goToApprove, goPrevious }\n}\n\nexport default useEditProfile\n"]},"metadata":{},"sourceType":"module"}