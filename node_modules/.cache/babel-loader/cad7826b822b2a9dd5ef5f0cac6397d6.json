{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('../protocol'),\n    CircuitPB = _require.CircuitRelay;\n\nvar multicodec = require('../multicodec');\n\nvar StreamHandler = require('./stream-handler');\n\nvar _require2 = require('./utils'),\n    validateAddrs = _require2.validateAddrs;\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:circuit:stop');\nlog.error = debug('libp2p:circuit:stop:error');\n/**\n * Handles incoming STOP requests\n *\n * @private\n * @param {*} options\n * @param {Connection} options.connection\n * @param {*} options.request The CircuitRelay protobuf request (unencoded)\n * @param {StreamHandler} options.streamHandler\n * @returns {Promise<*>} Resolves a duplex iterable\n */\n\nmodule.exports.handleStop = function handleStop(_ref) {\n  var connection = _ref.connection,\n      request = _ref.request,\n      streamHandler = _ref.streamHandler;\n\n  // Validate the STOP request has the required input\n  try {\n    validateAddrs(request, streamHandler);\n  } catch (err) {\n    return log.error('invalid stop request via peer %s', connection.remotePeer.toB58String(), err);\n  } // The request is valid\n\n\n  log('stop request is valid');\n  streamHandler.write({\n    type: CircuitPB.Type.STATUS,\n    code: CircuitPB.Status.SUCCESS\n  });\n  return streamHandler.rest();\n};\n/**\n * Creates a STOP request\n * @private\n * @param {*} options\n * @param {Connection} options.connection\n * @param {*} options.request The CircuitRelay protobuf request (unencoded)\n * @returns {Promise<*>} Resolves a duplex iterable\n */\n\n\nmodule.exports.stop = /*#__PURE__*/function () {\n  var _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var connection, request, _yield$connection$new, stream, streamHandler, response;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            connection = _ref2.connection, request = _ref2.request;\n            _context.next = 3;\n            return connection.newStream([multicodec.relay]);\n\n          case 3:\n            _yield$connection$new = _context.sent;\n            stream = _yield$connection$new.stream;\n            log('starting stop request to %s', connection.remotePeer.toB58String());\n            streamHandler = new StreamHandler({\n              stream: stream\n            });\n            streamHandler.write(request);\n            _context.next = 10;\n            return streamHandler.read();\n\n          case 10:\n            response = _context.sent;\n\n            if (!(response.code === CircuitPB.Status.SUCCESS)) {\n              _context.next = 14;\n              break;\n            }\n\n            log('stop request to %s was successful', connection.remotePeer.toB58String());\n            return _context.abrupt(\"return\", streamHandler.rest());\n\n          case 14:\n            log('stop request failed with code %d', response.code);\n            streamHandler.close();\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  function stop(_x) {\n    return _stop.apply(this, arguments);\n  }\n\n  return stop;\n}();","map":null,"metadata":{},"sourceType":"script"}