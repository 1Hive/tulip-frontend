{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar PeerId = require('peer-id');\n\nvar PeerInfo = require('peer-info');\n\nvar multiaddr = require('multiaddr');\n\nvar mafmt = require('mafmt');\n\nvar _require = require('events'),\n    EventEmitter = _require.EventEmitter;\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:bootstrap');\nlog.error = debug('libp2p:bootstrap:error');\n/**\n * Emits 'peer' events on a regular interval for each peer in the provided list.\n */\n\nvar Bootstrap = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Bootstrap, _EventEmitter);\n\n  var _super = _createSuper(Bootstrap);\n\n  /**\n   * Constructs a new Bootstrap.\n   *\n   * @param {Object} options\n   * @param {Array<string>} options.list - the list of peer addresses in multi-address format\n   * @param {number} [options.interval] - the interval between emitting addresses in milliseconds (default: 10000)\n   *\n   */\n  function Bootstrap() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Bootstrap);\n\n    if (!options.list || !options.list.length) {\n      throw new Error('Bootstrap requires a list of peer addresses');\n    }\n\n    _this = _super.call(this);\n    _this._list = options.list;\n    _this._interval = options.interval || 10000;\n    _this._timer = null;\n    return _this;\n  }\n  /**\n   * Start emitting events.\n   */\n\n\n  _createClass(Bootstrap, [{\n    key: \"start\",\n    value: function start() {\n      var _this2 = this;\n\n      if (this._timer) {\n        return;\n      }\n\n      this._timer = setInterval(function () {\n        return _this2._discoverBootstrapPeers();\n      }, this._interval);\n\n      this._discoverBootstrapPeers();\n    }\n    /**\n     * Emit each address in the list as a PeerInfo.\n     */\n\n  }, {\n    key: \"_discoverBootstrapPeers\",\n    value: function _discoverBootstrapPeers() {\n      var _this3 = this;\n\n      this._list.forEach( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(candidate) {\n          var ma, peerId, peerInfo;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (mafmt.P2P.matches(candidate)) {\n                    _context.next = 2;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", log.error('Invalid multiaddr'));\n\n                case 2:\n                  ma = multiaddr(candidate);\n                  peerId = PeerId.createFromB58String(ma.getPeerId());\n                  _context.prev = 4;\n                  _context.next = 7;\n                  return PeerInfo.create(peerId);\n\n                case 7:\n                  peerInfo = _context.sent;\n                  peerInfo.multiaddrs.add(ma);\n\n                  _this3.emit('peer', peerInfo);\n\n                  _context.next = 15;\n                  break;\n\n                case 12:\n                  _context.prev = 12;\n                  _context.t0 = _context[\"catch\"](4);\n                  log.error('Invalid bootstrap peer id', _context.t0);\n\n                case 15:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[4, 12]]);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n    /**\n     * Stop emitting events.\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this._timer) {\n        clearInterval(this._timer);\n        this._timer = null;\n      }\n    }\n  }]);\n\n  return Bootstrap;\n}(EventEmitter);\n\nexports = module.exports = Bootstrap;\nexports.tag = 'bootstrap';","map":null,"metadata":{},"sourceType":"script"}