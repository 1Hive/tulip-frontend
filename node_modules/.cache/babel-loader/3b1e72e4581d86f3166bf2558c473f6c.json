{"ast":null,"code":"import { addressesEqual } from '../lib/web3-utils';\nimport { isvoteLeaked } from './crvoting-utils';\nimport { bigNum } from '../lib/math-utils';\nimport { toMs } from './date-utils';\nexport function getJurorDraft(round, jurorId) {\n  if (!round) return null;\n  return round.jurors.find(jurorDraft => addressesEqual(jurorDraft.juror.id, jurorId));\n}\nexport function hasJurorVoted(jurorDraft) {\n  return !!jurorDraft.commitment;\n}\nexport function canJurorReveal(jurorDraft) {\n  const hasNotRevealed = !jurorDraft.outcome;\n  return hasNotRevealed && hasJurorVoted(jurorDraft) && !isvoteLeaked(jurorDraft.outcome);\n}\nexport function isJurorCoherent(jurorDraft) {\n  const {\n    dispute\n  } = jurorDraft.round;\n  return dispute.finalRuling !== 0 && jurorDraft.outcome === dispute.finalRuling;\n}\nexport function transformJurorDataAttributes(jurorDraft) {\n  const {\n    rewardedAt,\n    round,\n    weight\n  } = jurorDraft;\n  return { ...jurorDraft,\n    rewardedAt: toMs(parseInt(rewardedAt || 0, 10)),\n    weight: bigNum(weight),\n    round: { ...round,\n      number: parseInt(round.number, 10),\n      collectedTokens: bigNum(round.collectedTokens),\n      jurorFees: bigNum(round.jurorFees)\n    }\n  };\n}","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/utils/juror-draft-utils.js"],"names":["addressesEqual","isvoteLeaked","bigNum","toMs","getJurorDraft","round","jurorId","jurors","find","jurorDraft","juror","id","hasJurorVoted","commitment","canJurorReveal","hasNotRevealed","outcome","isJurorCoherent","dispute","finalRuling","transformJurorDataAttributes","rewardedAt","weight","parseInt","number","collectedTokens","jurorFees"],"mappings":"AAAA,SAASA,cAAT,QAA+B,mBAA/B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,IAAT,QAAqB,cAArB;AAEA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,OAA9B,EAAuC;AAC5C,MAAI,CAACD,KAAL,EAAY,OAAO,IAAP;AAEZ,SAAOA,KAAK,CAACE,MAAN,CAAaC,IAAb,CAAkBC,UAAU,IACjCT,cAAc,CAACS,UAAU,CAACC,KAAX,CAAiBC,EAAlB,EAAsBL,OAAtB,CADT,CAAP;AAGD;AAED,OAAO,SAASM,aAAT,CAAuBH,UAAvB,EAAmC;AACxC,SAAO,CAAC,CAACA,UAAU,CAACI,UAApB;AACD;AAED,OAAO,SAASC,cAAT,CAAwBL,UAAxB,EAAoC;AACzC,QAAMM,cAAc,GAAG,CAACN,UAAU,CAACO,OAAnC;AACA,SACED,cAAc,IACdH,aAAa,CAACH,UAAD,CADb,IAEA,CAACR,YAAY,CAACQ,UAAU,CAACO,OAAZ,CAHf;AAKD;AAED,OAAO,SAASC,eAAT,CAAyBR,UAAzB,EAAqC;AAC1C,QAAM;AAAES,IAAAA;AAAF,MAAcT,UAAU,CAACJ,KAA/B;AACA,SAAOa,OAAO,CAACC,WAAR,KAAwB,CAAxB,IAA6BV,UAAU,CAACO,OAAX,KAAuBE,OAAO,CAACC,WAAnE;AACD;AAED,OAAO,SAASC,4BAAT,CAAsCX,UAAtC,EAAkD;AACvD,QAAM;AAAEY,IAAAA,UAAF;AAAchB,IAAAA,KAAd;AAAqBiB,IAAAA;AAArB,MAAgCb,UAAtC;AAEA,SAAO,EACL,GAAGA,UADE;AAELY,IAAAA,UAAU,EAAElB,IAAI,CAACoB,QAAQ,CAACF,UAAU,IAAI,CAAf,EAAkB,EAAlB,CAAT,CAFX;AAGLC,IAAAA,MAAM,EAAEpB,MAAM,CAACoB,MAAD,CAHT;AAILjB,IAAAA,KAAK,EAAE,EACL,GAAGA,KADE;AAELmB,MAAAA,MAAM,EAAED,QAAQ,CAAClB,KAAK,CAACmB,MAAP,EAAe,EAAf,CAFX;AAGLC,MAAAA,eAAe,EAAEvB,MAAM,CAACG,KAAK,CAACoB,eAAP,CAHlB;AAILC,MAAAA,SAAS,EAAExB,MAAM,CAACG,KAAK,CAACqB,SAAP;AAJZ;AAJF,GAAP;AAWD","sourcesContent":["import { addressesEqual } from '../lib/web3-utils'\r\nimport { isvoteLeaked } from './crvoting-utils'\r\nimport { bigNum } from '../lib/math-utils'\r\nimport { toMs } from './date-utils'\r\n\r\nexport function getJurorDraft(round, jurorId) {\r\n  if (!round) return null\r\n\r\n  return round.jurors.find(jurorDraft =>\r\n    addressesEqual(jurorDraft.juror.id, jurorId)\r\n  )\r\n}\r\n\r\nexport function hasJurorVoted(jurorDraft) {\r\n  return !!jurorDraft.commitment\r\n}\r\n\r\nexport function canJurorReveal(jurorDraft) {\r\n  const hasNotRevealed = !jurorDraft.outcome\r\n  return (\r\n    hasNotRevealed &&\r\n    hasJurorVoted(jurorDraft) &&\r\n    !isvoteLeaked(jurorDraft.outcome)\r\n  )\r\n}\r\n\r\nexport function isJurorCoherent(jurorDraft) {\r\n  const { dispute } = jurorDraft.round\r\n  return dispute.finalRuling !== 0 && jurorDraft.outcome === dispute.finalRuling\r\n}\r\n\r\nexport function transformJurorDataAttributes(jurorDraft) {\r\n  const { rewardedAt, round, weight } = jurorDraft\r\n\r\n  return {\r\n    ...jurorDraft,\r\n    rewardedAt: toMs(parseInt(rewardedAt || 0, 10)),\r\n    weight: bigNum(weight),\r\n    round: {\r\n      ...round,\r\n      number: parseInt(round.number, 10),\r\n      collectedTokens: bigNum(round.collectedTokens),\r\n      jurorFees: bigNum(round.jurorFees),\r\n    },\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}