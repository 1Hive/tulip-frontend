{"ast":null,"code":"'use strict';\n\nconst parallelBatch = require('it-parallel-batch');\n\nconst mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nconst defaultOptions = {\n  chunker: 'fixed',\n  strategy: 'balanced',\n  // 'flat', 'trickle'\n  rawLeaves: false,\n  onlyHash: false,\n  reduceSingleLeafToSelf: true,\n  codec: 'dag-pb',\n  hashAlg: 'sha2-256',\n  leafType: 'file',\n  // 'raw'\n  cidVersion: 0,\n  progress: () => () => {},\n  shardSplitThreshold: 1000,\n  fileImportConcurrency: 50,\n  blockWriteConcurrency: 10,\n  minChunkSize: 262144,\n  maxChunkSize: 262144,\n  avgChunkSize: 262144,\n  window: 16,\n  polynomial: 17437180132763653,\n  // https://github.com/ipfs/go-ipfs-chunker/blob/d0125832512163708c0804a3cda060e21acddae4/rabin.go#L11\n  maxChildrenPerNode: 174,\n  layerRepeat: 4,\n  wrapWithDirectory: false,\n  pin: false,\n  recursive: false,\n  hidden: false,\n  preload: false,\n  chunkValidator: null,\n  importBuffer: null\n};\n\nmodule.exports = async function* (source, block, options = {}) {\n  const opts = mergeOptions(defaultOptions, options);\n\n  if (options.cidVersion > 0 && options.rawLeaves === undefined) {\n    // if the cid version is 1 or above, use raw leaves as this is\n    // what go does.\n    opts.rawLeaves = true;\n  }\n\n  if (options.hashAlg !== undefined && options.rawLeaves === undefined) {\n    // if a non-default hash alg has been specified, use raw leaves as this is\n    // what go does.\n    opts.rawLeaves = true;\n  } // go-ifps trickle dag defaults to unixfs raw leaves, balanced dag defaults to file leaves\n\n\n  if (options.strategy === 'trickle') {\n    opts.leafType = 'raw';\n    opts.reduceSingleLeafToSelf = false;\n  }\n\n  if (options.format) {\n    opts.codec = options.format;\n  }\n\n  let dagBuilder;\n\n  if (typeof options.dagBuilder === 'function') {\n    dagBuilder = options.dagBuilder;\n  } else {\n    dagBuilder = require('./dag-builder');\n  }\n\n  let treeBuilder;\n\n  if (typeof options.treeBuilder === 'function') {\n    treeBuilder = options.treeBuilder;\n  } else {\n    treeBuilder = require('./tree-builder');\n  }\n\n  for await (const entry of treeBuilder(parallelBatch(dagBuilder(source, block, opts), opts.fileImportConcurrency), block, opts)) {\n    yield {\n      cid: entry.cid,\n      path: entry.path,\n      unixfs: entry.unixfs,\n      size: entry.size\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"script"}