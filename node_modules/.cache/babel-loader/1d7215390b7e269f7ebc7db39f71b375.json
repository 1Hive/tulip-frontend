{"ast":null,"code":"'use strict';\n\nconst pkgversion = require('../../../package.json').version;\n\nconst multiaddr = require('multiaddr');\n\nconst {\n  withTimeoutOption\n} = require('../utils');\n\nmodule.exports = ({\n  peerInfo,\n  libp2p\n}) => {\n  return withTimeoutOption(async function id() {\n    // eslint-disable-line require-await\n    const id = peerInfo.id.toB58String();\n    let addresses = [];\n\n    if (libp2p) {\n      // only available while the node is running\n      addresses = libp2p.transportManager.getAddrs();\n    }\n\n    return {\n      id,\n      publicKey: peerInfo.id.pubKey.bytes.toString('base64'),\n      addresses: addresses.map(ma => {\n        const str = ma.toString(); // some relay-style transports add our peer id to the ma for us\n        // so don't double-add\n\n        if (str.endsWith(`/p2p/${id}`)) {\n          return str;\n        }\n\n        return `${str}/p2p/${id}`;\n      }).sort().map(ma => multiaddr(ma)),\n      agentVersion: `js-ipfs/${pkgversion}`,\n      protocolVersion: '9000'\n    };\n  });\n};","map":null,"metadata":{},"sourceType":"script"}