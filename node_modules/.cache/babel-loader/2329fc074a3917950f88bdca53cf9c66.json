{"ast":null,"code":"'use strict'; // dns-nodejs gets replaced by dns-browser when webpacked/browserified\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar dns = require('../runtime/dns-nodejs');\n\nvar _require = require('../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nfunction fqdnFixups(domain) {\n  // Allow resolution of .eth names via .eth.link\n  // More context at the go-ipfs counterpart: https://github.com/ipfs/go-ipfs/pull/6448\n  if (domain.endsWith('.eth')) {\n    domain = domain.replace(/.eth$/, '.eth.link');\n  }\n\n  return domain;\n}\n\nmodule.exports = function () {\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(domain, opts) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // eslint-disable-line require-await\n              opts = opts || {};\n\n              if (!(typeof domain !== 'string')) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new Error('Invalid arguments, domain must be a string');\n\n            case 3:\n              domain = fqdnFixups(domain);\n              return _context.abrupt(\"return\", dns(domain, opts));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};","map":null,"metadata":{},"sourceType":"script"}