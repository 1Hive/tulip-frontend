{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar DID_PLACEHOLDER = 'GENESIS';\n/**\n * A class for creating ipfs based DID Documents.\n * Based on the DID spec: https://w3c-ccg.github.io/did-spec/\n */\n\nvar DidDocument = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * Create a new DID Document.\n   *\n   * @param     {Object}        ipfs            An js-ipfs instance\n   * @param     {String}        method          The name of the DID Method\n   * @return    {DidDocument}                   self\n   */\n  function DidDocument(ipfs, method) {\n    _classCallCheck(this, DidDocument);\n\n    this._ipfs = ipfs;\n    this._content = {\n      id: \"did:\".concat(method, \":\").concat(DID_PLACEHOLDER)\n    };\n  }\n\n  _createClass(DidDocument, [{\n    key: \"DID\",\n    get: function get() {\n      if (this._content.id.includes(DID_PLACEHOLDER)) {\n        throw new Error('DID is not available before commit');\n      }\n\n      return this._content.id;\n    }\n    /**\n     * Load an already existing DID Document.\n     *\n     * @param     {Object}        ipfs            An js-ipfs instance\n     * @param     {String}        documentCid     The CID of the document\n     * @return    {Promise<DidDocument>}                   self\n     */\n\n  }, {\n    key: \"addPublicKey\",\n    value:\n    /**\n     * Add a new public key\n     *\n     * @param     {String}        id              The id of the key, e.g. \"key1\"\n     * @param     {String}        type            The type of the key\n     * @param     {String}        encoding        The encoding of the key\n     * @param     {String}        key             The encoded public key\n     * @param     {String}        owner           The owner of the key (optional)\n     */\n    function addPublicKey(id, type, encoding, key, owner) {\n      if (!this._content.publicKey) {\n        this._content.publicKey = [];\n      }\n\n      var entry = {\n        id: \"\".concat(this._content.id, \"#\").concat(id),\n        type: type\n      };\n      entry[encoding] = key;\n\n      if (owner) {\n        entry.owner = owner;\n      }\n\n      this._content.publicKey.push(entry);\n    }\n    /**\n     * Remove a public key\n     *\n     * @param     {String}        id              The id of the key, e.g. \"key1\"\n     */\n\n  }, {\n    key: \"removePublicKey\",\n    value: function removePublicKey(id) {\n      var idx = this._content.publicKey.findIndex(function (e) {\n        return e.id.endsWith(id);\n      });\n\n      this._content.publicKey.splice(idx, 1);\n\n      if (!this._content.publicKey.length) {\n        delete this._content.publicKey;\n      }\n    }\n    /**\n     * Add a new authentication\n     *\n     * @param     {String}        type            The type of the authentication\n     * @param     {String}        id              The id of the key to be used, e.g. \"key1\"\n     */\n\n  }, {\n    key: \"addAuthentication\",\n    value: function addAuthentication(type, id) {\n      if (!this._content.authentication) {\n        this._content.authentication = [];\n      }\n\n      this._content.authentication.push({\n        type: type,\n        publicKey: \"\".concat(this._content.id, \"#\").concat(id)\n      });\n    }\n    /**\n     * Remove an authentication\n     *\n     * @param     {String}        id              The id of the key, e.g. \"key1\"\n     */\n\n  }, {\n    key: \"removeAuthentication\",\n    value: function removeAuthentication(id) {\n      var idx = this._content.authentication.findIndex(function (e) {\n        return e.publicKey.endsWith(id);\n      });\n\n      this._content.authentication.splice(idx, 1);\n\n      if (!this._content.authentication.length) {\n        delete this._content.authentication;\n      }\n    }\n    /**\n     * Add a new service\n     *\n     * @param     {String}        id                  The id of the key to be used, e.g. \"key1\"\n     * @param     {String}        type                The type of the service\n     * @param     {String}        serviceEndpoint     The endpoint of the service\n     * @param     {Object}        additionalFields    Any additional fields (optional)\n     */\n\n  }, {\n    key: \"addService\",\n    value: function addService(id, type, serviceEndpoint, additionalFields) {\n      if (!this._content.service) {\n        this._content.service = [];\n      }\n\n      this._content.service.push(Object.assign({\n        id: \"\".concat(this._content.id, \";\").concat(id),\n        type: type,\n        serviceEndpoint: serviceEndpoint\n      }, additionalFields));\n    }\n    /**\n     * Remove a service\n     *\n     * @param     {String}        id              The id of the key, e.g. \"key1\"\n     */\n\n  }, {\n    key: \"removeService\",\n    value: function removeService(id) {\n      var idx = this._content.service.findIndex(function (e) {\n        return e.id.endsWith(id);\n      });\n\n      this._content.service.splice(idx, 1);\n\n      if (!this._content.service.length) {\n        delete this._content.service;\n      }\n    }\n    /**\n     * Set the revocationMethod. This can be of any js object\n     * and is determined by the implementer of a revocation module.\n     *\n     * @param     {Object}        methodDescriptor    the object that defines the revocation method\n     */\n\n  }, {\n    key: \"setRevocationMethod\",\n    value: function setRevocationMethod(methodDescriptor) {\n      this._content.revocationMethod = methodDescriptor;\n    }\n    /**\n     * Add a new property\n     *\n     * @param     {String}        propName            The name of the property\n     * @param     {Object}        propValue           The value of the property\n     */\n\n  }, {\n    key: \"addCustomProperty\",\n    value: function addCustomProperty(propName, propValue) {\n      this._content[propName] = propValue;\n    }\n    /**\n     * Remove a property\n     *\n     * @param     {String}        propName            The name of the property\n     */\n\n  }, {\n    key: \"removeCustomProperty\",\n    value: function removeCustomProperty(propName) {\n      delete this._content[propName];\n    }\n    /**\n     * Commit all changes and create a new ipfs dag object.\n     *\n     * @param     {Object}        opts                Optional parameters\n     * @param     {Boolean}       noTimestamp         Don't use timestamps if true\n     *\n     * @return    {Promise<CID>}                   The CID of the object\n     */\n\n  }, {\n    key: \"commit\",\n    value: function () {\n      var _commit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var opts,\n            cid,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                opts = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n\n                if (!this._content.created) {\n                  this._content['@context'] = 'https://w3id.org/did/v1';\n\n                  if (!opts.noTimestamp) {\n                    this._content.created = new Date(Date.now()).toISOString();\n                  }\n                } else if (!opts.noTimestamp) {\n                  this._content.updated = new Date(Date.now()).toISOString();\n                }\n\n                _context.next = 4;\n                return this._ipfs.dag.put(this._content, {\n                  format: 'dag-cbor',\n                  hashAlg: 'sha2-256'\n                });\n\n              case 4:\n                cid = _context.sent;\n                _context.next = 7;\n                return DidDocument.cidToDocument(this._ipfs, cid);\n\n              case 7:\n                this._content = _context.sent;\n                this._content.previousDocument = {\n                  '/': cid.toString()\n                };\n                return _context.abrupt(\"return\", cid);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function commit() {\n        return _commit.apply(this, arguments);\n      }\n\n      return commit;\n    }()\n    /**\n     * Returns the DID document of a document CID\n     *\n     * @param     {Object}        ipfs            An js-ipfs instance\n     * @param     {String}        documentCid     The CID of the document\n     * @return    {Promise<Object>}                        The DID document as a js object\n     */\n\n  }], [{\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ipfs, documentCid) {\n        var doc;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                doc = new DidDocument(ipfs);\n                _context2.next = 3;\n                return DidDocument.cidToDocument(ipfs, documentCid);\n\n              case 3:\n                doc._content = _context2.sent;\n                doc._content.previousDocument = {\n                  '/': documentCid.toString()\n                };\n                return _context2.abrupt(\"return\", doc);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function load(_x, _x2) {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }, {\n    key: \"cidToDocument\",\n    value: function () {\n      var _cidToDocument = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(ipfs, documentCid) {\n        var doc, re;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return ipfs.dag.get(documentCid);\n\n              case 2:\n                doc = _context3.sent.value;\n\n                // If genesis document replace placeholder identifier with cid\n                if (doc.id.includes(DID_PLACEHOLDER)) {\n                  re = new RegExp(DID_PLACEHOLDER, 'gi');\n                  doc.id = doc.id.replace(re, documentCid);\n\n                  if (doc.publicKey) {\n                    doc.publicKey = JSON.parse(JSON.stringify(doc.publicKey).replace(re, documentCid));\n                  }\n\n                  if (doc.authentication) {\n                    doc.authentication = JSON.parse(JSON.stringify(doc.authentication).replace(re, documentCid));\n                  }\n\n                  if (doc.service) {\n                    doc.service = JSON.parse(JSON.stringify(doc.service).replace(re, documentCid));\n                  }\n                }\n\n                if (doc.previousDocument) {\n                  // make CID human readable\n                  doc.previousDocument = {\n                    '/': doc.previousDocument.toString()\n                  };\n                }\n\n                return _context3.abrupt(\"return\", doc);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function cidToDocument(_x3, _x4) {\n        return _cidToDocument.apply(this, arguments);\n      }\n\n      return cidToDocument;\n    }()\n  }]);\n\n  return DidDocument;\n}();\n\nmodule.exports = DidDocument;","map":null,"metadata":{},"sourceType":"script"}