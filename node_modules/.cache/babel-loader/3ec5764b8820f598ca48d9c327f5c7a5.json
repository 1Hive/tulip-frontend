{"ast":null,"code":"/* eslint-env browser */\n'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('p-queue'),\n    PQueue = _require.default;\n\nvar HTTP = require('ipfs-utils/src/http');\n\nvar debug = require('debug');\n\nvar log = debug('ipfs:preload');\nlog.error = debug('ipfs:preload:error'); // browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\n\nvar httpQueue = new PQueue({\n  concurrency: 4\n});\n\nmodule.exports = function preload(url, options) {\n  log(url);\n  options = options || {};\n  return httpQueue.add( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var res, reader, _yield$reader$read, done;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return HTTP.get(url, {\n              signal: options.signal\n            });\n\n          case 2:\n            res = _context.sent;\n            reader = res.body.getReader();\n            _context.prev = 4;\n\n          case 5:\n            if (!true) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 8;\n            return reader.read();\n\n          case 8:\n            _yield$reader$read = _context.sent;\n            done = _yield$reader$read.done;\n\n            if (!done) {\n              _context.next = 12;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 12:\n            _context.next = 5;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            reader.releaseLock();\n            return _context.finish(14);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4,, 14, 17]]);\n  })));\n};","map":null,"metadata":{},"sourceType":"script"}