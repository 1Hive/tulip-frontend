{"ast":null,"code":"import { useEffect, useMemo, useState } from 'react';\nimport { wallet } from 'tulip-data';\nimport { useWallet } from 'use-wallet';\nconst WALLET_DATA_DEFAULT = {\n  netBalance: 0,\n  poolBalance: 0,\n  walletBalance: 0,\n  assetsList: [],\n  isFetching: false\n};\nconst ASSET_DEFAULT = {\n  symbol: '',\n  name: '',\n  balance: '',\n  price: '',\n  value: '',\n  image1: '',\n  image2: ''\n};\nexport function useWalletData() {\n  const [walletInfo, setWalletInfo] = useState([]);\n  const [poolingInfo, setPoolingInfo] = useState([]);\n  const [isFetchingWallet, setIsFetchingWallet] = useState(false);\n  const [isFetchingPool, setIsFetchingPool] = useState(false);\n  const {\n    account\n  } = useWallet();\n  useEffect(() => {\n    let cancelled = false;\n\n    if (!account) {\n      return setWalletInfo([]);\n    }\n\n    const fetchWalletData = async () => {\n      try {\n        setIsFetchingWallet(true);\n        const balances = await wallet.tokenBalances({\n          user_address: account\n        }); // console.log(balances)\n\n        if (!cancelled) {\n          setWalletInfo(balances);\n          return setIsFetchingWallet(false);\n        }\n      } catch (err) {\n        console.error(`Could not fetch wallet data `, err);\n      }\n    };\n\n    const fetchPoolingData = async () => {\n      try {\n        setIsFetchingPool(true);\n        const poolingData = await wallet.poolBalances({\n          user_address: account\n        }); // console.log(balances)\n\n        if (!cancelled) {\n          setPoolingInfo(poolingData);\n          return setIsFetchingPool(false);\n        }\n      } catch (err) {\n        console.error(`Could not fetch wallet data `, err);\n      }\n    };\n\n    fetchWalletData();\n    fetchPoolingData();\n    return () => {\n      cancelled = true;\n    };\n  }, [account]);\n  console.log('ifpool ', isFetchingPool);\n  console.log('ifwallet ', isFetchingWallet);\n  return [walletInfo, poolingInfo, isFetchingWallet || isFetchingPool];\n}\nexport function useNetBalance() {\n  const [walletInfo, poolingInfo, isFetching] = useWalletData();\n  console.log('isFetching: ', isFetching);\n  return useMemo(() => {\n    console.log('isFetchingMEMO: ', isFetching);\n\n    if (!walletInfo || walletInfo.length === 0 || !poolingInfo) {\n      return {\n        isFetching: false\n      };\n    }\n\n    let netBalance = 0;\n    let walletBalance = 0;\n    let poolBalance = 0;\n    const assetsList = [];\n    walletInfo.map(value => {\n      if (value && parseFloat(value.valueUSD)) {\n        walletBalance = walletBalance + parseFloat(value.valueUSD);\n        assetsList.push({\n          symbol: value.symbol,\n          name: value.name,\n          balance: value.balance.toFixed(4),\n          price: value.priceUSD,\n          value: value.valueUSD,\n          image1: value.logoURI\n        });\n      }\n    });\n    poolingInfo.map(value => {\n      if (value && parseFloat(value.valueUSD)) {\n        poolBalance = poolBalance + parseFloat(value.valueUSD);\n        const asset = ASSET_DEFAULT;\n\n        if (value.tokens && value.tokens.length > 1) {\n          value.tokens.map((token, i) => {\n            asset.symbol = i === 0 ? token.name + ' - ' : token.name;\n\n            if (i === 0) {\n              asset.image1 = token.logoURI;\n            } else {\n              asset.image2 = token.logoURI;\n            }\n          });\n        }\n\n        asset.balance = value.balance;\n        asset.value = value.valueUSD;\n        assetsList.push(asset);\n      }\n    });\n    walletBalance = walletBalance.toFixed(2);\n    poolBalance = poolBalance.toFixed(2);\n    netBalance = walletBalance + poolBalance + netBalance.toFixed(2);\n    console.log('Is Fetching before set', isFetching);\n    return {\n      walletBalance,\n      poolBalance,\n      netBalance,\n      assetsList,\n      isFetching\n    };\n  }, [isFetching]);\n}","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/hooks/useWalletData.js"],"names":["useEffect","useMemo","useState","wallet","useWallet","WALLET_DATA_DEFAULT","netBalance","poolBalance","walletBalance","assetsList","isFetching","ASSET_DEFAULT","symbol","name","balance","price","value","image1","image2","useWalletData","walletInfo","setWalletInfo","poolingInfo","setPoolingInfo","isFetchingWallet","setIsFetchingWallet","isFetchingPool","setIsFetchingPool","account","cancelled","fetchWalletData","balances","tokenBalances","user_address","err","console","error","fetchPoolingData","poolingData","poolBalances","log","useNetBalance","length","map","parseFloat","valueUSD","push","toFixed","priceUSD","logoURI","asset","tokens","token","i"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useState } from 'react'\r\nimport { wallet } from 'tulip-data'\r\nimport { useWallet } from 'use-wallet'\r\n\r\nconst WALLET_DATA_DEFAULT = {\r\n  netBalance: 0,\r\n  poolBalance: 0,\r\n  walletBalance: 0,\r\n  assetsList: [],\r\n  isFetching: false,\r\n}\r\n\r\nconst ASSET_DEFAULT = {\r\n  symbol: '',\r\n  name: '',\r\n  balance: '',\r\n  price: '',\r\n  value: '',\r\n  image1: '',\r\n  image2: '',\r\n}\r\n\r\nexport function useWalletData() {\r\n  const [walletInfo, setWalletInfo] = useState([])\r\n  const [poolingInfo, setPoolingInfo] = useState([])\r\n  const [isFetchingWallet, setIsFetchingWallet] = useState(false)\r\n  const [isFetchingPool, setIsFetchingPool] = useState(false)\r\n  const { account } = useWallet()\r\n\r\n  useEffect(() => {\r\n    let cancelled = false\r\n    if (!account) {\r\n      return setWalletInfo([])\r\n    }\r\n\r\n    const fetchWalletData = async () => {\r\n      try {\r\n        setIsFetchingWallet(true)\r\n        const balances = await wallet.tokenBalances({\r\n          user_address: account,\r\n        })\r\n\r\n        // console.log(balances)\r\n        if (!cancelled) {\r\n          setWalletInfo(balances)\r\n          return setIsFetchingWallet(false)\r\n        }\r\n      } catch (err) {\r\n        console.error(`Could not fetch wallet data `, err)\r\n      }\r\n    }\r\n\r\n    const fetchPoolingData = async () => {\r\n      try {\r\n        setIsFetchingPool(true)\r\n\r\n        const poolingData = await wallet.poolBalances({\r\n          user_address: account,\r\n        })\r\n\r\n        // console.log(balances)\r\n        if (!cancelled) {\r\n          setPoolingInfo(poolingData)\r\n          return setIsFetchingPool(false)\r\n        }\r\n      } catch (err) {\r\n        console.error(`Could not fetch wallet data `, err)\r\n      }\r\n    }\r\n\r\n    fetchWalletData()\r\n    fetchPoolingData()\r\n    return () => {\r\n      cancelled = true\r\n    }\r\n  }, [account])\r\n\r\n  console.log('ifpool ', isFetchingPool)\r\n  console.log('ifwallet ', isFetchingWallet)\r\n  return [walletInfo, poolingInfo, isFetchingWallet || isFetchingPool]\r\n}\r\n\r\nexport function useNetBalance() {\r\n  const [walletInfo, poolingInfo, isFetching] = useWalletData()\r\n\r\n  console.log('isFetching: ', isFetching)\r\n  return useMemo(() => {\r\n    console.log('isFetchingMEMO: ', isFetching)\r\n    if (!walletInfo || walletInfo.length === 0 || !poolingInfo) {\r\n      return { isFetching: false }\r\n    }\r\n\r\n    let netBalance = 0\r\n    let walletBalance = 0\r\n    let poolBalance = 0\r\n    const assetsList = []\r\n    walletInfo.map(value => {\r\n      if (value && parseFloat(value.valueUSD)) {\r\n        walletBalance = walletBalance + parseFloat(value.valueUSD)\r\n        assetsList.push({\r\n          symbol: value.symbol,\r\n          name: value.name,\r\n          balance: value.balance.toFixed(4),\r\n          price: value.priceUSD,\r\n          value: value.valueUSD,\r\n          image1: value.logoURI,\r\n        })\r\n      }\r\n    })\r\n\r\n    poolingInfo.map(value => {\r\n      if (value && parseFloat(value.valueUSD)) {\r\n        poolBalance = poolBalance + parseFloat(value.valueUSD)\r\n        const asset = ASSET_DEFAULT\r\n        if (value.tokens && value.tokens.length > 1) {\r\n          value.tokens.map((token, i) => {\r\n            asset.symbol = i === 0 ? token.name + ' - ' : token.name\r\n            if (i === 0) {\r\n              asset.image1 = token.logoURI\r\n            } else {\r\n              asset.image2 = token.logoURI\r\n            }\r\n          })\r\n        }\r\n        asset.balance = value.balance\r\n        asset.value = value.valueUSD\r\n        assetsList.push(asset)\r\n      }\r\n    })\r\n    walletBalance = walletBalance.toFixed(2)\r\n    poolBalance = poolBalance.toFixed(2)\r\n    netBalance = walletBalance + poolBalance + netBalance.toFixed(2)\r\n\r\n    console.log('Is Fetching before set', isFetching)\r\n\r\n    return { walletBalance, poolBalance, netBalance, assetsList, isFetching }\r\n  }, [isFetching])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}