{"ast":null,"code":"'use strict';\n\nconst {\n  DAGLink,\n  DAGNode\n} = require('ipld-dag-pb');\n\nconst UnixFS = require('ipfs-unixfs');\n\nconst Dir = require('./dir');\n\nconst persist = require('./utils/persist');\n\nclass DirFlat extends Dir {\n  constructor(props, options) {\n    super(props, options);\n    this._children = {};\n  }\n\n  put(name, value) {\n    this.cid = undefined;\n    this.size = undefined;\n    this._children[name] = value;\n  }\n\n  get(name) {\n    return this._children[name];\n  }\n\n  childCount() {\n    return Object.keys(this._children).length;\n  }\n\n  directChildrenCount() {\n    return this.childCount();\n  }\n\n  onlyChild() {\n    return this._children[Object.keys(this._children)[0]];\n  }\n\n  *eachChildSeries() {\n    const keys = Object.keys(this._children);\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      yield {\n        key: key,\n        child: this._children[key]\n      };\n    }\n  }\n\n  async *flush(path, block) {\n    const children = Object.keys(this._children);\n    const links = [];\n\n    for (let i = 0; i < children.length; i++) {\n      let child = this._children[children[i]];\n\n      if (typeof child.flush === 'function') {\n        for await (const entry of child.flush(child.path, block)) {\n          child = entry;\n          yield child;\n        }\n      }\n\n      links.push(new DAGLink(children[i], child.size, child.cid));\n    }\n\n    const unixfs = new UnixFS({\n      type: 'directory',\n      mtime: this.mtime,\n      mode: this.mode\n    });\n    const node = new DAGNode(unixfs.marshal(), links);\n    const buffer = node.serialize();\n    const cid = await persist(buffer, block, this.options);\n    const size = buffer.length + node.Links.reduce((acc, curr) => acc + curr.Tsize, 0);\n    this.cid = cid;\n    this.size = size;\n    yield {\n      cid,\n      unixfs,\n      path,\n      size\n    };\n  }\n\n}\n\nmodule.exports = DirFlat;","map":null,"metadata":{},"sourceType":"script"}