{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _wallet = require(\"@ethersproject/wallet\");\n\nvar fetch = typeof window !== 'undefined' ? window.fetch : require('node-fetch');\n\nvar Multihash = require('multihashes');\n\nvar sha256 = require('js-sha256').sha256;\n\nvar ENC_BLOCK_SIZE = 24;\nvar MAGIC_ERC1271_VALUE = '0x20c13b0b';\n\nvar pad = function pad(val) {\n  var blockSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ENC_BLOCK_SIZE;\n  var blockDiff = (blockSize - val.length % blockSize) % blockSize;\n  return \"\".concat(val).concat('\\0'.repeat(blockDiff));\n};\n\nvar unpad = function unpad(padded) {\n  return padded.replace(/\\0+$/, '');\n};\n\nvar HTTPError = function HTTPError(status, message) {\n  var e = new Error(message);\n  e.statusCode = status;\n  return e;\n};\n\nvar getMessageConsent = function getMessageConsent(did, timestamp) {\n  var msg = 'Create a new 3Box profile' + '\\n\\n' + '- \\n' + 'Your unique profile ID is ' + did;\n  if (timestamp) msg += ' \\n' + 'Timestamp: ' + timestamp;\n  return msg;\n};\n\nvar safeSend = function safeSend(provider, data) {\n  var send = (Boolean(provider.sendAsync) ? provider.sendAsync : provider.send).bind(provider);\n  return new Promise(function (resolve, reject) {\n    send(data, function (err, result) {\n      if (err) reject(err);else if (result.error) reject(result.error);else resolve(result.result);\n    });\n  });\n};\n\nvar encodeRpcCall = function encodeRpcCall(method, params, fromAddress) {\n  return {\n    jsonrpc: '2.0',\n    id: 1,\n    method: method,\n    params: params,\n    fromAddress: fromAddress\n  };\n};\n\nvar callRpc = /*#__PURE__*/function () {\n  var _ref = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(provider, method, params, fromAddress) {\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", safeSend(provider, encodeRpcCall(method, params, fromAddress)));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function callRpc(_x, _x2, _x3, _x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = {\n  getMessageConsent: getMessageConsent,\n  callRpc: callRpc,\n  openBoxConsent: function () {\n    var _openBoxConsent = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2(fromAddress, ethereum) {\n      var text, msg, params, method, res, recoveredAddr;\n      return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              text = 'This app wants to view and update your 3Box profile.';\n\n              if (!ethereum.isAuthereum) {\n                _context2.next = 3;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", ethereum.signMessageWithSigningKey(text));\n\n            case 3:\n              msg = '0x' + Buffer.from(text, 'utf8').toString('hex');\n              params = [msg, fromAddress];\n              method = 'personal_sign';\n              _context2.next = 8;\n              return callRpc(ethereum, method, params, fromAddress);\n\n            case 8:\n              res = _context2.sent;\n\n              if (!fromAddress) {\n                _context2.next = 13;\n                break;\n              }\n\n              recoveredAddr = (0, _wallet.verifyMessage)(text, res).toLowerCase();\n\n              if (!(fromAddress !== recoveredAddr)) {\n                _context2.next = 13;\n                break;\n              }\n\n              throw new Error('Provider returned signature from different account than requested');\n\n            case 13:\n              return _context2.abrupt(\"return\", res);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function openBoxConsent(_x5, _x6) {\n      return _openBoxConsent.apply(this, arguments);\n    }\n\n    return openBoxConsent;\n  }(),\n  openSpaceConsent: function () {\n    var _openSpaceConsent = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(fromAddress, ethereum, name) {\n      var text, msg, params, method, res, recoveredAddr;\n      return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              text = \"Allow this app to open your \".concat(name, \" space.\");\n\n              if (!ethereum.isAuthereum) {\n                _context3.next = 3;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", ethereum.signMessageWithSigningKey(text));\n\n            case 3:\n              msg = '0x' + Buffer.from(text, 'utf8').toString('hex');\n              params = [msg, fromAddress];\n              method = 'personal_sign';\n              _context3.next = 8;\n              return callRpc(ethereum, method, params, fromAddress);\n\n            case 8:\n              res = _context3.sent;\n\n              if (!fromAddress) {\n                _context3.next = 13;\n                break;\n              }\n\n              recoveredAddr = (0, _wallet.verifyMessage)(text, res).toLowerCase();\n\n              if (!(fromAddress !== recoveredAddr)) {\n                _context3.next = 13;\n                break;\n              }\n\n              throw new Error('Provider returned signature from different account than requested');\n\n            case 13:\n              return _context3.abrupt(\"return\", res);\n\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function openSpaceConsent(_x7, _x8, _x9) {\n      return _openSpaceConsent.apply(this, arguments);\n    }\n\n    return openSpaceConsent;\n  }(),\n  fetchJson: function () {\n    var _fetchJson = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(url, body) {\n      var opts, r;\n      return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (body) {\n                opts = {\n                  body: JSON.stringify(body),\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  }\n                };\n              }\n\n              _context4.next = 3;\n              return fetch(url, opts);\n\n            case 3:\n              r = _context4.sent;\n\n              if (!r.ok) {\n                _context4.next = 8;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", r.json());\n\n            case 8:\n              _context4.t0 = HTTPError;\n              _context4.t1 = r.status;\n              _context4.next = 12;\n              return r.json();\n\n            case 12:\n              _context4.t2 = _context4.sent.message;\n              throw (0, _context4.t0)(_context4.t1, _context4.t2);\n\n            case 14:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    function fetchJson(_x10, _x11) {\n      return _fetchJson.apply(this, arguments);\n    }\n\n    return fetchJson;\n  }(),\n  fetchText: function () {\n    var _fetchText = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee5(url, opts) {\n      var r;\n      return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return fetch(url, opts);\n\n            case 2:\n              r = _context5.sent;\n\n              if (!r.ok) {\n                _context5.next = 7;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", r.text());\n\n            case 7:\n              throw HTTPError(r.status, \"Invalid response (\".concat(r.status, \") for query at \").concat(url));\n\n            case 8:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    function fetchText(_x12, _x13) {\n      return _fetchText.apply(this, arguments);\n    }\n\n    return fetchText;\n  }(),\n  throwIfUndefined: function throwIfUndefined(arg, name) {\n    if (arg === undefined || arg === null) {\n      throw new Error(\"\".concat(name, \" is a required argument\"));\n    }\n  },\n  throwIfNotEqualLenArrays: function throwIfNotEqualLenArrays(arr1, arr2) {\n    if (!Array.isArray(arr1) || !Array.isArray(arr2)) {\n      throw new Error('One or more arguments are not an array');\n    }\n\n    if (arr1.length !== arr2.length) {\n      throw new Error('Arrays must be of the same length');\n    }\n  },\n  getPeerIdFromMultiaddr: function getPeerIdFromMultiaddr(multiaddr) {\n    return multiaddr.substring(multiaddr.lastIndexOf('/') + 1);\n  },\n  sha256Multihash: function sha256Multihash(str) {\n    var digest = Buffer.from(sha256.digest(str));\n    return Multihash.encode(digest, 'sha2-256').toString('hex');\n  },\n  randInt: function randInt(max) {\n    return Math.floor(Math.random() * max);\n  },\n  sha256: sha256,\n  pad: pad,\n  unpad: unpad\n};","map":null,"metadata":{},"sourceType":"script"}