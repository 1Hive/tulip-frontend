{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar crypto = require('./crypto');\n\nvar debug = require('debug');\n\nvar log = debug('libp2p:secio');\nlog.error = debug('libp2p:secio:error'); // step 2. Exchange\n// -- exchange (signed) ephemeral keys. verify signatures.\n\nmodule.exports = /*#__PURE__*/function () {\n  var _exchange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(state, wrapped) {\n    var ex, msg;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            log('2. exchange - start');\n            log('2. exchange - writing exchange');\n            _context.next = 4;\n            return crypto.createExchange(state);\n\n          case 4:\n            ex = _context.sent;\n            _context.next = 7;\n            return wrapped.writeLP(ex);\n\n          case 7:\n            _context.next = 9;\n            return wrapped.readLP();\n\n          case 9:\n            msg = _context.sent;\n            log('2. exchange - reading exchange');\n            _context.next = 13;\n            return crypto.verify(state, msg.slice());\n\n          case 13:\n            _context.next = 15;\n            return crypto.generateKeys(state);\n\n          case 15:\n            log('2. exchange - finish');\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  function exchange(_x, _x2) {\n    return _exchange.apply(this, arguments);\n  }\n\n  return exchange;\n}();","map":null,"metadata":{},"sourceType":"script"}