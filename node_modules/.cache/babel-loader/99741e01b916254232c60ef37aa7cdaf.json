{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar Big = require('bignumber.js');\n\nvar CID = require('cids');\n\nvar _require = require('../../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nmodule.exports = function (_ref) {\n  var bitswap = _ref.bitswap;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _stat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var snapshot;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // eslint-disable-line require-await\n              snapshot = bitswap.stat().snapshot;\n              return _context.abrupt(\"return\", {\n                provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n                blocksReceived: new Big(snapshot.blocksReceived),\n                wantlist: Array.from(bitswap.getWantlist()).map(function (e) {\n                  return e[1].cid;\n                }),\n                peers: bitswap.peers().map(function (id) {\n                  return new CID(id.toB58String());\n                }),\n                dupBlksReceived: new Big(snapshot.dupBlksReceived),\n                dupDataReceived: new Big(snapshot.dupDataReceived),\n                dataReceived: new Big(snapshot.dataReceived),\n                blocksSent: new Big(snapshot.blocksSent),\n                dataSent: new Big(snapshot.dataSent)\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function stat() {\n      return _stat.apply(this, arguments);\n    }\n\n    return stat;\n  }());\n};","map":null,"metadata":{},"sourceType":"script"}