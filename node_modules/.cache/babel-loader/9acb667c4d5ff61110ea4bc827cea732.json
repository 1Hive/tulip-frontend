{"ast":null,"code":"import React from 'react';\nimport './_commonjsHelpers-97e6d7b1.js';\nimport { P as PropTypes } from './index-097535f1.js';\nimport { _ as _defineProperty } from './defineProperty-a0480c32.js';\nimport { _ as _inherits, a as _createClass, b as _classCallCheck, e as _assertThisInitialized, c as _getPrototypeOf, d as _possibleConstructorReturn } from './getPrototypeOf-97db713a.js';\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n} // supporting it yet.\n//\n// It follows the Chrome implementation, checking for a pointer device rather\n// than a keyboard event.\n//\n// Resources:\n//  - https://caniuse.com/#search=%3Afocus-visible\n//  - https://github.com/WICG/focus-visible/issues/88#issuecomment-363227219\n//  - https://chromium-review.googlesource.com/c/chromium/src/+/897002<Paste>\n//\n\n\nvar FocusVisible = /*#__PURE__*/function (_React$Component) {\n  _inherits(FocusVisible, _React$Component);\n\n  var _super = _createSuper(FocusVisible);\n\n  function FocusVisible() {\n    var _this;\n\n    _classCallCheck(this, FocusVisible);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"_element\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"_document\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      focusVisible: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePointerEvent\", function (e) {\n      _this._pointerActive = true;\n      _this._timer = setTimeout(function () {\n        _this._pointerActive = false;\n      }, 0);\n\n      if (_this.state.focusVisible) {\n        _this.setState({\n          focusVisible: false\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFocus\", function () {\n      _this.setState({\n        focusVisible: !_this._pointerActive\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(FocusVisible, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // `document` was previously set as a state entry, which was having the\n      // advantages of keeping track of it, and also triggering a rerender to\n      // remove the injected span.\n      //\n      // The issue with this approach is that the component can get unmounted\n      // before the state gets updated (e.g. in case of an error in the tree),\n      // preventing to remove the event listeners.\n      //\n      // this._document is now set on the instance directly, and\n      // this.forceUpdate() is used to trigger the second render needed to remove\n      // the injected span.\n      this._document = this._element.current.ownerDocument;\n\n      this._document.addEventListener('mousedown', this.handlePointerEvent);\n\n      this._document.addEventListener('mouseup', this.handlePointerEvent);\n\n      this._document.addEventListener('touchstart', this.handlePointerEvent);\n\n      this._document.addEventListener('touchend', this.handlePointerEvent);\n\n      this.forceUpdate();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this._document) {\n        this._document.removeEventListener('mousedown', this.handlePointerEvent);\n\n        this._document.removeEventListener('mouseup', this.handlePointerEvent);\n\n        this._document.removeEventListener('touchstart', this.handlePointerEvent);\n\n        this._document.removeEventListener('touchend', this.handlePointerEvent);\n      }\n    } // It doesnâ€™t seem to be specified, but pointer-related events happen before\n    // the focus-related events on every modern browser.\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var focusVisible = this.state.focusVisible;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, this.props.children({\n        focusVisible: focusVisible,\n        onFocus: this.handleFocus\n      }), !this._document && /*#__PURE__*/React.createElement(\"span\", {\n        ref: this._element\n      }));\n    }\n  }]);\n\n  return FocusVisible;\n}(React.Component);\n\n_defineProperty(FocusVisible, \"propTypes\", {\n  // children is called with an object containing two entries:\n  //   - focusVisible represents the visibility of the focus (boolean).\n  //   - onFocus() need to be called when the target element is focused.\n  children: PropTypes.func.isRequired\n});\n\nexport default FocusVisible;","map":null,"metadata":{},"sourceType":"module"}