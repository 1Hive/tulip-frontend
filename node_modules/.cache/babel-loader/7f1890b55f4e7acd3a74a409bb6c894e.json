{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar isTypedArray = require('is-typedarray').strict;\n\nvar secp256k1 = require('secp256k1');\n\nvar sha = require('multihashing-async/src/sha');\n\nvar HASH_ALGORITHM = 'sha2-256';\n\nfunction typedArrayTobuffer(arr) {\n  if (isTypedArray(arr)) {\n    // To avoid a copy, use the typed array's underlying ArrayBuffer to back new Buffer\n    var buf = Buffer.from(arr.buffer);\n\n    if (arr.byteLength !== arr.buffer.byteLength) {\n      // Respect the \"view\", i.e. byteOffset and byteLength, without doing a copy\n      buf = buf.slice(arr.byteOffset, arr.byteOffset + arr.byteLength);\n    }\n\n    return buf;\n  } else {\n    // Pass through all other types to `Buffer.from`\n    return Buffer.from(arr);\n  }\n}\n\nmodule.exports = function (randomBytes) {\n  var privateKeyLength = 32;\n\n  function generateKey() {\n    var privateKey;\n\n    do {\n      privateKey = randomBytes(32);\n    } while (!secp256k1.privateKeyVerify(privateKey));\n\n    return privateKey;\n  }\n\n  function hashAndSign(_x, _x2) {\n    return _hashAndSign.apply(this, arguments);\n  }\n\n  function _hashAndSign() {\n    _hashAndSign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key, msg) {\n      var digest, sig;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return sha.digest(msg, HASH_ALGORITHM);\n\n            case 2:\n              digest = _context.sent;\n              sig = secp256k1.ecdsaSign(digest, key);\n              return _context.abrupt(\"return\", typedArrayTobuffer(secp256k1.signatureExport(sig.signature)));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _hashAndSign.apply(this, arguments);\n  }\n\n  function hashAndVerify(_x3, _x4, _x5) {\n    return _hashAndVerify.apply(this, arguments);\n  }\n\n  function _hashAndVerify() {\n    _hashAndVerify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(key, sig, msg) {\n      var digest;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return sha.digest(msg, HASH_ALGORITHM);\n\n            case 2:\n              digest = _context2.sent;\n              sig = typedArrayTobuffer(secp256k1.signatureImport(sig));\n              return _context2.abrupt(\"return\", secp256k1.ecdsaVerify(sig, digest, key));\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _hashAndVerify.apply(this, arguments);\n  }\n\n  function compressPublicKey(key) {\n    if (!secp256k1.publicKeyVerify(key)) {\n      throw new Error('Invalid public key');\n    }\n\n    return typedArrayTobuffer(secp256k1.publicKeyConvert(key, true));\n  }\n\n  function decompressPublicKey(key) {\n    return typedArrayTobuffer(secp256k1.publicKeyConvert(key, false));\n  }\n\n  function validatePrivateKey(key) {\n    if (!secp256k1.privateKeyVerify(key)) {\n      throw new Error('Invalid private key');\n    }\n  }\n\n  function validatePublicKey(key) {\n    if (!secp256k1.publicKeyVerify(key)) {\n      throw new Error('Invalid public key');\n    }\n  }\n\n  function computePublicKey(privateKey) {\n    validatePrivateKey(privateKey);\n    return typedArrayTobuffer(secp256k1.publicKeyCreate(privateKey));\n  }\n\n  return {\n    generateKey: generateKey,\n    privateKeyLength: privateKeyLength,\n    hashAndSign: hashAndSign,\n    hashAndVerify: hashAndVerify,\n    compressPublicKey: compressPublicKey,\n    decompressPublicKey: decompressPublicKey,\n    validatePrivateKey: validatePrivateKey,\n    validatePublicKey: validatePublicKey,\n    computePublicKey: computePublicKey\n  };\n};","map":null,"metadata":{},"sourceType":"script"}