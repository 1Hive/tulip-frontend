{"ast":null,"code":"'use strict';\n\nconst fs = typeof window === 'object' || typeof self === 'object' ? null : eval('require(\"fs\")'); // eslint-disable-line\n\nconst level = require('level');\n\nconst crypto = require('libp2p-crypto');\n\nconst secp256k1 = require('secp256k1');\n\nconst LRU = require('lru');\n\nconst Buffer = require('safe-buffer/').Buffer;\n\nconst {\n  verifier\n} = require('./verifiers');\n\nfunction createStore(path = './keystore') {\n  if (fs && fs.mkdirSync) {\n    fs.mkdirSync(path, {\n      recursive: true\n    });\n  }\n\n  return level(path);\n}\n\nconst verifiedCache = new LRU(1000);\n\nclass Keystore {\n  constructor(input = {}) {\n    if (typeof input === 'string') {\n      this._store = createStore(input);\n    } else if (typeof input.open === 'function') {\n      this._store = input;\n    } else if (typeof input.store === 'string') {\n      this._store = createStore(input.store);\n    } else {\n      this._store = input.store || createStore();\n    }\n\n    this._cache = input.cache || new LRU(100);\n  }\n\n  async open() {\n    if (this._store) {\n      await this._store.open();\n      return Promise.resolve();\n    }\n\n    return Promise.reject(new Error('Keystore: No store found to open'));\n  }\n\n  async close() {\n    if (!this._store) return;\n    await this._store.close();\n  }\n\n  async hasKey(id) {\n    if (!id) {\n      throw new Error('id needed to check a key');\n    }\n\n    if (this._store.status && this._store.status !== 'open') {\n      return Promise.resolve(null);\n    }\n\n    let hasKey = false;\n\n    try {\n      let storedKey = this._cache.get(id) || (await this._store.get(id));\n      hasKey = storedKey !== undefined && storedKey !== null;\n    } catch (e) {\n      // Catches 'Error: ENOENT: no such file or directory, open <path>'\n      console.error('Error: ENOENT: no such file or directory');\n    }\n\n    return hasKey;\n  }\n\n  async createKey(id) {\n    if (!id) {\n      throw new Error('id needed to create a key');\n    }\n\n    if (this._store.status && this._store.status !== 'open') {\n      return Promise.resolve(null);\n    }\n\n    const genKeyPair = () => new Promise((resolve, reject) => {\n      crypto.keys.generateKeyPair('secp256k1', 256, (err, key) => {\n        if (!err) {\n          resolve(key);\n        }\n\n        reject(err);\n      });\n    });\n\n    const keys = await genKeyPair();\n    const decompressedKey = Buffer.from(secp256k1.publicKeyConvert(keys.public.marshal(), false));\n    const key = {\n      publicKey: decompressedKey.toString('hex'),\n      privateKey: keys.marshal().toString('hex')\n    };\n\n    try {\n      await this._store.put(id, JSON.stringify(key));\n    } catch (e) {\n      console.log(e);\n    }\n\n    this._cache.set(id, key);\n\n    return keys;\n  }\n\n  async getKey(id) {\n    if (!id) {\n      throw new Error('id needed to get a key');\n    }\n\n    if (!this._store) {\n      await this.open();\n    }\n\n    if (this._store.status && this._store.status !== 'open') {\n      return Promise.resolve(null);\n    }\n\n    const cachedKey = this._cache.get(id);\n\n    let storedKey;\n\n    try {\n      storedKey = cachedKey || (await this._store.get(id));\n    } catch (e) {// ignore ENOENT error\n    }\n\n    if (!storedKey) {\n      return;\n    }\n\n    const deserializedKey = cachedKey || JSON.parse(storedKey);\n\n    if (!deserializedKey) {\n      return;\n    }\n\n    if (!cachedKey) {\n      this._cache.set(id, deserializedKey);\n    }\n\n    const genPrivKey = pk => new Promise((resolve, reject) => {\n      crypto.keys.supportedKeys.secp256k1.unmarshalSecp256k1PrivateKey(pk, (err, key) => {\n        if (!err) {\n          resolve(key);\n        }\n\n        reject(err);\n      });\n    });\n\n    return genPrivKey(Buffer.from(deserializedKey.privateKey, 'hex'));\n  }\n\n  async sign(key, data) {\n    if (!key) {\n      throw new Error('No signing key given');\n    }\n\n    if (!data) {\n      throw new Error('Given input data was undefined');\n    }\n\n    if (!Buffer.isBuffer(data)) {\n      data = Buffer.from(data);\n    }\n\n    return new Promise((resolve, reject) => {\n      key.sign(data, (err, signature) => {\n        if (!err) {\n          resolve(signature.toString('hex'));\n        }\n\n        reject(err);\n      });\n    });\n  }\n\n  getPublic(keys, options = {}) {\n    const formats = ['hex', 'buffer'];\n    const decompress = typeof options.decompress === 'undefined' ? true : options.decompress;\n    const format = options.format || 'hex';\n\n    if (formats.indexOf(format) === -1) {\n      throw new Error('Supported formats are `hex` and `buffer`');\n    }\n\n    let pubKey = keys.public.marshal();\n\n    if (decompress) {\n      pubKey = Buffer.from(secp256k1.publicKeyConvert(pubKey, false));\n    }\n\n    return format === 'buffer' ? pubKey : pubKey.toString('hex');\n  }\n\n  async verify(signature, publicKey, data, v = 'v1') {\n    return Keystore.verify(signature, publicKey, data, v);\n  }\n\n  static async verify(signature, publicKey, data, v = 'v1') {\n    const cached = verifiedCache.get(signature);\n    let res = false;\n\n    if (!cached) {\n      const verified = await verifier(v).verify(signature, publicKey, data);\n      res = verified;\n\n      if (verified) {\n        verifiedCache.set(signature, {\n          publicKey,\n          data\n        });\n      }\n    } else {\n      const compare = (cached, data, v) => {\n        let match;\n\n        if (v === 'v0') {\n          match = Buffer.compare(Buffer.alloc(30, cached), Buffer.alloc(30, data)) === 0;\n        } else {\n          match = Buffer.isBuffer(data) ? Buffer.compare(cached, data) === 0 : cached === data;\n        }\n\n        return match;\n      };\n\n      res = cached.publicKey === publicKey && compare(cached.data, data, v);\n    }\n\n    return res;\n  }\n\n}\n\nmodule.exports = Keystore;","map":null,"metadata":{},"sourceType":"script"}