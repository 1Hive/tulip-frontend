{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar Block = require('ipld-block');\n\nvar multihashing = require('multihashing-async');\n\nvar CID = require('cids');\n\nvar isIPFS = require('is-ipfs');\n\nvar _require = require('../../utils'),\n    withTimeoutOption = _require.withTimeoutOption;\n\nmodule.exports = function (_ref) {\n  var blockService = _ref.blockService,\n      pin = _ref.pin,\n      gcLock = _ref.gcLock,\n      preload = _ref.preload;\n  return withTimeoutOption( /*#__PURE__*/function () {\n    var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(block, options) {\n      var mhtype, format, cidVersion, multihash, cid, release;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = options || {};\n\n              if (!Array.isArray(block)) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new Error('Array is not supported');\n\n            case 3:\n              if (Block.isBlock(block)) {\n                _context.next = 16;\n                break;\n              }\n\n              if (!(options.cid && isIPFS.cid(options.cid))) {\n                _context.next = 8;\n                break;\n              }\n\n              block = new Block(block, CID.isCID(options.cid) ? options.cid : new CID(options.cid));\n              _context.next = 16;\n              break;\n\n            case 8:\n              mhtype = options.mhtype || 'sha2-256';\n              format = options.format || 'dag-pb';\n\n              if (options.version == null) {\n                // Pick appropriate CID version\n                cidVersion = mhtype === 'sha2-256' && format === 'dag-pb' ? 0 : 1;\n              } else {\n                cidVersion = options.version;\n              }\n\n              _context.next = 13;\n              return multihashing(block, mhtype);\n\n            case 13:\n              multihash = _context.sent;\n              cid = new CID(cidVersion, format, multihash);\n              block = new Block(block, cid);\n\n            case 16:\n              _context.next = 18;\n              return gcLock.readLock();\n\n            case 18:\n              release = _context.sent;\n              _context.prev = 19;\n              _context.next = 22;\n              return blockService.put(block, {\n                signal: options.signal\n              });\n\n            case 22:\n              if (options.preload !== false) {\n                preload(block.cid);\n              }\n\n              if (!(options.pin === true)) {\n                _context.next = 26;\n                break;\n              }\n\n              _context.next = 26;\n              return pin.add(block.cid, {\n                recursive: true,\n                signal: options.signal\n              });\n\n            case 26:\n              return _context.abrupt(\"return\", block);\n\n            case 27:\n              _context.prev = 27;\n              release();\n              return _context.finish(27);\n\n            case 30:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[19,, 27, 30]]);\n    }));\n\n    function put(_x, _x2) {\n      return _put.apply(this, arguments);\n    }\n\n    return put;\n  }());\n};","map":null,"metadata":{},"sourceType":"script"}