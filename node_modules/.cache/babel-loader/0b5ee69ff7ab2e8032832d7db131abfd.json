{"ast":null,"code":"'use strict';\n\nconst {\n  io\n} = require('./utils');\n\nconst AccessController = require('./access-controller-interface');\n\nconst type = 'ipfs';\n\nclass IPFSAccessController extends AccessController {\n  constructor(ipfs, options) {\n    super();\n    this._ipfs = ipfs;\n    this._write = Array.from(options.write || []);\n  } // Returns the type of the access controller\n\n\n  static get type() {\n    return type;\n  } // Return a Set of keys that have `access` capability\n\n\n  get write() {\n    return this._write;\n  }\n\n  async canAppend(entry, identityProvider) {\n    // Allow if access list contain the writer's publicKey or is '*'\n    const key = entry.identity.id;\n\n    if (this.write.includes(key) || this.write.includes('*')) {\n      // check identity is valid\n      return identityProvider.verifyIdentity(entry.identity);\n    }\n\n    return false;\n  }\n\n  async load(address) {\n    // Transform '/ipfs/QmPFtHi3cmfZerxtH9ySLdzpg1yFhocYDZgEZywdUXHxFU'\n    // to 'QmPFtHi3cmfZerxtH9ySLdzpg1yFhocYDZgEZywdUXHxFU'\n    if (address.indexOf('/ipfs') === 0) {\n      address = address.split('/')[2];\n    }\n\n    try {\n      this._write = await io.read(this._ipfs, address);\n    } catch (e) {\n      console.log('IPFSAccessController.load ERROR:', e);\n    }\n  }\n\n  async save() {\n    let cid;\n\n    try {\n      cid = await io.write(this._ipfs, 'dag-cbor', {\n        write: JSON.stringify(this.write, null, 2)\n      });\n    } catch (e) {\n      console.log('IPFSAccessController.save ERROR:', e);\n    } // return the manifest data\n\n\n    return {\n      address: cid\n    };\n  }\n\n  static async create(orbitdb, options = {}) {\n    options = { ...options,\n      ...{\n        write: options.write || [orbitdb.identity.id]\n      }\n    };\n    return new IPFSAccessController(orbitdb._ipfs, options);\n  }\n\n}\n\nmodule.exports = IPFSAccessController;","map":null,"metadata":{},"sourceType":"script"}