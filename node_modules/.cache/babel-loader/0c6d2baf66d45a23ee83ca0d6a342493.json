{"ast":null,"code":"/**\n * Get data for a specific lottery\n */\nconst getLotteryRoundData = async lotteryNumber => {\n  try {\n    const response = await fetch(`https://api.pancakeswap.com/api/singleLottery?lotteryNumber=${lotteryNumber}`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\nexport default getLotteryRoundData;","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/utils/getLotteryRoundData.ts"],"names":["getLotteryRoundData","lotteryNumber","response","fetch","data","json","error","Error"],"mappings":"AAqBA;AACA;AACA;AACA,MAAMA,mBAAmB,GAAG,MAAOC,aAAP,IAAwD;AAClF,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,+DAA8DF,aAAc,EAA9E,CAA5B;AACA,UAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AAEA,WAAOD,IAAP;AACD,GALD,CAKE,OAAOE,KAAP,EAAc;AACd,UAAM,IAAIC,KAAJ,CAAUD,KAAV,CAAN;AACD;AACF,CATD;;AAWA,eAAeN,mBAAf","sourcesContent":["export type DataResponse = {\n  lotteryNumber: number\n  lotteryDate: string\n  lotteryNumbers: number[]\n  poolSize: number\n  burned: number\n  contractLink: string\n  jackpotTicket: number\n  match1Ticket: number | null\n  match2Ticket: number\n  match3Ticket: number\n  match4Ticket: number\n  poolJackpot: number\n  poolMatch3: number\n  poolMatch2: number\n  poolMatch1: number | null\n\n  // TODO: Fill in the error type\n  error: any\n}\n\n/**\n * Get data for a specific lottery\n */\nconst getLotteryRoundData = async (lotteryNumber: number): Promise<DataResponse> => {\n  try {\n    const response = await fetch(`https://api.pancakeswap.com/api/singleLottery?lotteryNumber=${lotteryNumber}`)\n    const data = await response.json()\n\n    return data\n  } catch (error) {\n    throw new Error(error)\n  }\n}\n\nexport default getLotteryRoundData\n"]},"metadata":{},"sourceType":"module"}