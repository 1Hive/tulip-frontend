{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { getBunnySpecialContract } from 'utils/contractHelpers';\nexport const BULL_NFT = 11;\nexport const HICCUP_NFT = 10;\nconst bunnySpecialContract = getBunnySpecialContract();\n\nconst useGetBullHiccupClaimableStatus = () => {\n  _s();\n\n  const [hasChecked, setHasChecked] = useState(false);\n  const [claimables, setClaimables] = useState({\n    [BULL_NFT]: false,\n    [HICCUP_NFT]: false\n  });\n  const {\n    account\n  } = useWallet();\n  useEffect(() => {\n    const checkClaimableStatus = async () => {\n      const [isBullClaimable, isHiccupClaimable] = await bunnySpecialContract.methods.canClaimMultiple(account, [BULL_NFT, HICCUP_NFT]).call();\n      setClaimables({\n        [BULL_NFT]: isBullClaimable,\n        [HICCUP_NFT]: isHiccupClaimable\n      });\n      setHasChecked(true);\n    };\n\n    if (account) {\n      checkClaimableStatus();\n    }\n  }, [account, setClaimables, setHasChecked]);\n  return {\n    isSomeClaimable: Object.values(claimables).some(status => status === true),\n    isBullClaimable: claimables[BULL_NFT],\n    isHiccupClaimable: claimables[HICCUP_NFT],\n    hasChecked\n  };\n};\n\n_s(useGetBullHiccupClaimableStatus, \"eustiE4jY5Qtup9gl6CQi+iVQkY=\", false, function () {\n  return [useWallet];\n});\n\nexport default useGetBullHiccupClaimableStatus;","map":{"version":3,"sources":["/Users/fabian/Documents/Projects/1hive/tulip-frontend/src/views/Collectibles/hooks/useGetBullHiccupClaimableStatus.ts"],"names":["useEffect","useState","useWallet","getBunnySpecialContract","BULL_NFT","HICCUP_NFT","bunnySpecialContract","useGetBullHiccupClaimableStatus","hasChecked","setHasChecked","claimables","setClaimables","account","checkClaimableStatus","isBullClaimable","isHiccupClaimable","methods","canClaimMultiple","call","isSomeClaimable","Object","values","some","status"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,uBAAT,QAAwC,uBAAxC;AAEA,OAAO,MAAMC,QAAQ,GAAG,EAAjB;AACP,OAAO,MAAMC,UAAU,GAAG,EAAnB;AAEP,MAAMC,oBAAoB,GAAGH,uBAAuB,EAApD;;AAEA,MAAMI,+BAA+B,GAAG,MAAM;AAAA;;AAC5C,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC;AAC3C,KAACG,QAAD,GAAY,KAD+B;AAE3C,KAACC,UAAD,GAAc;AAF6B,GAAD,CAA5C;AAIA,QAAM;AAAEO,IAAAA;AAAF,MAAcV,SAAS,EAA7B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,oBAAoB,GAAG,YAAY;AACvC,YAAM,CAACC,eAAD,EAAkBC,iBAAlB,IAAwC,MAAMT,oBAAoB,CAACU,OAArB,CACjDC,gBADiD,CAChCL,OADgC,EACvB,CAACR,QAAD,EAAWC,UAAX,CADuB,EAEjDa,IAFiD,EAApD;AAIAP,MAAAA,aAAa,CAAC;AACZ,SAACP,QAAD,GAAYU,eADA;AAEZ,SAACT,UAAD,GAAcU;AAFF,OAAD,CAAb;AAIAN,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD,KAVD;;AAYA,QAAIG,OAAJ,EAAa;AACXC,MAAAA,oBAAoB;AACrB;AACF,GAhBQ,EAgBN,CAACD,OAAD,EAAUD,aAAV,EAAyBF,aAAzB,CAhBM,CAAT;AAkBA,SAAO;AACLU,IAAAA,eAAe,EAAEC,MAAM,CAACC,MAAP,CAAcX,UAAd,EAA0BY,IAA1B,CAAgCC,MAAD,IAAYA,MAAM,KAAK,IAAtD,CADZ;AAELT,IAAAA,eAAe,EAAEJ,UAAU,CAACN,QAAD,CAFtB;AAGLW,IAAAA,iBAAiB,EAAEL,UAAU,CAACL,UAAD,CAHxB;AAILG,IAAAA;AAJK,GAAP;AAMD,CAhCD;;GAAMD,+B;UAMgBL,S;;;AA4BtB,eAAeK,+BAAf","sourcesContent":["import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { getBunnySpecialContract } from 'utils/contractHelpers'\n\nexport const BULL_NFT = 11\nexport const HICCUP_NFT = 10\n\nconst bunnySpecialContract = getBunnySpecialContract()\n\nconst useGetBullHiccupClaimableStatus = () => {\n  const [hasChecked, setHasChecked] = useState(false)\n  const [claimables, setClaimables] = useState({\n    [BULL_NFT]: false,\n    [HICCUP_NFT]: false,\n  })\n  const { account } = useWallet()\n\n  useEffect(() => {\n    const checkClaimableStatus = async () => {\n      const [isBullClaimable, isHiccupClaimable] = (await bunnySpecialContract.methods\n        .canClaimMultiple(account, [BULL_NFT, HICCUP_NFT])\n        .call()) as boolean[]\n\n      setClaimables({\n        [BULL_NFT]: isBullClaimable,\n        [HICCUP_NFT]: isHiccupClaimable,\n      })\n      setHasChecked(true)\n    }\n\n    if (account) {\n      checkClaimableStatus()\n    }\n  }, [account, setClaimables, setHasChecked])\n\n  return {\n    isSomeClaimable: Object.values(claimables).some((status) => status === true),\n    isBullClaimable: claimables[BULL_NFT],\n    isHiccupClaimable: claimables[HICCUP_NFT],\n    hasChecked,\n  }\n}\n\nexport default useGetBullHiccupClaimableStatus\n"]},"metadata":{},"sourceType":"module"}