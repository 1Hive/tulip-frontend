{"ast":null,"code":"function r() {\n  var r = new Map();\n  return function (e, t) {\n    try {\n      var _n = function _n(n) {\n        if (i) return n;\n        var o = r.get(e.did);\n        return void 0 !== o ? o : Promise.resolve(t()).then(function (t) {\n          return r.set(e.did, t), t;\n        });\n      };\n\n      var i = !1;\n\n      var o = function () {\n        if (e.params && \"true\" === e.params[\"no-cache\"]) return i = !0, Promise.resolve(t());\n      }();\n\n      return Promise.resolve(o && o.then ? o.then(_n) : _n(o));\n    } catch (r) {\n      return Promise.reject(r);\n    }\n  };\n}\n\nfunction e(r, e) {\n  return e();\n}\n\nvar t = new RegExp(\"^did:([a-zA-Z0-9_]+):([a-zA-Z0-9_.-]+(:[a-zA-Z0-9_.-]+)*)((;[a-zA-Z0-9_.:%-]+=[a-zA-Z0-9_.:%-]*)*)(/[^#?]*)?([?][^#]*)?(#.*)?$\");\n\nfunction i(r) {\n  if (\"\" === r || !r) throw new Error(\"Missing DID\");\n  var e = r.match(t);\n\n  if (e) {\n    var i = {\n      did: \"did:\" + e[1] + \":\" + e[2],\n      method: e[1],\n      id: e[2],\n      didUrl: r\n    };\n\n    if (e[4]) {\n      var n = e[4].slice(1).split(\";\");\n      i.params = {};\n\n      for (var o = 0, a = n; o < a.length; o += 1) {\n        var s = a[o].split(\"=\");\n        i.params[s[0]] = s[1];\n      }\n    }\n\n    return e[6] && (i.path = e[6]), e[7] && (i.query = e[7].slice(1)), e[8] && (i.fragment = e[8].slice(1)), i;\n  }\n\n  throw new Error(\"Invalid DID \" + r);\n}\n\nvar n = function n(t, i) {\n  void 0 === t && (t = {}), this.registry = t, this.cache = !0 === i ? r() : i || e;\n};\n\nn.prototype.resolve = function (r) {\n  var e = this;\n\n  try {\n    var t = i(r),\n        n = this.registry[t.method];\n    return n ? this.cache(t, function () {\n      return n(t.did, t, e);\n    }) : Promise.reject(new Error(\"Unsupported DID method: '\" + t.method + \"'\"));\n  } catch (r) {\n    return Promise.reject(r);\n  }\n};\n\nexport { r as inMemoryCache, e as noCache, i as parse, n as Resolver };","map":null,"metadata":{},"sourceType":"module"}