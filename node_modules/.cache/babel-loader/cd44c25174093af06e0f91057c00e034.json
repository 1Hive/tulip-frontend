{"ast":null,"code":"'use strict';\n\nconst defaultMigrations = require('../migrations');\n\nconst repoVersion = require('./repo/version');\n\nconst repoLock = require('./repo/lock');\n\nconst errors = require('./errors');\n\nconst log = require('debug')('repo-migrations:migrator');\n\nexports.getCurrentRepoVersion = repoVersion.getVersion;\nexports.errors = errors;\n/**\n * Returns the version of latest migration.\n * If no migrations are present returns 0.\n *\n * @param {array?} migrations - Array of migrations to consider. If undefined, the bundled migrations are used. Mainly for testing purpose.\n * @returns {int}\n */\n\nfunction getLatestMigrationVersion(migrations) {\n  migrations = migrations || defaultMigrations;\n\n  if (!Array.isArray(migrations) || migrations.length === 0) {\n    return 0;\n  }\n\n  return migrations[migrations.length - 1].version;\n}\n\nexports.getLatestMigrationVersion = getLatestMigrationVersion;\n/**\n * Main function to execute forward migrations.\n * It acquire lock on the provided path before doing any migrations.\n *\n * Signature of the progress callback is: function(migrationObject: object, currentMigrationNumber: int, totalMigrationsCount: int)\n *\n * @param {string} path - Path to initialized (!) JS-IPFS repo\n * @param {int} toVersion - Version to which the repo should be migrated.\n * @param {Object} options - Options for migration\n * @param {boolean?} options.ignoreLock - Won't lock the repo for applying the migrations. Use with caution.\n * @param {object?} options.repoOptions - Options that are passed to migrations, that can use them to correctly construct datastore. Options are same like for IPFSRepo.\n * @param {function?} options.onProgress - Callback which will be called after each executed migration to report progress\n * @param {boolean?} options.isDryRun - Allows to simulate the execution of the migrations without any effect.\n * @param {array?} options.migrations - Array of migrations to migrate. If undefined, the bundled migrations are used. Mainly for testing purpose.\n * @returns {Promise<void>}\n */\n\nasync function migrate(path, toVersion, {\n  ignoreLock = false,\n  repoOptions,\n  onProgress,\n  isDryRun = false,\n  migrations\n}) {\n  migrations = migrations || defaultMigrations;\n\n  onProgress = onProgress || (() => {});\n\n  if (!path) {\n    throw new errors.RequiredParameterError('Path argument is required!');\n  }\n\n  if (!toVersion) {\n    throw new errors.RequiredParameterError('toVersion argument is required!');\n  }\n\n  if (!Number.isInteger(toVersion) || toVersion <= 0) {\n    throw new errors.InvalidValueError('Version has to be positive integer!');\n  }\n\n  const currentVersion = await repoVersion.getVersion(path);\n\n  if (currentVersion === toVersion) {\n    log('Nothing to migrate.');\n    return;\n  }\n\n  if (currentVersion > toVersion) {\n    throw new errors.InvalidValueError(`Current repo's version (${currentVersion}) is higher then toVersion (${toVersion}), you probably wanted to revert it?`);\n  }\n\n  verifyAvailableMigrations(migrations, currentVersion, toVersion);\n  let lock;\n  if (!isDryRun && !ignoreLock) lock = await repoLock.lock(currentVersion, path);\n\n  try {\n    let counter = 0;\n    const totalMigrations = toVersion - currentVersion;\n\n    for (const migration of migrations) {\n      if (toVersion !== undefined && migration.version > toVersion) {\n        break;\n      }\n\n      if (migration.version <= currentVersion) {\n        continue;\n      }\n\n      counter++;\n      log(`Migrating version ${migration.version}`);\n\n      try {\n        if (!isDryRun) await migration.migrate(path, repoOptions);\n      } catch (e) {\n        const lastSuccessfullyMigratedVersion = migration.version - 1;\n        log(`An exception was raised during execution of migration. Setting the repo's version to last successfully migrated version: ${lastSuccessfullyMigratedVersion}`);\n        await repoVersion.setVersion(path, lastSuccessfullyMigratedVersion);\n        e.message = `During migration to version ${migration.version} exception was raised: ${e.message}`;\n        throw e;\n      }\n\n      onProgress(migration, counter, totalMigrations); // Reports on migration process\n\n      log(`Migrating to version ${migration.version} finished`);\n    }\n\n    if (!isDryRun) await repoVersion.setVersion(path, toVersion || getLatestMigrationVersion(migrations));\n    log('Repo successfully migrated ', toVersion !== undefined ? `to version ${toVersion}!` : 'to latest version!');\n  } finally {\n    if (!isDryRun && !ignoreLock) await lock.close();\n  }\n}\n\nexports.migrate = migrate;\n/**\n * Main function to execute backward migration (reversion).\n * It acquire lock on the provided path before doing any migrations.\n *\n * Signature of the progress callback is: function(migrationObject: object, currentMigrationNumber: int, totalMigrationsCount: int)\n *\n * @param {string} path - Path to initialized (!) JS-IPFS repo\n * @param {int} toVersion - Version to which the repo will be reverted.\n * @param {Object} options - Options for the reversion\n * @param {function?} options.onProgress - Callback which will be called after each reverted migration to report progress\n * @param {object?} options.repoOptions - Options that are passed to migrations, that can use them to correctly construct datastore. Options are same like for IPFSRepo.\n * @param {boolean?} options.isDryRun - Allows to simulate the execution of the reversion without any effects. Make sense to utilize onProgress with this argument.\n * @param {boolean?} options.ignoreLock - Won't lock the repo for reverting the migrations. Use with caution.\n * @param {array?} options.migrations - Array of migrations to migrate. If undefined, the bundled migrations are used. Mainly for testing purpose.\n * @returns {Promise<void>}\n */\n\nasync function revert(path, toVersion, {\n  ignoreLock = false,\n  repoOptions,\n  onProgress,\n  isDryRun = false,\n  migrations\n}) {\n  migrations = migrations || defaultMigrations;\n\n  onProgress = onProgress || (() => {});\n\n  if (!path) {\n    throw new errors.RequiredParameterError('Path argument is required!');\n  }\n\n  if (!toVersion) {\n    throw new errors.RequiredParameterError('When reverting migrations, you have to specify to which version to revert!');\n  }\n\n  if (!Number.isInteger(toVersion) || toVersion <= 0) {\n    throw new errors.InvalidValueError('Version has to be positive integer!');\n  }\n\n  const currentVersion = await repoVersion.getVersion(path);\n\n  if (currentVersion === toVersion) {\n    log('Nothing to revert.');\n    return;\n  }\n\n  if (currentVersion < toVersion) {\n    throw new errors.InvalidValueError(`Current repo's version (${currentVersion}) is lower then toVersion (${toVersion}), you probably wanted to migrate it?`);\n  }\n\n  verifyAvailableMigrations(migrations, toVersion, currentVersion, true);\n  let lock;\n  if (!isDryRun && !ignoreLock) lock = await repoLock.lock(currentVersion, path);\n  log(`Reverting from version ${currentVersion} to ${toVersion}`);\n\n  try {\n    let counter = 0;\n    const totalMigrations = currentVersion - toVersion;\n    const reversedMigrationArray = migrations.slice().reverse();\n\n    for (const migration of reversedMigrationArray) {\n      if (migration.version <= toVersion) {\n        break;\n      }\n\n      if (migration.version > currentVersion) {\n        continue;\n      }\n\n      counter++;\n      log(`Reverting migration version ${migration.version}`);\n\n      try {\n        if (!isDryRun) await migration.revert(path, repoOptions);\n      } catch (e) {\n        const lastSuccessfullyRevertedVersion = migration.version;\n        log(`An exception was raised during execution of migration. Setting the repo's version to last successfully reverted version: ${lastSuccessfullyRevertedVersion}`);\n        await repoVersion.setVersion(path, lastSuccessfullyRevertedVersion);\n        e.message = `During reversion to version ${migration.version} exception was raised: ${e.message}`;\n        throw e;\n      }\n\n      onProgress(migration, counter, totalMigrations); // Reports on migration process\n\n      log(`Reverting to version ${migration.version} finished`);\n    }\n\n    if (!isDryRun) await repoVersion.setVersion(path, toVersion);\n    log(`All migrations successfully reverted to version ${toVersion}!`);\n  } finally {\n    if (!isDryRun && !ignoreLock) await lock.close();\n  }\n}\n\nexports.revert = revert;\n/**\n * Function checks if all migrations in given range are available.\n *\n * @param {array} migrations\n * @param {int} fromVersion\n * @param {int} toVersion\n * @param {boolean} checkReversibility - Will additionally checks if all the migrations in the range are reversible\n * @returns {void}\n */\n\nfunction verifyAvailableMigrations(migrations, fromVersion, toVersion, checkReversibility = false) {\n  let migrationCounter = 0;\n\n  for (const migration of migrations) {\n    if (migration.version > toVersion) {\n      break;\n    }\n\n    if (migration.version > fromVersion) {\n      if (checkReversibility && !migration.revert) {\n        throw new errors.NonReversibleMigrationError(`It is not possible to revert to version ${fromVersion} because migration version ${migration.version} is not reversible. Cancelling reversion.`);\n      }\n\n      migrationCounter++;\n    }\n  }\n\n  if (migrationCounter !== toVersion - fromVersion) {\n    throw new errors.InvalidValueError(`The ipfs-repo-migrations package does not have all migration to migrate from version ${fromVersion} to ${toVersion}`);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}