{"ast":null,"code":"const pageResults = require('graph-results-pager');\n\nconst {\n  request,\n  gql\n} = require('graphql-request');\n\nconst {\n  graphAPIEndpoints,\n  chefAddress,\n  TWENTY_FOUR_HOURS\n} = require('./../constants');\n\nconst {\n  timestampToBlock,\n  getAverageBlockTime\n} = require('./../utils');\n\nconst {\n  pairs: exchangePairs\n} = require('./exchange');\n\nconst {\n  priceUSD: sushiPriceUSD\n} = require('./sushi');\n\nmodule.exports = {\n  async info({\n    block = undefined,\n    timestamp = undefined\n  } = {}) {\n    block = block ? block : timestamp ? await timestampToBlock(timestamp) : undefined;\n    block = block ? `block: { number: ${block} }` : \"\";\n    const result = await request(graphAPIEndpoints.masterchef, gql`{\n                    masterChef(id: \"${chefAddress}\", ${block}) {\n                        ${info.properties.toString()}\n                    }\n                }`);\n    return info.callback(result.masterChef);\n  },\n\n  async pool({\n    block = undefined,\n    timestamp = undefined,\n    pool_id = undefined,\n    pool_address = undefined\n  } = {}) {\n    if (!pool_id && !pool_address) {\n      throw new Error(\"sushi-data: Pool ID / Address undefined\");\n    }\n\n    block = block ? block : timestamp ? await timestampToBlock(timestamp) : undefined;\n    block = block ? `block: { number: ${block} }` : \"\";\n    let result;\n\n    if (pool_id) {\n      result = await request(graphAPIEndpoints.masterchef, gql`{\n                        pool(id: ${pool_id}, ${block}) {\n                            ${pools.properties.toString()}\n                        }\n                    }`);\n    } else {\n      result = await request(graphAPIEndpoints.masterchef, gql`{\n                        pools(first: 1, where: {pair: \"${pool_address.toLowerCase()}\"}, ${block}) {\n                            ${pools.properties.toString()}\n                        }\n                    }`);\n    }\n\n    return pools.callback(pool_id ? [result.pool] : result.pools)[0];\n  },\n\n  async pools({\n    block = undefined,\n    timestamp = undefined\n  } = {}) {\n    return pageResults({\n      api: graphAPIEndpoints.masterchef,\n      query: {\n        entity: 'pools',\n        selection: {\n          block: block ? {\n            number: block\n          } : timestamp ? {\n            number: await timestampToBlock(timestamp)\n          } : undefined\n        },\n        properties: pools.properties\n      }\n    }).then(results => pools.callback(results)).catch(err => console.log(err));\n  },\n\n  async stakedValue({\n    block = undefined,\n    timestamp = undefined,\n    token_address = undefined\n  } = {}) {\n    if (!token_address) {\n      throw new Error(\"sushi-data: Token address undefined\");\n    }\n\n    block = block ? block : timestamp ? await timestampToBlock(timestamp) : undefined;\n    block = block ? `block: { number: ${block} }` : \"\";\n    const result = await request(graphAPIEndpoints.exchange, gql`{\n                    liquidityPosition(id: \"${token_address.toLowerCase()}-${chefAddress}\", ${block}) {\n                        ${stakedValue.properties.toString()}\n                    }\n                }`);\n    return stakedValue.callback(result.liquidityPosition);\n  },\n\n  async user({\n    block = undefined,\n    timestamp = undefined,\n    user_address = undefined\n  } = {}) {\n    if (!user_address) {\n      throw new Error(\"sushi-data: User address undefined\");\n    }\n\n    return pageResults({\n      api: graphAPIEndpoints.masterchef,\n      query: {\n        entity: 'users',\n        selection: {\n          where: {\n            address: `\\\\\"${user_address.toLowerCase()}\\\\\"`\n          },\n          block: block ? {\n            number: block\n          } : timestamp ? {\n            number: await timestampToBlock(timestamp)\n          } : undefined\n        },\n        properties: user.properties\n      }\n    }).then(results => user.callback(results)).catch(err => console.log(err));\n  },\n\n  async users({\n    block = undefined,\n    timestamp = undefined\n  } = {}) {\n    return pageResults({\n      api: graphAPIEndpoints.masterchef,\n      query: {\n        entity: 'users',\n        selection: {\n          block: block ? {\n            number: block\n          } : timestamp ? {\n            number: await timestampToBlock(timestamp)\n          } : undefined\n        },\n        properties: user.properties\n      }\n    }).then(results => user.callback(results)).catch(err => console.log(err));\n  },\n\n  async apys({\n    block = undefined,\n    timestamp = undefined\n  } = {}) {\n    const masterchefList = await module.exports.pools({\n      block,\n      timestamp\n    });\n    const exchangeList = await exchangePairs({\n      block,\n      timestamp\n    });\n    const sushiUSD = await sushiPriceUSD({\n      block,\n      timestamp\n    });\n    const totalAllocPoint = masterchefList.reduce((a, b) => a + b.allocPoint, 0);\n    const averageBlockTime = await getAverageBlockTime({\n      block,\n      timestamp\n    });\n    return masterchefList.map(masterchefPool => {\n      const exchangePool = exchangeList.find(e => e.id === masterchefPool.pair);\n\n      if (!exchangePool) {\n        return { ...masterchefPool,\n          apy: 0\n        };\n      }\n\n      const tvl = masterchefPool.slpBalance * (exchangePool.reserveUSD / exchangePool.totalSupply);\n      const sushiPerBlock = masterchefPool.allocPoint / totalAllocPoint * 100;\n      const apy = sushiUSD * (sushiPerBlock * (60 / averageBlockTime) * 60 * 24 * 365) / tvl * 100 * 3; // *3 => vesting\n\n      return { ...masterchefPool,\n        apy\n      };\n    });\n  },\n\n  async apys24h({\n    block = undefined,\n    timestamp = undefined\n  } = {}) {\n    let timestampNow = timestamp ? timestamp : block ? await blockToTimestamp(block) : Math.floor(Date.now() / 1000);\n    timestamp24ago = timestampNow - TWENTY_FOUR_HOURS;\n    timestamp48ago = timestamp24ago - TWENTY_FOUR_HOURS;\n    block = timestamp ? await timestampToBlock(timestamp) : block;\n    block24ago = await timestampToBlock(timestamp24ago);\n    block48ago = await timestampToBlock(timestamp48ago);\n    const results = await module.exports.apys({\n      block: block\n    });\n    const results24ago = await module.exports.apys({\n      block: block24ago\n    });\n    return apys.callback24h(results, results24ago);\n  }\n\n};\nconst info = {\n  properties: ['bonusMultiplier', 'bonusEndBlock', 'devaddr', 'migrator', 'owner', 'startBlock', 'sushi', 'sushiPerBlock', 'totalAllocPoint', 'poolCount', 'slpBalance', 'slpAge', 'slpAgeRemoved', 'slpDeposited', 'slpWithdrawn', 'updatedAt'],\n\n  callback(results) {\n    return {\n      bonusMultiplier: Number(results.bonusMultiplier),\n      bonusEndBlock: Number(results.bonusEndBlock),\n      devaddr: results.devaddr,\n      migrator: results.migrator,\n      owner: results.owner,\n      startBlock: Number(results.startBlock),\n      sushiPerBlock: results.sushiPerBlock / 1e18,\n      totalAllocPoint: Number(results.totalAllocPoint),\n      poolCount: Number(results.poolCount),\n      slpBalance: Number(results.slpBalance),\n      slpAge: Number(results.slpAge),\n      slpAgeRemoved: Number(results.slpAgeRemoved),\n      slpDeposited: Number(results.slpDeposited),\n      slpWithdrawn: Number(results.slpWithdrawn),\n      updatedAt: Number(results.updatedAt)\n    };\n  }\n\n};\nconst pools = {\n  properties: ['id', 'pair', 'allocPoint', 'lastRewardBlock', 'accSushiPerShare', 'balance', 'userCount', 'slpBalance', 'slpAge', 'slpAgeRemoved', 'slpDeposited', 'slpWithdrawn', 'timestamp', 'block', 'updatedAt', 'entryUSD', 'exitUSD', 'sushiHarvested', 'sushiHarvestedUSD'],\n\n  callback(results) {\n    return results.map(({\n      id,\n      pair,\n      allocPoint,\n      lastRewardBlock,\n      accSushiPerShare,\n      balance,\n      userCount,\n      slpBalance,\n      slpAge,\n      slpAgeRemoved,\n      slpDeposited,\n      slpWithdrawn,\n      timestamp,\n      block,\n      updatedAt,\n      entryUSD,\n      exitUSD,\n      sushiHarvested,\n      sushiHarvestedUSD\n    }) => ({\n      id: Number(id),\n      pair: pair,\n      allocPoint: Number(allocPoint),\n      lastRewardBlock: Number(lastRewardBlock),\n      accSushiPerShare: BigInt(accSushiPerShare),\n      userCount: Number(userCount),\n      slpBalance: Number(slpBalance),\n      slpAge: Number(slpAge),\n      slpAgeRemoved: Number(slpAgeRemoved),\n      slpDeposited: Number(slpDeposited),\n      slpWithdrawn: Number(slpWithdrawn),\n      addedTs: Number(timestamp),\n      addedDate: new Date(timestamp * 1000),\n      addedBlock: Number(block),\n      lastUpdatedTs: Number(updatedAt),\n      lastUpdatedDate: new Date(updatedAt * 1000),\n      entryUSD: Number(entryUSD),\n      exitUSD: Number(exitUSD),\n      sushiHarvested: Number(sushiHarvested),\n      sushiHarvestedUSD: Number(sushiHarvestedUSD)\n    }));\n  }\n\n};\nconst stakedValue = {\n  properties: ['id', 'liquidityTokenBalance', 'pair { id, totalSupply, reserveETH, reserveUSD }'],\n\n  callback(results) {\n    return {\n      id: results.id,\n      liquidityTokenBalance: Number(results.liquidityTokenBalance),\n      totalSupply: Number(results.pair.totalSupply),\n      totalValueETH: Number(results.pair.reserveETH),\n      totalValueUSD: Number(results.pair.reserveUSD)\n    };\n  }\n\n};\nconst user = {\n  properties: ['id', 'address', 'pool { id, pair, balance, accSushiPerShare, lastRewardBlock }', 'amount', 'rewardDebt', 'entryUSD', 'exitUSD', 'sushiHarvested', 'sushiHarvestedUSD'],\n\n  callback(results) {\n    return results.map(entry => ({\n      id: entry.id,\n      address: entry.address,\n      poolId: Number(entry.id.split(\"-\")[0]),\n      pool: entry.pool ? {\n        id: entry.pool.id,\n        pair: entry.pool.pair,\n        balance: Number(entry.pool.balance),\n        accSushiPerShare: BigInt(accSushiPerShare),\n        lastRewardBlock: Number(entry.pool.lastRewardBlock)\n      } : undefined,\n      amount: Number(entry.amount),\n      rewardDebt: BigInt(entry.rewardDebt),\n      entryUSD: Number(entry.entryUSD),\n      exitUSD: Number(entry.exitUSD),\n      sushiHarvested: Number(entry.sushiHarvested),\n      sushiHarvestedUSD: Number(entry.sushiHarvestedUSD)\n    }));\n  }\n\n};\nconst apys = {\n  callback24h(results, results24h) {\n    return results.map(result => {\n      const result24h = results24h.find(e => e.id === result.id) || result;\n      return { ...result,\n        slpBalanceChange: result.slpBalance / result24h.slpBalance * 100 - 100,\n        slpBalanceChangeCount: result.slpBalance - result24h.slpBalance,\n        userCountChange: result.userCount / result24h.userCount * 100 - 100,\n        userCountChangeCount: result.userCount - result24h.userCount,\n        sushiHarvestedChange: result.sushiHarvested / result24h.sushiHarvested * 100 - 100,\n        sushiHarvestedChangeCount: result.sushiHarvested - result24h.sushiHarvested\n      };\n    });\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}