{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { wallet } from 'tulip-data';\nimport { useWallet } from 'use-wallet';\nconst WALLET_INFO_DEFAULT = {\n  addressExist: false,\n  addressUnique: false\n};\nexport function useWalletData() {\n  const [walletInfo, setWalletInfo] = useState(WALLET_INFO_DEFAULT);\n  const {\n    account\n  } = useWallet();\n  useEffect(() => {\n    let cancelled = false;\n\n    if (!account) {\n      return setWalletInfo(info => ({ ...info,\n        fetching: false\n      }));\n    }\n\n    const fetchWalletData = async () => {\n      try {\n        const balances = await wallet.tokenBalances({\n          user_address: account\n        });\n        console.log('WW', wallet);\n\n        if (!cancelled) {\n          return setWalletInfo(balances);\n        }\n      } catch (err) {\n        console.error(`Could not fetch wallet data `, err);\n      }\n    };\n\n    fetchWalletData();\n    return () => {\n      cancelled = true;\n    };\n  }, [account]);\n  return walletInfo;\n}","map":{"version":3,"sources":["/Users/fabianmolina/Documents/1hive/tulip-frontend/src/hooks/useWalletData.js"],"names":["useEffect","useState","wallet","useWallet","WALLET_INFO_DEFAULT","addressExist","addressUnique","useWalletData","walletInfo","setWalletInfo","account","cancelled","info","fetching","fetchWalletData","balances","tokenBalances","user_address","console","log","err","error"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,SAASC,SAAT,QAA0B,YAA1B;AAEA,MAAMC,mBAAmB,GAAG;AAC1BC,EAAAA,YAAY,EAAE,KADY;AAE1BC,EAAAA,aAAa,EAAE;AAFW,CAA5B;AAKA,OAAO,SAASC,aAAT,GAAyB;AAC9B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAACG,mBAAD,CAA5C;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAcP,SAAS,EAA7B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,SAAS,GAAG,KAAhB;;AACA,QAAI,CAACD,OAAL,EAAc;AACZ,aAAOD,aAAa,CAACG,IAAI,KAAK,EAAE,GAAGA,IAAL;AAAWC,QAAAA,QAAQ,EAAE;AAArB,OAAL,CAAL,CAApB;AACD;;AAED,UAAMC,eAAe,GAAG,YAAY;AAClC,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMb,MAAM,CAACc,aAAP,CAAqB;AAC1CC,UAAAA,YAAY,EAAEP;AAD4B,SAArB,CAAvB;AAIAQ,QAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBjB,MAAlB;;AACA,YAAI,CAACS,SAAL,EAAgB;AACd,iBAAOF,aAAa,CAACM,QAAD,CAApB;AACD;AACF,OATD,CASE,OAAOK,GAAP,EAAY;AACZF,QAAAA,OAAO,CAACG,KAAR,CAAe,8BAAf,EAA8CD,GAA9C;AACD;AACF,KAbD;;AAeAN,IAAAA,eAAe;AACf,WAAO,MAAM;AACXH,MAAAA,SAAS,GAAG,IAAZ;AACD,KAFD;AAGD,GAzBQ,EAyBN,CAACD,OAAD,CAzBM,CAAT;AA2BA,SAAOF,UAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport { wallet } from 'tulip-data'\r\nimport { useWallet } from 'use-wallet'\r\n\r\nconst WALLET_INFO_DEFAULT = {\r\n  addressExist: false,\r\n  addressUnique: false,\r\n}\r\n\r\nexport function useWalletData() {\r\n  const [walletInfo, setWalletInfo] = useState(WALLET_INFO_DEFAULT)\r\n  const { account } = useWallet()\r\n\r\n  useEffect(() => {\r\n    let cancelled = false\r\n    if (!account) {\r\n      return setWalletInfo(info => ({ ...info, fetching: false }))\r\n    }\r\n\r\n    const fetchWalletData = async () => {\r\n      try {\r\n        const balances = await wallet.tokenBalances({\r\n          user_address: account,\r\n        })\r\n\r\n        console.log('WW', wallet)\r\n        if (!cancelled) {\r\n          return setWalletInfo(balances)\r\n        }\r\n      } catch (err) {\r\n        console.error(`Could not fetch wallet data `, err)\r\n      }\r\n    }\r\n\r\n    fetchWalletData()\r\n    return () => {\r\n      cancelled = true\r\n    }\r\n  }, [account])\r\n\r\n  return walletInfo\r\n}\r\n"]},"metadata":{},"sourceType":"module"}