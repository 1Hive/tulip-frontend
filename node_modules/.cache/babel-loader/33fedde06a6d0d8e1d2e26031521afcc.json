{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar sha = require('multihashing-async/src/sha');\n\nvar protobuf = require('protons');\n\nvar multibase = require('multibase');\n\nvar errcode = require('err-code');\n\nrequire('node-forge/lib/sha512');\n\nrequire('node-forge/lib/ed25519');\n\nvar forge = require('node-forge/lib/forge');\n\nvar crypto = require('./rsa');\n\nvar pbm = protobuf(require('./keys.proto'));\n\nvar exporter = require('./exporter');\n\nvar RsaPublicKey = /*#__PURE__*/function () {\n  function RsaPublicKey(key) {\n    _classCallCheck(this, RsaPublicKey);\n\n    this._key = key;\n  }\n\n  _createClass(RsaPublicKey, [{\n    key: \"verify\",\n    value: function () {\n      var _verify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, sig) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", crypto.hashAndVerify(this._key, sig, data));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function verify(_x, _x2) {\n        return _verify.apply(this, arguments);\n      }\n\n      return verify;\n    }()\n  }, {\n    key: \"marshal\",\n    value: function marshal() {\n      return crypto.utils.jwkToPkix(this._key);\n    }\n  }, {\n    key: \"bytes\",\n    get: function get() {\n      return pbm.PublicKey.encode({\n        Type: pbm.KeyType.RSA,\n        Data: this.marshal()\n      });\n    }\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(bytes) {\n      return crypto.encrypt(this._key, bytes);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(key) {\n      return this.bytes.equals(key.bytes);\n    }\n  }, {\n    key: \"hash\",\n    value: function () {\n      var _hash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", sha.multihashing(this.bytes, 'sha2-256'));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function hash() {\n        return _hash.apply(this, arguments);\n      }\n\n      return hash;\n    }()\n  }]);\n\n  return RsaPublicKey;\n}();\n\nvar RsaPrivateKey = /*#__PURE__*/function () {\n  // key       - Object of the jwk format\n  // publicKey - Buffer of the spki format\n  function RsaPrivateKey(key, publicKey) {\n    _classCallCheck(this, RsaPrivateKey);\n\n    this._key = key;\n    this._publicKey = publicKey;\n  }\n\n  _createClass(RsaPrivateKey, [{\n    key: \"genSecret\",\n    value: function genSecret() {\n      return crypto.getRandomValues(16);\n    }\n  }, {\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(message) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", crypto.hashAndSign(this._key, message));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function sign(_x3) {\n        return _sign.apply(this, arguments);\n      }\n\n      return sign;\n    }()\n  }, {\n    key: \"public\",\n    get: function get() {\n      if (!this._publicKey) {\n        throw errcode(new Error('public key not provided'), 'ERR_PUBKEY_NOT_PROVIDED');\n      }\n\n      return new RsaPublicKey(this._publicKey);\n    }\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(bytes) {\n      return crypto.decrypt(this._key, bytes);\n    }\n  }, {\n    key: \"marshal\",\n    value: function marshal() {\n      return crypto.utils.jwkToPkcs1(this._key);\n    }\n  }, {\n    key: \"bytes\",\n    get: function get() {\n      return pbm.PrivateKey.encode({\n        Type: pbm.KeyType.RSA,\n        Data: this.marshal()\n      });\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(key) {\n      return this.bytes.equals(key.bytes);\n    }\n  }, {\n    key: \"hash\",\n    value: function () {\n      var _hash2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", sha.multihashing(this.bytes, 'sha2-256'));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function hash() {\n        return _hash2.apply(this, arguments);\n      }\n\n      return hash;\n    }()\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     *\n     * @returns {Promise<String>}\n     */\n\n  }, {\n    key: \"id\",\n    value: function () {\n      var _id = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var hash;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.public.hash();\n\n              case 2:\n                hash = _context5.sent;\n                return _context5.abrupt(\"return\", multibase.encode('base58btc', hash).toString().slice(1));\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function id() {\n        return _id.apply(this, arguments);\n      }\n\n      return id;\n    }()\n    /**\n     * Exports the key into a password protected PEM format\n     *\n     * @param {string} password - The password to read the encrypted PEM\n     * @param {string} [format=pkcs-8] - The format in which to export as\n     */\n\n  }, {\n    key: \"export\",\n    value: function () {\n      var _export2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(password) {\n        var format,\n            buffer,\n            asn1,\n            privateKey,\n            options,\n            _args6 = arguments;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                format = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : 'pkcs-8';\n\n                if (!(format === 'pkcs-8')) {\n                  _context6.next = 9;\n                  break;\n                }\n\n                buffer = new forge.util.ByteBuffer(this.marshal());\n                asn1 = forge.asn1.fromDer(buffer);\n                privateKey = forge.pki.privateKeyFromAsn1(asn1);\n                options = {\n                  algorithm: 'aes256',\n                  count: 10000,\n                  saltSize: 128 / 8,\n                  prfAlgorithm: 'sha512'\n                };\n                return _context6.abrupt(\"return\", forge.pki.encryptRsaPrivateKey(privateKey, password, options));\n\n              case 9:\n                if (!(format === 'libp2p-key')) {\n                  _context6.next = 13;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", exporter.export(this.bytes, password));\n\n              case 13:\n                throw errcode(new Error(\"export format '\".concat(format, \"' is not supported\")), 'ERR_INVALID_EXPORT_FORMAT');\n\n              case 14:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function _export(_x4) {\n        return _export2.apply(this, arguments);\n      }\n\n      return _export;\n    }()\n  }]);\n\n  return RsaPrivateKey;\n}();\n\nfunction unmarshalRsaPrivateKey(_x5) {\n  return _unmarshalRsaPrivateKey.apply(this, arguments);\n}\n\nfunction _unmarshalRsaPrivateKey() {\n  _unmarshalRsaPrivateKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(bytes) {\n    var jwk, keys;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            jwk = crypto.utils.pkcs1ToJwk(bytes);\n            _context7.next = 3;\n            return crypto.unmarshalPrivateKey(jwk);\n\n          case 3:\n            keys = _context7.sent;\n            return _context7.abrupt(\"return\", new RsaPrivateKey(keys.privateKey, keys.publicKey));\n\n          case 5:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _unmarshalRsaPrivateKey.apply(this, arguments);\n}\n\nfunction unmarshalRsaPublicKey(bytes) {\n  var jwk = crypto.utils.pkixToJwk(bytes);\n  return new RsaPublicKey(jwk);\n}\n\nfunction fromJwk(_x6) {\n  return _fromJwk.apply(this, arguments);\n}\n\nfunction _fromJwk() {\n  _fromJwk = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(jwk) {\n    var keys;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.next = 2;\n            return crypto.unmarshalPrivateKey(jwk);\n\n          case 2:\n            keys = _context8.sent;\n            return _context8.abrupt(\"return\", new RsaPrivateKey(keys.privateKey, keys.publicKey));\n\n          case 4:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _fromJwk.apply(this, arguments);\n}\n\nfunction generateKeyPair(_x7) {\n  return _generateKeyPair.apply(this, arguments);\n}\n\nfunction _generateKeyPair() {\n  _generateKeyPair = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(bits) {\n    var keys;\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.next = 2;\n            return crypto.generateKey(bits);\n\n          case 2:\n            keys = _context9.sent;\n            return _context9.abrupt(\"return\", new RsaPrivateKey(keys.privateKey, keys.publicKey));\n\n          case 4:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n  return _generateKeyPair.apply(this, arguments);\n}\n\nmodule.exports = {\n  RsaPublicKey: RsaPublicKey,\n  RsaPrivateKey: RsaPrivateKey,\n  unmarshalRsaPublicKey: unmarshalRsaPublicKey,\n  unmarshalRsaPrivateKey: unmarshalRsaPrivateKey,\n  generateKeyPair: generateKeyPair,\n  fromJwk: fromJwk\n};","map":null,"metadata":{},"sourceType":"script"}