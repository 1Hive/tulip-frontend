{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _require = require('@ethersproject/hdnode'),\n    HDNode = _require.HDNode;\n\nvar nacl = require('tweetnacl');\n\nnacl.util = require('tweetnacl-util');\n\nvar SimpleSigner = require('did-jwt').SimpleSigner;\n\nvar _require2 = require('../utils/index'),\n    sha256 = _require2.sha256;\n\nvar EC = require('elliptic').ec;\n\nvar ec = new EC('secp256k1');\n\nvar _require3 = require('./utils'),\n    randomNonce = _require3.randomNonce,\n    symEncryptBase = _require3.symEncryptBase,\n    symDecryptBase = _require3.symDecryptBase;\n\nvar BASE_PATH = \"m/7696500'/0'/0'\";\nvar MM_PATH = \"m/44'/60'/0'/0\";\n\nvar Keyring = /*#__PURE__*/function () {\n  function Keyring(seed) {\n    (0, _classCallCheck2[\"default\"])(this, Keyring);\n    this._seed = seed;\n    var seedNode = HDNode.fromSeed(this._seed);\n    var baseNode = seedNode.derivePath(BASE_PATH);\n    this.signingKey = baseNode.derivePath(\"0\");\n    var tmpEncKey = Buffer.from(baseNode.derivePath(\"2\").privateKey.slice(2), 'hex');\n    this.asymEncryptionKey = nacl.box.keyPair.fromSecretKey(new Uint8Array(tmpEncKey));\n    this.symEncryptionKey = new Uint8Array(Buffer.from(baseNode.derivePath(\"3\").privateKey.slice(2), 'hex'));\n    this.ethereumKey = seedNode.derivePath(MM_PATH).derivePath(\"0\");\n  }\n\n  (0, _createClass2[\"default\"])(Keyring, [{\n    key: \"asymEncrypt\",\n    value: function asymEncrypt(msg, toPublic, nonce) {\n      nonce = nonce || randomNonce();\n      toPublic = nacl.util.decodeBase64(toPublic);\n\n      if (typeof msg === 'string') {\n        msg = nacl.util.decodeUTF8(msg);\n      }\n\n      var ephemneralKeypair = nacl.box.keyPair();\n      var ciphertext = nacl.box(msg, nonce, toPublic, ephemneralKeypair.secretKey);\n      return {\n        nonce: nacl.util.encodeBase64(nonce),\n        ephemeralFrom: nacl.util.encodeBase64(ephemneralKeypair.publicKey),\n        ciphertext: nacl.util.encodeBase64(ciphertext)\n      };\n    }\n  }, {\n    key: \"asymDecrypt\",\n    value: function asymDecrypt(ciphertext, fromPublic, nonce, toBuffer) {\n      fromPublic = nacl.util.decodeBase64(fromPublic);\n      ciphertext = nacl.util.decodeBase64(ciphertext);\n      nonce = nacl.util.decodeBase64(nonce);\n      var cleartext = nacl.box.open(ciphertext, nonce, fromPublic, this.asymEncryptionKey.secretKey);\n\n      if (toBuffer) {\n        return cleartext ? Buffer.from(cleartext) : null;\n      }\n\n      return cleartext ? nacl.util.encodeUTF8(cleartext) : null;\n    }\n  }, {\n    key: \"symEncrypt\",\n    value: function symEncrypt(msg, nonce) {\n      return symEncryptBase(msg, this.symEncryptionKey, nonce);\n    }\n  }, {\n    key: \"symDecrypt\",\n    value: function symDecrypt(ciphertext, nonce, toBuffer) {\n      return symDecryptBase(ciphertext, this.symEncryptionKey, nonce, toBuffer);\n    }\n  }, {\n    key: \"getJWTSigner\",\n    value: function getJWTSigner() {\n      return SimpleSigner(this.signingKey.privateKey.slice(2));\n    }\n  }, {\n    key: \"getDBSalt\",\n    value: function getDBSalt() {\n      return sha256(this.signingKey.derivePath('0').privateKey.slice(2));\n    }\n  }, {\n    key: \"getPublicKeys\",\n    value: function getPublicKeys(uncompressed) {\n      var signingKey = this.signingKey.publicKey.slice(2);\n      var ethereumKey = this.ethereumKey.publicKey.slice(2);\n\n      if (uncompressed) {\n        signingKey = Keyring.uncompress(signingKey);\n        ethereumKey = Keyring.uncompress(ethereumKey);\n      }\n\n      return {\n        signingKey: signingKey,\n        ethereumKey: ethereumKey,\n        asymEncryptionKey: nacl.util.encodeBase64(this.asymEncryptionKey.publicKey)\n      };\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      return this._seed;\n    }\n  }], [{\n    key: \"uncompress\",\n    value: function uncompress(key) {\n      return ec.keyFromPublic(Buffer.from(key, 'hex')).getPublic(false, 'hex');\n    }\n  }]);\n  return Keyring;\n}();\n\nmodule.exports = Keyring;","map":null,"metadata":{},"sourceType":"script"}