{"ast":null,"code":"'use strict';\n/**\n * Drains an (async) iterable discarding its' content and does not return\n * anything.\n *\n * @template T\n * @param {AsyncIterable<T>|Iterable<T>} source\n * @returns {Promise<void>}\n */\n\nvar _regeneratorRuntime = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"/Users/fabianmolina/Documents/1hive/tulip-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar drain = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source) {\n    var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 2;\n            _iterator = _asyncIterator(source);\n\n          case 4:\n            _context.next = 6;\n            return _iterator.next();\n\n          case 6:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 10;\n            return _step.value;\n\n          case 10:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 16;\n              break;\n            }\n\n            _ = _value;\n\n          case 13:\n            _iteratorNormalCompletion = true;\n            _context.next = 4;\n            break;\n\n          case 16:\n            _context.next = 22;\n            break;\n\n          case 18:\n            _context.prev = 18;\n            _context.t0 = _context[\"catch\"](2);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 22:\n            _context.prev = 22;\n            _context.prev = 23;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 27;\n              break;\n            }\n\n            _context.next = 27;\n            return _iterator.return();\n\n          case 27:\n            _context.prev = 27;\n\n            if (!_didIteratorError) {\n              _context.next = 30;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 30:\n            return _context.finish(27);\n\n          case 31:\n            return _context.finish(22);\n\n          case 32:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 18, 22, 32], [23,, 27, 31]]);\n  }));\n\n  return function drain(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = drain;","map":null,"metadata":{},"sourceType":"script"}